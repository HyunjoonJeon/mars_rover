
UARTTest.elf:     file format elf32-littlenios2
UARTTest.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0002018c

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00012170 memsz 0x00012170 flags r-x
    LOAD off    0x00013190 vaddr 0x00032190 paddr 0x00033d40 align 2**12
         filesz 0x00001bb0 memsz 0x00001bb0 flags rw-
    LOAD off    0x000158f0 vaddr 0x000358f0 paddr 0x000358f0 align 2**12
         filesz 0x00000000 memsz 0x00000170 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000016c  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011c44  0002018c  0002018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003c0  00031dd0  00031dd0  00012dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bb0  00032190  00033d40  00013190  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000170  000358f0  000358f0  000158f0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00035a60  00035a60  00014d40  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00014d40  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000fa8  00000000  00000000  00014d68  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00022c6f  00000000  00000000  00015d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008fef  00000000  00000000  0003897f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000a8fd  00000000  00000000  0004196e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002144  00000000  00000000  0004c26c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004122  00000000  00000000  0004e3b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000ace6  00000000  00000000  000524d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0005d1b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001640  00000000  00000000  0005d218  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00061b96  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00061b99  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00061ba3  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00061ba4  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00061ba5  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00061ba9  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00061bad  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00061bb1  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00061bba  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000006  00000000  00000000  00061bc3  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000004  00000000  00000000  00061bc9  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000033  00000000  00000000  00061bcd  2**0
                  CONTENTS, READONLY
 29 .jdi          0000414a  00000000  00000000  00061c00  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000a53d2  00000000  00000000  00065d4a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
0002018c l    d  .text	00000000 .text
00031dd0 l    d  .rodata	00000000 .rodata
00032190 l    d  .rwdata	00000000 .rwdata
000358f0 l    d  .bss	00000000 .bss
00035a60 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../UARTTest_bsp//obj/HAL/src/crt0.o
000201d4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
00032190 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 vfprintf.c
00020450 l     F .text	000000f0 __sbprintf
00022660 l     F .text	0000020c cvt
0002286c l     F .text	00000138 exponent
00031e8e l     O .rodata	00000010 blanks.4403
00031e9e l     O .rodata	00000010 zeroes.4404
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00022b44 l     F .text	000003ac quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00024e48 l     F .text	000000f4 std
000358f0 l     O .bss	00000004 __sfp_lock
000358f4 l     O .bss	00000004 __sinit_lock
00025344 l     F .text	00000024 __fp_lock
00025368 l     F .text	00000024 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
000325b4 l     O .rwdata	00000038 lconv
000325ec l     O .rwdata	00000020 lc_ctype_charset
0003260c l     O .rwdata	00000020 lc_message_charset
00035904 l     O .bss	00000004 lc_ctype_cjk_lang
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00026688 l     F .text	000003b4 malloc_extend_top
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00031ff0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002aa74 l     F .text	000000f0 __sbprintf
00032046 l     O .rodata	00000010 blanks.4348
00032056 l     O .rodata	00000010 zeroes.4349
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
0002fe54 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
0002ff58 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00033d30 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00032ca0 l     O .rwdata	00001060 jtag_uart
00032bdc l     O .rwdata	000000c4 uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00030480 l     F .text	0000004c altera_avalon_jtag_uart_timeout
000304cc l     F .text	00000108 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00030a00 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00030ab4 l     F .text	00000150 altera_avalon_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00031024 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00035934 l     O .bss	00000004 __atexit_lock
00000000 l    df *ABS*	00000000 alt_exit.c
00035930 g     O .bss	00000004 alt_instruction_exception_handler
00029488 g     F .text	000000b0 _mprec_log10
00029608 g     F .text	00000134 __any_on
0002c55c g     F .text	00000060 _isatty_r
00031fc8 g     O .rodata	00000028 __mprec_tinytens
000300c0 g     F .text	00000064 alt_main
00035960 g     O .bss	00000100 alt_irq
0002c5bc g     F .text	00000070 _lseek_r
00033d40 g       *ABS*	00000000 __flash_rwdata_start
0002e8c4 g     F .text	00000088 .hidden __eqdf2
00035a60 g       *ABS*	00000000 __alt_heap_start
0002c844 g     F .text	000000d4 _wcrtomb_r
0002a610 g     F .text	000000a0 __sseek
000251ec g     F .text	000000d8 __sinit
0002c69c g     F .text	00000168 __swbuf_r
000262b8 g     F .text	00000084 _setlocale_r
00024f3c g     F .text	000000a4 __sfmoreglue
00030148 g     F .text	00000024 __malloc_unlock
000278fc g     F .text	00000208 memmove
000251b8 g     F .text	00000034 _cleanup
00027cc8 g     F .text	00000130 _Balloc
0002e94c g     F .text	000000dc .hidden __gtdf2
00031668 g     F .text	00000008 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000001c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
0002c4f4 g     F .text	00000068 _fstat_r
00035914 g     O .bss	00000004 errno
0002a52c g     F .text	00000030 __seofread
0003591c g     O .bss	00000004 alt_argv
0003bd00 g       *ABS*	00000000 _gp
000302a4 g     F .text	00000030 usleep
00032a34 g     O .rwdata	00000180 alt_fd_list
00031670 g     F .text	00000078 alt_find_dev
00027774 g     F .text	00000188 memcpy
00025174 g     F .text	00000044 _cleanup_r
0002fbb0 g     F .text	000000dc .hidden __floatsidf
000312c4 g     F .text	00000104 alt_io_redirect
0002ea28 g     F .text	000000f4 .hidden __ltdf2
00031dd0 g       *ABS*	00000000 __DTOR_END__
00031834 g     F .text	00000074 alt_exception_cause_generated_bad_addr
0002a32c g     F .text	00000104 __fpclassifyd
0002936c g     F .text	0000011c __ratio
0002ab64 g     F .text	00000050 __vfiprintf_internal
0003070c g     F .text	00000154 altera_avalon_jtag_uart_read
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0002d674 g     F .text	00000064 .hidden __udivsi3
0002fed4 g     F .text	00000084 isatty
00031ed8 g     O .rodata	000000c8 __mprec_tens
0002633c g     F .text	00000024 __locale_charset
000317e4 g     F .text	00000050 alt_icache_flush
00035908 g     O .bss	00000004 __malloc_top_pad
00033d08 g     O .rwdata	00000004 __mb_cur_max
000263c4 g     F .text	00000028 _localeconv_r
0002830c g     F .text	00000058 __i2b
00025b34 g     F .text	000005d0 __sfvwrite_r
0002a430 g     F .text	00000060 _sbrk_r
0002c62c g     F .text	00000070 _read_r
00033d18 g     O .rwdata	00000004 alt_max_fd
0002c0ac g     F .text	0000012c _fclose_r
00024df4 g     F .text	00000054 fflush
0003590c g     O .bss	00000004 __malloc_max_sbrked_mem
0002d730 g     F .text	000008ac .hidden __adddf3
00028f28 g     F .text	00000204 __b2d
0002d044 g     F .text	00000538 .hidden __umoddi3
00030044 g     F .text	0000007c lseek
00033d04 g     O .rwdata	00000004 _global_impure_ptr
0002973c g     F .text	00000bf0 _realloc_r
00035a60 g       *ABS*	00000000 __bss_end
0003125c g     F .text	00000068 alt_iic_isr_register
00031574 g     F .text	000000f4 alt_tick
0002cacc g     F .text	00000578 .hidden __udivdi3
0002c404 g     F .text	00000088 _fputwc_r
00031fa0 g     O .rodata	00000028 __mprec_bigtens
00028008 g     F .text	00000188 __s2b
0002fc8c g     F .text	000000a8 .hidden __floatunsidf
00028aa4 g     F .text	00000114 __mcmp
00030c04 g     F .text	00000040 altera_avalon_uart_init
0002538c g     F .text	00000040 __fp_lock_all
00031244 g     F .text	00000018 alt_ic_irq_enabled
00031540 g     F .text	00000034 alt_alarm_stop
00035924 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	00000064 alt_irq_handler
00032bb4 g     O .rwdata	00000028 alt_dev_null
0003100c g     F .text	00000018 alt_dcache_flush_all
00028190 g     F .text	00000090 __hi0bits
0002fb30 g     F .text	00000080 .hidden __fixdfsi
00033d40 g       *ABS*	00000000 __ram_rwdata_end
00033d1c g     O .rwdata	00000008 alt_dev_list
000302d4 g     F .text	000000c4 write
00032190 g       *ABS*	00000000 __ram_rodata_end
0002fe5c g     F .text	00000078 fstat
0002029c g     F .text	00000058 fprintf
0002ea28 g     F .text	000000f4 .hidden __ledf2
00028734 g     F .text	00000178 __pow5mult
0002abb4 g     F .text	000012c4 ___vfiprintf_internal_r
000358f8 g     O .bss	00000004 __nlocale_changed
0002d6d8 g     F .text	00000058 .hidden __umodsi3
00035a60 g       *ABS*	00000000 end
00030e30 g     F .text	000000fc altera_avalon_uart_write
000305d4 g     F .text	00000078 altera_avalon_jtag_uart_init
00020160 g     F .exceptions	0000002c alt_instruction_exception_entry
00031dd0 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
00030a3c g     F .text	00000048 alt_avalon_timer_sc_init
00030a94 g     F .text	00000010 altera_avalon_uart_write_fd
0002fd34 g     F .text	00000064 .hidden __clzsi2
00030aa4 g     F .text	00000010 altera_avalon_uart_close_fd
00030860 g     F .text	000001a0 altera_avalon_jtag_uart_write
000252c4 g     F .text	00000020 __sfp_lock_acquire
000275b8 g     F .text	000001bc memchr
00020590 g     F .text	000020d0 ___vfprintf_internal_r
0002540c g     F .text	00000560 _free_r
00026360 g     F .text	00000020 __locale_mb_cur_max
00031bd0 g     F .text	000001ec __call_exitprocs
000358fc g     O .bss	00000004 __mlocale_changed
00033d10 g     O .rwdata	00000004 __malloc_sbrk_base
0002018c g     F .text	0000004c _start
0003592c g     O .bss	00000004 _alt_tick_rate
000288ac g     F .text	000001f8 __lshift
00035928 g     O .bss	00000004 _alt_nticks
0003016c g     F .text	000000c8 read
000303b8 g     F .text	0000008c alt_sys_init
00031a60 g     F .text	00000170 __register_exitproc
00028364 g     F .text	000003d0 __multiply
0003064c g     F .text	0000004c altera_avalon_jtag_uart_close
00032190 g       *ABS*	00000000 __ram_rwdata_start
00031dd0 g       *ABS*	00000000 __ram_rodata_start
00035938 g     O .bss	00000028 __malloc_current_mallinfo
0002912c g     F .text	00000240 __d2b
00030444 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
00031794 g     F .text	00000050 alt_get_fd
00030fac g     F .text	00000060 alt_busy_sleep
0002bee8 g     F .text	00000060 _close_r
0003192c g     F .text	00000134 memcmp
00030464 g     F .text	00000010 altera_avalon_jtag_uart_close_fd
00035a60 g       *ABS*	00000000 __alt_stack_base
00030474 g     F .text	0000000c altera_avalon_jtag_uart_ioctl_fd
000202f4 g     F .text	00000108 _fwrite_r
000229a4 g     F .text	000001a0 __swsetup_r
0002dfdc g     F .text	000008e8 .hidden __divdf3
00024fe0 g     F .text	00000194 __sfp
00029538 g     F .text	000000d0 __copybits
0003262c g     O .rwdata	00000408 __malloc_av_
00025324 g     F .text	00000020 __sinit_lock_release
0002eb1c g     F .text	00000718 .hidden __muldf3
0002a490 g     F .text	0000009c __sread
000316e8 g     F .text	000000ac alt_find_file
00031060 g     F .text	000000a4 alt_dev_llist_insert
00030124 g     F .text	00000024 __malloc_lock
00020244 g     F .text	00000058 _fprintf_r
00030258 g     F .text	0000004c sbrk
00024d6c g     F .text	00000088 _fflush_r
0002bf48 g     F .text	00000164 _calloc_r
000358f0 g       *ABS*	00000000 __bss_start
00027b04 g     F .text	000001c4 memset
000201d8 g     F .text	0000006c main
00035918 g     O .bss	00000004 alt_envp
00035910 g     O .bss	00000004 __malloc_max_total_mem
00030454 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
0002c804 g     F .text	00000040 __swbuf
0002a6b0 g     F .text	00000054 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
0002c1d8 g     F .text	00000038 fclose
00022ef0 g     F .text	00001b78 _dtoa_r
00026a3c g     F .text	00000b7c _malloc_r
0002ca54 g     F .text	00000078 __ascii_wctomb
00033d2c g     O .rwdata	00000004 alt_errno
00026104 g     F .text	000000d8 _fwalk
0002d57c g     F .text	00000084 .hidden __divsi3
0002596c g     F .text	000001c8 _malloc_trim_r
00031dd0 g       *ABS*	00000000 __CTOR_END__
0002a704 g     F .text	00000140 strcmp
00031dd0 g       *ABS*	00000000 __flash_rodata_start
00031dd0 g       *ABS*	00000000 __DTOR_LIST__
0002e8c4 g     F .text	00000088 .hidden __nedf2
00030398 g     F .text	00000020 alt_irq_init
00030234 g     F .text	00000024 alt_release_fd
00032066 g     O .rodata	00000100 .hidden __clz_tab
00035900 g     O .bss	00000004 _PathLocale
000318a8 g     F .text	0000003c atexit
0002be78 g     F .text	00000070 _write_r
000263ec g     F .text	00000040 setlocale
00033d00 g     O .rwdata	00000004 _impure_ptr
00035920 g     O .bss	00000004 alt_argc
00024a68 g     F .text	00000304 __sflush_r
00031164 g     F .text	00000060 _do_dtors
000263a4 g     F .text	00000020 __locale_cjk_lang
00020020 g       .exceptions	00000000 alt_irq_entry
00028e5c g     F .text	000000cc __ulp
000253cc g     F .text	00000040 __fp_unlock_all
00033d24 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
0002642c g     F .text	00000030 localeconv
000311d0 g     F .text	00000004 alt_ic_isr_register
000203fc g     F .text	00000054 fwrite
00033d40 g       *ABS*	00000000 _edata
00030a84 g     F .text	00000010 altera_avalon_uart_read_fd
00035a60 g       *ABS*	00000000 _end
0002c210 g     F .text	000001f4 __fputwc
0002018c g       *ABS*	00000000 __ram_exceptions_end
00030698 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
0003120c g     F .text	00000038 alt_ic_irq_disable
0002a55c g     F .text	000000b4 __swrite
00033d0c g     O .rwdata	00000004 __malloc_trim_threshold
00026380 g     F .text	00000024 __locale_msgcharset
000318e4 g     F .text	00000048 exit
000261dc g     F .text	000000dc _fwalk_reent
00028bb8 g     F .text	000002a4 __mdiff
0002d600 g     F .text	00000074 .hidden __modsi3
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
000252e4 g     F .text	00000020 __sfp_lock_release
00030c44 g     F .text	00000030 altera_avalon_uart_close
00031dbc g     F .text	00000014 _exit
00030f2c g     F .text	00000080 alt_alarm_start
0002645c g     F .text	0000022c __smakebuf_r
0002a844 g     F .text	000000f4 strlen
000313c8 g     F .text	00000178 open
0002e94c g     F .text	000000dc .hidden __gedf2
00033d14 g     O .rwdata	00000004 __wctomb
0002a938 g     F .text	0000013c __sprint_r
000311c4 g     F .text	0000000c alt_icache_flush_all
00033d34 g     O .rwdata	00000004 alt_priority_mask
000311d4 g     F .text	00000038 alt_ic_irq_enable
00020540 g     F .text	00000050 __vfprintf_internal
00030c74 g     F .text	000001bc altera_avalon_uart_read
0002c9f0 g     F .text	00000064 _wctomb_r
0002f234 g     F .text	000008fc .hidden __subdf3
00028220 g     F .text	000000ec __lo0bits
00033d38 g     O .rwdata	00000008 alt_alarm_list
00031104 g     F .text	00000060 _do_ctors
0002c918 g     F .text	000000d8 wcrtomb
0002fd98 g     F .text	000000bc close
0002ffc0 g     F .text	00000084 alt_load
0002c48c g     F .text	00000068 fputwc
00025304 g     F .text	00000020 __sinit_lock_acquire
00027e74 g     F .text	00000194 __multadd
00027df8 g     F .text	0000007c _Bfree



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__alt_data_end+0xfffe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08406314 	ori	at,at,396
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201600 	call	20160 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defffe04 	addi	sp,sp,-8
   20100:	dfc00115 	stw	ra,4(sp)
   20104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20108:	000b313a 	rdctl	r5,ipending
   2010c:	040000f4 	movhi	r16,3
   20110:	84165804 	addi	r16,r16,22880
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   20114:	2880004c 	andi	r2,r5,1

  active = alt_irq_pending ();

  do
  {
    i = 0;
   20118:	0007883a 	mov	r3,zero
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2011c:	1000051e 	bne	r2,zero,20134 <alt_irq_handler+0x38>
   20120:	00800044 	movi	r2,1
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   20124:	1085883a 	add	r2,r2,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   20128:	2888703a 	and	r4,r5,r2
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
   2012c:	18c00044 	addi	r3,r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   20130:	203ffc26 	beq	r4,zero,20124 <__alt_data_end+0xfffe0124>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   20134:	180690fa 	slli	r3,r3,3
   20138:	80c7883a 	add	r3,r16,r3
   2013c:	18800017 	ldw	r2,0(r3)
   20140:	19000117 	ldw	r4,4(r3)
   20144:	103ee83a 	callr	r2
   20148:	000b313a 	rdctl	r5,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   2014c:	283ff11e 	bne	r5,zero,20114 <__alt_data_end+0xfffe0114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   20150:	dfc00117 	ldw	ra,4(sp)
   20154:	dc000017 	ldw	r16,0(sp)
   20158:	dec00204 	addi	sp,sp,8
   2015c:	f800283a 	ret

00020160 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   20160:	200b883a 	mov	r5,r4
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   20164:	000931fa 	rdctl	r4,exception
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   20168:	000d333a 	rdctl	r6,badaddr
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   2016c:	d0a70c17 	ldw	r2,-25552(gp)
   20170:	10000326 	beq	r2,zero,20180 <alt_instruction_exception_entry+0x20>
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   20174:	21001f0c 	andi	r4,r4,124
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   20178:	2008d0ba 	srli	r4,r4,2
   2017c:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20180:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   20184:	0005883a 	mov	r2,zero
   20188:	f800283a 	ret

Disassembly of section .text:

0002018c <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   2018c:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   20190:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   20194:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   20198:	00bffd16 	blt	zero,r2,20190 <__alt_data_end+0xfffe0190>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   2019c:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   201a0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   201a4:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   201a8:	d6af4014 	ori	gp,gp,48384
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   201ac:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   201b0:	10963c14 	ori	r2,r2,22768

    movhi r3, %hi(__bss_end)
   201b4:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   201b8:	18d69814 	ori	r3,r3,23136

    beq r2, r3, 1f
   201bc:	10c00326 	beq	r2,r3,201cc <_start+0x40>

0:
    stw zero, (r2)
   201c0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   201c4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   201c8:	10fffd36 	bltu	r2,r3,201c0 <__alt_data_end+0xfffe01c0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   201cc:	002ffc00 	call	2ffc0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   201d0:	00300c00 	call	300c0 <alt_main>

000201d4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   201d4:	003fff06 	br	201d4 <__alt_data_end+0xfffe01d4>

000201d8 <main>:
#include  "system.h"
#include <stdio.h>
#include <unistd.h>


int main (){
   201d8:	defffd04 	addi	sp,sp,-12
   201dc:	dfc00215 	stw	ra,8(sp)
   201e0:	df000115 	stw	fp,4(sp)
   201e4:	df000104 	addi	fp,sp,4
	int count = 0;
   201e8:	e03fff15 	stw	zero,-4(fp)
	while(1){
		fprintf(stderr, "Sending to UART\n");
   201ec:	d0a00017 	ldw	r2,-32768(gp)
   201f0:	10800317 	ldw	r2,12(r2)
   201f4:	100f883a 	mov	r7,r2
   201f8:	01800404 	movi	r6,16
   201fc:	01400044 	movi	r5,1
   20200:	010000f4 	movhi	r4,3
   20204:	21077404 	addi	r4,r4,7632
   20208:	00203fc0 	call	203fc <fwrite>
		fprintf(stdout, "Test blah balkfn lj ljadsflj kdsjflj ldjskjfldaksjf ljadsjfldkj  %d\n", count);
   2020c:	d0a00017 	ldw	r2,-32768(gp)
   20210:	10800217 	ldw	r2,8(r2)
   20214:	e1bfff17 	ldw	r6,-4(fp)
   20218:	014000f4 	movhi	r5,3
   2021c:	29477904 	addi	r5,r5,7652
   20220:	1009883a 	mov	r4,r2
   20224:	002029c0 	call	2029c <fprintf>
		count++;
   20228:	e0bfff17 	ldw	r2,-4(fp)
   2022c:	10800044 	addi	r2,r2,1
   20230:	e0bfff15 	stw	r2,-4(fp)
	    usleep(100000);
   20234:	010000b4 	movhi	r4,2
   20238:	2121a804 	addi	r4,r4,-31072
   2023c:	00302a40 	call	302a4 <usleep>
	}
   20240:	003fea06 	br	201ec <__alt_data_end+0xfffe01ec>

00020244 <_fprintf_r>:
int
_DEFUN(_fprintf_r, (ptr, fp, fmt),
       struct _reent *ptr _AND
       FILE *__restrict fp _AND
       const char *__restrict fmt _DOTS)
{
   20244:	defff804 	addi	sp,sp,-32
   20248:	dfc00615 	stw	ra,24(sp)
   2024c:	df000515 	stw	fp,20(sp)
   20250:	df000504 	addi	fp,sp,20
   20254:	e13ffd15 	stw	r4,-12(fp)
   20258:	e17ffe15 	stw	r5,-8(fp)
   2025c:	e1bfff15 	stw	r6,-4(fp)
   20260:	e1c00215 	stw	r7,8(fp)
  int ret;
  va_list ap;

  va_start (ap, fmt);
   20264:	e0800204 	addi	r2,fp,8
   20268:	e0bffc15 	stw	r2,-16(fp)
  _FILE_INIT_DEV_WRITE (fp);							/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr,         fp, fmt, ap);	*/	/*1.16.0*/	/* AlteraSpecific */
/*ret = __vfprintf_internal (             fp, fmt, ap);	*/	/*1.16  */	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr,         fp, fmt, ap);	*/	/*1.18.0*/	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr, (FILE *)fp, fmt, ap); */	/* try1 */	/* AlteraSpecific */
  ret = __vfprintf_internal (             fp, fmt, ap);		/* try2 */	/* AlteraSpecific */
   2026c:	e0bffc17 	ldw	r2,-16(fp)
   20270:	100d883a 	mov	r6,r2
   20274:	e17fff17 	ldw	r5,-4(fp)
   20278:	e13ffe17 	ldw	r4,-8(fp)
   2027c:	00205400 	call	20540 <__vfprintf_internal>
   20280:	e0bffb15 	stw	r2,-20(fp)
  va_end (ap);
  return ret;
   20284:	e0bffb17 	ldw	r2,-20(fp)
}
   20288:	e037883a 	mov	sp,fp
   2028c:	dfc00117 	ldw	ra,4(sp)
   20290:	df000017 	ldw	fp,0(sp)
   20294:	dec00304 	addi	sp,sp,12
   20298:	f800283a 	ret

0002029c <fprintf>:

int
_DEFUN(fprintf, (fp, fmt),
       FILE *__restrict fp _AND
       const char *__restrict fmt _DOTS)
{
   2029c:	defff804 	addi	sp,sp,-32
   202a0:	dfc00515 	stw	ra,20(sp)
   202a4:	df000415 	stw	fp,16(sp)
   202a8:	df000404 	addi	fp,sp,16
   202ac:	e13ffe15 	stw	r4,-8(fp)
   202b0:	e17fff15 	stw	r5,-4(fp)
   202b4:	e1800215 	stw	r6,8(fp)
   202b8:	e1c00315 	stw	r7,12(fp)
  int ret;
  va_list ap;

  va_start (ap, fmt);
   202bc:	e0800204 	addi	r2,fp,8
   202c0:	e0bffd15 	stw	r2,-12(fp)
  _FILE_INIT_DEV_WRITE (fp);							/* AlteraSpecific NB: Cloned in fiprintf.c */
/*ret =  _vfprintf_r        (_REENT,         fp, fmt, ap);	*/ /*1.16.0*/ 	/* AlteraSpecific */
/*ret = __vfprintf_internal (                fp, fmt, ap);	*/ /*1.16  */ 	/* AlteraSpecific */
/*ret =  _vfprintf_r        (_REENT,         fp, fmt, ap);	*/ /*1.18.0*/ 	/* AlteraSpecific */
/*ret =  _vfprintf_r        (_REENT, (FILE *)fp, fmt, ap);	*/ /* try1 */	/* AlteraSpecific */
  ret = __vfprintf_internal (                fp, fmt, ap);	   /* try2 */	/* AlteraSpecific */
   202c4:	e0bffd17 	ldw	r2,-12(fp)
   202c8:	100d883a 	mov	r6,r2
   202cc:	e17fff17 	ldw	r5,-4(fp)
   202d0:	e13ffe17 	ldw	r4,-8(fp)
   202d4:	00205400 	call	20540 <__vfprintf_internal>
   202d8:	e0bffc15 	stw	r2,-16(fp)
  va_end (ap);
  return ret;
   202dc:	e0bffc17 	ldw	r2,-16(fp)
}
   202e0:	e037883a 	mov	sp,fp
   202e4:	dfc00117 	ldw	ra,4(sp)
   202e8:	df000017 	ldw	fp,0(sp)
   202ec:	dec00404 	addi	sp,sp,16
   202f0:	f800283a 	ret

000202f4 <_fwrite_r>:
       struct _reent * ptr _AND
       _CONST _PTR __restrict buf _AND
       size_t size     _AND
       size_t count    _AND
       FILE * __restrict fp)
{
   202f4:	defff304 	addi	sp,sp,-52
   202f8:	dfc00c15 	stw	ra,48(sp)
   202fc:	df000b15 	stw	fp,44(sp)
   20300:	df000b04 	addi	fp,sp,44
   20304:	e13ffc15 	stw	r4,-16(fp)
   20308:	e17ffd15 	stw	r5,-12(fp)
   2030c:	e1bffe15 	stw	r6,-8(fp)
   20310:	e1ffff15 	stw	r7,-4(fp)
  size_t n;
#ifdef _FVWRITE_IN_STREAMIO
  struct __suio uio;
  struct __siov iov;

  iov.iov_base = buf;
   20314:	e0bffd17 	ldw	r2,-12(fp)
   20318:	e0bffa15 	stw	r2,-24(fp)
  uio.uio_resid = iov.iov_len = n = count * size;
   2031c:	e0ffff17 	ldw	r3,-4(fp)
   20320:	e0bffe17 	ldw	r2,-8(fp)
   20324:	1885383a 	mul	r2,r3,r2
   20328:	e0bff515 	stw	r2,-44(fp)
   2032c:	e0bff517 	ldw	r2,-44(fp)
   20330:	e0bffb15 	stw	r2,-20(fp)
   20334:	e0bffb17 	ldw	r2,-20(fp)
   20338:	e0bff915 	stw	r2,-28(fp)
  uio.uio_iov = &iov;
   2033c:	e0bffa04 	addi	r2,fp,-24
   20340:	e0bff715 	stw	r2,-36(fp)
  uio.uio_iovcnt = 1;
   20344:	00800044 	movi	r2,1
   20348:	e0bff815 	stw	r2,-32(fp)
   * The usual case is success (__sfvwrite_r returns 0);
   * skip the divide if this happens, since divides are
   * generally slow and since this occurs whenever size==0.
   */

  CHECK_INIT(ptr, fp);
   2034c:	e0bffc17 	ldw	r2,-16(fp)
   20350:	e0bff615 	stw	r2,-40(fp)
   20354:	e0bff617 	ldw	r2,-40(fp)
   20358:	10000526 	beq	r2,zero,20370 <_fwrite_r+0x7c>
   2035c:	e0bff617 	ldw	r2,-40(fp)
   20360:	10800e17 	ldw	r2,56(r2)
   20364:	1000021e 	bne	r2,zero,20370 <_fwrite_r+0x7c>
   20368:	e13ff617 	ldw	r4,-40(fp)
   2036c:	00251ec0 	call	251ec <__sinit>

  _newlib_flockfile_start (fp);
  ORIENT (fp, -1);
   20370:	e0800217 	ldw	r2,8(fp)
   20374:	1080030b 	ldhu	r2,12(r2)
   20378:	10bfffcc 	andi	r2,r2,65535
   2037c:	1088000c 	andi	r2,r2,8192
   20380:	10000c1e 	bne	r2,zero,203b4 <_fwrite_r+0xc0>
   20384:	e0800217 	ldw	r2,8(fp)
   20388:	1080030b 	ldhu	r2,12(r2)
   2038c:	10880014 	ori	r2,r2,8192
   20390:	1007883a 	mov	r3,r2
   20394:	e0800217 	ldw	r2,8(fp)
   20398:	10c0030d 	sth	r3,12(r2)
   2039c:	e0800217 	ldw	r2,8(fp)
   203a0:	10c01917 	ldw	r3,100(r2)
   203a4:	00b7ffc4 	movi	r2,-8193
   203a8:	1886703a 	and	r3,r3,r2
   203ac:	e0800217 	ldw	r2,8(fp)
   203b0:	10c01915 	stw	r3,100(r2)
  if (__sfvwrite_r (ptr, fp, &uio) == 0)
   203b4:	e0bff704 	addi	r2,fp,-36
   203b8:	100d883a 	mov	r6,r2
   203bc:	e1400217 	ldw	r5,8(fp)
   203c0:	e13ffc17 	ldw	r4,-16(fp)
   203c4:	0025b340 	call	25b34 <__sfvwrite_r>
   203c8:	1000021e 	bne	r2,zero,203d4 <_fwrite_r+0xe0>
    {
      _newlib_flockfile_exit (fp);
      return count;
   203cc:	e0bfff17 	ldw	r2,-4(fp)
   203d0:	00000506 	br	203e8 <_fwrite_r+0xf4>
    }
  _newlib_flockfile_end (fp);
  return (n - uio.uio_resid) / size;
   203d4:	e0bff917 	ldw	r2,-28(fp)
   203d8:	e0fff517 	ldw	r3,-44(fp)
   203dc:	1887c83a 	sub	r3,r3,r2
   203e0:	e0bffe17 	ldw	r2,-8(fp)
   203e4:	1885203a 	divu	r2,r3,r2

ret:
  _newlib_flockfile_end (fp);
  return i / size;
#endif
}
   203e8:	e037883a 	mov	sp,fp
   203ec:	dfc00117 	ldw	ra,4(sp)
   203f0:	df000017 	ldw	fp,0(sp)
   203f4:	dec00204 	addi	sp,sp,8
   203f8:	f800283a 	ret

000203fc <fwrite>:
_DEFUN(fwrite, (buf, size, count, fp),
       _CONST _PTR __restrict buf _AND
       size_t size     _AND
       size_t count    _AND
       FILE * fp)
{
   203fc:	defff904 	addi	sp,sp,-28
   20400:	dfc00615 	stw	ra,24(sp)
   20404:	df000515 	stw	fp,20(sp)
   20408:	df000504 	addi	fp,sp,20
   2040c:	e13ffc15 	stw	r4,-16(fp)
   20410:	e17ffd15 	stw	r5,-12(fp)
   20414:	e1bffe15 	stw	r6,-8(fp)
   20418:	e1ffff15 	stw	r7,-4(fp)
  return _fwrite_r (_REENT, buf, size, count, fp);
   2041c:	d0e00017 	ldw	r3,-32768(gp)
   20420:	e0bfff17 	ldw	r2,-4(fp)
   20424:	d8800015 	stw	r2,0(sp)
   20428:	e1fffe17 	ldw	r7,-8(fp)
   2042c:	e1bffd17 	ldw	r6,-12(fp)
   20430:	e17ffc17 	ldw	r5,-16(fp)
   20434:	1809883a 	mov	r4,r3
   20438:	00202f40 	call	202f4 <_fwrite_r>
}
   2043c:	e037883a 	mov	sp,fp
   20440:	dfc00117 	ldw	ra,4(sp)
   20444:	df000017 	ldw	fp,0(sp)
   20448:	dec00204 	addi	sp,sp,8
   2044c:	f800283a 	ret

00020450 <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
   20450:	defedf04 	addi	sp,sp,-1156
   20454:	dfc12015 	stw	ra,1152(sp)
   20458:	df011f15 	stw	fp,1148(sp)
   2045c:	dc011e15 	stw	r16,1144(sp)
   20460:	df011f04 	addi	fp,sp,1148
   20464:	e13ffc15 	stw	r4,-16(fp)
   20468:	2821883a 	mov	r16,r5
   2046c:	e1bffd15 	stw	r6,-12(fp)
   20470:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
   20474:	80c0030b 	ldhu	r3,12(r16)
   20478:	00bfff44 	movi	r2,-3
   2047c:	1884703a 	and	r2,r3,r2
   20480:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
   20484:	80801917 	ldw	r2,100(r16)
   20488:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
   2048c:	8080038b 	ldhu	r2,14(r16)
   20490:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
   20494:	80800717 	ldw	r2,28(r16)
   20498:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
   2049c:	80800917 	ldw	r2,36(r16)
   204a0:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
   204a4:	e0befc04 	addi	r2,fp,-1040
   204a8:	e0bee215 	stw	r2,-1144(fp)
   204ac:	e0bee217 	ldw	r2,-1144(fp)
   204b0:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
   204b4:	00810004 	movi	r2,1024
   204b8:	e0bee415 	stw	r2,-1136(fp)
   204bc:	e0bee417 	ldw	r2,-1136(fp)
   204c0:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
   204c4:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
   204c8:	e0bee204 	addi	r2,fp,-1144
   204cc:	e1fffe17 	ldw	r7,-8(fp)
   204d0:	e1bffd17 	ldw	r6,-12(fp)
   204d4:	100b883a 	mov	r5,r2
   204d8:	e13ffc17 	ldw	r4,-16(fp)
   204dc:	00205900 	call	20590 <___vfprintf_internal_r>
   204e0:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
   204e4:	e0bee117 	ldw	r2,-1148(fp)
   204e8:	10000716 	blt	r2,zero,20508 <__sbprintf+0xb8>
   204ec:	e0bee204 	addi	r2,fp,-1144
   204f0:	100b883a 	mov	r5,r2
   204f4:	e13ffc17 	ldw	r4,-16(fp)
   204f8:	0024d6c0 	call	24d6c <_fflush_r>
   204fc:	10000226 	beq	r2,zero,20508 <__sbprintf+0xb8>
		ret = EOF;
   20500:	00bfffc4 	movi	r2,-1
   20504:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
   20508:	e0bee50b 	ldhu	r2,-1132(fp)
   2050c:	10bfffcc 	andi	r2,r2,65535
   20510:	1080100c 	andi	r2,r2,64
   20514:	10000326 	beq	r2,zero,20524 <__sbprintf+0xd4>
		fp->_flags |= __SERR;
   20518:	8080030b 	ldhu	r2,12(r16)
   2051c:	10801014 	ori	r2,r2,64
   20520:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
   20524:	e0bee117 	ldw	r2,-1148(fp)
}
   20528:	e6ffff04 	addi	sp,fp,-4
   2052c:	dfc00217 	ldw	ra,8(sp)
   20530:	df000117 	ldw	fp,4(sp)
   20534:	dc000017 	ldw	r16,0(sp)
   20538:	dec00304 	addi	sp,sp,12
   2053c:	f800283a 	ret

00020540 <__vfprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
   20540:	defffa04 	addi	sp,sp,-24
   20544:	dfc00515 	stw	ra,20(sp)
   20548:	df000415 	stw	fp,16(sp)
   2054c:	df000404 	addi	fp,sp,16
   20550:	e13ffd15 	stw	r4,-12(fp)
   20554:	e17ffe15 	stw	r5,-8(fp)
   20558:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
   2055c:	d0a00017 	ldw	r2,-32768(gp)
   20560:	e1ffff17 	ldw	r7,-4(fp)
   20564:	e1bffe17 	ldw	r6,-8(fp)
   20568:	e17ffd17 	ldw	r5,-12(fp)
   2056c:	1009883a 	mov	r4,r2
   20570:	00205900 	call	20590 <___vfprintf_internal_r>
   20574:	e0bffc15 	stw	r2,-16(fp)
  return result;
   20578:	e0bffc17 	ldw	r2,-16(fp)
}
   2057c:	e037883a 	mov	sp,fp
   20580:	dfc00117 	ldw	ra,4(sp)
   20584:	df000017 	ldw	fp,0(sp)
   20588:	dec00204 	addi	sp,sp,8
   2058c:	f800283a 	ret

00020590 <___vfprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
   20590:	deffa404 	addi	sp,sp,-368
   20594:	dfc05b15 	stw	ra,364(sp)
   20598:	df005a15 	stw	fp,360(sp)
   2059c:	ddc05915 	stw	r23,356(sp)
   205a0:	dd805815 	stw	r22,352(sp)
   205a4:	dd405715 	stw	r21,348(sp)
   205a8:	dd005615 	stw	r20,344(sp)
   205ac:	dcc05515 	stw	r19,340(sp)
   205b0:	dc805415 	stw	r18,336(sp)
   205b4:	dc405315 	stw	r17,332(sp)
   205b8:	dc005215 	stw	r16,328(sp)
   205bc:	df005a04 	addi	fp,sp,360
   205c0:	e13fe615 	stw	r4,-104(fp)
   205c4:	e17fe715 	stw	r5,-100(fp)
   205c8:	e1bfe815 	stw	r6,-96(fp)
   205cc:	e1ffe915 	stw	r7,-92(fp)
	char *thousands_sep = NULL;
	size_t thsnd_len = 0;
	const char *grouping = NULL;
#endif
#ifdef FLOATING_POINT
	char *decimal_point = _localeconv_r (data)->decimal_point;
   205d0:	e13fe617 	ldw	r4,-104(fp)
   205d4:	00263c40 	call	263c4 <_localeconv_r>
   205d8:	10800017 	ldw	r2,0(r2)
   205dc:	e0bfbb15 	stw	r2,-276(fp)
	size_t decp_len = strlen (decimal_point);
   205e0:	e13fbb17 	ldw	r4,-276(fp)
   205e4:	002a8440 	call	2a844 <strlen>
   205e8:	e0bfbc15 	stw	r2,-272(fp)
	char softsign;		/* temporary negative sign for floats */
	union { int i; _PRINTF_FLOAT_TYPE fp; } _double_ = {0};
   205ec:	e03fc215 	stw	zero,-248(fp)
   205f0:	e03fc315 	stw	zero,-244(fp)
# define _fpvalue (_double_.fp)
	int expt;		/* integer value of exponent */
	int expsize = 0;	/* character count for expstr */
   205f4:	e03faf15 	stw	zero,-324(fp)
	char expstr[MAXEXPLEN];	/* buffer for exponent string */
	int lead;		/* sig figs before decimal or group sep */
#endif /* FLOATING_POINT */
#if defined (FLOATING_POINT) || defined (_WANT_IO_C99_FORMATS)
	int ndig = 0;		/* actual number of digits returned by cvt */
   205f8:	e03fc715 	stw	zero,-228(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
   205fc:	e03fb715 	stw	zero,-292(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
   20600:	e03fb815 	stw	zero,-288(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
   20604:	e0bfe617 	ldw	r2,-104(fp)
   20608:	e0bfbd15 	stw	r2,-268(fp)
   2060c:	e0bfbd17 	ldw	r2,-268(fp)
   20610:	10000526 	beq	r2,zero,20628 <___vfprintf_internal_r+0x98>
   20614:	e0bfbd17 	ldw	r2,-268(fp)
   20618:	10800e17 	ldw	r2,56(r2)
   2061c:	1000021e 	bne	r2,zero,20628 <___vfprintf_internal_r+0x98>
   20620:	e13fbd17 	ldw	r4,-268(fp)
   20624:	00251ec0 	call	251ec <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
   20628:	e0bfe717 	ldw	r2,-100(fp)
   2062c:	1080030b 	ldhu	r2,12(r2)
   20630:	10bfffcc 	andi	r2,r2,65535
   20634:	1088000c 	andi	r2,r2,8192
   20638:	10000c1e 	bne	r2,zero,2066c <___vfprintf_internal_r+0xdc>
   2063c:	e0bfe717 	ldw	r2,-100(fp)
   20640:	1080030b 	ldhu	r2,12(r2)
   20644:	10880014 	ori	r2,r2,8192
   20648:	1007883a 	mov	r3,r2
   2064c:	e0bfe717 	ldw	r2,-100(fp)
   20650:	10c0030d 	sth	r3,12(r2)
   20654:	e0bfe717 	ldw	r2,-100(fp)
   20658:	10c01917 	ldw	r3,100(r2)
   2065c:	00b7ffc4 	movi	r2,-8193
   20660:	1886703a 	and	r3,r3,r2
   20664:	e0bfe717 	ldw	r2,-100(fp)
   20668:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
   2066c:	e0bfe717 	ldw	r2,-100(fp)
   20670:	1080030b 	ldhu	r2,12(r2)
   20674:	10bfffcc 	andi	r2,r2,65535
   20678:	1080020c 	andi	r2,r2,8
   2067c:	10000326 	beq	r2,zero,2068c <___vfprintf_internal_r+0xfc>
   20680:	e0bfe717 	ldw	r2,-100(fp)
   20684:	10800417 	ldw	r2,16(r2)
   20688:	1000061e 	bne	r2,zero,206a4 <___vfprintf_internal_r+0x114>
   2068c:	e17fe717 	ldw	r5,-100(fp)
   20690:	e13fe617 	ldw	r4,-104(fp)
   20694:	00229a40 	call	229a4 <__swsetup_r>
   20698:	10000226 	beq	r2,zero,206a4 <___vfprintf_internal_r+0x114>
		_newlib_flockfile_exit (fp);
		return (EOF);
   2069c:	00bfffc4 	movi	r2,-1
   206a0:	0007e206 	br	2262c <___vfprintf_internal_r+0x209c>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
   206a4:	e0bfe717 	ldw	r2,-100(fp)
   206a8:	1080030b 	ldhu	r2,12(r2)
   206ac:	10bfffcc 	andi	r2,r2,65535
   206b0:	1080068c 	andi	r2,r2,26
   206b4:	10800298 	cmpnei	r2,r2,10
   206b8:	10000c1e 	bne	r2,zero,206ec <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
   206bc:	e0bfe717 	ldw	r2,-100(fp)
   206c0:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
   206c4:	10bfffcc 	andi	r2,r2,65535
   206c8:	10a0001c 	xori	r2,r2,32768
   206cc:	10a00004 	addi	r2,r2,-32768
   206d0:	10000616 	blt	r2,zero,206ec <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
   206d4:	e1ffe917 	ldw	r7,-92(fp)
   206d8:	e1bfe817 	ldw	r6,-96(fp)
   206dc:	e17fe717 	ldw	r5,-100(fp)
   206e0:	e13fe617 	ldw	r4,-104(fp)
   206e4:	00204500 	call	20450 <__sbprintf>
   206e8:	0007d006 	br	2262c <___vfprintf_internal_r+0x209c>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
   206ec:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
   206f0:	e47fcb04 	addi	r17,fp,-212
   206f4:	e47fc815 	stw	r17,-224(fp)
	uio.uio_resid = 0;
   206f8:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
   206fc:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
   20700:	e03fac15 	stw	zero,-336(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
   20704:	a825883a 	mov	r18,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
   20708:	00000106 	br	20710 <___vfprintf_internal_r+0x180>
                    fmt += 1;
   2070c:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
   20710:	a8800003 	ldbu	r2,0(r21)
   20714:	10803fcc 	andi	r2,r2,255
   20718:	1080201c 	xori	r2,r2,128
   2071c:	10bfe004 	addi	r2,r2,-128
   20720:	10000626 	beq	r2,zero,2073c <___vfprintf_internal_r+0x1ac>
   20724:	a8800003 	ldbu	r2,0(r21)
   20728:	10803fcc 	andi	r2,r2,255
   2072c:	1080201c 	xori	r2,r2,128
   20730:	10bfe004 	addi	r2,r2,-128
   20734:	10800958 	cmpnei	r2,r2,37
   20738:	103ff41e 	bne	r2,zero,2070c <__alt_data_end+0xfffe070c>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
   2073c:	a807883a 	mov	r3,r21
   20740:	9005883a 	mov	r2,r18
   20744:	18a1c83a 	sub	r16,r3,r2
   20748:	80001826 	beq	r16,zero,207ac <___vfprintf_internal_r+0x21c>
			PRINT (cp, m);
   2074c:	8c800015 	stw	r18,0(r17)
   20750:	8005883a 	mov	r2,r16
   20754:	88800115 	stw	r2,4(r17)
   20758:	e0bfca17 	ldw	r2,-216(fp)
   2075c:	8007883a 	mov	r3,r16
   20760:	10c5883a 	add	r2,r2,r3
   20764:	e0bfca15 	stw	r2,-216(fp)
   20768:	8c400204 	addi	r17,r17,8
   2076c:	e0bfc917 	ldw	r2,-220(fp)
   20770:	10800044 	addi	r2,r2,1
   20774:	e0bfc915 	stw	r2,-220(fp)
   20778:	e0bfc917 	ldw	r2,-220(fp)
   2077c:	10800210 	cmplti	r2,r2,8
   20780:	1000071e 	bne	r2,zero,207a0 <___vfprintf_internal_r+0x210>
   20784:	e0bfc804 	addi	r2,fp,-224
   20788:	100d883a 	mov	r6,r2
   2078c:	e17fe717 	ldw	r5,-100(fp)
   20790:	e13fe617 	ldw	r4,-104(fp)
   20794:	002a9380 	call	2a938 <__sprint_r>
   20798:	10074d1e 	bne	r2,zero,224d0 <___vfprintf_internal_r+0x1f40>
   2079c:	e47fcb04 	addi	r17,fp,-212
			ret += m;
   207a0:	e0bfac17 	ldw	r2,-336(fp)
   207a4:	1405883a 	add	r2,r2,r16
   207a8:	e0bfac15 	stw	r2,-336(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
   207ac:	a8800003 	ldbu	r2,0(r21)
   207b0:	10803fcc 	andi	r2,r2,255
   207b4:	1080201c 	xori	r2,r2,128
   207b8:	10bfe004 	addi	r2,r2,-128
   207bc:	10073626 	beq	r2,zero,22498 <___vfprintf_internal_r+0x1f08>
                    goto done;
#endif
		fmt_anchor = fmt;
   207c0:	e57fbe15 	stw	r21,-264(fp)
		fmt++;		/* skip over '%' */
   207c4:	ad400044 	addi	r21,r21,1

		flags = 0;
   207c8:	0027883a 	mov	r19,zero
		dprec = 0;
   207cc:	e03fb415 	stw	zero,-304(fp)
		width = 0;
   207d0:	e03fad15 	stw	zero,-332(fp)
		prec = -1;
   207d4:	00bfffc4 	movi	r2,-1
   207d8:	e0bfae15 	stw	r2,-328(fp)
		sign = '\0';
   207dc:	e03fc105 	stb	zero,-252(fp)
#ifdef FLOATING_POINT
		lead = 0;
   207e0:	e03fb015 	stw	zero,-320(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
   207e4:	a805883a 	mov	r2,r21
   207e8:	15400044 	addi	r21,r2,1
   207ec:	10800003 	ldbu	r2,0(r2)
   207f0:	15003fcc 	andi	r20,r2,255
   207f4:	a500201c 	xori	r20,r20,128
   207f8:	a53fe004 	addi	r20,r20,-128
reswitch:	switch (ch) {
   207fc:	a0bff804 	addi	r2,r20,-32
   20800:	10c01668 	cmpgeui	r3,r2,89
   20804:	1803491e 	bne	r3,zero,2152c <___vfprintf_internal_r+0xf9c>
   20808:	100690ba 	slli	r3,r2,2
   2080c:	008000b4 	movhi	r2,2
   20810:	10820804 	addi	r2,r2,2080
   20814:	1885883a 	add	r2,r3,r2
   20818:	10800017 	ldw	r2,0(r2)
   2081c:	1000683a 	jmp	r2
   20820:	00020984 	movi	zero,2086
   20824:	0002152c 	andhi	zero,zero,2132
   20828:	0002152c 	andhi	zero,zero,2132
   2082c:	000209a4 	muli	zero,zero,2086
   20830:	0002152c 	andhi	zero,zero,2132
   20834:	0002152c 	andhi	zero,zero,2132
   20838:	0002152c 	andhi	zero,zero,2132
   2083c:	0002152c 	andhi	zero,zero,2132
   20840:	0002152c 	andhi	zero,zero,2132
   20844:	0002152c 	andhi	zero,zero,2132
   20848:	000209ac 	andhi	zero,zero,2086
   2084c:	000209e0 	cmpeqi	zero,zero,2087
   20850:	0002152c 	andhi	zero,zero,2132
   20854:	000209d8 	cmpnei	zero,zero,2087
   20858:	000209ec 	andhi	zero,zero,2087
   2085c:	0002152c 	andhi	zero,zero,2132
   20860:	00020a80 	call	20a8 <__alt_mem_onchip_memory2_0-0x1df58>
   20864:	00020a88 	cmpgei	zero,zero,2090
   20868:	00020a88 	cmpgei	zero,zero,2090
   2086c:	00020a88 	cmpgei	zero,zero,2090
   20870:	00020a88 	cmpgei	zero,zero,2090
   20874:	00020a88 	cmpgei	zero,zero,2090
   20878:	00020a88 	cmpgei	zero,zero,2090
   2087c:	00020a88 	cmpgei	zero,zero,2090
   20880:	00020a88 	cmpgei	zero,zero,2090
   20884:	00020a88 	cmpgei	zero,zero,2090
   20888:	0002152c 	andhi	zero,zero,2132
   2088c:	0002152c 	andhi	zero,zero,2132
   20890:	0002152c 	andhi	zero,zero,2132
   20894:	0002152c 	andhi	zero,zero,2132
   20898:	0002152c 	andhi	zero,zero,2132
   2089c:	0002152c 	andhi	zero,zero,2132
   208a0:	0002152c 	andhi	zero,zero,2132
   208a4:	0002152c 	andhi	zero,zero,2132
   208a8:	0002152c 	andhi	zero,zero,2132
   208ac:	0002152c 	andhi	zero,zero,2132
   208b0:	00020b30 	cmpltui	zero,zero,2092
   208b4:	00020c30 	cmpltui	zero,zero,2096
   208b8:	0002152c 	andhi	zero,zero,2132
   208bc:	00020c30 	cmpltui	zero,zero,2096
   208c0:	0002152c 	andhi	zero,zero,2132
   208c4:	0002152c 	andhi	zero,zero,2132
   208c8:	0002152c 	andhi	zero,zero,2132
   208cc:	0002152c 	andhi	zero,zero,2132
   208d0:	00020ac4 	movi	zero,2091
   208d4:	0002152c 	andhi	zero,zero,2132
   208d8:	0002152c 	andhi	zero,zero,2132
   208dc:	00020fcc 	andi	zero,zero,2111
   208e0:	0002152c 	andhi	zero,zero,2132
   208e4:	0002152c 	andhi	zero,zero,2132
   208e8:	0002152c 	andhi	zero,zero,2132
   208ec:	0002152c 	andhi	zero,zero,2132
   208f0:	0002152c 	andhi	zero,zero,2132
   208f4:	00021148 	cmpgei	zero,zero,2117
   208f8:	0002152c 	andhi	zero,zero,2132
   208fc:	0002152c 	andhi	zero,zero,2132
   20900:	00021208 	cmpgei	zero,zero,2120
   20904:	0002152c 	andhi	zero,zero,2132
   20908:	0002152c 	andhi	zero,zero,2132
   2090c:	0002152c 	andhi	zero,zero,2132
   20910:	0002152c 	andhi	zero,zero,2132
   20914:	0002152c 	andhi	zero,zero,2132
   20918:	0002152c 	andhi	zero,zero,2132
   2091c:	0002152c 	andhi	zero,zero,2132
   20920:	0002152c 	andhi	zero,zero,2132
   20924:	0002152c 	andhi	zero,zero,2132
   20928:	0002152c 	andhi	zero,zero,2132
   2092c:	00020b08 	cmpgei	zero,zero,2092
   20930:	00020b34 	movhi	zero,2092
   20934:	00020c30 	cmpltui	zero,zero,2096
   20938:	00020c30 	cmpltui	zero,zero,2096
   2093c:	00020c30 	cmpltui	zero,zero,2096
   20940:	00020acc 	andi	zero,zero,2091
   20944:	00020b34 	movhi	zero,2092
   20948:	0002152c 	andhi	zero,zero,2132
   2094c:	0002152c 	andhi	zero,zero,2132
   20950:	00020ad4 	movui	zero,2091
   20954:	0002152c 	andhi	zero,zero,2132
   20958:	00020f2c 	andhi	zero,zero,2108
   2095c:	00020fd0 	cmplti	zero,zero,2111
   20960:	00021070 	cmpltui	zero,zero,2113
   20964:	00020b00 	call	20b0 <__alt_mem_onchip_memory2_0-0x1df50>
   20968:	0002152c 	andhi	zero,zero,2132
   2096c:	000210b8 	rdprs	zero,zero,2114
   20970:	0002152c 	andhi	zero,zero,2132
   20974:	0002114c 	andi	zero,zero,2117
   20978:	0002152c 	andhi	zero,zero,2132
   2097c:	0002152c 	andhi	zero,zero,2132
   20980:	00021218 	cmpnei	zero,zero,2120
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
   20984:	e0bfc103 	ldbu	r2,-252(fp)
   20988:	10803fcc 	andi	r2,r2,255
   2098c:	1080201c 	xori	r2,r2,128
   20990:	10bfe004 	addi	r2,r2,-128
   20994:	103f931e 	bne	r2,zero,207e4 <__alt_data_end+0xfffe07e4>
				sign = ' ';
   20998:	00800804 	movi	r2,32
   2099c:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
   209a0:	003f9006 	br	207e4 <__alt_data_end+0xfffe07e4>
		case '#':
			flags |= ALT;
   209a4:	9cc00054 	ori	r19,r19,1
			goto rflag;
   209a8:	003f8e06 	br	207e4 <__alt_data_end+0xfffe07e4>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
   209ac:	e0bfe917 	ldw	r2,-92(fp)
   209b0:	10c00104 	addi	r3,r2,4
   209b4:	e0ffe915 	stw	r3,-92(fp)
   209b8:	10800017 	ldw	r2,0(r2)
   209bc:	e0bfad15 	stw	r2,-332(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
   209c0:	e0bfad17 	ldw	r2,-332(fp)
   209c4:	10000116 	blt	r2,zero,209cc <___vfprintf_internal_r+0x43c>
				goto rflag;
   209c8:	003f8606 	br	207e4 <__alt_data_end+0xfffe07e4>
			width = -width;
   209cc:	e0bfad17 	ldw	r2,-332(fp)
   209d0:	0085c83a 	sub	r2,zero,r2
   209d4:	e0bfad15 	stw	r2,-332(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
   209d8:	9cc00114 	ori	r19,r19,4
			goto rflag;
   209dc:	003f8106 	br	207e4 <__alt_data_end+0xfffe07e4>
		case '+':
			sign = '+';
   209e0:	00800ac4 	movi	r2,43
   209e4:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
   209e8:	003f7e06 	br	207e4 <__alt_data_end+0xfffe07e4>
		case '.':
			if ((ch = *fmt++) == '*') {
   209ec:	a805883a 	mov	r2,r21
   209f0:	15400044 	addi	r21,r2,1
   209f4:	10800003 	ldbu	r2,0(r2)
   209f8:	15003fcc 	andi	r20,r2,255
   209fc:	a500201c 	xori	r20,r20,128
   20a00:	a53fe004 	addi	r20,r20,-128
   20a04:	a0800a98 	cmpnei	r2,r20,42
   20a08:	10000a1e 	bne	r2,zero,20a34 <___vfprintf_internal_r+0x4a4>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
   20a0c:	e0bfe917 	ldw	r2,-92(fp)
   20a10:	10c00104 	addi	r3,r2,4
   20a14:	e0ffe915 	stw	r3,-92(fp)
   20a18:	10800017 	ldw	r2,0(r2)
   20a1c:	e0bfae15 	stw	r2,-328(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
   20a20:	e0bfae17 	ldw	r2,-328(fp)
   20a24:	103f6f0e 	bge	r2,zero,207e4 <__alt_data_end+0xfffe07e4>
					prec = -1;
   20a28:	00bfffc4 	movi	r2,-1
   20a2c:	e0bfae15 	stw	r2,-328(fp)
				goto rflag;
   20a30:	003f6c06 	br	207e4 <__alt_data_end+0xfffe07e4>
			}
			n = 0;
   20a34:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
   20a38:	00000906 	br	20a60 <___vfprintf_internal_r+0x4d0>
				n = 10 * n + to_digit (ch);
   20a3c:	80c002a4 	muli	r3,r16,10
   20a40:	a0bff404 	addi	r2,r20,-48
   20a44:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
   20a48:	a805883a 	mov	r2,r21
   20a4c:	15400044 	addi	r21,r2,1
   20a50:	10800003 	ldbu	r2,0(r2)
   20a54:	15003fcc 	andi	r20,r2,255
   20a58:	a500201c 	xori	r20,r20,128
   20a5c:	a53fe004 	addi	r20,r20,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
   20a60:	a0bff404 	addi	r2,r20,-48
   20a64:	108002b0 	cmpltui	r2,r2,10
   20a68:	103ff41e 	bne	r2,zero,20a3c <__alt_data_end+0xfffe0a3c>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
   20a6c:	8005883a 	mov	r2,r16
   20a70:	1000010e 	bge	r2,zero,20a78 <___vfprintf_internal_r+0x4e8>
   20a74:	00bfffc4 	movi	r2,-1
   20a78:	e0bfae15 	stw	r2,-328(fp)
			goto reswitch;
   20a7c:	003f5f06 	br	207fc <__alt_data_end+0xfffe07fc>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
   20a80:	9cc02014 	ori	r19,r19,128
			goto rflag;
   20a84:	003f5706 	br	207e4 <__alt_data_end+0xfffe07e4>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
   20a88:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
   20a8c:	80c002a4 	muli	r3,r16,10
   20a90:	a0bff404 	addi	r2,r20,-48
   20a94:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
   20a98:	a805883a 	mov	r2,r21
   20a9c:	15400044 	addi	r21,r2,1
   20aa0:	10800003 	ldbu	r2,0(r2)
   20aa4:	15003fcc 	andi	r20,r2,255
   20aa8:	a500201c 	xori	r20,r20,128
   20aac:	a53fe004 	addi	r20,r20,-128
			} while (is_digit (ch));
   20ab0:	a0bff404 	addi	r2,r20,-48
   20ab4:	108002b0 	cmpltui	r2,r2,10
   20ab8:	103ff41e 	bne	r2,zero,20a8c <__alt_data_end+0xfffe0a8c>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
   20abc:	e43fad15 	stw	r16,-332(fp)
			goto reswitch;
   20ac0:	003f4e06 	br	207fc <__alt_data_end+0xfffe07fc>
#ifdef FLOATING_POINT
		case 'L':
			flags |= LONGDBL;
   20ac4:	9cc00214 	ori	r19,r19,8
			goto rflag;
   20ac8:	003f4606 	br	207e4 <__alt_data_end+0xfffe07e4>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
   20acc:	9cc01014 	ori	r19,r19,64
			goto rflag;
   20ad0:	003f4406 	br	207e4 <__alt_data_end+0xfffe07e4>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
   20ad4:	a8800003 	ldbu	r2,0(r21)
   20ad8:	10803fcc 	andi	r2,r2,255
   20adc:	1080201c 	xori	r2,r2,128
   20ae0:	10bfe004 	addi	r2,r2,-128
   20ae4:	10801b18 	cmpnei	r2,r2,108
   20ae8:	1000031e 	bne	r2,zero,20af8 <___vfprintf_internal_r+0x568>
				fmt++;
   20aec:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
   20af0:	9cc00814 	ori	r19,r19,32
   20af4:	003f3b06 	br	207e4 <__alt_data_end+0xfffe07e4>
			} else
#endif
				flags |= LONGINT;
   20af8:	9cc00414 	ori	r19,r19,16
			goto rflag;
   20afc:	003f3906 	br	207e4 <__alt_data_end+0xfffe07e4>
		case 'q': /* extension */
			flags |= QUADINT;
   20b00:	9cc00814 	ori	r19,r19,32
			goto rflag;
   20b04:	003f3706 	br	207e4 <__alt_data_end+0xfffe07e4>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
   20b08:	e4bfdb04 	addi	r18,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
   20b0c:	e0bfe917 	ldw	r2,-92(fp)
   20b10:	10c00104 	addi	r3,r2,4
   20b14:	e0ffe915 	stw	r3,-92(fp)
   20b18:	10800017 	ldw	r2,0(r2)
   20b1c:	90800005 	stb	r2,0(r18)
				size = 1;
   20b20:	00800044 	movi	r2,1
   20b24:	e0bfb615 	stw	r2,-296(fp)
			}
			sign = '\0';
   20b28:	e03fc105 	stb	zero,-252(fp)
			break;
   20b2c:	00028806 	br	21550 <___vfprintf_internal_r+0xfc0>
		case 'D':  /* extension */
			flags |= LONGINT;
   20b30:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
   20b34:	9880080c 	andi	r2,r19,32
   20b38:	10000826 	beq	r2,zero,20b5c <___vfprintf_internal_r+0x5cc>
   20b3c:	e13fe917 	ldw	r4,-92(fp)
   20b40:	20800204 	addi	r2,r4,8
   20b44:	e0bfe915 	stw	r2,-92(fp)
   20b48:	20800017 	ldw	r2,0(r4)
   20b4c:	20c00117 	ldw	r3,4(r4)
   20b50:	e0bfea15 	stw	r2,-88(fp)
   20b54:	e0ffeb15 	stw	r3,-84(fp)
   20b58:	00001e06 	br	20bd4 <___vfprintf_internal_r+0x644>
   20b5c:	9880040c 	andi	r2,r19,16
   20b60:	10000826 	beq	r2,zero,20b84 <___vfprintf_internal_r+0x5f4>
   20b64:	e0bfe917 	ldw	r2,-92(fp)
   20b68:	10c00104 	addi	r3,r2,4
   20b6c:	e0ffe915 	stw	r3,-92(fp)
   20b70:	10800017 	ldw	r2,0(r2)
   20b74:	e0bfea15 	stw	r2,-88(fp)
   20b78:	1005d7fa 	srai	r2,r2,31
   20b7c:	e0bfeb15 	stw	r2,-84(fp)
   20b80:	00001406 	br	20bd4 <___vfprintf_internal_r+0x644>
   20b84:	9880100c 	andi	r2,r19,64
   20b88:	10000b26 	beq	r2,zero,20bb8 <___vfprintf_internal_r+0x628>
   20b8c:	e0bfe917 	ldw	r2,-92(fp)
   20b90:	10c00104 	addi	r3,r2,4
   20b94:	e0ffe915 	stw	r3,-92(fp)
   20b98:	10800017 	ldw	r2,0(r2)
   20b9c:	10bfffcc 	andi	r2,r2,65535
   20ba0:	10a0001c 	xori	r2,r2,32768
   20ba4:	10a00004 	addi	r2,r2,-32768
   20ba8:	e0bfea15 	stw	r2,-88(fp)
   20bac:	1005d7fa 	srai	r2,r2,31
   20bb0:	e0bfeb15 	stw	r2,-84(fp)
   20bb4:	00000706 	br	20bd4 <___vfprintf_internal_r+0x644>
   20bb8:	e0bfe917 	ldw	r2,-92(fp)
   20bbc:	10c00104 	addi	r3,r2,4
   20bc0:	e0ffe915 	stw	r3,-92(fp)
   20bc4:	10800017 	ldw	r2,0(r2)
   20bc8:	e0bfea15 	stw	r2,-88(fp)
   20bcc:	1005d7fa 	srai	r2,r2,31
   20bd0:	e0bfeb15 	stw	r2,-84(fp)
   20bd4:	e0bfea17 	ldw	r2,-88(fp)
   20bd8:	e0bfb115 	stw	r2,-316(fp)
   20bdc:	e0ffeb17 	ldw	r3,-84(fp)
   20be0:	e0ffb215 	stw	r3,-312(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
   20be4:	e0bfb117 	ldw	r2,-316(fp)
   20be8:	e0ffb217 	ldw	r3,-312(fp)
   20bec:	18000d0e 	bge	r3,zero,20c24 <___vfprintf_internal_r+0x694>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
   20bf0:	000f883a 	mov	r7,zero
   20bf4:	0011883a 	mov	r8,zero
   20bf8:	e13fb117 	ldw	r4,-316(fp)
   20bfc:	e17fb217 	ldw	r5,-312(fp)
   20c00:	3905c83a 	sub	r2,r7,r4
   20c04:	388d803a 	cmpltu	r6,r7,r2
   20c08:	4147c83a 	sub	r3,r8,r5
   20c0c:	1989c83a 	sub	r4,r3,r6
   20c10:	2007883a 	mov	r3,r4
   20c14:	e0bfb115 	stw	r2,-316(fp)
   20c18:	e0ffb215 	stw	r3,-312(fp)
				sign = '-';
   20c1c:	00800b44 	movi	r2,45
   20c20:	e0bfc105 	stb	r2,-252(fp)
			}
			base = DEC;
   20c24:	00800044 	movi	r2,1
   20c28:	e0bfb305 	stb	r2,-308(fp)
			goto number;
   20c2c:	0001b706 	br	2130c <___vfprintf_internal_r+0xd7c>
		case 'E':
		case 'f':
		case 'g':
		case 'G':
# ifdef _NO_LONGDBL
			if (flags & LONGDBL) {
   20c30:	9880020c 	andi	r2,r19,8
   20c34:	10000826 	beq	r2,zero,20c58 <___vfprintf_internal_r+0x6c8>
				_fpvalue = (double) GET_ARG (N, ap, _LONG_DOUBLE);
   20c38:	e13fe917 	ldw	r4,-92(fp)
   20c3c:	20800204 	addi	r2,r4,8
   20c40:	e0bfe915 	stw	r2,-92(fp)
   20c44:	20800017 	ldw	r2,0(r4)
   20c48:	20c00117 	ldw	r3,4(r4)
   20c4c:	e0bfc215 	stw	r2,-248(fp)
   20c50:	e0ffc315 	stw	r3,-244(fp)
   20c54:	00000706 	br	20c74 <___vfprintf_internal_r+0x6e4>
			} else {
				_fpvalue = GET_ARG (N, ap, double);
   20c58:	e13fe917 	ldw	r4,-92(fp)
   20c5c:	20800204 	addi	r2,r4,8
   20c60:	e0bfe915 	stw	r2,-92(fp)
   20c64:	20800017 	ldw	r2,0(r4)
   20c68:	20c00117 	ldw	r3,4(r4)
   20c6c:	e0bfc215 	stw	r2,-248(fp)
   20c70:	e0ffc315 	stw	r3,-244(fp)

			   If the output is infinite or NaN, leading
			   zeros are not permitted.  Otherwise, scanf
			   could not read what printf wrote.
			 */
			if (isinf (_fpvalue)) {
   20c74:	e0bfc217 	ldw	r2,-248(fp)
   20c78:	e0ffc317 	ldw	r3,-244(fp)
   20c7c:	1009883a 	mov	r4,r2
   20c80:	180b883a 	mov	r5,r3
   20c84:	002a32c0 	call	2a32c <__fpclassifyd>
   20c88:	10800058 	cmpnei	r2,r2,1
   20c8c:	1000161e 	bne	r2,zero,20ce8 <___vfprintf_internal_r+0x758>
				if (_fpvalue < 0)
   20c90:	e0bfc217 	ldw	r2,-248(fp)
   20c94:	e0ffc317 	ldw	r3,-244(fp)
   20c98:	000d883a 	mov	r6,zero
   20c9c:	000f883a 	mov	r7,zero
   20ca0:	1009883a 	mov	r4,r2
   20ca4:	180b883a 	mov	r5,r3
   20ca8:	002ea280 	call	2ea28 <__ledf2>
   20cac:	1000020e 	bge	r2,zero,20cb8 <___vfprintf_internal_r+0x728>
					sign = '-';
   20cb0:	00800b44 	movi	r2,45
   20cb4:	e0bfc105 	stb	r2,-252(fp)
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
   20cb8:	a0801208 	cmpgei	r2,r20,72
   20cbc:	1000031e 	bne	r2,zero,20ccc <___vfprintf_internal_r+0x73c>
					cp = "INF";
   20cc0:	048000f4 	movhi	r18,3
   20cc4:	94878c04 	addi	r18,r18,7728
   20cc8:	00000206 	br	20cd4 <___vfprintf_internal_r+0x744>
				else
					cp = "inf";
   20ccc:	048000f4 	movhi	r18,3
   20cd0:	94878d04 	addi	r18,r18,7732
				size = 3;
   20cd4:	008000c4 	movi	r2,3
   20cd8:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
   20cdc:	00bfdfc4 	movi	r2,-129
   20ce0:	98a6703a 	and	r19,r19,r2
				break;
   20ce4:	00021a06 	br	21550 <___vfprintf_internal_r+0xfc0>
			}
			if (isnan (_fpvalue)) {
   20ce8:	e0bfc217 	ldw	r2,-248(fp)
   20cec:	e0ffc317 	ldw	r3,-244(fp)
   20cf0:	1009883a 	mov	r4,r2
   20cf4:	180b883a 	mov	r5,r3
   20cf8:	002a32c0 	call	2a32c <__fpclassifyd>
   20cfc:	10000c1e 	bne	r2,zero,20d30 <___vfprintf_internal_r+0x7a0>
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
   20d00:	a0801208 	cmpgei	r2,r20,72
   20d04:	1000031e 	bne	r2,zero,20d14 <___vfprintf_internal_r+0x784>
					cp = "NAN";
   20d08:	048000f4 	movhi	r18,3
   20d0c:	94878e04 	addi	r18,r18,7736
   20d10:	00000206 	br	20d1c <___vfprintf_internal_r+0x78c>
				else
					cp = "nan";
   20d14:	048000f4 	movhi	r18,3
   20d18:	94878f04 	addi	r18,r18,7740
				size = 3;
   20d1c:	008000c4 	movi	r2,3
   20d20:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
   20d24:	00bfdfc4 	movi	r2,-129
   20d28:	98a6703a 	and	r19,r19,r2
				break;
   20d2c:	00020806 	br	21550 <___vfprintf_internal_r+0xfc0>
				  }
				else
				  cp = buf;
			} else
# endif /* _WANT_IO_C99_FORMATS */
			if (prec == -1) {
   20d30:	e0bfae17 	ldw	r2,-328(fp)
   20d34:	10bfffd8 	cmpnei	r2,r2,-1
   20d38:	1000031e 	bne	r2,zero,20d48 <___vfprintf_internal_r+0x7b8>
				prec = DEFPREC;
   20d3c:	00800184 	movi	r2,6
   20d40:	e0bfae15 	stw	r2,-328(fp)
   20d44:	00000806 	br	20d68 <___vfprintf_internal_r+0x7d8>
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
   20d48:	a08019e0 	cmpeqi	r2,r20,103
   20d4c:	1000021e 	bne	r2,zero,20d58 <___vfprintf_internal_r+0x7c8>
   20d50:	a08011d8 	cmpnei	r2,r20,71
   20d54:	1000041e 	bne	r2,zero,20d68 <___vfprintf_internal_r+0x7d8>
   20d58:	e0bfae17 	ldw	r2,-328(fp)
   20d5c:	1000021e 	bne	r2,zero,20d68 <___vfprintf_internal_r+0x7d8>
				prec = 1;
   20d60:	00800044 	movi	r2,1
   20d64:	e0bfae15 	stw	r2,-328(fp)
			}

			flags |= FPT;
   20d68:	9cc04014 	ori	r19,r19,256

			cp = cvt (data, _fpvalue, prec, flags, &softsign,
   20d6c:	e0bfc217 	ldw	r2,-248(fp)
   20d70:	e0ffc317 	ldw	r3,-244(fp)
   20d74:	dc800515 	stw	r18,20(sp)
   20d78:	e13fc704 	addi	r4,fp,-228
   20d7c:	d9000415 	stw	r4,16(sp)
   20d80:	dd000315 	stw	r20,12(sp)
   20d84:	e13fc404 	addi	r4,fp,-240
   20d88:	d9000215 	stw	r4,8(sp)
   20d8c:	e13fc144 	addi	r4,fp,-251
   20d90:	d9000115 	stw	r4,4(sp)
   20d94:	dcc00015 	stw	r19,0(sp)
   20d98:	e1ffae17 	ldw	r7,-328(fp)
   20d9c:	100b883a 	mov	r5,r2
   20da0:	180d883a 	mov	r6,r3
   20da4:	e13fe617 	ldw	r4,-104(fp)
   20da8:	00226600 	call	22660 <cvt>
   20dac:	1025883a 	mov	r18,r2
				  &expt, ch, &ndig, cp);

			if (ch == 'g' || ch == 'G') {
   20db0:	a08019e0 	cmpeqi	r2,r20,103
   20db4:	1000021e 	bne	r2,zero,20dc0 <___vfprintf_internal_r+0x830>
   20db8:	a08011d8 	cmpnei	r2,r20,71
   20dbc:	1000091e 	bne	r2,zero,20de4 <___vfprintf_internal_r+0x854>
				if (expt <= -4 || expt > prec)
   20dc0:	e0bfc417 	ldw	r2,-240(fp)
   20dc4:	10bfff50 	cmplti	r2,r2,-3
   20dc8:	1000031e 	bne	r2,zero,20dd8 <___vfprintf_internal_r+0x848>
   20dcc:	e0bfc417 	ldw	r2,-240(fp)
   20dd0:	e0ffae17 	ldw	r3,-328(fp)
   20dd4:	1880020e 	bge	r3,r2,20de0 <___vfprintf_internal_r+0x850>
					ch -= 2; /* 'e' or 'E' */
   20dd8:	a53fff84 	addi	r20,r20,-2
   20ddc:	00000106 	br	20de4 <___vfprintf_internal_r+0x854>
				else
					ch = 'g';
   20de0:	050019c4 	movi	r20,103
			}
# ifdef _WANT_IO_C99_FORMATS
			else if (ch == 'F')
				ch = 'f';
# endif
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
   20de4:	a0801988 	cmpgei	r2,r20,102
   20de8:	1000171e 	bne	r2,zero,20e48 <___vfprintf_internal_r+0x8b8>
				--expt;
   20dec:	e0bfc417 	ldw	r2,-240(fp)
   20df0:	10bfffc4 	addi	r2,r2,-1
   20df4:	e0bfc415 	stw	r2,-240(fp)
				expsize = exponent (expstr, expt, ch);
   20df8:	e0bfc417 	ldw	r2,-240(fp)
   20dfc:	e0ffc504 	addi	r3,fp,-236
   20e00:	a00d883a 	mov	r6,r20
   20e04:	100b883a 	mov	r5,r2
   20e08:	1809883a 	mov	r4,r3
   20e0c:	002286c0 	call	2286c <exponent>
   20e10:	e0bfaf15 	stw	r2,-324(fp)
				size = expsize + ndig;
   20e14:	e0bfc717 	ldw	r2,-228(fp)
   20e18:	e0ffaf17 	ldw	r3,-324(fp)
   20e1c:	1885883a 	add	r2,r3,r2
   20e20:	e0bfb615 	stw	r2,-296(fp)
				if (ndig > 1 || flags & ALT)
   20e24:	e0bfc717 	ldw	r2,-228(fp)
   20e28:	10800088 	cmpgei	r2,r2,2
   20e2c:	1000021e 	bne	r2,zero,20e38 <___vfprintf_internal_r+0x8a8>
   20e30:	9880004c 	andi	r2,r19,1
   20e34:	10003526 	beq	r2,zero,20f0c <___vfprintf_internal_r+0x97c>
					++size;
   20e38:	e0bfb617 	ldw	r2,-296(fp)
   20e3c:	10800044 	addi	r2,r2,1
   20e40:	e0bfb615 	stw	r2,-296(fp)
   20e44:	00003106 	br	20f0c <___vfprintf_internal_r+0x97c>
# ifdef _WANT_IO_C99_FORMATS
				flags &= ~GROUPING;
# endif
			} else {
				if (ch == 'f') {		/* f fmt */
   20e48:	a0801998 	cmpnei	r2,r20,102
   20e4c:	1000181e 	bne	r2,zero,20eb0 <___vfprintf_internal_r+0x920>
					if (expt > 0) {
   20e50:	e0bfc417 	ldw	r2,-240(fp)
   20e54:	00800c0e 	bge	zero,r2,20e88 <___vfprintf_internal_r+0x8f8>
						size = expt;
   20e58:	e0bfc417 	ldw	r2,-240(fp)
   20e5c:	e0bfb615 	stw	r2,-296(fp)
						if (prec || flags & ALT)
   20e60:	e0bfae17 	ldw	r2,-328(fp)
   20e64:	1000021e 	bne	r2,zero,20e70 <___vfprintf_internal_r+0x8e0>
   20e68:	9880004c 	andi	r2,r19,1
   20e6c:	10002526 	beq	r2,zero,20f04 <___vfprintf_internal_r+0x974>
							size += prec + 1;
   20e70:	e0bfae17 	ldw	r2,-328(fp)
   20e74:	10800044 	addi	r2,r2,1
   20e78:	e0ffb617 	ldw	r3,-296(fp)
   20e7c:	1885883a 	add	r2,r3,r2
   20e80:	e0bfb615 	stw	r2,-296(fp)
   20e84:	00001f06 	br	20f04 <___vfprintf_internal_r+0x974>
					} else	/* "0.X" */
						size = (prec || flags & ALT)
							  ? prec + 2
							  : 1;
   20e88:	e0bfae17 	ldw	r2,-328(fp)
   20e8c:	1000021e 	bne	r2,zero,20e98 <___vfprintf_internal_r+0x908>
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
   20e90:	9880004c 	andi	r2,r19,1
   20e94:	10000326 	beq	r2,zero,20ea4 <___vfprintf_internal_r+0x914>
							  ? prec + 2
							  : 1;
   20e98:	e0bfae17 	ldw	r2,-328(fp)
   20e9c:	10800084 	addi	r2,r2,2
   20ea0:	00000106 	br	20ea8 <___vfprintf_internal_r+0x918>
   20ea4:	00800044 	movi	r2,1
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
   20ea8:	e0bfb615 	stw	r2,-296(fp)
   20eac:	00001506 	br	20f04 <___vfprintf_internal_r+0x974>
							  ? prec + 2
							  : 1;
				} else if (expt >= ndig) { /* fixed g fmt */
   20eb0:	e0ffc417 	ldw	r3,-240(fp)
   20eb4:	e0bfc717 	ldw	r2,-228(fp)
   20eb8:	18800816 	blt	r3,r2,20edc <___vfprintf_internal_r+0x94c>
					size = expt;
   20ebc:	e0bfc417 	ldw	r2,-240(fp)
   20ec0:	e0bfb615 	stw	r2,-296(fp)
					if (flags & ALT)
   20ec4:	9880004c 	andi	r2,r19,1
   20ec8:	10000e26 	beq	r2,zero,20f04 <___vfprintf_internal_r+0x974>
						++size;
   20ecc:	e0bfb617 	ldw	r2,-296(fp)
   20ed0:	10800044 	addi	r2,r2,1
   20ed4:	e0bfb615 	stw	r2,-296(fp)
   20ed8:	00000a06 	br	20f04 <___vfprintf_internal_r+0x974>
				} else
					size = ndig + (expt > 0 ?
   20edc:	e0bfc417 	ldw	r2,-240(fp)
						1 : 2 - expt);
   20ee0:	00800416 	blt	zero,r2,20ef4 <___vfprintf_internal_r+0x964>
   20ee4:	e0bfc417 	ldw	r2,-240(fp)
   20ee8:	00c00084 	movi	r3,2
   20eec:	1885c83a 	sub	r2,r3,r2
   20ef0:	00000106 	br	20ef8 <___vfprintf_internal_r+0x968>
   20ef4:	00800044 	movi	r2,1
				} else if (expt >= ndig) { /* fixed g fmt */
					size = expt;
					if (flags & ALT)
						++size;
				} else
					size = ndig + (expt > 0 ?
   20ef8:	e0ffc717 	ldw	r3,-228(fp)
   20efc:	10c5883a 	add	r2,r2,r3
   20f00:	e0bfb615 	stw	r2,-296(fp)
							nrepeats++;
					}
					size += (nseps + nrepeats) * thsnd_len;
				} else
# endif
					lead = expt;
   20f04:	e0bfc417 	ldw	r2,-240(fp)
   20f08:	e0bfb015 	stw	r2,-320(fp)
			}

			if (softsign)
   20f0c:	e0bfc143 	ldbu	r2,-251(fp)
   20f10:	10803fcc 	andi	r2,r2,255
   20f14:	1080201c 	xori	r2,r2,128
   20f18:	10bfe004 	addi	r2,r2,-128
   20f1c:	10018b26 	beq	r2,zero,2154c <___vfprintf_internal_r+0xfbc>
				sign = '-';
   20f20:	00800b44 	movi	r2,45
   20f24:	e0bfc105 	stb	r2,-252(fp)
			break;
   20f28:	00018806 	br	2154c <___vfprintf_internal_r+0xfbc>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
   20f2c:	9880080c 	andi	r2,r19,32
   20f30:	10000d26 	beq	r2,zero,20f68 <___vfprintf_internal_r+0x9d8>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
   20f34:	e0bfe917 	ldw	r2,-92(fp)
   20f38:	10c00104 	addi	r3,r2,4
   20f3c:	e0ffe915 	stw	r3,-92(fp)
   20f40:	10800017 	ldw	r2,0(r2)
   20f44:	e0ffac17 	ldw	r3,-336(fp)
   20f48:	e0fff015 	stw	r3,-64(fp)
   20f4c:	1807d7fa 	srai	r3,r3,31
   20f50:	e0fff115 	stw	r3,-60(fp)
   20f54:	e0fff017 	ldw	r3,-64(fp)
   20f58:	10c00015 	stw	r3,0(r2)
   20f5c:	e0fff117 	ldw	r3,-60(fp)
   20f60:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
   20f64:	00054b06 	br	22494 <___vfprintf_internal_r+0x1f04>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
   20f68:	9880040c 	andi	r2,r19,16
   20f6c:	10000726 	beq	r2,zero,20f8c <___vfprintf_internal_r+0x9fc>
				*GET_ARG (N, ap, long_ptr_t) = ret;
   20f70:	e0bfe917 	ldw	r2,-92(fp)
   20f74:	10c00104 	addi	r3,r2,4
   20f78:	e0ffe915 	stw	r3,-92(fp)
   20f7c:	10800017 	ldw	r2,0(r2)
   20f80:	e0ffac17 	ldw	r3,-336(fp)
   20f84:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
   20f88:	00054206 	br	22494 <___vfprintf_internal_r+0x1f04>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
   20f8c:	9880100c 	andi	r2,r19,64
   20f90:	10000726 	beq	r2,zero,20fb0 <___vfprintf_internal_r+0xa20>
				*GET_ARG (N, ap, short_ptr_t) = ret;
   20f94:	e0bfe917 	ldw	r2,-92(fp)
   20f98:	10c00104 	addi	r3,r2,4
   20f9c:	e0ffe915 	stw	r3,-92(fp)
   20fa0:	10800017 	ldw	r2,0(r2)
   20fa4:	e0ffac17 	ldw	r3,-336(fp)
   20fa8:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
   20fac:	00053906 	br	22494 <___vfprintf_internal_r+0x1f04>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
   20fb0:	e0bfe917 	ldw	r2,-92(fp)
   20fb4:	10c00104 	addi	r3,r2,4
   20fb8:	e0ffe915 	stw	r3,-92(fp)
   20fbc:	10800017 	ldw	r2,0(r2)
   20fc0:	e0ffac17 	ldw	r3,-336(fp)
   20fc4:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
   20fc8:	00053206 	br	22494 <___vfprintf_internal_r+0x1f04>
		case 'O': /* extension */
			flags |= LONGINT;
   20fcc:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
   20fd0:	9880080c 	andi	r2,r19,32
   20fd4:	10000626 	beq	r2,zero,20ff0 <___vfprintf_internal_r+0xa60>
   20fd8:	e0bfe917 	ldw	r2,-92(fp)
   20fdc:	10c00204 	addi	r3,r2,8
   20fe0:	e0ffe915 	stw	r3,-92(fp)
   20fe4:	15800017 	ldw	r22,0(r2)
   20fe8:	15c00117 	ldw	r23,4(r2)
   20fec:	00001c06 	br	21060 <___vfprintf_internal_r+0xad0>
   20ff0:	9880040c 	andi	r2,r19,16
   20ff4:	10000726 	beq	r2,zero,21014 <___vfprintf_internal_r+0xa84>
   20ff8:	e0bfe917 	ldw	r2,-92(fp)
   20ffc:	10c00104 	addi	r3,r2,4
   21000:	e0ffe915 	stw	r3,-92(fp)
   21004:	10800017 	ldw	r2,0(r2)
   21008:	102d883a 	mov	r22,r2
   2100c:	002f883a 	mov	r23,zero
   21010:	00001306 	br	21060 <___vfprintf_internal_r+0xad0>
   21014:	9880100c 	andi	r2,r19,64
   21018:	10000b26 	beq	r2,zero,21048 <___vfprintf_internal_r+0xab8>
   2101c:	e0bfe917 	ldw	r2,-92(fp)
   21020:	10c00104 	addi	r3,r2,4
   21024:	e0ffe915 	stw	r3,-92(fp)
   21028:	10800017 	ldw	r2,0(r2)
   2102c:	e0bff215 	stw	r2,-56(fp)
   21030:	e03ff315 	stw	zero,-52(fp)
   21034:	e0bff217 	ldw	r2,-56(fp)
   21038:	15bfffcc 	andi	r22,r2,65535
   2103c:	e0fff317 	ldw	r3,-52(fp)
   21040:	182e703a 	and	r23,r3,zero
   21044:	00000606 	br	21060 <___vfprintf_internal_r+0xad0>
   21048:	e0bfe917 	ldw	r2,-92(fp)
   2104c:	10c00104 	addi	r3,r2,4
   21050:	e0ffe915 	stw	r3,-92(fp)
   21054:	10800017 	ldw	r2,0(r2)
   21058:	102d883a 	mov	r22,r2
   2105c:	002f883a 	mov	r23,zero
   21060:	e5bfb115 	stw	r22,-316(fp)
   21064:	e5ffb215 	stw	r23,-312(fp)
			base = OCT;
   21068:	e03fb305 	stb	zero,-308(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
   2106c:	0000a606 	br	21308 <___vfprintf_internal_r+0xd78>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
   21070:	e0bfe917 	ldw	r2,-92(fp)
   21074:	10c00104 	addi	r3,r2,4
   21078:	e0ffe915 	stw	r3,-92(fp)
   2107c:	10800017 	ldw	r2,0(r2)
   21080:	e0bfb115 	stw	r2,-316(fp)
   21084:	e03fb215 	stw	zero,-312(fp)
			base = HEX;
   21088:	00800084 	movi	r2,2
   2108c:	e0bfb305 	stb	r2,-308(fp)
			xdigs = "0123456789abcdef";
   21090:	008000f4 	movhi	r2,3
   21094:	10879004 	addi	r2,r2,7744
   21098:	e0bfb715 	stw	r2,-292(fp)
			flags |= HEXPREFIX;
   2109c:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
   210a0:	00800c04 	movi	r2,48
   210a4:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
   210a8:	05001e04 	movi	r20,120
   210ac:	00801e04 	movi	r2,120
   210b0:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
   210b4:	00009406 	br	21308 <___vfprintf_internal_r+0xd78>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
   210b8:	e0bfe917 	ldw	r2,-92(fp)
   210bc:	10c00104 	addi	r3,r2,4
   210c0:	e0ffe915 	stw	r3,-92(fp)
   210c4:	14800017 	ldw	r18,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
   210c8:	e03fc105 	stb	zero,-252(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
   210cc:	9000081e 	bne	r18,zero,210f0 <___vfprintf_internal_r+0xb60>
				cp = "(null)";
   210d0:	048000f4 	movhi	r18,3
   210d4:	94879504 	addi	r18,r18,7764
				size = ((unsigned) prec > 6U) ? 6 : prec;
   210d8:	e0bfae17 	ldw	r2,-328(fp)
   210dc:	10c001f0 	cmpltui	r3,r2,7
   210e0:	1800011e 	bne	r3,zero,210e8 <___vfprintf_internal_r+0xb58>
   210e4:	00800184 	movi	r2,6
   210e8:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
   210ec:	00011806 	br	21550 <___vfprintf_internal_r+0xfc0>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
   210f0:	e0bfae17 	ldw	r2,-328(fp)
   210f4:	10001016 	blt	r2,zero,21138 <___vfprintf_internal_r+0xba8>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
   210f8:	e0bfae17 	ldw	r2,-328(fp)
   210fc:	100d883a 	mov	r6,r2
   21100:	000b883a 	mov	r5,zero
   21104:	9009883a 	mov	r4,r18
   21108:	00275b80 	call	275b8 <memchr>
   2110c:	e0bfbf15 	stw	r2,-260(fp)

				if (p != NULL)
   21110:	e0bfbf17 	ldw	r2,-260(fp)
   21114:	10000526 	beq	r2,zero,2112c <___vfprintf_internal_r+0xb9c>
					size = p - cp;
   21118:	e0bfbf17 	ldw	r2,-260(fp)
   2111c:	9007883a 	mov	r3,r18
   21120:	10c5c83a 	sub	r2,r2,r3
   21124:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
   21128:	00010906 	br	21550 <___vfprintf_internal_r+0xfc0>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
   2112c:	e0bfae17 	ldw	r2,-328(fp)
   21130:	e0bfb615 	stw	r2,-296(fp)
			} else
				size = strlen (cp);

			break;
   21134:	00010606 	br	21550 <___vfprintf_internal_r+0xfc0>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
   21138:	9009883a 	mov	r4,r18
   2113c:	002a8440 	call	2a844 <strlen>
   21140:	e0bfb615 	stw	r2,-296(fp)

			break;
   21144:	00010206 	br	21550 <___vfprintf_internal_r+0xfc0>
		case 'U': /* extension */
			flags |= LONGINT;
   21148:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
   2114c:	9880080c 	andi	r2,r19,32
   21150:	10000826 	beq	r2,zero,21174 <___vfprintf_internal_r+0xbe4>
   21154:	e0bfe917 	ldw	r2,-92(fp)
   21158:	10c00204 	addi	r3,r2,8
   2115c:	e0ffe915 	stw	r3,-92(fp)
   21160:	10c00017 	ldw	r3,0(r2)
   21164:	e0ffec15 	stw	r3,-80(fp)
   21168:	10c00117 	ldw	r3,4(r2)
   2116c:	e0ffed15 	stw	r3,-76(fp)
   21170:	00001e06 	br	211ec <___vfprintf_internal_r+0xc5c>
   21174:	9880040c 	andi	r2,r19,16
   21178:	10000726 	beq	r2,zero,21198 <___vfprintf_internal_r+0xc08>
   2117c:	e0bfe917 	ldw	r2,-92(fp)
   21180:	10c00104 	addi	r3,r2,4
   21184:	e0ffe915 	stw	r3,-92(fp)
   21188:	10800017 	ldw	r2,0(r2)
   2118c:	e0bfec15 	stw	r2,-80(fp)
   21190:	e03fed15 	stw	zero,-76(fp)
   21194:	00001506 	br	211ec <___vfprintf_internal_r+0xc5c>
   21198:	9880100c 	andi	r2,r19,64
   2119c:	10000d26 	beq	r2,zero,211d4 <___vfprintf_internal_r+0xc44>
   211a0:	e0bfe917 	ldw	r2,-92(fp)
   211a4:	10c00104 	addi	r3,r2,4
   211a8:	e0ffe915 	stw	r3,-92(fp)
   211ac:	10800017 	ldw	r2,0(r2)
   211b0:	e0bff415 	stw	r2,-48(fp)
   211b4:	e03ff515 	stw	zero,-44(fp)
   211b8:	e0bff417 	ldw	r2,-48(fp)
   211bc:	10bfffcc 	andi	r2,r2,65535
   211c0:	e0bfec15 	stw	r2,-80(fp)
   211c4:	e0fff517 	ldw	r3,-44(fp)
   211c8:	1806703a 	and	r3,r3,zero
   211cc:	e0ffed15 	stw	r3,-76(fp)
   211d0:	00000606 	br	211ec <___vfprintf_internal_r+0xc5c>
   211d4:	e0bfe917 	ldw	r2,-92(fp)
   211d8:	10c00104 	addi	r3,r2,4
   211dc:	e0ffe915 	stw	r3,-92(fp)
   211e0:	10800017 	ldw	r2,0(r2)
   211e4:	e0bfec15 	stw	r2,-80(fp)
   211e8:	e03fed15 	stw	zero,-76(fp)
   211ec:	e0bfec17 	ldw	r2,-80(fp)
   211f0:	e0bfb115 	stw	r2,-316(fp)
   211f4:	e0ffed17 	ldw	r3,-76(fp)
   211f8:	e0ffb215 	stw	r3,-312(fp)
			base = DEC;
   211fc:	00800044 	movi	r2,1
   21200:	e0bfb305 	stb	r2,-308(fp)
			goto nosign;
   21204:	00004006 	br	21308 <___vfprintf_internal_r+0xd78>
		case 'X':
			xdigs = "0123456789ABCDEF";
   21208:	008000f4 	movhi	r2,3
   2120c:	10879704 	addi	r2,r2,7772
   21210:	e0bfb715 	stw	r2,-292(fp)
			goto hex;
   21214:	00000306 	br	21224 <___vfprintf_internal_r+0xc94>
		case 'x':
			xdigs = "0123456789abcdef";
   21218:	008000f4 	movhi	r2,3
   2121c:	10879004 	addi	r2,r2,7744
   21220:	e0bfb715 	stw	r2,-292(fp)
hex:			_uquad = UARG ();
   21224:	9880080c 	andi	r2,r19,32
   21228:	10000826 	beq	r2,zero,2124c <___vfprintf_internal_r+0xcbc>
   2122c:	e0bfe917 	ldw	r2,-92(fp)
   21230:	10c00204 	addi	r3,r2,8
   21234:	e0ffe915 	stw	r3,-92(fp)
   21238:	10c00017 	ldw	r3,0(r2)
   2123c:	e0ffee15 	stw	r3,-72(fp)
   21240:	10c00117 	ldw	r3,4(r2)
   21244:	e0ffef15 	stw	r3,-68(fp)
   21248:	00001e06 	br	212c4 <___vfprintf_internal_r+0xd34>
   2124c:	9880040c 	andi	r2,r19,16
   21250:	10000726 	beq	r2,zero,21270 <___vfprintf_internal_r+0xce0>
   21254:	e0bfe917 	ldw	r2,-92(fp)
   21258:	10c00104 	addi	r3,r2,4
   2125c:	e0ffe915 	stw	r3,-92(fp)
   21260:	10800017 	ldw	r2,0(r2)
   21264:	e0bfee15 	stw	r2,-72(fp)
   21268:	e03fef15 	stw	zero,-68(fp)
   2126c:	00001506 	br	212c4 <___vfprintf_internal_r+0xd34>
   21270:	9880100c 	andi	r2,r19,64
   21274:	10000d26 	beq	r2,zero,212ac <___vfprintf_internal_r+0xd1c>
   21278:	e0bfe917 	ldw	r2,-92(fp)
   2127c:	10c00104 	addi	r3,r2,4
   21280:	e0ffe915 	stw	r3,-92(fp)
   21284:	10800017 	ldw	r2,0(r2)
   21288:	e0bff615 	stw	r2,-40(fp)
   2128c:	e03ff715 	stw	zero,-36(fp)
   21290:	e0bff617 	ldw	r2,-40(fp)
   21294:	10bfffcc 	andi	r2,r2,65535
   21298:	e0bfee15 	stw	r2,-72(fp)
   2129c:	e0fff717 	ldw	r3,-36(fp)
   212a0:	1806703a 	and	r3,r3,zero
   212a4:	e0ffef15 	stw	r3,-68(fp)
   212a8:	00000606 	br	212c4 <___vfprintf_internal_r+0xd34>
   212ac:	e0bfe917 	ldw	r2,-92(fp)
   212b0:	10c00104 	addi	r3,r2,4
   212b4:	e0ffe915 	stw	r3,-92(fp)
   212b8:	10800017 	ldw	r2,0(r2)
   212bc:	e0bfee15 	stw	r2,-72(fp)
   212c0:	e03fef15 	stw	zero,-68(fp)
   212c4:	e0bfee17 	ldw	r2,-72(fp)
   212c8:	e0bfb115 	stw	r2,-316(fp)
   212cc:	e0ffef17 	ldw	r3,-68(fp)
   212d0:	e0ffb215 	stw	r3,-312(fp)
			base = HEX;
   212d4:	00800084 	movi	r2,2
   212d8:	e0bfb305 	stb	r2,-308(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
   212dc:	9880004c 	andi	r2,r19,1
   212e0:	10000926 	beq	r2,zero,21308 <___vfprintf_internal_r+0xd78>
   212e4:	e0bfb117 	ldw	r2,-316(fp)
   212e8:	e0ffb217 	ldw	r3,-312(fp)
   212ec:	10c4b03a 	or	r2,r2,r3
   212f0:	10000526 	beq	r2,zero,21308 <___vfprintf_internal_r+0xd78>
				ox[0] = '0';
   212f4:	00800c04 	movi	r2,48
   212f8:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
   212fc:	a005883a 	mov	r2,r20
   21300:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
   21304:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
   21308:	e03fc105 	stb	zero,-252(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
   2130c:	e0bfae17 	ldw	r2,-328(fp)
   21310:	e0bfb415 	stw	r2,-304(fp)
   21314:	e0bfb417 	ldw	r2,-304(fp)
   21318:	10000216 	blt	r2,zero,21324 <___vfprintf_internal_r+0xd94>
				flags &= ~ZEROPAD;
   2131c:	00bfdfc4 	movi	r2,-129
   21320:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
   21324:	e4bfdb04 	addi	r18,fp,-148
   21328:	94800a04 	addi	r18,r18,40
			if (_uquad != 0 || prec != 0) {
   2132c:	e0bfb117 	ldw	r2,-316(fp)
   21330:	e0ffb217 	ldw	r3,-312(fp)
   21334:	10c4b03a 	or	r2,r2,r3
   21338:	1000021e 	bne	r2,zero,21344 <___vfprintf_internal_r+0xdb4>
   2133c:	e0bfae17 	ldw	r2,-328(fp)
   21340:	10006c26 	beq	r2,zero,214f4 <___vfprintf_internal_r+0xf64>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
   21344:	e0bfb303 	ldbu	r2,-308(fp)
   21348:	10c00060 	cmpeqi	r3,r2,1
   2134c:	1800211e 	bne	r3,zero,213d4 <___vfprintf_internal_r+0xe44>
   21350:	10c000a0 	cmpeqi	r3,r2,2
   21354:	1800491e 	bne	r3,zero,2147c <___vfprintf_internal_r+0xeec>
   21358:	10005d1e 	bne	r2,zero,214d0 <___vfprintf_internal_r+0xf40>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
   2135c:	94bfffc4 	addi	r18,r18,-1
   21360:	e0bfb117 	ldw	r2,-316(fp)
   21364:	108001cc 	andi	r2,r2,7
   21368:	10800c04 	addi	r2,r2,48
   2136c:	90800005 	stb	r2,0(r18)
						_uquad >>= 3;
   21370:	e0bfb217 	ldw	r2,-312(fp)
   21374:	1004977a 	slli	r2,r2,29
   21378:	e0ffb117 	ldw	r3,-316(fp)
   2137c:	1806d0fa 	srli	r3,r3,3
   21380:	1884b03a 	or	r2,r3,r2
   21384:	e0bfb115 	stw	r2,-316(fp)
   21388:	e0bfb217 	ldw	r2,-312(fp)
   2138c:	1004d0fa 	srli	r2,r2,3
   21390:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
   21394:	e0bfb117 	ldw	r2,-316(fp)
   21398:	e0ffb217 	ldw	r3,-312(fp)
   2139c:	10c4b03a 	or	r2,r2,r3
   213a0:	103fee1e 	bne	r2,zero,2135c <__alt_data_end+0xfffe135c>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
   213a4:	9880004c 	andi	r2,r19,1
   213a8:	10005026 	beq	r2,zero,214ec <___vfprintf_internal_r+0xf5c>
   213ac:	90800003 	ldbu	r2,0(r18)
   213b0:	10803fcc 	andi	r2,r2,255
   213b4:	1080201c 	xori	r2,r2,128
   213b8:	10bfe004 	addi	r2,r2,-128
   213bc:	10800c20 	cmpeqi	r2,r2,48
   213c0:	10004a1e 	bne	r2,zero,214ec <___vfprintf_internal_r+0xf5c>
						*--cp = '0';
   213c4:	94bfffc4 	addi	r18,r18,-1
   213c8:	00800c04 	movi	r2,48
   213cc:	90800005 	stb	r2,0(r18)
					break;
   213d0:	00004606 	br	214ec <___vfprintf_internal_r+0xf5c>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
   213d4:	e0bfb217 	ldw	r2,-312(fp)
   213d8:	10000a1e 	bne	r2,zero,21404 <___vfprintf_internal_r+0xe74>
   213dc:	e0bfb217 	ldw	r2,-312(fp)
   213e0:	1000031e 	bne	r2,zero,213f0 <___vfprintf_internal_r+0xe60>
   213e4:	e0bfb117 	ldw	r2,-316(fp)
   213e8:	108002a8 	cmpgeui	r2,r2,10
   213ec:	1000051e 	bne	r2,zero,21404 <___vfprintf_internal_r+0xe74>
						*--cp = to_char(_uquad);
   213f0:	94bfffc4 	addi	r18,r18,-1
   213f4:	e0bfb117 	ldw	r2,-316(fp)
   213f8:	10800c04 	addi	r2,r2,48
   213fc:	90800005 	stb	r2,0(r18)
						break;
   21400:	00003b06 	br	214f0 <___vfprintf_internal_r+0xf60>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
   21404:	94bfffc4 	addi	r18,r18,-1
   21408:	e0bfb117 	ldw	r2,-316(fp)
   2140c:	e0ffb217 	ldw	r3,-312(fp)
   21410:	01800284 	movi	r6,10
   21414:	000f883a 	mov	r7,zero
   21418:	1009883a 	mov	r4,r2
   2141c:	180b883a 	mov	r5,r3
   21420:	002d0440 	call	2d044 <__umoddi3>
   21424:	1009883a 	mov	r4,r2
   21428:	180b883a 	mov	r5,r3
   2142c:	2005883a 	mov	r2,r4
   21430:	2807883a 	mov	r3,r5
   21434:	10800c04 	addi	r2,r2,48
   21438:	90800005 	stb	r2,0(r18)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
   2143c:	e0bfb117 	ldw	r2,-316(fp)
   21440:	e0ffb217 	ldw	r3,-312(fp)
   21444:	01800284 	movi	r6,10
   21448:	000f883a 	mov	r7,zero
   2144c:	1009883a 	mov	r4,r2
   21450:	180b883a 	mov	r5,r3
   21454:	002cacc0 	call	2cacc <__udivdi3>
   21458:	1009883a 	mov	r4,r2
   2145c:	180b883a 	mov	r5,r3
   21460:	e13fb115 	stw	r4,-316(fp)
   21464:	e17fb215 	stw	r5,-312(fp)
					} while (_uquad != 0);
   21468:	e0bfb117 	ldw	r2,-316(fp)
   2146c:	e0ffb217 	ldw	r3,-312(fp)
   21470:	10c4b03a 	or	r2,r2,r3
   21474:	103fe31e 	bne	r2,zero,21404 <__alt_data_end+0xfffe1404>
					break;
   21478:	00001d06 	br	214f0 <___vfprintf_internal_r+0xf60>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
   2147c:	94bfffc4 	addi	r18,r18,-1
   21480:	e0bfb117 	ldw	r2,-316(fp)
   21484:	108003cc 	andi	r2,r2,15
   21488:	e0ffb717 	ldw	r3,-292(fp)
   2148c:	1885883a 	add	r2,r3,r2
   21490:	10800003 	ldbu	r2,0(r2)
   21494:	90800005 	stb	r2,0(r18)
						_uquad >>= 4;
   21498:	e0bfb217 	ldw	r2,-312(fp)
   2149c:	1004973a 	slli	r2,r2,28
   214a0:	e0ffb117 	ldw	r3,-316(fp)
   214a4:	1806d13a 	srli	r3,r3,4
   214a8:	1884b03a 	or	r2,r3,r2
   214ac:	e0bfb115 	stw	r2,-316(fp)
   214b0:	e0bfb217 	ldw	r2,-312(fp)
   214b4:	1004d13a 	srli	r2,r2,4
   214b8:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
   214bc:	e0bfb117 	ldw	r2,-316(fp)
   214c0:	e0ffb217 	ldw	r3,-312(fp)
   214c4:	10c4b03a 	or	r2,r2,r3
   214c8:	103fec1e 	bne	r2,zero,2147c <__alt_data_end+0xfffe147c>
					break;
   214cc:	00000806 	br	214f0 <___vfprintf_internal_r+0xf60>

				default:
					cp = "bug in vfprintf: bad base";
   214d0:	048000f4 	movhi	r18,3
   214d4:	94879c04 	addi	r18,r18,7792
					size = strlen (cp);
   214d8:	9009883a 	mov	r4,r18
   214dc:	002a8440 	call	2a844 <strlen>
   214e0:	e0bfb615 	stw	r2,-296(fp)
					goto skipsize;
   214e4:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
   214e8:	00001906 	br	21550 <___vfprintf_internal_r+0xfc0>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
   214ec:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
   214f0:	00000706 	br	21510 <___vfprintf_internal_r+0xf80>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
   214f4:	e0bfb303 	ldbu	r2,-308(fp)
   214f8:	1000051e 	bne	r2,zero,21510 <___vfprintf_internal_r+0xf80>
   214fc:	9880004c 	andi	r2,r19,1
   21500:	10000326 	beq	r2,zero,21510 <___vfprintf_internal_r+0xf80>
                         *--cp = '0';
   21504:	94bfffc4 	addi	r18,r18,-1
   21508:	00800c04 	movi	r2,48
   2150c:	90800005 	stb	r2,0(r18)

			size = buf + BUF - cp;
   21510:	e0bfdb04 	addi	r2,fp,-148
   21514:	10800a04 	addi	r2,r2,40
   21518:	1007883a 	mov	r3,r2
   2151c:	9005883a 	mov	r2,r18
   21520:	1885c83a 	sub	r2,r3,r2
   21524:	e0bfb615 	stw	r2,-296(fp)
		skipsize:
			break;
   21528:	00000906 	br	21550 <___vfprintf_internal_r+0xfc0>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
   2152c:	a003dc26 	beq	r20,zero,224a0 <___vfprintf_internal_r+0x1f10>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
   21530:	e4bfdb04 	addi	r18,fp,-148
			*cp = ch;
   21534:	a005883a 	mov	r2,r20
   21538:	90800005 	stb	r2,0(r18)
			size = 1;
   2153c:	00800044 	movi	r2,1
   21540:	e0bfb615 	stw	r2,-296(fp)
			sign = '\0';
   21544:	e03fc105 	stb	zero,-252(fp)
			break;
   21548:	00000106 	br	21550 <___vfprintf_internal_r+0xfc0>
					lead = expt;
			}

			if (softsign)
				sign = '-';
			break;
   2154c:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
   21550:	e0ffb417 	ldw	r3,-304(fp)
   21554:	e0bfb617 	ldw	r2,-296(fp)
   21558:	10c0010e 	bge	r2,r3,21560 <___vfprintf_internal_r+0xfd0>
   2155c:	1805883a 	mov	r2,r3
   21560:	e0bfb515 	stw	r2,-300(fp)
		if (sign)
   21564:	e0bfc103 	ldbu	r2,-252(fp)
   21568:	10803fcc 	andi	r2,r2,255
   2156c:	1080201c 	xori	r2,r2,128
   21570:	10bfe004 	addi	r2,r2,-128
   21574:	10000326 	beq	r2,zero,21584 <___vfprintf_internal_r+0xff4>
			realsz++;
   21578:	e0bfb517 	ldw	r2,-300(fp)
   2157c:	10800044 	addi	r2,r2,1
   21580:	e0bfb515 	stw	r2,-300(fp)
		if (flags & HEXPREFIX)
   21584:	9880008c 	andi	r2,r19,2
   21588:	10000326 	beq	r2,zero,21598 <___vfprintf_internal_r+0x1008>
			realsz+= 2;
   2158c:	e0bfb517 	ldw	r2,-300(fp)
   21590:	10800084 	addi	r2,r2,2
   21594:	e0bfb515 	stw	r2,-300(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
   21598:	9880210c 	andi	r2,r19,132
   2159c:	1000351e 	bne	r2,zero,21674 <___vfprintf_internal_r+0x10e4>
			PAD (width - realsz, blanks);
   215a0:	e0ffad17 	ldw	r3,-332(fp)
   215a4:	e0bfb517 	ldw	r2,-300(fp)
   215a8:	18a1c83a 	sub	r16,r3,r2
   215ac:	0400310e 	bge	zero,r16,21674 <___vfprintf_internal_r+0x10e4>
   215b0:	00001706 	br	21610 <___vfprintf_internal_r+0x1080>
   215b4:	008000f4 	movhi	r2,3
   215b8:	1087a384 	addi	r2,r2,7822
   215bc:	88800015 	stw	r2,0(r17)
   215c0:	00800404 	movi	r2,16
   215c4:	88800115 	stw	r2,4(r17)
   215c8:	e0bfca17 	ldw	r2,-216(fp)
   215cc:	10800404 	addi	r2,r2,16
   215d0:	e0bfca15 	stw	r2,-216(fp)
   215d4:	8c400204 	addi	r17,r17,8
   215d8:	e0bfc917 	ldw	r2,-220(fp)
   215dc:	10800044 	addi	r2,r2,1
   215e0:	e0bfc915 	stw	r2,-220(fp)
   215e4:	e0bfc917 	ldw	r2,-220(fp)
   215e8:	10800210 	cmplti	r2,r2,8
   215ec:	1000071e 	bne	r2,zero,2160c <___vfprintf_internal_r+0x107c>
   215f0:	e0bfc804 	addi	r2,fp,-224
   215f4:	100d883a 	mov	r6,r2
   215f8:	e17fe717 	ldw	r5,-100(fp)
   215fc:	e13fe617 	ldw	r4,-104(fp)
   21600:	002a9380 	call	2a938 <__sprint_r>
   21604:	1003b41e 	bne	r2,zero,224d8 <___vfprintf_internal_r+0x1f48>
   21608:	e47fcb04 	addi	r17,fp,-212
   2160c:	843ffc04 	addi	r16,r16,-16
   21610:	80800448 	cmpgei	r2,r16,17
   21614:	103fe71e 	bne	r2,zero,215b4 <__alt_data_end+0xfffe15b4>
   21618:	008000f4 	movhi	r2,3
   2161c:	1087a384 	addi	r2,r2,7822
   21620:	88800015 	stw	r2,0(r17)
   21624:	8005883a 	mov	r2,r16
   21628:	88800115 	stw	r2,4(r17)
   2162c:	e0bfca17 	ldw	r2,-216(fp)
   21630:	8007883a 	mov	r3,r16
   21634:	10c5883a 	add	r2,r2,r3
   21638:	e0bfca15 	stw	r2,-216(fp)
   2163c:	8c400204 	addi	r17,r17,8
   21640:	e0bfc917 	ldw	r2,-220(fp)
   21644:	10800044 	addi	r2,r2,1
   21648:	e0bfc915 	stw	r2,-220(fp)
   2164c:	e0bfc917 	ldw	r2,-220(fp)
   21650:	10800210 	cmplti	r2,r2,8
   21654:	1000071e 	bne	r2,zero,21674 <___vfprintf_internal_r+0x10e4>
   21658:	e0bfc804 	addi	r2,fp,-224
   2165c:	100d883a 	mov	r6,r2
   21660:	e17fe717 	ldw	r5,-100(fp)
   21664:	e13fe617 	ldw	r4,-104(fp)
   21668:	002a9380 	call	2a938 <__sprint_r>
   2166c:	10039c1e 	bne	r2,zero,224e0 <___vfprintf_internal_r+0x1f50>
   21670:	e47fcb04 	addi	r17,fp,-212

		/* prefix */
		if (sign)
   21674:	e0bfc103 	ldbu	r2,-252(fp)
   21678:	10803fcc 	andi	r2,r2,255
   2167c:	1080201c 	xori	r2,r2,128
   21680:	10bfe004 	addi	r2,r2,-128
   21684:	10001526 	beq	r2,zero,216dc <___vfprintf_internal_r+0x114c>
			PRINT (&sign, 1);
   21688:	e0bfc104 	addi	r2,fp,-252
   2168c:	88800015 	stw	r2,0(r17)
   21690:	00800044 	movi	r2,1
   21694:	88800115 	stw	r2,4(r17)
   21698:	e0bfca17 	ldw	r2,-216(fp)
   2169c:	10800044 	addi	r2,r2,1
   216a0:	e0bfca15 	stw	r2,-216(fp)
   216a4:	8c400204 	addi	r17,r17,8
   216a8:	e0bfc917 	ldw	r2,-220(fp)
   216ac:	10800044 	addi	r2,r2,1
   216b0:	e0bfc915 	stw	r2,-220(fp)
   216b4:	e0bfc917 	ldw	r2,-220(fp)
   216b8:	10800210 	cmplti	r2,r2,8
   216bc:	1000071e 	bne	r2,zero,216dc <___vfprintf_internal_r+0x114c>
   216c0:	e0bfc804 	addi	r2,fp,-224
   216c4:	100d883a 	mov	r6,r2
   216c8:	e17fe717 	ldw	r5,-100(fp)
   216cc:	e13fe617 	ldw	r4,-104(fp)
   216d0:	002a9380 	call	2a938 <__sprint_r>
   216d4:	1003841e 	bne	r2,zero,224e8 <___vfprintf_internal_r+0x1f58>
   216d8:	e47fcb04 	addi	r17,fp,-212
		if (flags & HEXPREFIX)
   216dc:	9880008c 	andi	r2,r19,2
   216e0:	10001526 	beq	r2,zero,21738 <___vfprintf_internal_r+0x11a8>
			PRINT (ox, 2);
   216e4:	e0bfe504 	addi	r2,fp,-108
   216e8:	88800015 	stw	r2,0(r17)
   216ec:	00800084 	movi	r2,2
   216f0:	88800115 	stw	r2,4(r17)
   216f4:	e0bfca17 	ldw	r2,-216(fp)
   216f8:	10800084 	addi	r2,r2,2
   216fc:	e0bfca15 	stw	r2,-216(fp)
   21700:	8c400204 	addi	r17,r17,8
   21704:	e0bfc917 	ldw	r2,-220(fp)
   21708:	10800044 	addi	r2,r2,1
   2170c:	e0bfc915 	stw	r2,-220(fp)
   21710:	e0bfc917 	ldw	r2,-220(fp)
   21714:	10800210 	cmplti	r2,r2,8
   21718:	1000071e 	bne	r2,zero,21738 <___vfprintf_internal_r+0x11a8>
   2171c:	e0bfc804 	addi	r2,fp,-224
   21720:	100d883a 	mov	r6,r2
   21724:	e17fe717 	ldw	r5,-100(fp)
   21728:	e13fe617 	ldw	r4,-104(fp)
   2172c:	002a9380 	call	2a938 <__sprint_r>
   21730:	10036f1e 	bne	r2,zero,224f0 <___vfprintf_internal_r+0x1f60>
   21734:	e47fcb04 	addi	r17,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
   21738:	9880210c 	andi	r2,r19,132
   2173c:	10802018 	cmpnei	r2,r2,128
   21740:	1000351e 	bne	r2,zero,21818 <___vfprintf_internal_r+0x1288>
			PAD (width - realsz, zeroes);
   21744:	e0ffad17 	ldw	r3,-332(fp)
   21748:	e0bfb517 	ldw	r2,-300(fp)
   2174c:	18a1c83a 	sub	r16,r3,r2
   21750:	0400310e 	bge	zero,r16,21818 <___vfprintf_internal_r+0x1288>
   21754:	00001706 	br	217b4 <___vfprintf_internal_r+0x1224>
   21758:	008000f4 	movhi	r2,3
   2175c:	1087a784 	addi	r2,r2,7838
   21760:	88800015 	stw	r2,0(r17)
   21764:	00800404 	movi	r2,16
   21768:	88800115 	stw	r2,4(r17)
   2176c:	e0bfca17 	ldw	r2,-216(fp)
   21770:	10800404 	addi	r2,r2,16
   21774:	e0bfca15 	stw	r2,-216(fp)
   21778:	8c400204 	addi	r17,r17,8
   2177c:	e0bfc917 	ldw	r2,-220(fp)
   21780:	10800044 	addi	r2,r2,1
   21784:	e0bfc915 	stw	r2,-220(fp)
   21788:	e0bfc917 	ldw	r2,-220(fp)
   2178c:	10800210 	cmplti	r2,r2,8
   21790:	1000071e 	bne	r2,zero,217b0 <___vfprintf_internal_r+0x1220>
   21794:	e0bfc804 	addi	r2,fp,-224
   21798:	100d883a 	mov	r6,r2
   2179c:	e17fe717 	ldw	r5,-100(fp)
   217a0:	e13fe617 	ldw	r4,-104(fp)
   217a4:	002a9380 	call	2a938 <__sprint_r>
   217a8:	1003531e 	bne	r2,zero,224f8 <___vfprintf_internal_r+0x1f68>
   217ac:	e47fcb04 	addi	r17,fp,-212
   217b0:	843ffc04 	addi	r16,r16,-16
   217b4:	80800448 	cmpgei	r2,r16,17
   217b8:	103fe71e 	bne	r2,zero,21758 <__alt_data_end+0xfffe1758>
   217bc:	008000f4 	movhi	r2,3
   217c0:	1087a784 	addi	r2,r2,7838
   217c4:	88800015 	stw	r2,0(r17)
   217c8:	8005883a 	mov	r2,r16
   217cc:	88800115 	stw	r2,4(r17)
   217d0:	e0bfca17 	ldw	r2,-216(fp)
   217d4:	8007883a 	mov	r3,r16
   217d8:	10c5883a 	add	r2,r2,r3
   217dc:	e0bfca15 	stw	r2,-216(fp)
   217e0:	8c400204 	addi	r17,r17,8
   217e4:	e0bfc917 	ldw	r2,-220(fp)
   217e8:	10800044 	addi	r2,r2,1
   217ec:	e0bfc915 	stw	r2,-220(fp)
   217f0:	e0bfc917 	ldw	r2,-220(fp)
   217f4:	10800210 	cmplti	r2,r2,8
   217f8:	1000071e 	bne	r2,zero,21818 <___vfprintf_internal_r+0x1288>
   217fc:	e0bfc804 	addi	r2,fp,-224
   21800:	100d883a 	mov	r6,r2
   21804:	e17fe717 	ldw	r5,-100(fp)
   21808:	e13fe617 	ldw	r4,-104(fp)
   2180c:	002a9380 	call	2a938 <__sprint_r>
   21810:	10033b1e 	bne	r2,zero,22500 <___vfprintf_internal_r+0x1f70>
   21814:	e47fcb04 	addi	r17,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
   21818:	e0ffb417 	ldw	r3,-304(fp)
   2181c:	e0bfb617 	ldw	r2,-296(fp)
   21820:	18a1c83a 	sub	r16,r3,r2
   21824:	0400310e 	bge	zero,r16,218ec <___vfprintf_internal_r+0x135c>
   21828:	00001706 	br	21888 <___vfprintf_internal_r+0x12f8>
   2182c:	008000f4 	movhi	r2,3
   21830:	1087a784 	addi	r2,r2,7838
   21834:	88800015 	stw	r2,0(r17)
   21838:	00800404 	movi	r2,16
   2183c:	88800115 	stw	r2,4(r17)
   21840:	e0bfca17 	ldw	r2,-216(fp)
   21844:	10800404 	addi	r2,r2,16
   21848:	e0bfca15 	stw	r2,-216(fp)
   2184c:	8c400204 	addi	r17,r17,8
   21850:	e0bfc917 	ldw	r2,-220(fp)
   21854:	10800044 	addi	r2,r2,1
   21858:	e0bfc915 	stw	r2,-220(fp)
   2185c:	e0bfc917 	ldw	r2,-220(fp)
   21860:	10800210 	cmplti	r2,r2,8
   21864:	1000071e 	bne	r2,zero,21884 <___vfprintf_internal_r+0x12f4>
   21868:	e0bfc804 	addi	r2,fp,-224
   2186c:	100d883a 	mov	r6,r2
   21870:	e17fe717 	ldw	r5,-100(fp)
   21874:	e13fe617 	ldw	r4,-104(fp)
   21878:	002a9380 	call	2a938 <__sprint_r>
   2187c:	1003221e 	bne	r2,zero,22508 <___vfprintf_internal_r+0x1f78>
   21880:	e47fcb04 	addi	r17,fp,-212
   21884:	843ffc04 	addi	r16,r16,-16
   21888:	80800448 	cmpgei	r2,r16,17
   2188c:	103fe71e 	bne	r2,zero,2182c <__alt_data_end+0xfffe182c>
   21890:	008000f4 	movhi	r2,3
   21894:	1087a784 	addi	r2,r2,7838
   21898:	88800015 	stw	r2,0(r17)
   2189c:	8005883a 	mov	r2,r16
   218a0:	88800115 	stw	r2,4(r17)
   218a4:	e0bfca17 	ldw	r2,-216(fp)
   218a8:	8007883a 	mov	r3,r16
   218ac:	10c5883a 	add	r2,r2,r3
   218b0:	e0bfca15 	stw	r2,-216(fp)
   218b4:	8c400204 	addi	r17,r17,8
   218b8:	e0bfc917 	ldw	r2,-220(fp)
   218bc:	10800044 	addi	r2,r2,1
   218c0:	e0bfc915 	stw	r2,-220(fp)
   218c4:	e0bfc917 	ldw	r2,-220(fp)
   218c8:	10800210 	cmplti	r2,r2,8
   218cc:	1000071e 	bne	r2,zero,218ec <___vfprintf_internal_r+0x135c>
   218d0:	e0bfc804 	addi	r2,fp,-224
   218d4:	100d883a 	mov	r6,r2
   218d8:	e17fe717 	ldw	r5,-100(fp)
   218dc:	e13fe617 	ldw	r4,-104(fp)
   218e0:	002a9380 	call	2a938 <__sprint_r>
   218e4:	10030a1e 	bne	r2,zero,22510 <___vfprintf_internal_r+0x1f80>
   218e8:	e47fcb04 	addi	r17,fp,-212

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
   218ec:	9880400c 	andi	r2,r19,256
   218f0:	1000161e 	bne	r2,zero,2194c <___vfprintf_internal_r+0x13bc>
			PRINT (cp, size);
   218f4:	8c800015 	stw	r18,0(r17)
   218f8:	e0bfb617 	ldw	r2,-296(fp)
   218fc:	88800115 	stw	r2,4(r17)
   21900:	e0ffca17 	ldw	r3,-216(fp)
   21904:	e0bfb617 	ldw	r2,-296(fp)
   21908:	1885883a 	add	r2,r3,r2
   2190c:	e0bfca15 	stw	r2,-216(fp)
   21910:	8c400204 	addi	r17,r17,8
   21914:	e0bfc917 	ldw	r2,-220(fp)
   21918:	10800044 	addi	r2,r2,1
   2191c:	e0bfc915 	stw	r2,-220(fp)
   21920:	e0bfc917 	ldw	r2,-220(fp)
   21924:	10800210 	cmplti	r2,r2,8
   21928:	10028c1e 	bne	r2,zero,2235c <___vfprintf_internal_r+0x1dcc>
   2192c:	e0bfc804 	addi	r2,fp,-224
   21930:	100d883a 	mov	r6,r2
   21934:	e17fe717 	ldw	r5,-100(fp)
   21938:	e13fe617 	ldw	r4,-104(fp)
   2193c:	002a9380 	call	2a938 <__sprint_r>
   21940:	1002f51e 	bne	r2,zero,22518 <___vfprintf_internal_r+0x1f88>
   21944:	e47fcb04 	addi	r17,fp,-212
   21948:	00028406 	br	2235c <___vfprintf_internal_r+0x1dcc>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
   2194c:	a0801990 	cmplti	r2,r20,102
   21950:	1001d11e 	bne	r2,zero,22098 <___vfprintf_internal_r+0x1b08>
				if (_fpvalue == 0) {
   21954:	e0bfc217 	ldw	r2,-248(fp)
   21958:	e0ffc317 	ldw	r3,-244(fp)
   2195c:	000d883a 	mov	r6,zero
   21960:	000f883a 	mov	r7,zero
   21964:	1009883a 	mov	r4,r2
   21968:	180b883a 	mov	r5,r3
   2196c:	002e8c40 	call	2e8c4 <__eqdf2>
   21970:	1000661e 	bne	r2,zero,21b0c <___vfprintf_internal_r+0x157c>
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
   21974:	008000f4 	movhi	r2,3
   21978:	1087a304 	addi	r2,r2,7820
   2197c:	88800015 	stw	r2,0(r17)
   21980:	00800044 	movi	r2,1
   21984:	88800115 	stw	r2,4(r17)
   21988:	e0bfca17 	ldw	r2,-216(fp)
   2198c:	10800044 	addi	r2,r2,1
   21990:	e0bfca15 	stw	r2,-216(fp)
   21994:	8c400204 	addi	r17,r17,8
   21998:	e0bfc917 	ldw	r2,-220(fp)
   2199c:	10800044 	addi	r2,r2,1
   219a0:	e0bfc915 	stw	r2,-220(fp)
   219a4:	e0bfc917 	ldw	r2,-220(fp)
   219a8:	10800210 	cmplti	r2,r2,8
   219ac:	1000071e 	bne	r2,zero,219cc <___vfprintf_internal_r+0x143c>
   219b0:	e0bfc804 	addi	r2,fp,-224
   219b4:	100d883a 	mov	r6,r2
   219b8:	e17fe717 	ldw	r5,-100(fp)
   219bc:	e13fe617 	ldw	r4,-104(fp)
   219c0:	002a9380 	call	2a938 <__sprint_r>
   219c4:	1002d61e 	bne	r2,zero,22520 <___vfprintf_internal_r+0x1f90>
   219c8:	e47fcb04 	addi	r17,fp,-212
					if (expt < ndig || flags & ALT) {
   219cc:	e0ffc417 	ldw	r3,-240(fp)
   219d0:	e0bfc717 	ldw	r2,-228(fp)
   219d4:	18800216 	blt	r3,r2,219e0 <___vfprintf_internal_r+0x1450>
   219d8:	9880004c 	andi	r2,r19,1
   219dc:	10025f26 	beq	r2,zero,2235c <___vfprintf_internal_r+0x1dcc>
						PRINT (decimal_point, decp_len);
   219e0:	e0bfbb17 	ldw	r2,-276(fp)
   219e4:	88800015 	stw	r2,0(r17)
   219e8:	e0bfbc17 	ldw	r2,-272(fp)
   219ec:	88800115 	stw	r2,4(r17)
   219f0:	e0ffca17 	ldw	r3,-216(fp)
   219f4:	e0bfbc17 	ldw	r2,-272(fp)
   219f8:	1885883a 	add	r2,r3,r2
   219fc:	e0bfca15 	stw	r2,-216(fp)
   21a00:	8c400204 	addi	r17,r17,8
   21a04:	e0bfc917 	ldw	r2,-220(fp)
   21a08:	10800044 	addi	r2,r2,1
   21a0c:	e0bfc915 	stw	r2,-220(fp)
   21a10:	e0bfc917 	ldw	r2,-220(fp)
   21a14:	10800210 	cmplti	r2,r2,8
   21a18:	1000071e 	bne	r2,zero,21a38 <___vfprintf_internal_r+0x14a8>
   21a1c:	e0bfc804 	addi	r2,fp,-224
   21a20:	100d883a 	mov	r6,r2
   21a24:	e17fe717 	ldw	r5,-100(fp)
   21a28:	e13fe617 	ldw	r4,-104(fp)
   21a2c:	002a9380 	call	2a938 <__sprint_r>
   21a30:	1002bd1e 	bne	r2,zero,22528 <___vfprintf_internal_r+0x1f98>
   21a34:	e47fcb04 	addi	r17,fp,-212
						PAD (ndig - 1, zeroes);
   21a38:	e0bfc717 	ldw	r2,-228(fp)
   21a3c:	143fffc4 	addi	r16,r2,-1
   21a40:	0402460e 	bge	zero,r16,2235c <___vfprintf_internal_r+0x1dcc>
   21a44:	00001706 	br	21aa4 <___vfprintf_internal_r+0x1514>
   21a48:	008000f4 	movhi	r2,3
   21a4c:	1087a784 	addi	r2,r2,7838
   21a50:	88800015 	stw	r2,0(r17)
   21a54:	00800404 	movi	r2,16
   21a58:	88800115 	stw	r2,4(r17)
   21a5c:	e0bfca17 	ldw	r2,-216(fp)
   21a60:	10800404 	addi	r2,r2,16
   21a64:	e0bfca15 	stw	r2,-216(fp)
   21a68:	8c400204 	addi	r17,r17,8
   21a6c:	e0bfc917 	ldw	r2,-220(fp)
   21a70:	10800044 	addi	r2,r2,1
   21a74:	e0bfc915 	stw	r2,-220(fp)
   21a78:	e0bfc917 	ldw	r2,-220(fp)
   21a7c:	10800210 	cmplti	r2,r2,8
   21a80:	1000071e 	bne	r2,zero,21aa0 <___vfprintf_internal_r+0x1510>
   21a84:	e0bfc804 	addi	r2,fp,-224
   21a88:	100d883a 	mov	r6,r2
   21a8c:	e17fe717 	ldw	r5,-100(fp)
   21a90:	e13fe617 	ldw	r4,-104(fp)
   21a94:	002a9380 	call	2a938 <__sprint_r>
   21a98:	1002a51e 	bne	r2,zero,22530 <___vfprintf_internal_r+0x1fa0>
   21a9c:	e47fcb04 	addi	r17,fp,-212
   21aa0:	843ffc04 	addi	r16,r16,-16
   21aa4:	80800448 	cmpgei	r2,r16,17
   21aa8:	103fe71e 	bne	r2,zero,21a48 <__alt_data_end+0xfffe1a48>
   21aac:	008000f4 	movhi	r2,3
   21ab0:	1087a784 	addi	r2,r2,7838
   21ab4:	88800015 	stw	r2,0(r17)
   21ab8:	8005883a 	mov	r2,r16
   21abc:	88800115 	stw	r2,4(r17)
   21ac0:	e0bfca17 	ldw	r2,-216(fp)
   21ac4:	8007883a 	mov	r3,r16
   21ac8:	10c5883a 	add	r2,r2,r3
   21acc:	e0bfca15 	stw	r2,-216(fp)
   21ad0:	8c400204 	addi	r17,r17,8
   21ad4:	e0bfc917 	ldw	r2,-220(fp)
   21ad8:	10800044 	addi	r2,r2,1
   21adc:	e0bfc915 	stw	r2,-220(fp)
   21ae0:	e0bfc917 	ldw	r2,-220(fp)
   21ae4:	10800210 	cmplti	r2,r2,8
   21ae8:	10021c1e 	bne	r2,zero,2235c <___vfprintf_internal_r+0x1dcc>
   21aec:	e0bfc804 	addi	r2,fp,-224
   21af0:	100d883a 	mov	r6,r2
   21af4:	e17fe717 	ldw	r5,-100(fp)
   21af8:	e13fe617 	ldw	r4,-104(fp)
   21afc:	002a9380 	call	2a938 <__sprint_r>
   21b00:	10028d1e 	bne	r2,zero,22538 <___vfprintf_internal_r+0x1fa8>
   21b04:	e47fcb04 	addi	r17,fp,-212
   21b08:	00021406 	br	2235c <___vfprintf_internal_r+0x1dcc>
					}
				} else if (expt <= 0) {
   21b0c:	e0bfc417 	ldw	r2,-240(fp)
   21b10:	00807c16 	blt	zero,r2,21d04 <___vfprintf_internal_r+0x1774>
					PRINT ("0", 1);
   21b14:	008000f4 	movhi	r2,3
   21b18:	1087a304 	addi	r2,r2,7820
   21b1c:	88800015 	stw	r2,0(r17)
   21b20:	00800044 	movi	r2,1
   21b24:	88800115 	stw	r2,4(r17)
   21b28:	e0bfca17 	ldw	r2,-216(fp)
   21b2c:	10800044 	addi	r2,r2,1
   21b30:	e0bfca15 	stw	r2,-216(fp)
   21b34:	8c400204 	addi	r17,r17,8
   21b38:	e0bfc917 	ldw	r2,-220(fp)
   21b3c:	10800044 	addi	r2,r2,1
   21b40:	e0bfc915 	stw	r2,-220(fp)
   21b44:	e0bfc917 	ldw	r2,-220(fp)
   21b48:	10800210 	cmplti	r2,r2,8
   21b4c:	1000071e 	bne	r2,zero,21b6c <___vfprintf_internal_r+0x15dc>
   21b50:	e0bfc804 	addi	r2,fp,-224
   21b54:	100d883a 	mov	r6,r2
   21b58:	e17fe717 	ldw	r5,-100(fp)
   21b5c:	e13fe617 	ldw	r4,-104(fp)
   21b60:	002a9380 	call	2a938 <__sprint_r>
   21b64:	1002761e 	bne	r2,zero,22540 <___vfprintf_internal_r+0x1fb0>
   21b68:	e47fcb04 	addi	r17,fp,-212
					if (expt || ndig || flags & ALT) {
   21b6c:	e0bfc417 	ldw	r2,-240(fp)
   21b70:	1000041e 	bne	r2,zero,21b84 <___vfprintf_internal_r+0x15f4>
   21b74:	e0bfc717 	ldw	r2,-228(fp)
   21b78:	1000021e 	bne	r2,zero,21b84 <___vfprintf_internal_r+0x15f4>
   21b7c:	9880004c 	andi	r2,r19,1
   21b80:	1001f626 	beq	r2,zero,2235c <___vfprintf_internal_r+0x1dcc>
						PRINT (decimal_point, decp_len);
   21b84:	e0bfbb17 	ldw	r2,-276(fp)
   21b88:	88800015 	stw	r2,0(r17)
   21b8c:	e0bfbc17 	ldw	r2,-272(fp)
   21b90:	88800115 	stw	r2,4(r17)
   21b94:	e0ffca17 	ldw	r3,-216(fp)
   21b98:	e0bfbc17 	ldw	r2,-272(fp)
   21b9c:	1885883a 	add	r2,r3,r2
   21ba0:	e0bfca15 	stw	r2,-216(fp)
   21ba4:	8c400204 	addi	r17,r17,8
   21ba8:	e0bfc917 	ldw	r2,-220(fp)
   21bac:	10800044 	addi	r2,r2,1
   21bb0:	e0bfc915 	stw	r2,-220(fp)
   21bb4:	e0bfc917 	ldw	r2,-220(fp)
   21bb8:	10800210 	cmplti	r2,r2,8
   21bbc:	1000071e 	bne	r2,zero,21bdc <___vfprintf_internal_r+0x164c>
   21bc0:	e0bfc804 	addi	r2,fp,-224
   21bc4:	100d883a 	mov	r6,r2
   21bc8:	e17fe717 	ldw	r5,-100(fp)
   21bcc:	e13fe617 	ldw	r4,-104(fp)
   21bd0:	002a9380 	call	2a938 <__sprint_r>
   21bd4:	10025c1e 	bne	r2,zero,22548 <___vfprintf_internal_r+0x1fb8>
   21bd8:	e47fcb04 	addi	r17,fp,-212
						PAD (-expt, zeroes);
   21bdc:	e0bfc417 	ldw	r2,-240(fp)
   21be0:	00a1c83a 	sub	r16,zero,r2
   21be4:	0400310e 	bge	zero,r16,21cac <___vfprintf_internal_r+0x171c>
   21be8:	00001706 	br	21c48 <___vfprintf_internal_r+0x16b8>
   21bec:	008000f4 	movhi	r2,3
   21bf0:	1087a784 	addi	r2,r2,7838
   21bf4:	88800015 	stw	r2,0(r17)
   21bf8:	00800404 	movi	r2,16
   21bfc:	88800115 	stw	r2,4(r17)
   21c00:	e0bfca17 	ldw	r2,-216(fp)
   21c04:	10800404 	addi	r2,r2,16
   21c08:	e0bfca15 	stw	r2,-216(fp)
   21c0c:	8c400204 	addi	r17,r17,8
   21c10:	e0bfc917 	ldw	r2,-220(fp)
   21c14:	10800044 	addi	r2,r2,1
   21c18:	e0bfc915 	stw	r2,-220(fp)
   21c1c:	e0bfc917 	ldw	r2,-220(fp)
   21c20:	10800210 	cmplti	r2,r2,8
   21c24:	1000071e 	bne	r2,zero,21c44 <___vfprintf_internal_r+0x16b4>
   21c28:	e0bfc804 	addi	r2,fp,-224
   21c2c:	100d883a 	mov	r6,r2
   21c30:	e17fe717 	ldw	r5,-100(fp)
   21c34:	e13fe617 	ldw	r4,-104(fp)
   21c38:	002a9380 	call	2a938 <__sprint_r>
   21c3c:	1002441e 	bne	r2,zero,22550 <___vfprintf_internal_r+0x1fc0>
   21c40:	e47fcb04 	addi	r17,fp,-212
   21c44:	843ffc04 	addi	r16,r16,-16
   21c48:	80800448 	cmpgei	r2,r16,17
   21c4c:	103fe71e 	bne	r2,zero,21bec <__alt_data_end+0xfffe1bec>
   21c50:	008000f4 	movhi	r2,3
   21c54:	1087a784 	addi	r2,r2,7838
   21c58:	88800015 	stw	r2,0(r17)
   21c5c:	8005883a 	mov	r2,r16
   21c60:	88800115 	stw	r2,4(r17)
   21c64:	e0bfca17 	ldw	r2,-216(fp)
   21c68:	8007883a 	mov	r3,r16
   21c6c:	10c5883a 	add	r2,r2,r3
   21c70:	e0bfca15 	stw	r2,-216(fp)
   21c74:	8c400204 	addi	r17,r17,8
   21c78:	e0bfc917 	ldw	r2,-220(fp)
   21c7c:	10800044 	addi	r2,r2,1
   21c80:	e0bfc915 	stw	r2,-220(fp)
   21c84:	e0bfc917 	ldw	r2,-220(fp)
   21c88:	10800210 	cmplti	r2,r2,8
   21c8c:	1000071e 	bne	r2,zero,21cac <___vfprintf_internal_r+0x171c>
   21c90:	e0bfc804 	addi	r2,fp,-224
   21c94:	100d883a 	mov	r6,r2
   21c98:	e17fe717 	ldw	r5,-100(fp)
   21c9c:	e13fe617 	ldw	r4,-104(fp)
   21ca0:	002a9380 	call	2a938 <__sprint_r>
   21ca4:	10022c1e 	bne	r2,zero,22558 <___vfprintf_internal_r+0x1fc8>
   21ca8:	e47fcb04 	addi	r17,fp,-212
						PRINT (cp, ndig);
   21cac:	8c800015 	stw	r18,0(r17)
   21cb0:	e0bfc717 	ldw	r2,-228(fp)
   21cb4:	88800115 	stw	r2,4(r17)
   21cb8:	e0bfca17 	ldw	r2,-216(fp)
   21cbc:	e0ffc717 	ldw	r3,-228(fp)
   21cc0:	10c5883a 	add	r2,r2,r3
   21cc4:	e0bfca15 	stw	r2,-216(fp)
   21cc8:	8c400204 	addi	r17,r17,8
   21ccc:	e0bfc917 	ldw	r2,-220(fp)
   21cd0:	10800044 	addi	r2,r2,1
   21cd4:	e0bfc915 	stw	r2,-220(fp)
   21cd8:	e0bfc917 	ldw	r2,-220(fp)
   21cdc:	10800210 	cmplti	r2,r2,8
   21ce0:	10019e1e 	bne	r2,zero,2235c <___vfprintf_internal_r+0x1dcc>
   21ce4:	e0bfc804 	addi	r2,fp,-224
   21ce8:	100d883a 	mov	r6,r2
   21cec:	e17fe717 	ldw	r5,-100(fp)
   21cf0:	e13fe617 	ldw	r4,-104(fp)
   21cf4:	002a9380 	call	2a938 <__sprint_r>
   21cf8:	1002191e 	bne	r2,zero,22560 <___vfprintf_internal_r+0x1fd0>
   21cfc:	e47fcb04 	addi	r17,fp,-212
   21d00:	00019606 	br	2235c <___vfprintf_internal_r+0x1dcc>
					}
				} else {
					char *convbuf = cp;
   21d04:	e4bfc015 	stw	r18,-256(fp)
					PRINTANDPAD(cp, convbuf + ndig,
   21d08:	e0bfc717 	ldw	r2,-228(fp)
   21d0c:	1007883a 	mov	r3,r2
   21d10:	e0bfc017 	ldw	r2,-256(fp)
   21d14:	10c5883a 	add	r2,r2,r3
   21d18:	1007883a 	mov	r3,r2
   21d1c:	9005883a 	mov	r2,r18
   21d20:	1885c83a 	sub	r2,r3,r2
   21d24:	e0bfb915 	stw	r2,-284(fp)
   21d28:	e0bfb917 	ldw	r2,-284(fp)
   21d2c:	e0ffb017 	ldw	r3,-320(fp)
   21d30:	1880020e 	bge	r3,r2,21d3c <___vfprintf_internal_r+0x17ac>
   21d34:	e0bfb017 	ldw	r2,-320(fp)
   21d38:	e0bfb915 	stw	r2,-284(fp)
   21d3c:	e0bfb917 	ldw	r2,-284(fp)
   21d40:	0080150e 	bge	zero,r2,21d98 <___vfprintf_internal_r+0x1808>
   21d44:	8c800015 	stw	r18,0(r17)
   21d48:	e0bfb917 	ldw	r2,-284(fp)
   21d4c:	88800115 	stw	r2,4(r17)
   21d50:	e0ffca17 	ldw	r3,-216(fp)
   21d54:	e0bfb917 	ldw	r2,-284(fp)
   21d58:	1885883a 	add	r2,r3,r2
   21d5c:	e0bfca15 	stw	r2,-216(fp)
   21d60:	8c400204 	addi	r17,r17,8
   21d64:	e0bfc917 	ldw	r2,-220(fp)
   21d68:	10800044 	addi	r2,r2,1
   21d6c:	e0bfc915 	stw	r2,-220(fp)
   21d70:	e0bfc917 	ldw	r2,-220(fp)
   21d74:	10800210 	cmplti	r2,r2,8
   21d78:	1000071e 	bne	r2,zero,21d98 <___vfprintf_internal_r+0x1808>
   21d7c:	e0bfc804 	addi	r2,fp,-224
   21d80:	100d883a 	mov	r6,r2
   21d84:	e17fe717 	ldw	r5,-100(fp)
   21d88:	e13fe617 	ldw	r4,-104(fp)
   21d8c:	002a9380 	call	2a938 <__sprint_r>
   21d90:	1001f51e 	bne	r2,zero,22568 <___vfprintf_internal_r+0x1fd8>
   21d94:	e47fcb04 	addi	r17,fp,-212
   21d98:	e0bfb917 	ldw	r2,-284(fp)
   21d9c:	1000010e 	bge	r2,zero,21da4 <___vfprintf_internal_r+0x1814>
   21da0:	0005883a 	mov	r2,zero
   21da4:	e0ffb017 	ldw	r3,-320(fp)
   21da8:	1885c83a 	sub	r2,r3,r2
   21dac:	e0bfb915 	stw	r2,-284(fp)
   21db0:	e0bfb917 	ldw	r2,-284(fp)
   21db4:	0080340e 	bge	zero,r2,21e88 <___vfprintf_internal_r+0x18f8>
   21db8:	00001906 	br	21e20 <___vfprintf_internal_r+0x1890>
   21dbc:	008000f4 	movhi	r2,3
   21dc0:	1087a784 	addi	r2,r2,7838
   21dc4:	88800015 	stw	r2,0(r17)
   21dc8:	00800404 	movi	r2,16
   21dcc:	88800115 	stw	r2,4(r17)
   21dd0:	e0bfca17 	ldw	r2,-216(fp)
   21dd4:	10800404 	addi	r2,r2,16
   21dd8:	e0bfca15 	stw	r2,-216(fp)
   21ddc:	8c400204 	addi	r17,r17,8
   21de0:	e0bfc917 	ldw	r2,-220(fp)
   21de4:	10800044 	addi	r2,r2,1
   21de8:	e0bfc915 	stw	r2,-220(fp)
   21dec:	e0bfc917 	ldw	r2,-220(fp)
   21df0:	10800210 	cmplti	r2,r2,8
   21df4:	1000071e 	bne	r2,zero,21e14 <___vfprintf_internal_r+0x1884>
   21df8:	e0bfc804 	addi	r2,fp,-224
   21dfc:	100d883a 	mov	r6,r2
   21e00:	e17fe717 	ldw	r5,-100(fp)
   21e04:	e13fe617 	ldw	r4,-104(fp)
   21e08:	002a9380 	call	2a938 <__sprint_r>
   21e0c:	1001d81e 	bne	r2,zero,22570 <___vfprintf_internal_r+0x1fe0>
   21e10:	e47fcb04 	addi	r17,fp,-212
   21e14:	e0bfb917 	ldw	r2,-284(fp)
   21e18:	10bffc04 	addi	r2,r2,-16
   21e1c:	e0bfb915 	stw	r2,-284(fp)
   21e20:	e0bfb917 	ldw	r2,-284(fp)
   21e24:	10800448 	cmpgei	r2,r2,17
   21e28:	103fe41e 	bne	r2,zero,21dbc <__alt_data_end+0xfffe1dbc>
   21e2c:	008000f4 	movhi	r2,3
   21e30:	1087a784 	addi	r2,r2,7838
   21e34:	88800015 	stw	r2,0(r17)
   21e38:	e0bfb917 	ldw	r2,-284(fp)
   21e3c:	88800115 	stw	r2,4(r17)
   21e40:	e0ffca17 	ldw	r3,-216(fp)
   21e44:	e0bfb917 	ldw	r2,-284(fp)
   21e48:	1885883a 	add	r2,r3,r2
   21e4c:	e0bfca15 	stw	r2,-216(fp)
   21e50:	8c400204 	addi	r17,r17,8
   21e54:	e0bfc917 	ldw	r2,-220(fp)
   21e58:	10800044 	addi	r2,r2,1
   21e5c:	e0bfc915 	stw	r2,-220(fp)
   21e60:	e0bfc917 	ldw	r2,-220(fp)
   21e64:	10800210 	cmplti	r2,r2,8
   21e68:	1000071e 	bne	r2,zero,21e88 <___vfprintf_internal_r+0x18f8>
   21e6c:	e0bfc804 	addi	r2,fp,-224
   21e70:	100d883a 	mov	r6,r2
   21e74:	e17fe717 	ldw	r5,-100(fp)
   21e78:	e13fe617 	ldw	r4,-104(fp)
   21e7c:	002a9380 	call	2a938 <__sprint_r>
   21e80:	1001bd1e 	bne	r2,zero,22578 <___vfprintf_internal_r+0x1fe8>
   21e84:	e47fcb04 	addi	r17,fp,-212
						    lead, zeroes);
					cp += lead;
   21e88:	e0bfb017 	ldw	r2,-320(fp)
   21e8c:	90a5883a 	add	r18,r18,r2
					    }
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
   21e90:	e0ffc417 	ldw	r3,-240(fp)
   21e94:	e0bfc717 	ldw	r2,-228(fp)
   21e98:	18800216 	blt	r3,r2,21ea4 <___vfprintf_internal_r+0x1914>
   21e9c:	9880004c 	andi	r2,r19,1
   21ea0:	10001626 	beq	r2,zero,21efc <___vfprintf_internal_r+0x196c>
					    PRINT (decimal_point, decp_len);
   21ea4:	e0bfbb17 	ldw	r2,-276(fp)
   21ea8:	88800015 	stw	r2,0(r17)
   21eac:	e0bfbc17 	ldw	r2,-272(fp)
   21eb0:	88800115 	stw	r2,4(r17)
   21eb4:	e0ffca17 	ldw	r3,-216(fp)
   21eb8:	e0bfbc17 	ldw	r2,-272(fp)
   21ebc:	1885883a 	add	r2,r3,r2
   21ec0:	e0bfca15 	stw	r2,-216(fp)
   21ec4:	8c400204 	addi	r17,r17,8
   21ec8:	e0bfc917 	ldw	r2,-220(fp)
   21ecc:	10800044 	addi	r2,r2,1
   21ed0:	e0bfc915 	stw	r2,-220(fp)
   21ed4:	e0bfc917 	ldw	r2,-220(fp)
   21ed8:	10800210 	cmplti	r2,r2,8
   21edc:	1000071e 	bne	r2,zero,21efc <___vfprintf_internal_r+0x196c>
   21ee0:	e0bfc804 	addi	r2,fp,-224
   21ee4:	100d883a 	mov	r6,r2
   21ee8:	e17fe717 	ldw	r5,-100(fp)
   21eec:	e13fe617 	ldw	r4,-104(fp)
   21ef0:	002a9380 	call	2a938 <__sprint_r>
   21ef4:	1001a21e 	bne	r2,zero,22580 <___vfprintf_internal_r+0x1ff0>
   21ef8:	e47fcb04 	addi	r17,fp,-212
					PRINTANDPAD (cp, convbuf + ndig,
   21efc:	e0bfc717 	ldw	r2,-228(fp)
   21f00:	1007883a 	mov	r3,r2
   21f04:	e0bfc017 	ldw	r2,-256(fp)
   21f08:	10c5883a 	add	r2,r2,r3
   21f0c:	1007883a 	mov	r3,r2
   21f10:	9005883a 	mov	r2,r18
   21f14:	1885c83a 	sub	r2,r3,r2
   21f18:	e0bfba15 	stw	r2,-280(fp)
   21f1c:	e0ffc717 	ldw	r3,-228(fp)
   21f20:	e0bfc417 	ldw	r2,-240(fp)
   21f24:	1887c83a 	sub	r3,r3,r2
   21f28:	e0bfba17 	ldw	r2,-280(fp)
   21f2c:	1880040e 	bge	r3,r2,21f40 <___vfprintf_internal_r+0x19b0>
   21f30:	e0ffc717 	ldw	r3,-228(fp)
   21f34:	e0bfc417 	ldw	r2,-240(fp)
   21f38:	1885c83a 	sub	r2,r3,r2
   21f3c:	e0bfba15 	stw	r2,-280(fp)
   21f40:	e0bfba17 	ldw	r2,-280(fp)
   21f44:	0080150e 	bge	zero,r2,21f9c <___vfprintf_internal_r+0x1a0c>
   21f48:	8c800015 	stw	r18,0(r17)
   21f4c:	e0bfba17 	ldw	r2,-280(fp)
   21f50:	88800115 	stw	r2,4(r17)
   21f54:	e0ffca17 	ldw	r3,-216(fp)
   21f58:	e0bfba17 	ldw	r2,-280(fp)
   21f5c:	1885883a 	add	r2,r3,r2
   21f60:	e0bfca15 	stw	r2,-216(fp)
   21f64:	8c400204 	addi	r17,r17,8
   21f68:	e0bfc917 	ldw	r2,-220(fp)
   21f6c:	10800044 	addi	r2,r2,1
   21f70:	e0bfc915 	stw	r2,-220(fp)
   21f74:	e0bfc917 	ldw	r2,-220(fp)
   21f78:	10800210 	cmplti	r2,r2,8
   21f7c:	1000071e 	bne	r2,zero,21f9c <___vfprintf_internal_r+0x1a0c>
   21f80:	e0bfc804 	addi	r2,fp,-224
   21f84:	100d883a 	mov	r6,r2
   21f88:	e17fe717 	ldw	r5,-100(fp)
   21f8c:	e13fe617 	ldw	r4,-104(fp)
   21f90:	002a9380 	call	2a938 <__sprint_r>
   21f94:	10017c1e 	bne	r2,zero,22588 <___vfprintf_internal_r+0x1ff8>
   21f98:	e47fcb04 	addi	r17,fp,-212
   21f9c:	e0ffc717 	ldw	r3,-228(fp)
   21fa0:	e0bfc417 	ldw	r2,-240(fp)
   21fa4:	1887c83a 	sub	r3,r3,r2
   21fa8:	e0bfba17 	ldw	r2,-280(fp)
   21fac:	1000010e 	bge	r2,zero,21fb4 <___vfprintf_internal_r+0x1a24>
   21fb0:	0005883a 	mov	r2,zero
   21fb4:	1885c83a 	sub	r2,r3,r2
   21fb8:	e0bfba15 	stw	r2,-280(fp)
   21fbc:	e0bfba17 	ldw	r2,-280(fp)
   21fc0:	0080e60e 	bge	zero,r2,2235c <___vfprintf_internal_r+0x1dcc>
   21fc4:	00001906 	br	2202c <___vfprintf_internal_r+0x1a9c>
   21fc8:	008000f4 	movhi	r2,3
   21fcc:	1087a784 	addi	r2,r2,7838
   21fd0:	88800015 	stw	r2,0(r17)
   21fd4:	00800404 	movi	r2,16
   21fd8:	88800115 	stw	r2,4(r17)
   21fdc:	e0bfca17 	ldw	r2,-216(fp)
   21fe0:	10800404 	addi	r2,r2,16
   21fe4:	e0bfca15 	stw	r2,-216(fp)
   21fe8:	8c400204 	addi	r17,r17,8
   21fec:	e0bfc917 	ldw	r2,-220(fp)
   21ff0:	10800044 	addi	r2,r2,1
   21ff4:	e0bfc915 	stw	r2,-220(fp)
   21ff8:	e0bfc917 	ldw	r2,-220(fp)
   21ffc:	10800210 	cmplti	r2,r2,8
   22000:	1000071e 	bne	r2,zero,22020 <___vfprintf_internal_r+0x1a90>
   22004:	e0bfc804 	addi	r2,fp,-224
   22008:	100d883a 	mov	r6,r2
   2200c:	e17fe717 	ldw	r5,-100(fp)
   22010:	e13fe617 	ldw	r4,-104(fp)
   22014:	002a9380 	call	2a938 <__sprint_r>
   22018:	10015d1e 	bne	r2,zero,22590 <___vfprintf_internal_r+0x2000>
   2201c:	e47fcb04 	addi	r17,fp,-212
   22020:	e0bfba17 	ldw	r2,-280(fp)
   22024:	10bffc04 	addi	r2,r2,-16
   22028:	e0bfba15 	stw	r2,-280(fp)
   2202c:	e0bfba17 	ldw	r2,-280(fp)
   22030:	10800448 	cmpgei	r2,r2,17
   22034:	103fe41e 	bne	r2,zero,21fc8 <__alt_data_end+0xfffe1fc8>
   22038:	008000f4 	movhi	r2,3
   2203c:	1087a784 	addi	r2,r2,7838
   22040:	88800015 	stw	r2,0(r17)
   22044:	e0bfba17 	ldw	r2,-280(fp)
   22048:	88800115 	stw	r2,4(r17)
   2204c:	e0ffca17 	ldw	r3,-216(fp)
   22050:	e0bfba17 	ldw	r2,-280(fp)
   22054:	1885883a 	add	r2,r3,r2
   22058:	e0bfca15 	stw	r2,-216(fp)
   2205c:	8c400204 	addi	r17,r17,8
   22060:	e0bfc917 	ldw	r2,-220(fp)
   22064:	10800044 	addi	r2,r2,1
   22068:	e0bfc915 	stw	r2,-220(fp)
   2206c:	e0bfc917 	ldw	r2,-220(fp)
   22070:	10800210 	cmplti	r2,r2,8
   22074:	1000b91e 	bne	r2,zero,2235c <___vfprintf_internal_r+0x1dcc>
   22078:	e0bfc804 	addi	r2,fp,-224
   2207c:	100d883a 	mov	r6,r2
   22080:	e17fe717 	ldw	r5,-100(fp)
   22084:	e13fe617 	ldw	r4,-104(fp)
   22088:	002a9380 	call	2a938 <__sprint_r>
   2208c:	1001421e 	bne	r2,zero,22598 <___vfprintf_internal_r+0x2008>
   22090:	e47fcb04 	addi	r17,fp,-212
   22094:	0000b106 	br	2235c <___vfprintf_internal_r+0x1dcc>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
   22098:	e0bfc717 	ldw	r2,-228(fp)
   2209c:	10800088 	cmpgei	r2,r2,2
   220a0:	1000021e 	bne	r2,zero,220ac <___vfprintf_internal_r+0x1b1c>
   220a4:	9880004c 	andi	r2,r19,1
   220a8:	10008026 	beq	r2,zero,222ac <___vfprintf_internal_r+0x1d1c>
					PRINT (cp, 1);
   220ac:	8c800015 	stw	r18,0(r17)
   220b0:	00800044 	movi	r2,1
   220b4:	88800115 	stw	r2,4(r17)
   220b8:	e0bfca17 	ldw	r2,-216(fp)
   220bc:	10800044 	addi	r2,r2,1
   220c0:	e0bfca15 	stw	r2,-216(fp)
   220c4:	8c400204 	addi	r17,r17,8
   220c8:	e0bfc917 	ldw	r2,-220(fp)
   220cc:	10800044 	addi	r2,r2,1
   220d0:	e0bfc915 	stw	r2,-220(fp)
   220d4:	e0bfc917 	ldw	r2,-220(fp)
   220d8:	10800210 	cmplti	r2,r2,8
   220dc:	1000071e 	bne	r2,zero,220fc <___vfprintf_internal_r+0x1b6c>
   220e0:	e0bfc804 	addi	r2,fp,-224
   220e4:	100d883a 	mov	r6,r2
   220e8:	e17fe717 	ldw	r5,-100(fp)
   220ec:	e13fe617 	ldw	r4,-104(fp)
   220f0:	002a9380 	call	2a938 <__sprint_r>
   220f4:	10012a1e 	bne	r2,zero,225a0 <___vfprintf_internal_r+0x2010>
   220f8:	e47fcb04 	addi	r17,fp,-212
					cp++;
   220fc:	94800044 	addi	r18,r18,1
					PRINT (decimal_point, decp_len);
   22100:	e0bfbb17 	ldw	r2,-276(fp)
   22104:	88800015 	stw	r2,0(r17)
   22108:	e0bfbc17 	ldw	r2,-272(fp)
   2210c:	88800115 	stw	r2,4(r17)
   22110:	e0ffca17 	ldw	r3,-216(fp)
   22114:	e0bfbc17 	ldw	r2,-272(fp)
   22118:	1885883a 	add	r2,r3,r2
   2211c:	e0bfca15 	stw	r2,-216(fp)
   22120:	8c400204 	addi	r17,r17,8
   22124:	e0bfc917 	ldw	r2,-220(fp)
   22128:	10800044 	addi	r2,r2,1
   2212c:	e0bfc915 	stw	r2,-220(fp)
   22130:	e0bfc917 	ldw	r2,-220(fp)
   22134:	10800210 	cmplti	r2,r2,8
   22138:	1000071e 	bne	r2,zero,22158 <___vfprintf_internal_r+0x1bc8>
   2213c:	e0bfc804 	addi	r2,fp,-224
   22140:	100d883a 	mov	r6,r2
   22144:	e17fe717 	ldw	r5,-100(fp)
   22148:	e13fe617 	ldw	r4,-104(fp)
   2214c:	002a9380 	call	2a938 <__sprint_r>
   22150:	1001151e 	bne	r2,zero,225a8 <___vfprintf_internal_r+0x2018>
   22154:	e47fcb04 	addi	r17,fp,-212
					if (_fpvalue) {
   22158:	e0bfc217 	ldw	r2,-248(fp)
   2215c:	e0ffc317 	ldw	r3,-244(fp)
   22160:	000d883a 	mov	r6,zero
   22164:	000f883a 	mov	r7,zero
   22168:	1009883a 	mov	r4,r2
   2216c:	180b883a 	mov	r5,r3
   22170:	002e8c40 	call	2e8c4 <__eqdf2>
   22174:	10001826 	beq	r2,zero,221d8 <___vfprintf_internal_r+0x1c48>
						PRINT (cp, ndig - 1);
   22178:	8c800015 	stw	r18,0(r17)
   2217c:	e0bfc717 	ldw	r2,-228(fp)
   22180:	10bfffc4 	addi	r2,r2,-1
   22184:	88800115 	stw	r2,4(r17)
   22188:	e0bfca17 	ldw	r2,-216(fp)
   2218c:	e0ffc717 	ldw	r3,-228(fp)
   22190:	10c5883a 	add	r2,r2,r3
   22194:	10bfffc4 	addi	r2,r2,-1
   22198:	e0bfca15 	stw	r2,-216(fp)
   2219c:	8c400204 	addi	r17,r17,8
   221a0:	e0bfc917 	ldw	r2,-220(fp)
   221a4:	10800044 	addi	r2,r2,1
   221a8:	e0bfc915 	stw	r2,-220(fp)
   221ac:	e0bfc917 	ldw	r2,-220(fp)
   221b0:	10800210 	cmplti	r2,r2,8
   221b4:	1000521e 	bne	r2,zero,22300 <___vfprintf_internal_r+0x1d70>
   221b8:	e0bfc804 	addi	r2,fp,-224
   221bc:	100d883a 	mov	r6,r2
   221c0:	e17fe717 	ldw	r5,-100(fp)
   221c4:	e13fe617 	ldw	r4,-104(fp)
   221c8:	002a9380 	call	2a938 <__sprint_r>
   221cc:	1000f81e 	bne	r2,zero,225b0 <___vfprintf_internal_r+0x2020>
   221d0:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
   221d4:	00004a06 	br	22300 <___vfprintf_internal_r+0x1d70>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
   221d8:	e0bfc717 	ldw	r2,-228(fp)
   221dc:	143fffc4 	addi	r16,r2,-1
   221e0:	0400470e 	bge	zero,r16,22300 <___vfprintf_internal_r+0x1d70>
   221e4:	00001706 	br	22244 <___vfprintf_internal_r+0x1cb4>
   221e8:	008000f4 	movhi	r2,3
   221ec:	1087a784 	addi	r2,r2,7838
   221f0:	88800015 	stw	r2,0(r17)
   221f4:	00800404 	movi	r2,16
   221f8:	88800115 	stw	r2,4(r17)
   221fc:	e0bfca17 	ldw	r2,-216(fp)
   22200:	10800404 	addi	r2,r2,16
   22204:	e0bfca15 	stw	r2,-216(fp)
   22208:	8c400204 	addi	r17,r17,8
   2220c:	e0bfc917 	ldw	r2,-220(fp)
   22210:	10800044 	addi	r2,r2,1
   22214:	e0bfc915 	stw	r2,-220(fp)
   22218:	e0bfc917 	ldw	r2,-220(fp)
   2221c:	10800210 	cmplti	r2,r2,8
   22220:	1000071e 	bne	r2,zero,22240 <___vfprintf_internal_r+0x1cb0>
   22224:	e0bfc804 	addi	r2,fp,-224
   22228:	100d883a 	mov	r6,r2
   2222c:	e17fe717 	ldw	r5,-100(fp)
   22230:	e13fe617 	ldw	r4,-104(fp)
   22234:	002a9380 	call	2a938 <__sprint_r>
   22238:	1000df1e 	bne	r2,zero,225b8 <___vfprintf_internal_r+0x2028>
   2223c:	e47fcb04 	addi	r17,fp,-212
   22240:	843ffc04 	addi	r16,r16,-16
   22244:	80800448 	cmpgei	r2,r16,17
   22248:	103fe71e 	bne	r2,zero,221e8 <__alt_data_end+0xfffe21e8>
   2224c:	008000f4 	movhi	r2,3
   22250:	1087a784 	addi	r2,r2,7838
   22254:	88800015 	stw	r2,0(r17)
   22258:	8005883a 	mov	r2,r16
   2225c:	88800115 	stw	r2,4(r17)
   22260:	e0bfca17 	ldw	r2,-216(fp)
   22264:	8007883a 	mov	r3,r16
   22268:	10c5883a 	add	r2,r2,r3
   2226c:	e0bfca15 	stw	r2,-216(fp)
   22270:	8c400204 	addi	r17,r17,8
   22274:	e0bfc917 	ldw	r2,-220(fp)
   22278:	10800044 	addi	r2,r2,1
   2227c:	e0bfc915 	stw	r2,-220(fp)
   22280:	e0bfc917 	ldw	r2,-220(fp)
   22284:	10800210 	cmplti	r2,r2,8
   22288:	10001d1e 	bne	r2,zero,22300 <___vfprintf_internal_r+0x1d70>
   2228c:	e0bfc804 	addi	r2,fp,-224
   22290:	100d883a 	mov	r6,r2
   22294:	e17fe717 	ldw	r5,-100(fp)
   22298:	e13fe617 	ldw	r4,-104(fp)
   2229c:	002a9380 	call	2a938 <__sprint_r>
   222a0:	1000c71e 	bne	r2,zero,225c0 <___vfprintf_internal_r+0x2030>
   222a4:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
   222a8:	00001506 	br	22300 <___vfprintf_internal_r+0x1d70>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
   222ac:	8c800015 	stw	r18,0(r17)
   222b0:	00800044 	movi	r2,1
   222b4:	88800115 	stw	r2,4(r17)
   222b8:	e0bfca17 	ldw	r2,-216(fp)
   222bc:	10800044 	addi	r2,r2,1
   222c0:	e0bfca15 	stw	r2,-216(fp)
   222c4:	8c400204 	addi	r17,r17,8
   222c8:	e0bfc917 	ldw	r2,-220(fp)
   222cc:	10800044 	addi	r2,r2,1
   222d0:	e0bfc915 	stw	r2,-220(fp)
   222d4:	e0bfc917 	ldw	r2,-220(fp)
   222d8:	10800210 	cmplti	r2,r2,8
   222dc:	1000091e 	bne	r2,zero,22304 <___vfprintf_internal_r+0x1d74>
   222e0:	e0bfc804 	addi	r2,fp,-224
   222e4:	100d883a 	mov	r6,r2
   222e8:	e17fe717 	ldw	r5,-100(fp)
   222ec:	e13fe617 	ldw	r4,-104(fp)
   222f0:	002a9380 	call	2a938 <__sprint_r>
   222f4:	1000b41e 	bne	r2,zero,225c8 <___vfprintf_internal_r+0x2038>
   222f8:	e47fcb04 	addi	r17,fp,-212
   222fc:	00000106 	br	22304 <___vfprintf_internal_r+0x1d74>
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
   22300:	0001883a 	nop
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
				PRINT (expstr, expsize);
   22304:	e0bfc504 	addi	r2,fp,-236
   22308:	88800015 	stw	r2,0(r17)
   2230c:	e0bfaf17 	ldw	r2,-324(fp)
   22310:	88800115 	stw	r2,4(r17)
   22314:	e0ffca17 	ldw	r3,-216(fp)
   22318:	e0bfaf17 	ldw	r2,-324(fp)
   2231c:	1885883a 	add	r2,r3,r2
   22320:	e0bfca15 	stw	r2,-216(fp)
   22324:	8c400204 	addi	r17,r17,8
   22328:	e0bfc917 	ldw	r2,-220(fp)
   2232c:	10800044 	addi	r2,r2,1
   22330:	e0bfc915 	stw	r2,-220(fp)
   22334:	e0bfc917 	ldw	r2,-220(fp)
   22338:	10800210 	cmplti	r2,r2,8
   2233c:	1000071e 	bne	r2,zero,2235c <___vfprintf_internal_r+0x1dcc>
   22340:	e0bfc804 	addi	r2,fp,-224
   22344:	100d883a 	mov	r6,r2
   22348:	e17fe717 	ldw	r5,-100(fp)
   2234c:	e13fe617 	ldw	r4,-104(fp)
   22350:	002a9380 	call	2a938 <__sprint_r>
   22354:	10009e1e 	bne	r2,zero,225d0 <___vfprintf_internal_r+0x2040>
   22358:	e47fcb04 	addi	r17,fp,-212
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
   2235c:	9880010c 	andi	r2,r19,4
   22360:	10003526 	beq	r2,zero,22438 <___vfprintf_internal_r+0x1ea8>
			PAD (width - realsz, blanks);
   22364:	e0ffad17 	ldw	r3,-332(fp)
   22368:	e0bfb517 	ldw	r2,-300(fp)
   2236c:	18a1c83a 	sub	r16,r3,r2
   22370:	0400310e 	bge	zero,r16,22438 <___vfprintf_internal_r+0x1ea8>
   22374:	00001706 	br	223d4 <___vfprintf_internal_r+0x1e44>
   22378:	008000f4 	movhi	r2,3
   2237c:	1087a384 	addi	r2,r2,7822
   22380:	88800015 	stw	r2,0(r17)
   22384:	00800404 	movi	r2,16
   22388:	88800115 	stw	r2,4(r17)
   2238c:	e0bfca17 	ldw	r2,-216(fp)
   22390:	10800404 	addi	r2,r2,16
   22394:	e0bfca15 	stw	r2,-216(fp)
   22398:	8c400204 	addi	r17,r17,8
   2239c:	e0bfc917 	ldw	r2,-220(fp)
   223a0:	10800044 	addi	r2,r2,1
   223a4:	e0bfc915 	stw	r2,-220(fp)
   223a8:	e0bfc917 	ldw	r2,-220(fp)
   223ac:	10800210 	cmplti	r2,r2,8
   223b0:	1000071e 	bne	r2,zero,223d0 <___vfprintf_internal_r+0x1e40>
   223b4:	e0bfc804 	addi	r2,fp,-224
   223b8:	100d883a 	mov	r6,r2
   223bc:	e17fe717 	ldw	r5,-100(fp)
   223c0:	e13fe617 	ldw	r4,-104(fp)
   223c4:	002a9380 	call	2a938 <__sprint_r>
   223c8:	1000831e 	bne	r2,zero,225d8 <___vfprintf_internal_r+0x2048>
   223cc:	e47fcb04 	addi	r17,fp,-212
   223d0:	843ffc04 	addi	r16,r16,-16
   223d4:	80800448 	cmpgei	r2,r16,17
   223d8:	103fe71e 	bne	r2,zero,22378 <__alt_data_end+0xfffe2378>
   223dc:	008000f4 	movhi	r2,3
   223e0:	1087a384 	addi	r2,r2,7822
   223e4:	88800015 	stw	r2,0(r17)
   223e8:	8005883a 	mov	r2,r16
   223ec:	88800115 	stw	r2,4(r17)
   223f0:	e0bfca17 	ldw	r2,-216(fp)
   223f4:	8007883a 	mov	r3,r16
   223f8:	10c5883a 	add	r2,r2,r3
   223fc:	e0bfca15 	stw	r2,-216(fp)
   22400:	8c400204 	addi	r17,r17,8
   22404:	e0bfc917 	ldw	r2,-220(fp)
   22408:	10800044 	addi	r2,r2,1
   2240c:	e0bfc915 	stw	r2,-220(fp)
   22410:	e0bfc917 	ldw	r2,-220(fp)
   22414:	10800210 	cmplti	r2,r2,8
   22418:	1000071e 	bne	r2,zero,22438 <___vfprintf_internal_r+0x1ea8>
   2241c:	e0bfc804 	addi	r2,fp,-224
   22420:	100d883a 	mov	r6,r2
   22424:	e17fe717 	ldw	r5,-100(fp)
   22428:	e13fe617 	ldw	r4,-104(fp)
   2242c:	002a9380 	call	2a938 <__sprint_r>
   22430:	10006b1e 	bne	r2,zero,225e0 <___vfprintf_internal_r+0x2050>
   22434:	e47fcb04 	addi	r17,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
   22438:	e0ffad17 	ldw	r3,-332(fp)
   2243c:	e0bfb517 	ldw	r2,-300(fp)
   22440:	10c0010e 	bge	r2,r3,22448 <___vfprintf_internal_r+0x1eb8>
   22444:	1805883a 	mov	r2,r3
   22448:	e0ffac17 	ldw	r3,-336(fp)
   2244c:	1885883a 	add	r2,r3,r2
   22450:	e0bfac15 	stw	r2,-336(fp)

		FLUSH ();	/* copy out the I/O vectors */
   22454:	e0bfca17 	ldw	r2,-216(fp)
   22458:	10000626 	beq	r2,zero,22474 <___vfprintf_internal_r+0x1ee4>
   2245c:	e0bfc804 	addi	r2,fp,-224
   22460:	100d883a 	mov	r6,r2
   22464:	e17fe717 	ldw	r5,-100(fp)
   22468:	e13fe617 	ldw	r4,-104(fp)
   2246c:	002a9380 	call	2a938 <__sprint_r>
   22470:	10005d1e 	bne	r2,zero,225e8 <___vfprintf_internal_r+0x2058>
   22474:	e03fc915 	stw	zero,-220(fp)
   22478:	e47fcb04 	addi	r17,fp,-212

                if (malloc_buf != NULL) {
   2247c:	e0bfb817 	ldw	r2,-288(fp)
   22480:	1038a026 	beq	r2,zero,20704 <__alt_data_end+0xfffe0704>
			_free_r (data, malloc_buf);
   22484:	e17fb817 	ldw	r5,-288(fp)
   22488:	e13fe617 	ldw	r4,-104(fp)
   2248c:	002540c0 	call	2540c <_free_r>
			malloc_buf = NULL;
   22490:	e03fb815 	stw	zero,-288(fp)
		}
	}
   22494:	00389b06 	br	20704 <__alt_data_end+0xfffe0704>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
   22498:	0001883a 	nop
   2249c:	00000106 	br	224a4 <___vfprintf_internal_r+0x1f14>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
   224a0:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
   224a4:	e0bfca17 	ldw	r2,-216(fp)
   224a8:	10000626 	beq	r2,zero,224c4 <___vfprintf_internal_r+0x1f34>
   224ac:	e0bfc804 	addi	r2,fp,-224
   224b0:	100d883a 	mov	r6,r2
   224b4:	e17fe717 	ldw	r5,-100(fp)
   224b8:	e13fe617 	ldw	r4,-104(fp)
   224bc:	002a9380 	call	2a938 <__sprint_r>
   224c0:	10004b1e 	bne	r2,zero,225f0 <___vfprintf_internal_r+0x2060>
   224c4:	e03fc915 	stw	zero,-220(fp)
   224c8:	e47fcb04 	addi	r17,fp,-212
   224cc:	00004906 	br	225f4 <___vfprintf_internal_r+0x2064>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
   224d0:	0001883a 	nop
   224d4:	00004706 	br	225f4 <___vfprintf_internal_r+0x2064>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
   224d8:	0001883a 	nop
   224dc:	00004506 	br	225f4 <___vfprintf_internal_r+0x2064>
   224e0:	0001883a 	nop
   224e4:	00004306 	br	225f4 <___vfprintf_internal_r+0x2064>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
   224e8:	0001883a 	nop
   224ec:	00004106 	br	225f4 <___vfprintf_internal_r+0x2064>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
   224f0:	0001883a 	nop
   224f4:	00003f06 	br	225f4 <___vfprintf_internal_r+0x2064>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
   224f8:	0001883a 	nop
   224fc:	00003d06 	br	225f4 <___vfprintf_internal_r+0x2064>
   22500:	0001883a 	nop
   22504:	00003b06 	br	225f4 <___vfprintf_internal_r+0x2064>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
   22508:	0001883a 	nop
   2250c:	00003906 	br	225f4 <___vfprintf_internal_r+0x2064>
   22510:	0001883a 	nop
   22514:	00003706 	br	225f4 <___vfprintf_internal_r+0x2064>

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
			PRINT (cp, size);
   22518:	0001883a 	nop
   2251c:	00003506 	br	225f4 <___vfprintf_internal_r+0x2064>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
				if (_fpvalue == 0) {
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
   22520:	0001883a 	nop
   22524:	00003306 	br	225f4 <___vfprintf_internal_r+0x2064>
					if (expt < ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
   22528:	0001883a 	nop
   2252c:	00003106 	br	225f4 <___vfprintf_internal_r+0x2064>
						PAD (ndig - 1, zeroes);
   22530:	0001883a 	nop
   22534:	00002f06 	br	225f4 <___vfprintf_internal_r+0x2064>
   22538:	0001883a 	nop
   2253c:	00002d06 	br	225f4 <___vfprintf_internal_r+0x2064>
					}
				} else if (expt <= 0) {
					PRINT ("0", 1);
   22540:	0001883a 	nop
   22544:	00002b06 	br	225f4 <___vfprintf_internal_r+0x2064>
					if (expt || ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
   22548:	0001883a 	nop
   2254c:	00002906 	br	225f4 <___vfprintf_internal_r+0x2064>
						PAD (-expt, zeroes);
   22550:	0001883a 	nop
   22554:	00002706 	br	225f4 <___vfprintf_internal_r+0x2064>
   22558:	0001883a 	nop
   2255c:	00002506 	br	225f4 <___vfprintf_internal_r+0x2064>
						PRINT (cp, ndig);
   22560:	0001883a 	nop
   22564:	00002306 	br	225f4 <___vfprintf_internal_r+0x2064>
					}
				} else {
					char *convbuf = cp;
					PRINTANDPAD(cp, convbuf + ndig,
   22568:	0001883a 	nop
   2256c:	00002106 	br	225f4 <___vfprintf_internal_r+0x2064>
   22570:	0001883a 	nop
   22574:	00001f06 	br	225f4 <___vfprintf_internal_r+0x2064>
   22578:	0001883a 	nop
   2257c:	00001d06 	br	225f4 <___vfprintf_internal_r+0x2064>
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
					    PRINT (decimal_point, decp_len);
   22580:	0001883a 	nop
   22584:	00001b06 	br	225f4 <___vfprintf_internal_r+0x2064>
					PRINTANDPAD (cp, convbuf + ndig,
   22588:	0001883a 	nop
   2258c:	00001906 	br	225f4 <___vfprintf_internal_r+0x2064>
   22590:	0001883a 	nop
   22594:	00001706 	br	225f4 <___vfprintf_internal_r+0x2064>
   22598:	0001883a 	nop
   2259c:	00001506 	br	225f4 <___vfprintf_internal_r+0x2064>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
   225a0:	0001883a 	nop
   225a4:	00001306 	br	225f4 <___vfprintf_internal_r+0x2064>
					cp++;
					PRINT (decimal_point, decp_len);
   225a8:	0001883a 	nop
   225ac:	00001106 	br	225f4 <___vfprintf_internal_r+0x2064>
					if (_fpvalue) {
						PRINT (cp, ndig - 1);
   225b0:	0001883a 	nop
   225b4:	00000f06 	br	225f4 <___vfprintf_internal_r+0x2064>
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
   225b8:	0001883a 	nop
   225bc:	00000d06 	br	225f4 <___vfprintf_internal_r+0x2064>
   225c0:	0001883a 	nop
   225c4:	00000b06 	br	225f4 <___vfprintf_internal_r+0x2064>
				} else	/* XeYYY */
					PRINT (cp, 1);
   225c8:	0001883a 	nop
   225cc:	00000906 	br	225f4 <___vfprintf_internal_r+0x2064>
				PRINT (expstr, expsize);
   225d0:	0001883a 	nop
   225d4:	00000706 	br	225f4 <___vfprintf_internal_r+0x2064>
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
   225d8:	0001883a 	nop
   225dc:	00000506 	br	225f4 <___vfprintf_internal_r+0x2064>
   225e0:	0001883a 	nop
   225e4:	00000306 	br	225f4 <___vfprintf_internal_r+0x2064>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
   225e8:	0001883a 	nop
   225ec:	00000106 	br	225f4 <___vfprintf_internal_r+0x2064>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
   225f0:	0001883a 	nop
error:
	if (malloc_buf != NULL)
   225f4:	e0bfb817 	ldw	r2,-288(fp)
   225f8:	10000326 	beq	r2,zero,22608 <___vfprintf_internal_r+0x2078>
		_free_r (data, malloc_buf);
   225fc:	e17fb817 	ldw	r5,-288(fp)
   22600:	e13fe617 	ldw	r4,-104(fp)
   22604:	002540c0 	call	2540c <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
   22608:	e0bfe717 	ldw	r2,-100(fp)
   2260c:	1080030b 	ldhu	r2,12(r2)
   22610:	10bfffcc 	andi	r2,r2,65535
   22614:	1080100c 	andi	r2,r2,64
   22618:	1000021e 	bne	r2,zero,22624 <___vfprintf_internal_r+0x2094>
   2261c:	e0bfac17 	ldw	r2,-336(fp)
   22620:	00000206 	br	2262c <___vfprintf_internal_r+0x209c>
   22624:	00bfffc4 	movi	r2,-1
   22628:	0001883a 	nop
	/* NOTREACHED */
}
   2262c:	e6fff804 	addi	sp,fp,-32
   22630:	dfc00917 	ldw	ra,36(sp)
   22634:	df000817 	ldw	fp,32(sp)
   22638:	ddc00717 	ldw	r23,28(sp)
   2263c:	dd800617 	ldw	r22,24(sp)
   22640:	dd400517 	ldw	r21,20(sp)
   22644:	dd000417 	ldw	r20,16(sp)
   22648:	dcc00317 	ldw	r19,12(sp)
   2264c:	dc800217 	ldw	r18,8(sp)
   22650:	dc400117 	ldw	r17,4(sp)
   22654:	dc000017 	ldw	r16,0(sp)
   22658:	dec00a04 	addi	sp,sp,40
   2265c:	f800283a 	ret

00022660 <cvt>:
   [aAeEfFgG]; if it is [aA], then the return string lives in BUF,
   otherwise the return value shares the mprec reentrant storage.  */
static char *
cvt(struct _reent *data, _PRINTF_FLOAT_TYPE value, int ndigits, int flags,
    char *sign, int *decpt, int ch, int *length, char *buf)
{
   22660:	deffef04 	addi	sp,sp,-68
   22664:	dfc01015 	stw	ra,64(sp)
   22668:	df000f15 	stw	fp,60(sp)
   2266c:	df000f04 	addi	fp,sp,60
   22670:	e13ffc15 	stw	r4,-16(fp)
   22674:	e17ffd15 	stw	r5,-12(fp)
   22678:	e1bffe15 	stw	r6,-8(fp)
   2267c:	e1ffff15 	stw	r7,-4(fp)
	int mode, dsgn;
	char *digits, *bp, *rve;
# ifdef _NO_LONGDBL
	union double_union tmp;

	tmp.d = value;
   22680:	e0bffd17 	ldw	r2,-12(fp)
   22684:	e0bffa15 	stw	r2,-24(fp)
   22688:	e0bffe17 	ldw	r2,-8(fp)
   2268c:	e0bffb15 	stw	r2,-20(fp)
	if (word0 (tmp) & Sign_bit) { /* this will check for < 0 and -0.0 */
   22690:	e0bffb17 	ldw	r2,-20(fp)
   22694:	1000090e 	bge	r2,zero,226bc <cvt+0x5c>
		value = -value;
   22698:	e0bffd17 	ldw	r2,-12(fp)
   2269c:	e0bffd15 	stw	r2,-12(fp)
   226a0:	e0bffe17 	ldw	r2,-8(fp)
   226a4:	10a0003c 	xorhi	r2,r2,32768
   226a8:	e0bffe15 	stw	r2,-8(fp)
		*sign = '-';
   226ac:	e0800317 	ldw	r2,12(fp)
   226b0:	00c00b44 	movi	r3,45
   226b4:	10c00005 	stb	r3,0(r2)
   226b8:	00000206 	br	226c4 <cvt+0x64>
	} else
		*sign = '\000';
   226bc:	e0800317 	ldw	r2,12(fp)
   226c0:	10000005 	stb	zero,0(r2)
		}
		*length = bp - buf;
		return buf;
	}
# endif /* _WANT_IO_C99_FORMATS */
	if (ch == 'f' || ch == 'F') {
   226c4:	e0800517 	ldw	r2,20(fp)
   226c8:	108019a0 	cmpeqi	r2,r2,102
   226cc:	1000031e 	bne	r2,zero,226dc <cvt+0x7c>
   226d0:	e0800517 	ldw	r2,20(fp)
   226d4:	10801198 	cmpnei	r2,r2,70
   226d8:	1000031e 	bne	r2,zero,226e8 <cvt+0x88>
		mode = 3;		/* ndigits after the decimal point */
   226dc:	008000c4 	movi	r2,3
   226e0:	e0bff515 	stw	r2,-44(fp)
   226e4:	00000b06 	br	22714 <cvt+0xb4>
	} else {
		/* To obtain ndigits after the decimal point for the 'e'
		 * and 'E' formats, round to ndigits + 1 significant
		 * figures.
		 */
		if (ch == 'e' || ch == 'E') {
   226e8:	e0800517 	ldw	r2,20(fp)
   226ec:	10801960 	cmpeqi	r2,r2,101
   226f0:	1000031e 	bne	r2,zero,22700 <cvt+0xa0>
   226f4:	e0800517 	ldw	r2,20(fp)
   226f8:	10801158 	cmpnei	r2,r2,69
   226fc:	1000031e 	bne	r2,zero,2270c <cvt+0xac>
			ndigits++;
   22700:	e0bfff17 	ldw	r2,-4(fp)
   22704:	10800044 	addi	r2,r2,1
   22708:	e0bfff15 	stw	r2,-4(fp)
		}
		mode = 2;		/* ndigits significant digits */
   2270c:	00800084 	movi	r2,2
   22710:	e0bff515 	stw	r2,-44(fp)
	}

	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
   22714:	e0bff904 	addi	r2,fp,-28
   22718:	d8800315 	stw	r2,12(sp)
   2271c:	e0bff804 	addi	r2,fp,-32
   22720:	d8800215 	stw	r2,8(sp)
   22724:	e0800417 	ldw	r2,16(fp)
   22728:	d8800115 	stw	r2,4(sp)
   2272c:	e0bfff17 	ldw	r2,-4(fp)
   22730:	d8800015 	stw	r2,0(sp)
   22734:	e1fff517 	ldw	r7,-44(fp)
   22738:	e17ffd17 	ldw	r5,-12(fp)
   2273c:	e1bffe17 	ldw	r6,-8(fp)
   22740:	e13ffc17 	ldw	r4,-16(fp)
   22744:	0022ef00 	call	22ef0 <_dtoa_r>
   22748:	e0bff715 	stw	r2,-36(fp)

	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
   2274c:	e0800517 	ldw	r2,20(fp)
   22750:	108019e0 	cmpeqi	r2,r2,103
   22754:	1000031e 	bne	r2,zero,22764 <cvt+0x104>
   22758:	e0800517 	ldw	r2,20(fp)
   2275c:	108011d8 	cmpnei	r2,r2,71
   22760:	1000031e 	bne	r2,zero,22770 <cvt+0x110>
   22764:	e0800217 	ldw	r2,8(fp)
   22768:	1080004c 	andi	r2,r2,1
   2276c:	10003326 	beq	r2,zero,2283c <cvt+0x1dc>
		bp = digits + ndigits;
   22770:	e0bfff17 	ldw	r2,-4(fp)
   22774:	e0fff717 	ldw	r3,-36(fp)
   22778:	1885883a 	add	r2,r3,r2
   2277c:	e0bff615 	stw	r2,-40(fp)
		if (ch == 'f' || ch == 'F') {
   22780:	e0800517 	ldw	r2,20(fp)
   22784:	108019a0 	cmpeqi	r2,r2,102
   22788:	1000031e 	bne	r2,zero,22798 <cvt+0x138>
   2278c:	e0800517 	ldw	r2,20(fp)
   22790:	10801198 	cmpnei	r2,r2,70
   22794:	1000181e 	bne	r2,zero,227f8 <cvt+0x198>
			if (*digits == '0' && value)
   22798:	e0bff717 	ldw	r2,-36(fp)
   2279c:	10800003 	ldbu	r2,0(r2)
   227a0:	10803fcc 	andi	r2,r2,255
   227a4:	1080201c 	xori	r2,r2,128
   227a8:	10bfe004 	addi	r2,r2,-128
   227ac:	10800c18 	cmpnei	r2,r2,48
   227b0:	10000b1e 	bne	r2,zero,227e0 <cvt+0x180>
   227b4:	000d883a 	mov	r6,zero
   227b8:	000f883a 	mov	r7,zero
   227bc:	e13ffd17 	ldw	r4,-12(fp)
   227c0:	e17ffe17 	ldw	r5,-8(fp)
   227c4:	002e8c40 	call	2e8c4 <__eqdf2>
   227c8:	10000526 	beq	r2,zero,227e0 <cvt+0x180>
				*decpt = -ndigits + 1;
   227cc:	00c00044 	movi	r3,1
   227d0:	e0bfff17 	ldw	r2,-4(fp)
   227d4:	1887c83a 	sub	r3,r3,r2
   227d8:	e0800417 	ldw	r2,16(fp)
   227dc:	10c00015 	stw	r3,0(r2)
			bp += *decpt;
   227e0:	e0800417 	ldw	r2,16(fp)
   227e4:	10800017 	ldw	r2,0(r2)
   227e8:	1007883a 	mov	r3,r2
   227ec:	e0bff617 	ldw	r2,-40(fp)
   227f0:	10c5883a 	add	r2,r2,r3
   227f4:	e0bff615 	stw	r2,-40(fp)
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
   227f8:	000d883a 	mov	r6,zero
   227fc:	000f883a 	mov	r7,zero
   22800:	e13ffd17 	ldw	r4,-12(fp)
   22804:	e17ffe17 	ldw	r5,-8(fp)
   22808:	002e8c40 	call	2e8c4 <__eqdf2>
   2280c:	1000081e 	bne	r2,zero,22830 <cvt+0x1d0>
			rve = bp;
   22810:	e0bff617 	ldw	r2,-40(fp)
   22814:	e0bff915 	stw	r2,-28(fp)
		while (rve < bp)
   22818:	00000506 	br	22830 <cvt+0x1d0>
			*rve++ = '0';
   2281c:	e0bff917 	ldw	r2,-28(fp)
   22820:	10c00044 	addi	r3,r2,1
   22824:	e0fff915 	stw	r3,-28(fp)
   22828:	00c00c04 	movi	r3,48
   2282c:	10c00005 	stb	r3,0(r2)
				*decpt = -ndigits + 1;
			bp += *decpt;
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
			rve = bp;
		while (rve < bp)
   22830:	e0fff917 	ldw	r3,-28(fp)
   22834:	e0bff617 	ldw	r2,-40(fp)
   22838:	18bff836 	bltu	r3,r2,2281c <__alt_data_end+0xfffe281c>
			*rve++ = '0';
	}
	*length = rve - digits;
   2283c:	e0bff917 	ldw	r2,-28(fp)
   22840:	1007883a 	mov	r3,r2
   22844:	e0bff717 	ldw	r2,-36(fp)
   22848:	1887c83a 	sub	r3,r3,r2
   2284c:	e0800617 	ldw	r2,24(fp)
   22850:	10c00015 	stw	r3,0(r2)
	return (digits);
   22854:	e0bff717 	ldw	r2,-36(fp)
}
   22858:	e037883a 	mov	sp,fp
   2285c:	dfc00117 	ldw	ra,4(sp)
   22860:	df000017 	ldw	fp,0(sp)
   22864:	dec00204 	addi	sp,sp,8
   22868:	f800283a 	ret

0002286c <exponent>:

static int
exponent(char *p0, int exp, int fmtch)
{
   2286c:	defff804 	addi	sp,sp,-32
   22870:	df000715 	stw	fp,28(sp)
   22874:	dc400615 	stw	r17,24(sp)
   22878:	dc000515 	stw	r16,20(sp)
   2287c:	df000704 	addi	fp,sp,28
   22880:	e13ffb15 	stw	r4,-20(fp)
   22884:	e17ffc15 	stw	r5,-16(fp)
   22888:	e1bffd15 	stw	r6,-12(fp)
	int isa = fmtch == 'a' || fmtch == 'A';
# else
#  define isa 0
# endif

	p = p0;
   2288c:	e47ffb17 	ldw	r17,-20(fp)
	*p++ = isa ? 'p' - 'a' + fmtch : fmtch;
   22890:	8805883a 	mov	r2,r17
   22894:	14400044 	addi	r17,r2,1
   22898:	e0fffd17 	ldw	r3,-12(fp)
   2289c:	10c00005 	stb	r3,0(r2)
	if (exp < 0) {
   228a0:	e0bffc17 	ldw	r2,-16(fp)
   228a4:	1000080e 	bge	r2,zero,228c8 <exponent+0x5c>
		exp = -exp;
   228a8:	e0bffc17 	ldw	r2,-16(fp)
   228ac:	0085c83a 	sub	r2,zero,r2
   228b0:	e0bffc15 	stw	r2,-16(fp)
		*p++ = '-';
   228b4:	8805883a 	mov	r2,r17
   228b8:	14400044 	addi	r17,r2,1
   228bc:	00c00b44 	movi	r3,45
   228c0:	10c00005 	stb	r3,0(r2)
   228c4:	00000406 	br	228d8 <exponent+0x6c>
	}
	else
		*p++ = '+';
   228c8:	8805883a 	mov	r2,r17
   228cc:	14400044 	addi	r17,r2,1
   228d0:	00c00ac4 	movi	r3,43
   228d4:	10c00005 	stb	r3,0(r2)
	t = expbuf + MAXEXPLEN;
   228d8:	e43ffac4 	addi	r16,fp,-21
	if (exp > 9) {
   228dc:	e0bffc17 	ldw	r2,-16(fp)
   228e0:	10800290 	cmplti	r2,r2,10
   228e4:	10001d1e 	bne	r2,zero,2295c <exponent+0xf0>
		do {
			*--t = to_char (exp % 10);
   228e8:	843fffc4 	addi	r16,r16,-1
   228ec:	e0bffc17 	ldw	r2,-16(fp)
   228f0:	00c00284 	movi	r3,10
   228f4:	10c7283a 	div	r3,r2,r3
   228f8:	18c002a4 	muli	r3,r3,10
   228fc:	10c5c83a 	sub	r2,r2,r3
   22900:	10800c04 	addi	r2,r2,48
   22904:	80800005 	stb	r2,0(r16)
		} while ((exp /= 10) > 9);
   22908:	e0fffc17 	ldw	r3,-16(fp)
   2290c:	00800284 	movi	r2,10
   22910:	1885283a 	div	r2,r3,r2
   22914:	e0bffc15 	stw	r2,-16(fp)
   22918:	e0bffc17 	ldw	r2,-16(fp)
   2291c:	10800288 	cmpgei	r2,r2,10
   22920:	103ff11e 	bne	r2,zero,228e8 <__alt_data_end+0xfffe28e8>
		*--t = to_char (exp);
   22924:	843fffc4 	addi	r16,r16,-1
   22928:	e0bffc17 	ldw	r2,-16(fp)
   2292c:	10800c04 	addi	r2,r2,48
   22930:	80800005 	stb	r2,0(r16)
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
   22934:	00000606 	br	22950 <exponent+0xe4>
   22938:	8805883a 	mov	r2,r17
   2293c:	14400044 	addi	r17,r2,1
   22940:	8007883a 	mov	r3,r16
   22944:	1c000044 	addi	r16,r3,1
   22948:	18c00003 	ldbu	r3,0(r3)
   2294c:	10c00005 	stb	r3,0(r2)
   22950:	e0bffac4 	addi	r2,fp,-21
   22954:	80bff836 	bltu	r16,r2,22938 <__alt_data_end+0xfffe2938>
   22958:	00000906 	br	22980 <exponent+0x114>
	}
	else {
		if (!isa)
			*p++ = '0';
   2295c:	8805883a 	mov	r2,r17
   22960:	14400044 	addi	r17,r2,1
   22964:	00c00c04 	movi	r3,48
   22968:	10c00005 	stb	r3,0(r2)
		*p++ = to_char (exp);
   2296c:	8805883a 	mov	r2,r17
   22970:	14400044 	addi	r17,r2,1
   22974:	e0fffc17 	ldw	r3,-16(fp)
   22978:	18c00c04 	addi	r3,r3,48
   2297c:	10c00005 	stb	r3,0(r2)
	}
	return (p - p0);
   22980:	8807883a 	mov	r3,r17
   22984:	e0bffb17 	ldw	r2,-20(fp)
   22988:	1885c83a 	sub	r2,r3,r2
}
   2298c:	e6fffe04 	addi	sp,fp,-8
   22990:	df000217 	ldw	fp,8(sp)
   22994:	dc400117 	ldw	r17,4(sp)
   22998:	dc000017 	ldw	r16,0(sp)
   2299c:	dec00304 	addi	sp,sp,12
   229a0:	f800283a 	ret

000229a4 <__swsetup_r>:

int
_DEFUN(__swsetup_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
   229a4:	defffb04 	addi	sp,sp,-20
   229a8:	dfc00415 	stw	ra,16(sp)
   229ac:	df000315 	stw	fp,12(sp)
   229b0:	dc000215 	stw	r16,8(sp)
   229b4:	df000304 	addi	fp,sp,12
   229b8:	e13ffe15 	stw	r4,-8(fp)
   229bc:	2821883a 	mov	r16,r5
  /* Make sure stdio is set up.  */

  CHECK_INIT (_REENT, fp);
   229c0:	d0a00017 	ldw	r2,-32768(gp)
   229c4:	e0bffd15 	stw	r2,-12(fp)
   229c8:	e0bffd17 	ldw	r2,-12(fp)
   229cc:	10000526 	beq	r2,zero,229e4 <__swsetup_r+0x40>
   229d0:	e0bffd17 	ldw	r2,-12(fp)
   229d4:	10800e17 	ldw	r2,56(r2)
   229d8:	1000021e 	bne	r2,zero,229e4 <__swsetup_r+0x40>
   229dc:	e13ffd17 	ldw	r4,-12(fp)
   229e0:	00251ec0 	call	251ec <__sinit>

  /*
   * If we are not writing, we had better be reading and writing.
   */

  if ((fp->_flags & __SWR) == 0)
   229e4:	8080030b 	ldhu	r2,12(r16)
   229e8:	10bfffcc 	andi	r2,r2,65535
   229ec:	1080020c 	andi	r2,r2,8
   229f0:	1000241e 	bne	r2,zero,22a84 <__swsetup_r+0xe0>
    {
      if ((fp->_flags & __SRW) == 0)
   229f4:	8080030b 	ldhu	r2,12(r16)
   229f8:	10bfffcc 	andi	r2,r2,65535
   229fc:	1080040c 	andi	r2,r2,16
   22a00:	1000081e 	bne	r2,zero,22a24 <__swsetup_r+0x80>
        {
	  ptr->_errno = EBADF;
   22a04:	e0bffe17 	ldw	r2,-8(fp)
   22a08:	00c00244 	movi	r3,9
   22a0c:	10c00015 	stw	r3,0(r2)
	  fp->_flags |= __SERR;
   22a10:	8080030b 	ldhu	r2,12(r16)
   22a14:	10801014 	ori	r2,r2,64
   22a18:	8080030d 	sth	r2,12(r16)
	  return EOF;
   22a1c:	00bfffc4 	movi	r2,-1
   22a20:	00004206 	br	22b2c <__swsetup_r+0x188>
        }
      if (fp->_flags & __SRD)
   22a24:	8080030b 	ldhu	r2,12(r16)
   22a28:	10bfffcc 	andi	r2,r2,65535
   22a2c:	1080010c 	andi	r2,r2,4
   22a30:	10001126 	beq	r2,zero,22a78 <__swsetup_r+0xd4>
	{
	  /* clobber any ungetc data */
	  if (HASUB (fp))
   22a34:	80800c17 	ldw	r2,48(r16)
   22a38:	10000826 	beq	r2,zero,22a5c <__swsetup_r+0xb8>
	    FREEUB (ptr, fp);
   22a3c:	80c00c17 	ldw	r3,48(r16)
   22a40:	80801004 	addi	r2,r16,64
   22a44:	18800426 	beq	r3,r2,22a58 <__swsetup_r+0xb4>
   22a48:	80800c17 	ldw	r2,48(r16)
   22a4c:	100b883a 	mov	r5,r2
   22a50:	e13ffe17 	ldw	r4,-8(fp)
   22a54:	002540c0 	call	2540c <_free_r>
   22a58:	80000c15 	stw	zero,48(r16)
	  fp->_flags &= ~(__SRD | __SEOF);
   22a5c:	80c0030b 	ldhu	r3,12(r16)
   22a60:	00bff6c4 	movi	r2,-37
   22a64:	1884703a 	and	r2,r3,r2
   22a68:	8080030d 	sth	r2,12(r16)
	  fp->_r = 0;
   22a6c:	80000115 	stw	zero,4(r16)
	  fp->_p = fp->_bf._base;
   22a70:	80800417 	ldw	r2,16(r16)
   22a74:	80800015 	stw	r2,0(r16)
	}
      fp->_flags |= __SWR;
   22a78:	8080030b 	ldhu	r2,12(r16)
   22a7c:	10800214 	ori	r2,r2,8
   22a80:	8080030d 	sth	r2,12(r16)
  /*
   * Make a buffer if necessary, then set _w.
   * A string I/O file should not explicitly allocate a buffer
   * unless asprintf is being used.
   */
  if (fp->_bf._base == NULL
   22a84:	80800417 	ldw	r2,16(r16)
   22a88:	10000b1e 	bne	r2,zero,22ab8 <__swsetup_r+0x114>
        && (!(fp->_flags & __SSTR) || (fp->_flags & __SMBF)))
   22a8c:	8080030b 	ldhu	r2,12(r16)
   22a90:	10bfffcc 	andi	r2,r2,65535
   22a94:	1080800c 	andi	r2,r2,512
   22a98:	10000426 	beq	r2,zero,22aac <__swsetup_r+0x108>
   22a9c:	8080030b 	ldhu	r2,12(r16)
   22aa0:	10bfffcc 	andi	r2,r2,65535
   22aa4:	1080200c 	andi	r2,r2,128
   22aa8:	10000326 	beq	r2,zero,22ab8 <__swsetup_r+0x114>
    __smakebuf_r (ptr, fp);
   22aac:	800b883a 	mov	r5,r16
   22ab0:	e13ffe17 	ldw	r4,-8(fp)
   22ab4:	002645c0 	call	2645c <__smakebuf_r>

  if (fp->_flags & __SLBF)
   22ab8:	8080030b 	ldhu	r2,12(r16)
   22abc:	10bfffcc 	andi	r2,r2,65535
   22ac0:	1080004c 	andi	r2,r2,1
   22ac4:	10000526 	beq	r2,zero,22adc <__swsetup_r+0x138>
      /*
       * It is line buffered, so make _lbfsize be -_bufsize
       * for the putc() macro.  We will change _lbfsize back
       * to 0 whenever we turn off __SWR.
       */
      fp->_w = 0;
   22ac8:	80000215 	stw	zero,8(r16)
      fp->_lbfsize = -fp->_bf._size;
   22acc:	80800517 	ldw	r2,20(r16)
   22ad0:	0085c83a 	sub	r2,zero,r2
   22ad4:	80800615 	stw	r2,24(r16)
   22ad8:	00000806 	br	22afc <__swsetup_r+0x158>
    }
  else
    fp->_w = fp->_flags & __SNBF ? 0 : fp->_bf._size;
   22adc:	8080030b 	ldhu	r2,12(r16)
   22ae0:	10bfffcc 	andi	r2,r2,65535
   22ae4:	1080008c 	andi	r2,r2,2
   22ae8:	1000021e 	bne	r2,zero,22af4 <__swsetup_r+0x150>
   22aec:	80800517 	ldw	r2,20(r16)
   22af0:	00000106 	br	22af8 <__swsetup_r+0x154>
   22af4:	0005883a 	mov	r2,zero
   22af8:	80800215 	stw	r2,8(r16)

  if (!fp->_bf._base && (fp->_flags & __SMBF))
   22afc:	80800417 	ldw	r2,16(r16)
   22b00:	1000091e 	bne	r2,zero,22b28 <__swsetup_r+0x184>
   22b04:	8080030b 	ldhu	r2,12(r16)
   22b08:	10bfffcc 	andi	r2,r2,65535
   22b0c:	1080200c 	andi	r2,r2,128
   22b10:	10000526 	beq	r2,zero,22b28 <__swsetup_r+0x184>
    {
      /* __smakebuf_r set errno, but not flag */
      fp->_flags |= __SERR;
   22b14:	8080030b 	ldhu	r2,12(r16)
   22b18:	10801014 	ori	r2,r2,64
   22b1c:	8080030d 	sth	r2,12(r16)
      return EOF;
   22b20:	00bfffc4 	movi	r2,-1
   22b24:	00000106 	br	22b2c <__swsetup_r+0x188>
    }
  return 0;
   22b28:	0005883a 	mov	r2,zero
}
   22b2c:	e6ffff04 	addi	sp,fp,-4
   22b30:	dfc00217 	ldw	ra,8(sp)
   22b34:	df000117 	ldw	fp,4(sp)
   22b38:	dc000017 	ldw	r16,0(sp)
   22b3c:	dec00304 	addi	sp,sp,12
   22b40:	f800283a 	ret

00022b44 <quorem>:

static int
_DEFUN (quorem,
	(b, S),
	_Bigint * b _AND _Bigint * S)
{
   22b44:	deffef04 	addi	sp,sp,-68
   22b48:	dfc01015 	stw	ra,64(sp)
   22b4c:	df000f15 	stw	fp,60(sp)
   22b50:	df000f04 	addi	fp,sp,60
   22b54:	e13ffe15 	stw	r4,-8(fp)
   22b58:	e17fff15 	stw	r5,-4(fp)
#ifdef Pack_32
  __Long z;
  __ULong si, zs;
#endif

  n = S->_wds;
   22b5c:	e0bfff17 	ldw	r2,-4(fp)
   22b60:	10800417 	ldw	r2,16(r2)
   22b64:	e0bff115 	stw	r2,-60(fp)
#ifdef DEBUG
  /*debug*/ if (b->_wds > n)
    /*debug*/ Bug ("oversize b in quorem");
#endif
  if (b->_wds < n)
   22b68:	e0bffe17 	ldw	r2,-8(fp)
   22b6c:	10c00417 	ldw	r3,16(r2)
   22b70:	e0bff117 	ldw	r2,-60(fp)
   22b74:	1880020e 	bge	r3,r2,22b80 <quorem+0x3c>
    return 0;
   22b78:	0005883a 	mov	r2,zero
   22b7c:	0000d706 	br	22edc <quorem+0x398>
  sx = S->_x;
   22b80:	e0bfff17 	ldw	r2,-4(fp)
   22b84:	10800504 	addi	r2,r2,20
   22b88:	e0bff715 	stw	r2,-36(fp)
  sxe = sx + --n;
   22b8c:	e0bff117 	ldw	r2,-60(fp)
   22b90:	10bfffc4 	addi	r2,r2,-1
   22b94:	e0bff115 	stw	r2,-60(fp)
   22b98:	e0bff117 	ldw	r2,-60(fp)
   22b9c:	1085883a 	add	r2,r2,r2
   22ba0:	1085883a 	add	r2,r2,r2
   22ba4:	1007883a 	mov	r3,r2
   22ba8:	e0bff717 	ldw	r2,-36(fp)
   22bac:	10c5883a 	add	r2,r2,r3
   22bb0:	e0bff815 	stw	r2,-32(fp)
  bx = b->_x;
   22bb4:	e0bffe17 	ldw	r2,-8(fp)
   22bb8:	10800504 	addi	r2,r2,20
   22bbc:	e0bff515 	stw	r2,-44(fp)
  bxe = bx + n;
   22bc0:	e0bff117 	ldw	r2,-60(fp)
   22bc4:	1085883a 	add	r2,r2,r2
   22bc8:	1085883a 	add	r2,r2,r2
   22bcc:	1007883a 	mov	r3,r2
   22bd0:	e0bff517 	ldw	r2,-44(fp)
   22bd4:	10c5883a 	add	r2,r2,r3
   22bd8:	e0bff615 	stw	r2,-40(fp)
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
   22bdc:	e0bff617 	ldw	r2,-40(fp)
   22be0:	10c00017 	ldw	r3,0(r2)
   22be4:	e0bff817 	ldw	r2,-32(fp)
   22be8:	10800017 	ldw	r2,0(r2)
   22bec:	10800044 	addi	r2,r2,1
   22bf0:	1885203a 	divu	r2,r3,r2
   22bf4:	e0bff415 	stw	r2,-48(fp)
#ifdef DEBUG
  /*debug*/ if (q > 9)
    /*debug*/ Bug ("oversized quotient in quorem");
#endif
  if (q)
   22bf8:	e0bff417 	ldw	r2,-48(fp)
   22bfc:	10005326 	beq	r2,zero,22d4c <quorem+0x208>
    {
      borrow = 0;
   22c00:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
   22c04:	e03ff315 	stw	zero,-52(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
   22c08:	e0bff717 	ldw	r2,-36(fp)
   22c0c:	10c00104 	addi	r3,r2,4
   22c10:	e0fff715 	stw	r3,-36(fp)
   22c14:	10800017 	ldw	r2,0(r2)
   22c18:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) * q + carry;
   22c1c:	e0bff917 	ldw	r2,-28(fp)
   22c20:	10ffffcc 	andi	r3,r2,65535
   22c24:	e0bff417 	ldw	r2,-48(fp)
   22c28:	1887383a 	mul	r3,r3,r2
   22c2c:	e0bff317 	ldw	r2,-52(fp)
   22c30:	1885883a 	add	r2,r3,r2
   22c34:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) * q + (ys >> 16);
   22c38:	e0bff917 	ldw	r2,-28(fp)
   22c3c:	1006d43a 	srli	r3,r2,16
   22c40:	e0bff417 	ldw	r2,-48(fp)
   22c44:	1887383a 	mul	r3,r3,r2
   22c48:	e0bffa17 	ldw	r2,-24(fp)
   22c4c:	1004d43a 	srli	r2,r2,16
   22c50:	1885883a 	add	r2,r3,r2
   22c54:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
   22c58:	e0bffb17 	ldw	r2,-20(fp)
   22c5c:	1004d43a 	srli	r2,r2,16
   22c60:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
   22c64:	e0bff517 	ldw	r2,-44(fp)
   22c68:	10800017 	ldw	r2,0(r2)
   22c6c:	10ffffcc 	andi	r3,r2,65535
   22c70:	e0bffa17 	ldw	r2,-24(fp)
   22c74:	10bfffcc 	andi	r2,r2,65535
   22c78:	1887c83a 	sub	r3,r3,r2
   22c7c:	e0bff217 	ldw	r2,-56(fp)
   22c80:	1885883a 	add	r2,r3,r2
   22c84:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
   22c88:	e0bffc17 	ldw	r2,-16(fp)
   22c8c:	1005d43a 	srai	r2,r2,16
   22c90:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
   22c94:	e0bff517 	ldw	r2,-44(fp)
   22c98:	10800017 	ldw	r2,0(r2)
   22c9c:	1006d43a 	srli	r3,r2,16
   22ca0:	e0bffb17 	ldw	r2,-20(fp)
   22ca4:	10bfffcc 	andi	r2,r2,65535
   22ca8:	1887c83a 	sub	r3,r3,r2
   22cac:	e0bff217 	ldw	r2,-56(fp)
   22cb0:	1885883a 	add	r2,r3,r2
   22cb4:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
   22cb8:	e0bffd17 	ldw	r2,-12(fp)
   22cbc:	1005d43a 	srai	r2,r2,16
   22cc0:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
   22cc4:	e0bff517 	ldw	r2,-44(fp)
   22cc8:	10c00104 	addi	r3,r2,4
   22ccc:	e0fff515 	stw	r3,-44(fp)
   22cd0:	e0fffd17 	ldw	r3,-12(fp)
   22cd4:	1808943a 	slli	r4,r3,16
   22cd8:	e0fffc17 	ldw	r3,-16(fp)
   22cdc:	18ffffcc 	andi	r3,r3,65535
   22ce0:	20c6b03a 	or	r3,r4,r3
   22ce4:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
   22ce8:	e0bff717 	ldw	r2,-36(fp)
   22cec:	e0fff817 	ldw	r3,-32(fp)
   22cf0:	18bfc52e 	bgeu	r3,r2,22c08 <__alt_data_end+0xfffe2c08>
      if (!*bxe)
   22cf4:	e0bff617 	ldw	r2,-40(fp)
   22cf8:	10800017 	ldw	r2,0(r2)
   22cfc:	1000131e 	bne	r2,zero,22d4c <quorem+0x208>
	{
	  bx = b->_x;
   22d00:	e0bffe17 	ldw	r2,-8(fp)
   22d04:	10800504 	addi	r2,r2,20
   22d08:	e0bff515 	stw	r2,-44(fp)
	  while (--bxe > bx && !*bxe)
   22d0c:	00000306 	br	22d1c <quorem+0x1d8>
	    --n;
   22d10:	e0bff117 	ldw	r2,-60(fp)
   22d14:	10bfffc4 	addi	r2,r2,-1
   22d18:	e0bff115 	stw	r2,-60(fp)
	}
      while (sx <= sxe);
      if (!*bxe)
	{
	  bx = b->_x;
	  while (--bxe > bx && !*bxe)
   22d1c:	e0bff617 	ldw	r2,-40(fp)
   22d20:	10bfff04 	addi	r2,r2,-4
   22d24:	e0bff615 	stw	r2,-40(fp)
   22d28:	e0bff617 	ldw	r2,-40(fp)
   22d2c:	e0fff517 	ldw	r3,-44(fp)
   22d30:	1880032e 	bgeu	r3,r2,22d40 <quorem+0x1fc>
   22d34:	e0bff617 	ldw	r2,-40(fp)
   22d38:	10800017 	ldw	r2,0(r2)
   22d3c:	103ff426 	beq	r2,zero,22d10 <__alt_data_end+0xfffe2d10>
	    --n;
	  b->_wds = n;
   22d40:	e0bffe17 	ldw	r2,-8(fp)
   22d44:	e0fff117 	ldw	r3,-60(fp)
   22d48:	10c00415 	stw	r3,16(r2)
	}
    }
  if (cmp (b, S) >= 0)
   22d4c:	e17fff17 	ldw	r5,-4(fp)
   22d50:	e13ffe17 	ldw	r4,-8(fp)
   22d54:	0028aa40 	call	28aa4 <__mcmp>
   22d58:	10005f16 	blt	r2,zero,22ed8 <quorem+0x394>
    {
      q++;
   22d5c:	e0bff417 	ldw	r2,-48(fp)
   22d60:	10800044 	addi	r2,r2,1
   22d64:	e0bff415 	stw	r2,-48(fp)
      borrow = 0;
   22d68:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
   22d6c:	e03ff315 	stw	zero,-52(fp)
      bx = b->_x;
   22d70:	e0bffe17 	ldw	r2,-8(fp)
   22d74:	10800504 	addi	r2,r2,20
   22d78:	e0bff515 	stw	r2,-44(fp)
      sx = S->_x;
   22d7c:	e0bfff17 	ldw	r2,-4(fp)
   22d80:	10800504 	addi	r2,r2,20
   22d84:	e0bff715 	stw	r2,-36(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
   22d88:	e0bff717 	ldw	r2,-36(fp)
   22d8c:	10c00104 	addi	r3,r2,4
   22d90:	e0fff715 	stw	r3,-36(fp)
   22d94:	10800017 	ldw	r2,0(r2)
   22d98:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) + carry;
   22d9c:	e0bff917 	ldw	r2,-28(fp)
   22da0:	10ffffcc 	andi	r3,r2,65535
   22da4:	e0bff317 	ldw	r2,-52(fp)
   22da8:	1885883a 	add	r2,r3,r2
   22dac:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) + (ys >> 16);
   22db0:	e0bff917 	ldw	r2,-28(fp)
   22db4:	1006d43a 	srli	r3,r2,16
   22db8:	e0bffa17 	ldw	r2,-24(fp)
   22dbc:	1004d43a 	srli	r2,r2,16
   22dc0:	1885883a 	add	r2,r3,r2
   22dc4:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
   22dc8:	e0bffb17 	ldw	r2,-20(fp)
   22dcc:	1004d43a 	srli	r2,r2,16
   22dd0:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
   22dd4:	e0bff517 	ldw	r2,-44(fp)
   22dd8:	10800017 	ldw	r2,0(r2)
   22ddc:	10ffffcc 	andi	r3,r2,65535
   22de0:	e0bffa17 	ldw	r2,-24(fp)
   22de4:	10bfffcc 	andi	r2,r2,65535
   22de8:	1887c83a 	sub	r3,r3,r2
   22dec:	e0bff217 	ldw	r2,-56(fp)
   22df0:	1885883a 	add	r2,r3,r2
   22df4:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
   22df8:	e0bffc17 	ldw	r2,-16(fp)
   22dfc:	1005d43a 	srai	r2,r2,16
   22e00:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
   22e04:	e0bff517 	ldw	r2,-44(fp)
   22e08:	10800017 	ldw	r2,0(r2)
   22e0c:	1006d43a 	srli	r3,r2,16
   22e10:	e0bffb17 	ldw	r2,-20(fp)
   22e14:	10bfffcc 	andi	r2,r2,65535
   22e18:	1887c83a 	sub	r3,r3,r2
   22e1c:	e0bff217 	ldw	r2,-56(fp)
   22e20:	1885883a 	add	r2,r3,r2
   22e24:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
   22e28:	e0bffd17 	ldw	r2,-12(fp)
   22e2c:	1005d43a 	srai	r2,r2,16
   22e30:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
   22e34:	e0bff517 	ldw	r2,-44(fp)
   22e38:	10c00104 	addi	r3,r2,4
   22e3c:	e0fff515 	stw	r3,-44(fp)
   22e40:	e0fffd17 	ldw	r3,-12(fp)
   22e44:	1808943a 	slli	r4,r3,16
   22e48:	e0fffc17 	ldw	r3,-16(fp)
   22e4c:	18ffffcc 	andi	r3,r3,65535
   22e50:	20c6b03a 	or	r3,r4,r3
   22e54:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
   22e58:	e0bff717 	ldw	r2,-36(fp)
   22e5c:	e0fff817 	ldw	r3,-32(fp)
   22e60:	18bfc92e 	bgeu	r3,r2,22d88 <__alt_data_end+0xfffe2d88>
      bx = b->_x;
   22e64:	e0bffe17 	ldw	r2,-8(fp)
   22e68:	10800504 	addi	r2,r2,20
   22e6c:	e0bff515 	stw	r2,-44(fp)
      bxe = bx + n;
   22e70:	e0bff117 	ldw	r2,-60(fp)
   22e74:	1085883a 	add	r2,r2,r2
   22e78:	1085883a 	add	r2,r2,r2
   22e7c:	1007883a 	mov	r3,r2
   22e80:	e0bff517 	ldw	r2,-44(fp)
   22e84:	10c5883a 	add	r2,r2,r3
   22e88:	e0bff615 	stw	r2,-40(fp)
      if (!*bxe)
   22e8c:	e0bff617 	ldw	r2,-40(fp)
   22e90:	10800017 	ldw	r2,0(r2)
   22e94:	1000101e 	bne	r2,zero,22ed8 <quorem+0x394>
	{
	  while (--bxe > bx && !*bxe)
   22e98:	00000306 	br	22ea8 <quorem+0x364>
	    --n;
   22e9c:	e0bff117 	ldw	r2,-60(fp)
   22ea0:	10bfffc4 	addi	r2,r2,-1
   22ea4:	e0bff115 	stw	r2,-60(fp)
      while (sx <= sxe);
      bx = b->_x;
      bxe = bx + n;
      if (!*bxe)
	{
	  while (--bxe > bx && !*bxe)
   22ea8:	e0bff617 	ldw	r2,-40(fp)
   22eac:	10bfff04 	addi	r2,r2,-4
   22eb0:	e0bff615 	stw	r2,-40(fp)
   22eb4:	e0bff617 	ldw	r2,-40(fp)
   22eb8:	e0fff517 	ldw	r3,-44(fp)
   22ebc:	1880032e 	bgeu	r3,r2,22ecc <quorem+0x388>
   22ec0:	e0bff617 	ldw	r2,-40(fp)
   22ec4:	10800017 	ldw	r2,0(r2)
   22ec8:	103ff426 	beq	r2,zero,22e9c <__alt_data_end+0xfffe2e9c>
	    --n;
	  b->_wds = n;
   22ecc:	e0bffe17 	ldw	r2,-8(fp)
   22ed0:	e0fff117 	ldw	r3,-60(fp)
   22ed4:	10c00415 	stw	r3,16(r2)
	}
    }
  return q;
   22ed8:	e0bff417 	ldw	r2,-48(fp)
}
   22edc:	e037883a 	mov	sp,fp
   22ee0:	dfc00117 	ldw	ra,4(sp)
   22ee4:	df000017 	ldw	fp,0(sp)
   22ee8:	dec00204 	addi	sp,sp,8
   22eec:	f800283a 	ret

00022ef0 <_dtoa_r>:
	int mode _AND
	int ndigits _AND
	int *decpt _AND
	int *sign _AND
	char **rve)
{
   22ef0:	deffcc04 	addi	sp,sp,-208
   22ef4:	dfc03315 	stw	ra,204(sp)
   22ef8:	df003215 	stw	fp,200(sp)
   22efc:	dcc03115 	stw	r19,196(sp)
   22f00:	dc803015 	stw	r18,192(sp)
   22f04:	dc402f15 	stw	r17,188(sp)
   22f08:	dc002e15 	stw	r16,184(sp)
   22f0c:	df003204 	addi	fp,sp,200
   22f10:	e13ff815 	stw	r4,-32(fp)
   22f14:	e17ff915 	stw	r5,-28(fp)
   22f18:	e1bffa15 	stw	r6,-24(fp)
   22f1c:	e1fffb15 	stw	r7,-20(fp)
  __Long L;
#ifndef Sudden_Underflow
  int denorm;
  __ULong x;
#endif
  _Bigint *b, *b1, *delta, *mlo = NULL, *mhi, *S;
   22f20:	e03fe215 	stw	zero,-120(fp)
  double ds;
  char *s, *s0;

  d.d = _d;
   22f24:	e0bff917 	ldw	r2,-28(fp)
   22f28:	e0bff215 	stw	r2,-56(fp)
   22f2c:	e0bffa17 	ldw	r2,-24(fp)
   22f30:	e0bff315 	stw	r2,-52(fp)

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_RESULT(ptr))
   22f34:	e0bff817 	ldw	r2,-32(fp)
   22f38:	10801017 	ldw	r2,64(r2)
   22f3c:	10001326 	beq	r2,zero,22f8c <_dtoa_r+0x9c>
    {
      _REENT_MP_RESULT(ptr)->_k = _REENT_MP_RESULT_K(ptr);
   22f40:	e0bff817 	ldw	r2,-32(fp)
   22f44:	10801017 	ldw	r2,64(r2)
   22f48:	e0fff817 	ldw	r3,-32(fp)
   22f4c:	18c01117 	ldw	r3,68(r3)
   22f50:	10c00115 	stw	r3,4(r2)
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
   22f54:	e0bff817 	ldw	r2,-32(fp)
   22f58:	10801017 	ldw	r2,64(r2)
   22f5c:	e0fff817 	ldw	r3,-32(fp)
   22f60:	18c01117 	ldw	r3,68(r3)
   22f64:	01000044 	movi	r4,1
   22f68:	20c6983a 	sll	r3,r4,r3
   22f6c:	10c00215 	stw	r3,8(r2)
      Bfree (ptr, _REENT_MP_RESULT(ptr));
   22f70:	e0bff817 	ldw	r2,-32(fp)
   22f74:	10801017 	ldw	r2,64(r2)
   22f78:	100b883a 	mov	r5,r2
   22f7c:	e13ff817 	ldw	r4,-32(fp)
   22f80:	0027df80 	call	27df8 <_Bfree>
      _REENT_MP_RESULT(ptr) = 0;
   22f84:	e0bff817 	ldw	r2,-32(fp)
   22f88:	10001015 	stw	zero,64(r2)
    }

  if (word0 (d) & Sign_bit)
   22f8c:	e0bff317 	ldw	r2,-52(fp)
   22f90:	1000090e 	bge	r2,zero,22fb8 <_dtoa_r+0xc8>
    {
      /* set sign for everything, including 0's and NaNs */
      *sign = 1;
   22f94:	e0800417 	ldw	r2,16(fp)
   22f98:	00c00044 	movi	r3,1
   22f9c:	10c00015 	stw	r3,0(r2)
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
   22fa0:	e0fff317 	ldw	r3,-52(fp)
   22fa4:	00a00034 	movhi	r2,32768
   22fa8:	10bfffc4 	addi	r2,r2,-1
   22fac:	1884703a 	and	r2,r3,r2
   22fb0:	e0bff315 	stw	r2,-52(fp)
   22fb4:	00000206 	br	22fc0 <_dtoa_r+0xd0>
    }
  else
    *sign = 0;
   22fb8:	e0800417 	ldw	r2,16(fp)
   22fbc:	10000015 	stw	zero,0(r2)

#if defined(IEEE_Arith) + defined(VAX)
#ifdef IEEE_Arith
  if ((word0 (d) & Exp_mask) == Exp_mask)
   22fc0:	e0bff317 	ldw	r2,-52(fp)
   22fc4:	10dffc2c 	andhi	r3,r2,32752
   22fc8:	009ffc34 	movhi	r2,32752
   22fcc:	1880221e 	bne	r3,r2,23058 <_dtoa_r+0x168>
#else
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
   22fd0:	e0800317 	ldw	r2,12(fp)
   22fd4:	00c9c3c4 	movi	r3,9999
   22fd8:	10c00015 	stw	r3,0(r2)
      s =
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
   22fdc:	e0bff217 	ldw	r2,-56(fp)
   22fe0:	1000081e 	bne	r2,zero,23004 <_dtoa_r+0x114>
   22fe4:	e0fff317 	ldw	r3,-52(fp)
   22fe8:	00800434 	movhi	r2,16
   22fec:	10bfffc4 	addi	r2,r2,-1
   22ff0:	1884703a 	and	r2,r3,r2
   22ff4:	1000031e 	bne	r2,zero,23004 <_dtoa_r+0x114>
   22ff8:	008000f4 	movhi	r2,3
   22ffc:	1087ac04 	addi	r2,r2,7856
   23000:	00000206 	br	2300c <_dtoa_r+0x11c>
   23004:	008000f4 	movhi	r2,3
   23008:	1087af04 	addi	r2,r2,7868
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
      s =
   2300c:	e0bfe715 	stw	r2,-100(fp)
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
   23010:	e0800517 	ldw	r2,20(fp)
   23014:	10000e26 	beq	r2,zero,23050 <_dtoa_r+0x160>
	*rve =
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
   23018:	e0bfe717 	ldw	r2,-100(fp)
   2301c:	108000c4 	addi	r2,r2,3
   23020:	10800003 	ldbu	r2,0(r2)
   23024:	10803fcc 	andi	r2,r2,255
   23028:	1080201c 	xori	r2,r2,128
   2302c:	10bfe004 	addi	r2,r2,-128
   23030:	10000326 	beq	r2,zero,23040 <_dtoa_r+0x150>
   23034:	e0bfe717 	ldw	r2,-100(fp)
   23038:	10800204 	addi	r2,r2,8
   2303c:	00000206 	br	23048 <_dtoa_r+0x158>
   23040:	e0bfe717 	ldw	r2,-100(fp)
   23044:	108000c4 	addi	r2,r2,3
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
	*rve =
   23048:	e0c00517 	ldw	r3,20(fp)
   2304c:	18800015 	stw	r2,0(r3)
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
#endif
	  s + 3;
      return s;
   23050:	e0bfe717 	ldw	r2,-100(fp)
   23054:	00067b06 	br	24a44 <_dtoa_r+0x1b54>
    }
#endif
#ifdef IBM
  d.d += 0;			/* normalize */
#endif
  if (!d.d)
   23058:	e0bff217 	ldw	r2,-56(fp)
   2305c:	e0fff317 	ldw	r3,-52(fp)
   23060:	000d883a 	mov	r6,zero
   23064:	000f883a 	mov	r7,zero
   23068:	1009883a 	mov	r4,r2
   2306c:	180b883a 	mov	r5,r3
   23070:	002e8c40 	call	2e8c4 <__eqdf2>
   23074:	10000e1e 	bne	r2,zero,230b0 <_dtoa_r+0x1c0>
    {
      *decpt = 1;
   23078:	e0800317 	ldw	r2,12(fp)
   2307c:	00c00044 	movi	r3,1
   23080:	10c00015 	stw	r3,0(r2)
      s = "0";
   23084:	008000f4 	movhi	r2,3
   23088:	1087b004 	addi	r2,r2,7872
   2308c:	e0bfe715 	stw	r2,-100(fp)
      if (rve)
   23090:	e0800517 	ldw	r2,20(fp)
   23094:	10000426 	beq	r2,zero,230a8 <_dtoa_r+0x1b8>
	*rve = s + 1;
   23098:	e0bfe717 	ldw	r2,-100(fp)
   2309c:	10c00044 	addi	r3,r2,1
   230a0:	e0800517 	ldw	r2,20(fp)
   230a4:	10c00015 	stw	r3,0(r2)
      return s;
   230a8:	e0bfe717 	ldw	r2,-100(fp)
   230ac:	00066506 	br	24a44 <_dtoa_r+0x1b54>
    }

  b = d2b (ptr, d.d, &be, &bbits);
   230b0:	e0bff217 	ldw	r2,-56(fp)
   230b4:	e0fff317 	ldw	r3,-52(fp)
   230b8:	e17ff104 	addi	r5,fp,-60
   230bc:	e13ff004 	addi	r4,fp,-64
   230c0:	d9000015 	stw	r4,0(sp)
   230c4:	280f883a 	mov	r7,r5
   230c8:	100b883a 	mov	r5,r2
   230cc:	180d883a 	mov	r6,r3
   230d0:	e13ff817 	ldw	r4,-32(fp)
   230d4:	002912c0 	call	2912c <__d2b>
   230d8:	e0bfe115 	stw	r2,-124(fp)
#ifdef Sudden_Underflow
  i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1));
#else
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
   230dc:	e0bff317 	ldw	r2,-52(fp)
   230e0:	1004d53a 	srli	r2,r2,20
   230e4:	1081ffcc 	andi	r2,r2,2047
   230e8:	e0bfd215 	stw	r2,-184(fp)
   230ec:	e0bfd217 	ldw	r2,-184(fp)
   230f0:	10001126 	beq	r2,zero,23138 <_dtoa_r+0x248>
    {
#endif
      d2.d = d.d;
   230f4:	e0bff217 	ldw	r2,-56(fp)
   230f8:	e0fff317 	ldw	r3,-52(fp)
   230fc:	e0bff415 	stw	r2,-48(fp)
   23100:	e0fff515 	stw	r3,-44(fp)
      word0 (d2) &= Frac_mask1;
   23104:	e0fff517 	ldw	r3,-44(fp)
   23108:	00800434 	movhi	r2,16
   2310c:	10bfffc4 	addi	r2,r2,-1
   23110:	1884703a 	and	r2,r3,r2
   23114:	e0bff515 	stw	r2,-44(fp)
      word0 (d2) |= Exp_11;
   23118:	e0bff517 	ldw	r2,-44(fp)
   2311c:	108ffc34 	orhi	r2,r2,16368
   23120:	e0bff515 	stw	r2,-44(fp)
		 * Hence we adjust the constant term to 0.1760912590558.
		 * (We could get a more accurate k by invoking log10,
		 *  but this is probably not worthwhile.)
		 */

      i -= Bias;
   23124:	e0bfd217 	ldw	r2,-184(fp)
   23128:	10bf0044 	addi	r2,r2,-1023
   2312c:	e0bfd215 	stw	r2,-184(fp)
#ifdef IBM
      i <<= 2;
      i += j;
#endif
#ifndef Sudden_Underflow
      denorm = 0;
   23130:	e03fe015 	stw	zero,-128(fp)
   23134:	00002806 	br	231d8 <_dtoa_r+0x2e8>
    }
  else
    {
      /* d is denormalized */

      i = bbits + be + (Bias + (P - 1) - 1);
   23138:	e0fff017 	ldw	r3,-64(fp)
   2313c:	e0bff117 	ldw	r2,-60(fp)
   23140:	1885883a 	add	r2,r3,r2
   23144:	10810c84 	addi	r2,r2,1074
   23148:	e0bfd215 	stw	r2,-184(fp)
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
       : (word1 (d) << (32 - i));
   2314c:	e0bfd217 	ldw	r2,-184(fp)
   23150:	10800850 	cmplti	r2,r2,33
   23154:	10000b1e 	bne	r2,zero,23184 <_dtoa_r+0x294>

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
   23158:	e0fff317 	ldw	r3,-52(fp)
   2315c:	01001004 	movi	r4,64
   23160:	e0bfd217 	ldw	r2,-184(fp)
   23164:	2085c83a 	sub	r2,r4,r2
   23168:	1886983a 	sll	r3,r3,r2
   2316c:	e13ff217 	ldw	r4,-56(fp)
   23170:	e0bfd217 	ldw	r2,-184(fp)
   23174:	10bff804 	addi	r2,r2,-32
   23178:	2084d83a 	srl	r2,r4,r2
       : (word1 (d) << (32 - i));
   2317c:	1884b03a 	or	r2,r3,r2
   23180:	00000506 	br	23198 <_dtoa_r+0x2a8>
   23184:	e0fff217 	ldw	r3,-56(fp)
   23188:	01000804 	movi	r4,32
   2318c:	e0bfd217 	ldw	r2,-184(fp)
   23190:	2085c83a 	sub	r2,r4,r2
   23194:	1884983a 	sll	r2,r3,r2

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
   23198:	e0bfe815 	stw	r2,-96(fp)
       : (word1 (d) << (32 - i));
#endif
      d2.d = x;
   2319c:	e13fe817 	ldw	r4,-96(fp)
   231a0:	002fc8c0 	call	2fc8c <__floatunsidf>
   231a4:	1009883a 	mov	r4,r2
   231a8:	180b883a 	mov	r5,r3
   231ac:	e13ff415 	stw	r4,-48(fp)
   231b0:	e17ff515 	stw	r5,-44(fp)
      word0 (d2) -= 31 * Exp_msk1;	/* adjust exponent */
   231b4:	e0fff517 	ldw	r3,-44(fp)
   231b8:	00bf8434 	movhi	r2,65040
   231bc:	1885883a 	add	r2,r3,r2
   231c0:	e0bff515 	stw	r2,-44(fp)
      i -= (Bias + (P - 1) - 1) + 1;
   231c4:	e0bfd217 	ldw	r2,-184(fp)
   231c8:	10bef344 	addi	r2,r2,-1075
   231cc:	e0bfd215 	stw	r2,-184(fp)
      denorm = 1;
   231d0:	00800044 	movi	r2,1
   231d4:	e0bfe015 	stw	r2,-128(fp)
    }
#endif
#if defined (_DOUBLE_IS_32BITS)
  ds = (d2.d - 1.5) * 0.289529651 + 0.176091269 + i * 0.30103001;
#else
  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
   231d8:	e0bff417 	ldw	r2,-48(fp)
   231dc:	e0fff517 	ldw	r3,-44(fp)
   231e0:	000d883a 	mov	r6,zero
   231e4:	01cffe34 	movhi	r7,16376
   231e8:	1009883a 	mov	r4,r2
   231ec:	180b883a 	mov	r5,r3
   231f0:	002f2340 	call	2f234 <__subdf3>
   231f4:	1009883a 	mov	r4,r2
   231f8:	180b883a 	mov	r5,r3
   231fc:	2005883a 	mov	r2,r4
   23200:	2807883a 	mov	r3,r5
   23204:	0198dbf4 	movhi	r6,25455
   23208:	3190d844 	addi	r6,r6,17249
   2320c:	01cff4f4 	movhi	r7,16339
   23210:	39e1e9c4 	addi	r7,r7,-30809
   23214:	1009883a 	mov	r4,r2
   23218:	180b883a 	mov	r5,r3
   2321c:	002eb1c0 	call	2eb1c <__muldf3>
   23220:	1009883a 	mov	r4,r2
   23224:	180b883a 	mov	r5,r3
   23228:	2005883a 	mov	r2,r4
   2322c:	2807883a 	mov	r3,r5
   23230:	01a2d874 	movhi	r6,35681
   23234:	31b22cc4 	addi	r6,r6,-14157
   23238:	01cff1f4 	movhi	r7,16327
   2323c:	39e28a04 	addi	r7,r7,-30168
   23240:	1009883a 	mov	r4,r2
   23244:	180b883a 	mov	r5,r3
   23248:	002d7300 	call	2d730 <__adddf3>
   2324c:	1009883a 	mov	r4,r2
   23250:	180b883a 	mov	r5,r3
   23254:	2025883a 	mov	r18,r4
   23258:	2827883a 	mov	r19,r5
   2325c:	e13fd217 	ldw	r4,-184(fp)
   23260:	002fbb00 	call	2fbb0 <__floatsidf>
   23264:	1011883a 	mov	r8,r2
   23268:	1813883a 	mov	r9,r3
   2326c:	019427f4 	movhi	r6,20639
   23270:	319e7ec4 	addi	r6,r6,31227
   23274:	01cff4f4 	movhi	r7,16339
   23278:	39d104c4 	addi	r7,r7,17427
   2327c:	4009883a 	mov	r4,r8
   23280:	480b883a 	mov	r5,r9
   23284:	002eb1c0 	call	2eb1c <__muldf3>
   23288:	1009883a 	mov	r4,r2
   2328c:	180b883a 	mov	r5,r3
   23290:	2005883a 	mov	r2,r4
   23294:	2807883a 	mov	r3,r5
   23298:	100d883a 	mov	r6,r2
   2329c:	180f883a 	mov	r7,r3
   232a0:	9009883a 	mov	r4,r18
   232a4:	980b883a 	mov	r5,r19
   232a8:	002d7300 	call	2d730 <__adddf3>
   232ac:	1009883a 	mov	r4,r2
   232b0:	180b883a 	mov	r5,r3
   232b4:	e13fe515 	stw	r4,-108(fp)
   232b8:	e17fe615 	stw	r5,-104(fp)
#endif
  k = (int) ds;
   232bc:	e13fe517 	ldw	r4,-108(fp)
   232c0:	e17fe617 	ldw	r5,-104(fp)
   232c4:	002fb300 	call	2fb30 <__fixdfsi>
   232c8:	e0bfd715 	stw	r2,-164(fp)
  if (ds < 0. && ds != k)
   232cc:	000d883a 	mov	r6,zero
   232d0:	000f883a 	mov	r7,zero
   232d4:	e13fe517 	ldw	r4,-108(fp)
   232d8:	e17fe617 	ldw	r5,-104(fp)
   232dc:	002ea280 	call	2ea28 <__ledf2>
   232e0:	10000d0e 	bge	r2,zero,23318 <_dtoa_r+0x428>
   232e4:	e13fd717 	ldw	r4,-164(fp)
   232e8:	002fbb00 	call	2fbb0 <__floatsidf>
   232ec:	1011883a 	mov	r8,r2
   232f0:	1813883a 	mov	r9,r3
   232f4:	e1bfe517 	ldw	r6,-108(fp)
   232f8:	e1ffe617 	ldw	r7,-104(fp)
   232fc:	4009883a 	mov	r4,r8
   23300:	480b883a 	mov	r5,r9
   23304:	002e8c40 	call	2e8c4 <__eqdf2>
   23308:	10000326 	beq	r2,zero,23318 <_dtoa_r+0x428>
    k--;			/* want k = floor(ds) */
   2330c:	e0bfd717 	ldw	r2,-164(fp)
   23310:	10bfffc4 	addi	r2,r2,-1
   23314:	e0bfd715 	stw	r2,-164(fp)
  k_check = 1;
   23318:	00800044 	movi	r2,1
   2331c:	e0bfd815 	stw	r2,-160(fp)
  if (k >= 0 && k <= Ten_pmax)
   23320:	e0bfd717 	ldw	r2,-164(fp)
   23324:	10001616 	blt	r2,zero,23380 <_dtoa_r+0x490>
   23328:	e0bfd717 	ldw	r2,-164(fp)
   2332c:	108005c8 	cmpgei	r2,r2,23
   23330:	1000131e 	bne	r2,zero,23380 <_dtoa_r+0x490>
    {
      if (d.d < tens[k])
   23334:	e0bff217 	ldw	r2,-56(fp)
   23338:	e0fff317 	ldw	r3,-52(fp)
   2333c:	010000f4 	movhi	r4,3
   23340:	2107b604 	addi	r4,r4,7896
   23344:	e17fd717 	ldw	r5,-164(fp)
   23348:	280a90fa 	slli	r5,r5,3
   2334c:	214d883a 	add	r6,r4,r5
   23350:	31000017 	ldw	r4,0(r6)
   23354:	31400117 	ldw	r5,4(r6)
   23358:	200d883a 	mov	r6,r4
   2335c:	280f883a 	mov	r7,r5
   23360:	1009883a 	mov	r4,r2
   23364:	180b883a 	mov	r5,r3
   23368:	002ea280 	call	2ea28 <__ledf2>
   2336c:	1000030e 	bge	r2,zero,2337c <_dtoa_r+0x48c>
	k--;
   23370:	e0bfd717 	ldw	r2,-164(fp)
   23374:	10bfffc4 	addi	r2,r2,-1
   23378:	e0bfd715 	stw	r2,-164(fp)
      k_check = 0;
   2337c:	e03fd815 	stw	zero,-160(fp)
    }
  j = bbits - i - 1;
   23380:	e0fff017 	ldw	r3,-64(fp)
   23384:	e0bfd217 	ldw	r2,-184(fp)
   23388:	1885c83a 	sub	r2,r3,r2
   2338c:	10bfffc4 	addi	r2,r2,-1
   23390:	e0bfd615 	stw	r2,-168(fp)
  if (j >= 0)
   23394:	e0bfd617 	ldw	r2,-168(fp)
   23398:	10000416 	blt	r2,zero,233ac <_dtoa_r+0x4bc>
    {
      b2 = 0;
   2339c:	e03fcf15 	stw	zero,-196(fp)
      s2 = j;
   233a0:	e0bfd617 	ldw	r2,-168(fp)
   233a4:	e0bfdc15 	stw	r2,-144(fp)
   233a8:	00000406 	br	233bc <_dtoa_r+0x4cc>
    }
  else
    {
      b2 = -j;
   233ac:	e0bfd617 	ldw	r2,-168(fp)
   233b0:	0085c83a 	sub	r2,zero,r2
   233b4:	e0bfcf15 	stw	r2,-196(fp)
      s2 = 0;
   233b8:	e03fdc15 	stw	zero,-144(fp)
    }
  if (k >= 0)
   233bc:	e0bfd717 	ldw	r2,-164(fp)
   233c0:	10000816 	blt	r2,zero,233e4 <_dtoa_r+0x4f4>
    {
      b5 = 0;
   233c4:	e03fd015 	stw	zero,-192(fp)
      s5 = k;
   233c8:	e0bfd717 	ldw	r2,-164(fp)
   233cc:	e0bfdd15 	stw	r2,-140(fp)
      s2 += k;
   233d0:	e0ffdc17 	ldw	r3,-144(fp)
   233d4:	e0bfd717 	ldw	r2,-164(fp)
   233d8:	1885883a 	add	r2,r3,r2
   233dc:	e0bfdc15 	stw	r2,-144(fp)
   233e0:	00000806 	br	23404 <_dtoa_r+0x514>
    }
  else
    {
      b2 -= k;
   233e4:	e0ffcf17 	ldw	r3,-196(fp)
   233e8:	e0bfd717 	ldw	r2,-164(fp)
   233ec:	1885c83a 	sub	r2,r3,r2
   233f0:	e0bfcf15 	stw	r2,-196(fp)
      b5 = -k;
   233f4:	e0bfd717 	ldw	r2,-164(fp)
   233f8:	0085c83a 	sub	r2,zero,r2
   233fc:	e0bfd015 	stw	r2,-192(fp)
      s5 = 0;
   23400:	e03fdd15 	stw	zero,-140(fp)
    }
  if (mode < 0 || mode > 9)
   23404:	e0bffb17 	ldw	r2,-20(fp)
   23408:	10000316 	blt	r2,zero,23418 <_dtoa_r+0x528>
   2340c:	e0bffb17 	ldw	r2,-20(fp)
   23410:	10800290 	cmplti	r2,r2,10
   23414:	1000011e 	bne	r2,zero,2341c <_dtoa_r+0x52c>
    mode = 0;
   23418:	e03ffb15 	stw	zero,-20(fp)
  try_quick = 1;
   2341c:	00800044 	movi	r2,1
   23420:	e0bfdf15 	stw	r2,-132(fp)
  if (mode > 5)
   23424:	e0bffb17 	ldw	r2,-20(fp)
   23428:	10800190 	cmplti	r2,r2,6
   2342c:	1000041e 	bne	r2,zero,23440 <_dtoa_r+0x550>
    {
      mode -= 4;
   23430:	e0bffb17 	ldw	r2,-20(fp)
   23434:	10bfff04 	addi	r2,r2,-4
   23438:	e0bffb15 	stw	r2,-20(fp)
      try_quick = 0;
   2343c:	e03fdf15 	stw	zero,-132(fp)
    }
  leftright = 1;
   23440:	00800044 	movi	r2,1
   23444:	e0bfd915 	stw	r2,-156(fp)
  ilim = ilim1 = -1;
   23448:	00bfffc4 	movi	r2,-1
   2344c:	e0bfd515 	stw	r2,-172(fp)
   23450:	e0bfd517 	ldw	r2,-172(fp)
   23454:	e0bfd415 	stw	r2,-176(fp)
  switch (mode)
   23458:	e0bffb17 	ldw	r2,-20(fp)
   2345c:	108001a8 	cmpgeui	r2,r2,6
   23460:	10002c1e 	bne	r2,zero,23514 <_dtoa_r+0x624>
   23464:	e0bffb17 	ldw	r2,-20(fp)
   23468:	100690ba 	slli	r3,r2,2
   2346c:	008000b4 	movhi	r2,2
   23470:	108d2004 	addi	r2,r2,13440
   23474:	1885883a 	add	r2,r3,r2
   23478:	10800017 	ldw	r2,0(r2)
   2347c:	1000683a 	jmp	r2
   23480:	00023498 	cmpnei	zero,zero,2258
   23484:	00023498 	cmpnei	zero,zero,2258
   23488:	000234a8 	cmpgeui	zero,zero,2258
   2348c:	000234d8 	cmpnei	zero,zero,2259
   23490:	000234ac 	andhi	zero,zero,2258
   23494:	000234dc 	xori	zero,zero,2259
    {
    case 0:
    case 1:
      i = 18;
   23498:	00800484 	movi	r2,18
   2349c:	e0bfd215 	stw	r2,-184(fp)
      ndigits = 0;
   234a0:	e0000215 	stw	zero,8(fp)
      break;
   234a4:	00001b06 	br	23514 <_dtoa_r+0x624>
    case 2:
      leftright = 0;
   234a8:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 4:
      if (ndigits <= 0)
   234ac:	e0800217 	ldw	r2,8(fp)
   234b0:	00800216 	blt	zero,r2,234bc <_dtoa_r+0x5cc>
	ndigits = 1;
   234b4:	00800044 	movi	r2,1
   234b8:	e0800215 	stw	r2,8(fp)
      ilim = ilim1 = i = ndigits;
   234bc:	e0800217 	ldw	r2,8(fp)
   234c0:	e0bfd215 	stw	r2,-184(fp)
   234c4:	e0bfd217 	ldw	r2,-184(fp)
   234c8:	e0bfd515 	stw	r2,-172(fp)
   234cc:	e0bfd517 	ldw	r2,-172(fp)
   234d0:	e0bfd415 	stw	r2,-176(fp)
      break;
   234d4:	00000f06 	br	23514 <_dtoa_r+0x624>
    case 3:
      leftright = 0;
   234d8:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 5:
      i = ndigits + k + 1;
   234dc:	e0c00217 	ldw	r3,8(fp)
   234e0:	e0bfd717 	ldw	r2,-164(fp)
   234e4:	1885883a 	add	r2,r3,r2
   234e8:	10800044 	addi	r2,r2,1
   234ec:	e0bfd215 	stw	r2,-184(fp)
      ilim = i;
   234f0:	e0bfd217 	ldw	r2,-184(fp)
   234f4:	e0bfd415 	stw	r2,-176(fp)
      ilim1 = i - 1;
   234f8:	e0bfd217 	ldw	r2,-184(fp)
   234fc:	10bfffc4 	addi	r2,r2,-1
   23500:	e0bfd515 	stw	r2,-172(fp)
      if (i <= 0)
   23504:	e0bfd217 	ldw	r2,-184(fp)
   23508:	00800216 	blt	zero,r2,23514 <_dtoa_r+0x624>
	i = 1;
   2350c:	00800044 	movi	r2,1
   23510:	e0bfd215 	stw	r2,-184(fp)
    }
  j = sizeof (__ULong);
   23514:	00800104 	movi	r2,4
   23518:	e0bfd615 	stw	r2,-168(fp)
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
   2351c:	e0bff817 	ldw	r2,-32(fp)
   23520:	10001115 	stw	zero,68(r2)
   23524:	00000806 	br	23548 <_dtoa_r+0x658>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
   23528:	e0bff817 	ldw	r2,-32(fp)
   2352c:	10801117 	ldw	r2,68(r2)
   23530:	10c00044 	addi	r3,r2,1
   23534:	e0bff817 	ldw	r2,-32(fp)
   23538:	10c01115 	stw	r3,68(r2)
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
       j <<= 1)
   2353c:	e0bfd617 	ldw	r2,-168(fp)
   23540:	1085883a 	add	r2,r2,r2
   23544:	e0bfd615 	stw	r2,-168(fp)
      ilim1 = i - 1;
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
   23548:	e0bfd617 	ldw	r2,-168(fp)
   2354c:	10800504 	addi	r2,r2,20
   23550:	e0ffd217 	ldw	r3,-184(fp)
   23554:	18bff42e 	bgeu	r3,r2,23528 <__alt_data_end+0xfffe3528>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
  _REENT_MP_RESULT(ptr) = Balloc (ptr, _REENT_MP_RESULT_K(ptr));
   23558:	e0bff817 	ldw	r2,-32(fp)
   2355c:	10801117 	ldw	r2,68(r2)
   23560:	100b883a 	mov	r5,r2
   23564:	e13ff817 	ldw	r4,-32(fp)
   23568:	0027cc80 	call	27cc8 <_Balloc>
   2356c:	1007883a 	mov	r3,r2
   23570:	e0bff817 	ldw	r2,-32(fp)
   23574:	10c01015 	stw	r3,64(r2)
  s = s0 = (char *) _REENT_MP_RESULT(ptr);
   23578:	e0bff817 	ldw	r2,-32(fp)
   2357c:	10801017 	ldw	r2,64(r2)
   23580:	e0bfe915 	stw	r2,-92(fp)
   23584:	e0bfe917 	ldw	r2,-92(fp)
   23588:	e0bfe715 	stw	r2,-100(fp)

  if (ilim >= 0 && ilim <= Quick_max && try_quick)
   2358c:	e0bfd417 	ldw	r2,-176(fp)
   23590:	10021616 	blt	r2,zero,23dec <_dtoa_r+0xefc>
   23594:	e0bfd417 	ldw	r2,-176(fp)
   23598:	108003c8 	cmpgei	r2,r2,15
   2359c:	1002131e 	bne	r2,zero,23dec <_dtoa_r+0xefc>
   235a0:	e0bfdf17 	ldw	r2,-132(fp)
   235a4:	10021126 	beq	r2,zero,23dec <_dtoa_r+0xefc>
    {
      /* Try to get by with floating-point arithmetic. */

      i = 0;
   235a8:	e03fd215 	stw	zero,-184(fp)
      d2.d = d.d;
   235ac:	e0bff217 	ldw	r2,-56(fp)
   235b0:	e0fff317 	ldw	r3,-52(fp)
   235b4:	e0bff415 	stw	r2,-48(fp)
   235b8:	e0fff515 	stw	r3,-44(fp)
      k0 = k;
   235bc:	e0bfd717 	ldw	r2,-164(fp)
   235c0:	e0bfea15 	stw	r2,-88(fp)
      ilim0 = ilim;
   235c4:	e0bfd417 	ldw	r2,-176(fp)
   235c8:	e0bfeb15 	stw	r2,-84(fp)
      ieps = 2;			/* conservative */
   235cc:	00800084 	movi	r2,2
   235d0:	e0bfd315 	stw	r2,-180(fp)
      if (k > 0)
   235d4:	e0bfd717 	ldw	r2,-164(fp)
   235d8:	0080540e 	bge	zero,r2,2372c <_dtoa_r+0x83c>
	{
	  ds = tens[k & 0xf];
   235dc:	e0bfd717 	ldw	r2,-164(fp)
   235e0:	10c003cc 	andi	r3,r2,15
   235e4:	008000f4 	movhi	r2,3
   235e8:	1087b604 	addi	r2,r2,7896
   235ec:	180690fa 	slli	r3,r3,3
   235f0:	10c5883a 	add	r2,r2,r3
   235f4:	10c00017 	ldw	r3,0(r2)
   235f8:	e0ffe515 	stw	r3,-108(fp)
   235fc:	10800117 	ldw	r2,4(r2)
   23600:	e0bfe615 	stw	r2,-104(fp)
	  j = k >> 4;
   23604:	e0bfd717 	ldw	r2,-164(fp)
   23608:	1005d13a 	srai	r2,r2,4
   2360c:	e0bfd615 	stw	r2,-168(fp)
	  if (j & Bletch)
   23610:	e0bfd617 	ldw	r2,-168(fp)
   23614:	1080040c 	andi	r2,r2,16
   23618:	10003426 	beq	r2,zero,236ec <_dtoa_r+0x7fc>
	    {
	      /* prevent overflows */
	      j &= Bletch - 1;
   2361c:	e0bfd617 	ldw	r2,-168(fp)
   23620:	108003cc 	andi	r2,r2,15
   23624:	e0bfd615 	stw	r2,-168(fp)
	      d.d /= bigtens[n_bigtens - 1];
   23628:	e0bff217 	ldw	r2,-56(fp)
   2362c:	e0fff317 	ldw	r3,-52(fp)
   23630:	018000f4 	movhi	r6,3
   23634:	3187e804 	addi	r6,r6,8096
   23638:	31000817 	ldw	r4,32(r6)
   2363c:	31400917 	ldw	r5,36(r6)
   23640:	200d883a 	mov	r6,r4
   23644:	280f883a 	mov	r7,r5
   23648:	1009883a 	mov	r4,r2
   2364c:	180b883a 	mov	r5,r3
   23650:	002dfdc0 	call	2dfdc <__divdf3>
   23654:	1009883a 	mov	r4,r2
   23658:	180b883a 	mov	r5,r3
   2365c:	2005883a 	mov	r2,r4
   23660:	2807883a 	mov	r3,r5
   23664:	e0bff215 	stw	r2,-56(fp)
   23668:	e0fff315 	stw	r3,-52(fp)
	      ieps++;
   2366c:	e0bfd317 	ldw	r2,-180(fp)
   23670:	10800044 	addi	r2,r2,1
   23674:	e0bfd315 	stw	r2,-180(fp)
	    }
	  for (; j; j >>= 1, i++)
   23678:	00001c06 	br	236ec <_dtoa_r+0x7fc>
	    if (j & 1)
   2367c:	e0bfd617 	ldw	r2,-168(fp)
   23680:	1080004c 	andi	r2,r2,1
   23684:	10001326 	beq	r2,zero,236d4 <_dtoa_r+0x7e4>
	      {
		ieps++;
   23688:	e0bfd317 	ldw	r2,-180(fp)
   2368c:	10800044 	addi	r2,r2,1
   23690:	e0bfd315 	stw	r2,-180(fp)
		ds *= bigtens[i];
   23694:	008000f4 	movhi	r2,3
   23698:	1087e804 	addi	r2,r2,8096
   2369c:	e0ffd217 	ldw	r3,-184(fp)
   236a0:	180690fa 	slli	r3,r3,3
   236a4:	10c9883a 	add	r4,r2,r3
   236a8:	20800017 	ldw	r2,0(r4)
   236ac:	20c00117 	ldw	r3,4(r4)
   236b0:	100d883a 	mov	r6,r2
   236b4:	180f883a 	mov	r7,r3
   236b8:	e13fe517 	ldw	r4,-108(fp)
   236bc:	e17fe617 	ldw	r5,-104(fp)
   236c0:	002eb1c0 	call	2eb1c <__muldf3>
   236c4:	1009883a 	mov	r4,r2
   236c8:	180b883a 	mov	r5,r3
   236cc:	e13fe515 	stw	r4,-108(fp)
   236d0:	e17fe615 	stw	r5,-104(fp)
	      /* prevent overflows */
	      j &= Bletch - 1;
	      d.d /= bigtens[n_bigtens - 1];
	      ieps++;
	    }
	  for (; j; j >>= 1, i++)
   236d4:	e0bfd617 	ldw	r2,-168(fp)
   236d8:	1005d07a 	srai	r2,r2,1
   236dc:	e0bfd615 	stw	r2,-168(fp)
   236e0:	e0bfd217 	ldw	r2,-184(fp)
   236e4:	10800044 	addi	r2,r2,1
   236e8:	e0bfd215 	stw	r2,-184(fp)
   236ec:	e0bfd617 	ldw	r2,-168(fp)
   236f0:	103fe21e 	bne	r2,zero,2367c <__alt_data_end+0xfffe367c>
	    if (j & 1)
	      {
		ieps++;
		ds *= bigtens[i];
	      }
	  d.d /= ds;
   236f4:	e0bff217 	ldw	r2,-56(fp)
   236f8:	e0fff317 	ldw	r3,-52(fp)
   236fc:	e1bfe517 	ldw	r6,-108(fp)
   23700:	e1ffe617 	ldw	r7,-104(fp)
   23704:	1009883a 	mov	r4,r2
   23708:	180b883a 	mov	r5,r3
   2370c:	002dfdc0 	call	2dfdc <__divdf3>
   23710:	1009883a 	mov	r4,r2
   23714:	180b883a 	mov	r5,r3
   23718:	2005883a 	mov	r2,r4
   2371c:	2807883a 	mov	r3,r5
   23720:	e0bff215 	stw	r2,-56(fp)
   23724:	e0fff315 	stw	r3,-52(fp)
   23728:	00004006 	br	2382c <_dtoa_r+0x93c>
	}
      else if ((j1 = -k) != 0)
   2372c:	e0bfd717 	ldw	r2,-164(fp)
   23730:	0085c83a 	sub	r2,zero,r2
   23734:	e0bfec15 	stw	r2,-80(fp)
   23738:	e0bfec17 	ldw	r2,-80(fp)
   2373c:	10003b26 	beq	r2,zero,2382c <_dtoa_r+0x93c>
	{
	  d.d *= tens[j1 & 0xf];
   23740:	e0bff217 	ldw	r2,-56(fp)
   23744:	e0fff317 	ldw	r3,-52(fp)
   23748:	e13fec17 	ldw	r4,-80(fp)
   2374c:	214003cc 	andi	r5,r4,15
   23750:	010000f4 	movhi	r4,3
   23754:	2107b604 	addi	r4,r4,7896
   23758:	280a90fa 	slli	r5,r5,3
   2375c:	214d883a 	add	r6,r4,r5
   23760:	31000017 	ldw	r4,0(r6)
   23764:	31400117 	ldw	r5,4(r6)
   23768:	200d883a 	mov	r6,r4
   2376c:	280f883a 	mov	r7,r5
   23770:	1009883a 	mov	r4,r2
   23774:	180b883a 	mov	r5,r3
   23778:	002eb1c0 	call	2eb1c <__muldf3>
   2377c:	1009883a 	mov	r4,r2
   23780:	180b883a 	mov	r5,r3
   23784:	2005883a 	mov	r2,r4
   23788:	2807883a 	mov	r3,r5
   2378c:	e0bff215 	stw	r2,-56(fp)
   23790:	e0fff315 	stw	r3,-52(fp)
	  for (j = j1 >> 4; j; j >>= 1, i++)
   23794:	e0bfec17 	ldw	r2,-80(fp)
   23798:	1005d13a 	srai	r2,r2,4
   2379c:	e0bfd615 	stw	r2,-168(fp)
   237a0:	00002006 	br	23824 <_dtoa_r+0x934>
	    if (j & 1)
   237a4:	e0bfd617 	ldw	r2,-168(fp)
   237a8:	1080004c 	andi	r2,r2,1
   237ac:	10001726 	beq	r2,zero,2380c <_dtoa_r+0x91c>
	      {
		ieps++;
   237b0:	e0bfd317 	ldw	r2,-180(fp)
   237b4:	10800044 	addi	r2,r2,1
   237b8:	e0bfd315 	stw	r2,-180(fp)
		d.d *= bigtens[i];
   237bc:	e0bff217 	ldw	r2,-56(fp)
   237c0:	e0fff317 	ldw	r3,-52(fp)
   237c4:	010000f4 	movhi	r4,3
   237c8:	2107e804 	addi	r4,r4,8096
   237cc:	e17fd217 	ldw	r5,-184(fp)
   237d0:	280a90fa 	slli	r5,r5,3
   237d4:	214d883a 	add	r6,r4,r5
   237d8:	31000017 	ldw	r4,0(r6)
   237dc:	31400117 	ldw	r5,4(r6)
   237e0:	200d883a 	mov	r6,r4
   237e4:	280f883a 	mov	r7,r5
   237e8:	1009883a 	mov	r4,r2
   237ec:	180b883a 	mov	r5,r3
   237f0:	002eb1c0 	call	2eb1c <__muldf3>
   237f4:	1009883a 	mov	r4,r2
   237f8:	180b883a 	mov	r5,r3
   237fc:	2005883a 	mov	r2,r4
   23800:	2807883a 	mov	r3,r5
   23804:	e0bff215 	stw	r2,-56(fp)
   23808:	e0fff315 	stw	r3,-52(fp)
	  d.d /= ds;
	}
      else if ((j1 = -k) != 0)
	{
	  d.d *= tens[j1 & 0xf];
	  for (j = j1 >> 4; j; j >>= 1, i++)
   2380c:	e0bfd617 	ldw	r2,-168(fp)
   23810:	1005d07a 	srai	r2,r2,1
   23814:	e0bfd615 	stw	r2,-168(fp)
   23818:	e0bfd217 	ldw	r2,-184(fp)
   2381c:	10800044 	addi	r2,r2,1
   23820:	e0bfd215 	stw	r2,-184(fp)
   23824:	e0bfd617 	ldw	r2,-168(fp)
   23828:	103fde1e 	bne	r2,zero,237a4 <__alt_data_end+0xfffe37a4>
	      {
		ieps++;
		d.d *= bigtens[i];
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
   2382c:	e0bfd817 	ldw	r2,-160(fp)
   23830:	10002126 	beq	r2,zero,238b8 <_dtoa_r+0x9c8>
   23834:	e0bff217 	ldw	r2,-56(fp)
   23838:	e0fff317 	ldw	r3,-52(fp)
   2383c:	000d883a 	mov	r6,zero
   23840:	01cffc34 	movhi	r7,16368
   23844:	1009883a 	mov	r4,r2
   23848:	180b883a 	mov	r5,r3
   2384c:	002ea280 	call	2ea28 <__ledf2>
   23850:	1000190e 	bge	r2,zero,238b8 <_dtoa_r+0x9c8>
   23854:	e0bfd417 	ldw	r2,-176(fp)
   23858:	0080170e 	bge	zero,r2,238b8 <_dtoa_r+0x9c8>
	{
	  if (ilim1 <= 0)
   2385c:	e0bfd517 	ldw	r2,-172(fp)
   23860:	0081550e 	bge	zero,r2,23db8 <_dtoa_r+0xec8>
	    goto fast_failed;
	  ilim = ilim1;
   23864:	e0bfd517 	ldw	r2,-172(fp)
   23868:	e0bfd415 	stw	r2,-176(fp)
	  k--;
   2386c:	e0bfd717 	ldw	r2,-164(fp)
   23870:	10bfffc4 	addi	r2,r2,-1
   23874:	e0bfd715 	stw	r2,-164(fp)
	  d.d *= 10.;
   23878:	e0bff217 	ldw	r2,-56(fp)
   2387c:	e0fff317 	ldw	r3,-52(fp)
   23880:	000d883a 	mov	r6,zero
   23884:	01d00934 	movhi	r7,16420
   23888:	1009883a 	mov	r4,r2
   2388c:	180b883a 	mov	r5,r3
   23890:	002eb1c0 	call	2eb1c <__muldf3>
   23894:	1009883a 	mov	r4,r2
   23898:	180b883a 	mov	r5,r3
   2389c:	2005883a 	mov	r2,r4
   238a0:	2807883a 	mov	r3,r5
   238a4:	e0bff215 	stw	r2,-56(fp)
   238a8:	e0fff315 	stw	r3,-52(fp)
	  ieps++;
   238ac:	e0bfd317 	ldw	r2,-180(fp)
   238b0:	10800044 	addi	r2,r2,1
   238b4:	e0bfd315 	stw	r2,-180(fp)
	}
      eps.d = ieps * d.d + 7.;
   238b8:	e13fd317 	ldw	r4,-180(fp)
   238bc:	002fbb00 	call	2fbb0 <__floatsidf>
   238c0:	1011883a 	mov	r8,r2
   238c4:	1813883a 	mov	r9,r3
   238c8:	e0bff217 	ldw	r2,-56(fp)
   238cc:	e0fff317 	ldw	r3,-52(fp)
   238d0:	100d883a 	mov	r6,r2
   238d4:	180f883a 	mov	r7,r3
   238d8:	4009883a 	mov	r4,r8
   238dc:	480b883a 	mov	r5,r9
   238e0:	002eb1c0 	call	2eb1c <__muldf3>
   238e4:	1009883a 	mov	r4,r2
   238e8:	180b883a 	mov	r5,r3
   238ec:	2005883a 	mov	r2,r4
   238f0:	2807883a 	mov	r3,r5
   238f4:	000d883a 	mov	r6,zero
   238f8:	01d00734 	movhi	r7,16412
   238fc:	1009883a 	mov	r4,r2
   23900:	180b883a 	mov	r5,r3
   23904:	002d7300 	call	2d730 <__adddf3>
   23908:	1009883a 	mov	r4,r2
   2390c:	180b883a 	mov	r5,r3
   23910:	2005883a 	mov	r2,r4
   23914:	2807883a 	mov	r3,r5
   23918:	e0bff615 	stw	r2,-40(fp)
   2391c:	e0fff715 	stw	r3,-36(fp)
      word0 (eps) -= (P - 1) * Exp_msk1;
   23920:	e0fff717 	ldw	r3,-36(fp)
   23924:	00bf3034 	movhi	r2,64704
   23928:	1885883a 	add	r2,r3,r2
   2392c:	e0bff715 	stw	r2,-36(fp)
      if (ilim == 0)
   23930:	e0bfd417 	ldw	r2,-176(fp)
   23934:	1000271e 	bne	r2,zero,239d4 <_dtoa_r+0xae4>
	{
	  S = mhi = 0;
   23938:	e03fe315 	stw	zero,-116(fp)
   2393c:	e0bfe317 	ldw	r2,-116(fp)
   23940:	e0bfe415 	stw	r2,-112(fp)
	  d.d -= 5.;
   23944:	e0bff217 	ldw	r2,-56(fp)
   23948:	e0fff317 	ldw	r3,-52(fp)
   2394c:	000d883a 	mov	r6,zero
   23950:	01d00534 	movhi	r7,16404
   23954:	1009883a 	mov	r4,r2
   23958:	180b883a 	mov	r5,r3
   2395c:	002f2340 	call	2f234 <__subdf3>
   23960:	1009883a 	mov	r4,r2
   23964:	180b883a 	mov	r5,r3
   23968:	2005883a 	mov	r2,r4
   2396c:	2807883a 	mov	r3,r5
   23970:	e0bff215 	stw	r2,-56(fp)
   23974:	e0fff315 	stw	r3,-52(fp)
	  if (d.d > eps.d)
   23978:	e0bff217 	ldw	r2,-56(fp)
   2397c:	e0fff317 	ldw	r3,-52(fp)
   23980:	e13ff617 	ldw	r4,-40(fp)
   23984:	e17ff717 	ldw	r5,-36(fp)
   23988:	200d883a 	mov	r6,r4
   2398c:	280f883a 	mov	r7,r5
   23990:	1009883a 	mov	r4,r2
   23994:	180b883a 	mov	r5,r3
   23998:	002e94c0 	call	2e94c <__gedf2>
   2399c:	0082eb16 	blt	zero,r2,2454c <_dtoa_r+0x165c>
	    goto one_digit;
	  if (d.d < -eps.d)
   239a0:	e23ff217 	ldw	r8,-56(fp)
   239a4:	e27ff317 	ldw	r9,-52(fp)
   239a8:	e0bff617 	ldw	r2,-40(fp)
   239ac:	e0fff717 	ldw	r3,-36(fp)
   239b0:	1021883a 	mov	r16,r2
   239b4:	1c60003c 	xorhi	r17,r3,32768
   239b8:	800d883a 	mov	r6,r16
   239bc:	880f883a 	mov	r7,r17
   239c0:	4009883a 	mov	r4,r8
   239c4:	480b883a 	mov	r5,r9
   239c8:	002ea280 	call	2ea28 <__ledf2>
   239cc:	1002da16 	blt	r2,zero,24538 <_dtoa_r+0x1648>
	    goto no_digits;
	  goto fast_failed;
   239d0:	0000fc06 	br	23dc4 <_dtoa_r+0xed4>
	}
#ifndef No_leftright
      if (leftright)
   239d4:	e0bfd917 	ldw	r2,-156(fp)
   239d8:	10007a26 	beq	r2,zero,23bc4 <_dtoa_r+0xcd4>
	{
	  /* Use Steele & White method of only
	   * generating digits needed.
	   */
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
   239dc:	e0bfd417 	ldw	r2,-176(fp)
   239e0:	10ffffc4 	addi	r3,r2,-1
   239e4:	008000f4 	movhi	r2,3
   239e8:	1087b604 	addi	r2,r2,7896
   239ec:	180690fa 	slli	r3,r3,3
   239f0:	10c9883a 	add	r4,r2,r3
   239f4:	20800017 	ldw	r2,0(r4)
   239f8:	20c00117 	ldw	r3,4(r4)
   239fc:	100d883a 	mov	r6,r2
   23a00:	180f883a 	mov	r7,r3
   23a04:	0009883a 	mov	r4,zero
   23a08:	014ff834 	movhi	r5,16352
   23a0c:	002dfdc0 	call	2dfdc <__divdf3>
   23a10:	1009883a 	mov	r4,r2
   23a14:	180b883a 	mov	r5,r3
   23a18:	2011883a 	mov	r8,r4
   23a1c:	2813883a 	mov	r9,r5
   23a20:	e0bff617 	ldw	r2,-40(fp)
   23a24:	e0fff717 	ldw	r3,-36(fp)
   23a28:	100d883a 	mov	r6,r2
   23a2c:	180f883a 	mov	r7,r3
   23a30:	4009883a 	mov	r4,r8
   23a34:	480b883a 	mov	r5,r9
   23a38:	002f2340 	call	2f234 <__subdf3>
   23a3c:	1009883a 	mov	r4,r2
   23a40:	180b883a 	mov	r5,r3
   23a44:	2005883a 	mov	r2,r4
   23a48:	2807883a 	mov	r3,r5
   23a4c:	e0bff615 	stw	r2,-40(fp)
   23a50:	e0fff715 	stw	r3,-36(fp)
	  for (i = 0;;)
   23a54:	e03fd215 	stw	zero,-184(fp)
	    {
	      L = d.d;
   23a58:	e0bff217 	ldw	r2,-56(fp)
   23a5c:	e0fff317 	ldw	r3,-52(fp)
   23a60:	1009883a 	mov	r4,r2
   23a64:	180b883a 	mov	r5,r3
   23a68:	002fb300 	call	2fb30 <__fixdfsi>
   23a6c:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
   23a70:	e43ff217 	ldw	r16,-56(fp)
   23a74:	e47ff317 	ldw	r17,-52(fp)
   23a78:	e13fed17 	ldw	r4,-76(fp)
   23a7c:	002fbb00 	call	2fbb0 <__floatsidf>
   23a80:	1009883a 	mov	r4,r2
   23a84:	180b883a 	mov	r5,r3
   23a88:	200d883a 	mov	r6,r4
   23a8c:	280f883a 	mov	r7,r5
   23a90:	8009883a 	mov	r4,r16
   23a94:	880b883a 	mov	r5,r17
   23a98:	002f2340 	call	2f234 <__subdf3>
   23a9c:	1009883a 	mov	r4,r2
   23aa0:	180b883a 	mov	r5,r3
   23aa4:	2005883a 	mov	r2,r4
   23aa8:	2807883a 	mov	r3,r5
   23aac:	e0bff215 	stw	r2,-56(fp)
   23ab0:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
   23ab4:	e0bfe717 	ldw	r2,-100(fp)
   23ab8:	10c00044 	addi	r3,r2,1
   23abc:	e0ffe715 	stw	r3,-100(fp)
   23ac0:	e0ffed17 	ldw	r3,-76(fp)
   23ac4:	18c00c04 	addi	r3,r3,48
   23ac8:	10c00005 	stb	r3,0(r2)
	      if (d.d < eps.d)
   23acc:	e0bff217 	ldw	r2,-56(fp)
   23ad0:	e0fff317 	ldw	r3,-52(fp)
   23ad4:	e13ff617 	ldw	r4,-40(fp)
   23ad8:	e17ff717 	ldw	r5,-36(fp)
   23adc:	200d883a 	mov	r6,r4
   23ae0:	280f883a 	mov	r7,r5
   23ae4:	1009883a 	mov	r4,r2
   23ae8:	180b883a 	mov	r5,r3
   23aec:	002ea280 	call	2ea28 <__ledf2>
   23af0:	1003c416 	blt	r2,zero,24a04 <_dtoa_r+0x1b14>
		goto ret1;
	      if (1. - d.d < eps.d)
   23af4:	e0bff217 	ldw	r2,-56(fp)
   23af8:	e0fff317 	ldw	r3,-52(fp)
   23afc:	100d883a 	mov	r6,r2
   23b00:	180f883a 	mov	r7,r3
   23b04:	0009883a 	mov	r4,zero
   23b08:	014ffc34 	movhi	r5,16368
   23b0c:	002f2340 	call	2f234 <__subdf3>
   23b10:	1009883a 	mov	r4,r2
   23b14:	180b883a 	mov	r5,r3
   23b18:	2011883a 	mov	r8,r4
   23b1c:	2813883a 	mov	r9,r5
   23b20:	e0bff617 	ldw	r2,-40(fp)
   23b24:	e0fff717 	ldw	r3,-36(fp)
   23b28:	100d883a 	mov	r6,r2
   23b2c:	180f883a 	mov	r7,r3
   23b30:	4009883a 	mov	r4,r8
   23b34:	480b883a 	mov	r5,r9
   23b38:	002ea280 	call	2ea28 <__ledf2>
   23b3c:	10012916 	blt	r2,zero,23fe4 <_dtoa_r+0x10f4>
		goto bump_up;
	      if (++i >= ilim)
   23b40:	e0bfd217 	ldw	r2,-184(fp)
   23b44:	10800044 	addi	r2,r2,1
   23b48:	e0bfd215 	stw	r2,-184(fp)
   23b4c:	e0ffd217 	ldw	r3,-184(fp)
   23b50:	e0bfd417 	ldw	r2,-176(fp)
   23b54:	18809a0e 	bge	r3,r2,23dc0 <_dtoa_r+0xed0>
		break;
	      eps.d *= 10.;
   23b58:	e0bff617 	ldw	r2,-40(fp)
   23b5c:	e0fff717 	ldw	r3,-36(fp)
   23b60:	000d883a 	mov	r6,zero
   23b64:	01d00934 	movhi	r7,16420
   23b68:	1009883a 	mov	r4,r2
   23b6c:	180b883a 	mov	r5,r3
   23b70:	002eb1c0 	call	2eb1c <__muldf3>
   23b74:	1009883a 	mov	r4,r2
   23b78:	180b883a 	mov	r5,r3
   23b7c:	2005883a 	mov	r2,r4
   23b80:	2807883a 	mov	r3,r5
   23b84:	e0bff615 	stw	r2,-40(fp)
   23b88:	e0fff715 	stw	r3,-36(fp)
	      d.d *= 10.;
   23b8c:	e0bff217 	ldw	r2,-56(fp)
   23b90:	e0fff317 	ldw	r3,-52(fp)
   23b94:	000d883a 	mov	r6,zero
   23b98:	01d00934 	movhi	r7,16420
   23b9c:	1009883a 	mov	r4,r2
   23ba0:	180b883a 	mov	r5,r3
   23ba4:	002eb1c0 	call	2eb1c <__muldf3>
   23ba8:	1009883a 	mov	r4,r2
   23bac:	180b883a 	mov	r5,r3
   23bb0:	2005883a 	mov	r2,r4
   23bb4:	2807883a 	mov	r3,r5
   23bb8:	e0bff215 	stw	r2,-56(fp)
   23bbc:	e0fff315 	stw	r3,-52(fp)
	    }
   23bc0:	003fa506 	br	23a58 <__alt_data_end+0xfffe3a58>
	}
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
   23bc4:	e0bff617 	ldw	r2,-40(fp)
   23bc8:	e0fff717 	ldw	r3,-36(fp)
   23bcc:	e13fd417 	ldw	r4,-176(fp)
   23bd0:	217fffc4 	addi	r5,r4,-1
   23bd4:	010000f4 	movhi	r4,3
   23bd8:	2107b604 	addi	r4,r4,7896
   23bdc:	280a90fa 	slli	r5,r5,3
   23be0:	214d883a 	add	r6,r4,r5
   23be4:	31000017 	ldw	r4,0(r6)
   23be8:	31400117 	ldw	r5,4(r6)
   23bec:	200d883a 	mov	r6,r4
   23bf0:	280f883a 	mov	r7,r5
   23bf4:	1009883a 	mov	r4,r2
   23bf8:	180b883a 	mov	r5,r3
   23bfc:	002eb1c0 	call	2eb1c <__muldf3>
   23c00:	1009883a 	mov	r4,r2
   23c04:	180b883a 	mov	r5,r3
   23c08:	2005883a 	mov	r2,r4
   23c0c:	2807883a 	mov	r3,r5
   23c10:	e0bff615 	stw	r2,-40(fp)
   23c14:	e0fff715 	stw	r3,-36(fp)
	  for (i = 1;; i++, d.d *= 10.)
   23c18:	00800044 	movi	r2,1
   23c1c:	e0bfd215 	stw	r2,-184(fp)
	    {
	      L = d.d;
   23c20:	e0bff217 	ldw	r2,-56(fp)
   23c24:	e0fff317 	ldw	r3,-52(fp)
   23c28:	1009883a 	mov	r4,r2
   23c2c:	180b883a 	mov	r5,r3
   23c30:	002fb300 	call	2fb30 <__fixdfsi>
   23c34:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
   23c38:	e43ff217 	ldw	r16,-56(fp)
   23c3c:	e47ff317 	ldw	r17,-52(fp)
   23c40:	e13fed17 	ldw	r4,-76(fp)
   23c44:	002fbb00 	call	2fbb0 <__floatsidf>
   23c48:	1009883a 	mov	r4,r2
   23c4c:	180b883a 	mov	r5,r3
   23c50:	200d883a 	mov	r6,r4
   23c54:	280f883a 	mov	r7,r5
   23c58:	8009883a 	mov	r4,r16
   23c5c:	880b883a 	mov	r5,r17
   23c60:	002f2340 	call	2f234 <__subdf3>
   23c64:	1009883a 	mov	r4,r2
   23c68:	180b883a 	mov	r5,r3
   23c6c:	2005883a 	mov	r2,r4
   23c70:	2807883a 	mov	r3,r5
   23c74:	e0bff215 	stw	r2,-56(fp)
   23c78:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
   23c7c:	e0bfe717 	ldw	r2,-100(fp)
   23c80:	10c00044 	addi	r3,r2,1
   23c84:	e0ffe715 	stw	r3,-100(fp)
   23c88:	e0ffed17 	ldw	r3,-76(fp)
   23c8c:	18c00c04 	addi	r3,r3,48
   23c90:	10c00005 	stb	r3,0(r2)
	      if (i == ilim)
   23c94:	e0ffd217 	ldw	r3,-184(fp)
   23c98:	e0bfd417 	ldw	r2,-176(fp)
   23c9c:	1880351e 	bne	r3,r2,23d74 <_dtoa_r+0xe84>
		{
		  if (d.d > 0.5 + eps.d)
   23ca0:	e43ff217 	ldw	r16,-56(fp)
   23ca4:	e47ff317 	ldw	r17,-52(fp)
   23ca8:	e0bff617 	ldw	r2,-40(fp)
   23cac:	e0fff717 	ldw	r3,-36(fp)
   23cb0:	000d883a 	mov	r6,zero
   23cb4:	01cff834 	movhi	r7,16352
   23cb8:	1009883a 	mov	r4,r2
   23cbc:	180b883a 	mov	r5,r3
   23cc0:	002d7300 	call	2d730 <__adddf3>
   23cc4:	1009883a 	mov	r4,r2
   23cc8:	180b883a 	mov	r5,r3
   23ccc:	2005883a 	mov	r2,r4
   23cd0:	2807883a 	mov	r3,r5
   23cd4:	100d883a 	mov	r6,r2
   23cd8:	180f883a 	mov	r7,r3
   23cdc:	8009883a 	mov	r4,r16
   23ce0:	880b883a 	mov	r5,r17
   23ce4:	002e94c0 	call	2e94c <__gedf2>
   23ce8:	0080c016 	blt	zero,r2,23fec <_dtoa_r+0x10fc>
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
   23cec:	e43ff217 	ldw	r16,-56(fp)
   23cf0:	e47ff317 	ldw	r17,-52(fp)
   23cf4:	e0bff617 	ldw	r2,-40(fp)
   23cf8:	e0fff717 	ldw	r3,-36(fp)
   23cfc:	100d883a 	mov	r6,r2
   23d00:	180f883a 	mov	r7,r3
   23d04:	0009883a 	mov	r4,zero
   23d08:	014ff834 	movhi	r5,16352
   23d0c:	002f2340 	call	2f234 <__subdf3>
   23d10:	1009883a 	mov	r4,r2
   23d14:	180b883a 	mov	r5,r3
   23d18:	2005883a 	mov	r2,r4
   23d1c:	2807883a 	mov	r3,r5
   23d20:	100d883a 	mov	r6,r2
   23d24:	180f883a 	mov	r7,r3
   23d28:	8009883a 	mov	r4,r16
   23d2c:	880b883a 	mov	r5,r17
   23d30:	002ea280 	call	2ea28 <__ledf2>
   23d34:	10000116 	blt	r2,zero,23d3c <_dtoa_r+0xe4c>
		    {
		      while (*--s == '0');
		      s++;
		      goto ret1;
		    }
		  break;
   23d38:	00002206 	br	23dc4 <_dtoa_r+0xed4>
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
		    {
		      while (*--s == '0');
   23d3c:	e0bfe717 	ldw	r2,-100(fp)
   23d40:	10bfffc4 	addi	r2,r2,-1
   23d44:	e0bfe715 	stw	r2,-100(fp)
   23d48:	e0bfe717 	ldw	r2,-100(fp)
   23d4c:	10800003 	ldbu	r2,0(r2)
   23d50:	10803fcc 	andi	r2,r2,255
   23d54:	1080201c 	xori	r2,r2,128
   23d58:	10bfe004 	addi	r2,r2,-128
   23d5c:	10800c20 	cmpeqi	r2,r2,48
   23d60:	103ff61e 	bne	r2,zero,23d3c <__alt_data_end+0xfffe3d3c>
		      s++;
   23d64:	e0bfe717 	ldw	r2,-100(fp)
   23d68:	10800044 	addi	r2,r2,1
   23d6c:	e0bfe715 	stw	r2,-100(fp)
		      goto ret1;
   23d70:	00032506 	br	24a08 <_dtoa_r+0x1b18>
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
	  for (i = 1;; i++, d.d *= 10.)
   23d74:	e0bfd217 	ldw	r2,-184(fp)
   23d78:	10800044 	addi	r2,r2,1
   23d7c:	e0bfd215 	stw	r2,-184(fp)
   23d80:	e0bff217 	ldw	r2,-56(fp)
   23d84:	e0fff317 	ldw	r3,-52(fp)
   23d88:	000d883a 	mov	r6,zero
   23d8c:	01d00934 	movhi	r7,16420
   23d90:	1009883a 	mov	r4,r2
   23d94:	180b883a 	mov	r5,r3
   23d98:	002eb1c0 	call	2eb1c <__muldf3>
   23d9c:	1009883a 	mov	r4,r2
   23da0:	180b883a 	mov	r5,r3
   23da4:	2005883a 	mov	r2,r4
   23da8:	2807883a 	mov	r3,r5
   23dac:	e0bff215 	stw	r2,-56(fp)
   23db0:	e0fff315 	stw	r3,-52(fp)
		      s++;
		      goto ret1;
		    }
		  break;
		}
	    }
   23db4:	003f9a06 	br	23c20 <__alt_data_end+0xfffe3c20>
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
	{
	  if (ilim1 <= 0)
	    goto fast_failed;
   23db8:	0001883a 	nop
   23dbc:	00000106 	br	23dc4 <_dtoa_r+0xed4>
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
	      if (++i >= ilim)
		break;
   23dc0:	0001883a 	nop
	    }
#ifndef No_leftright
	}
#endif
    fast_failed:
      s = s0;
   23dc4:	e0bfe917 	ldw	r2,-92(fp)
   23dc8:	e0bfe715 	stw	r2,-100(fp)
      d.d = d2.d;
   23dcc:	e0bff417 	ldw	r2,-48(fp)
   23dd0:	e0fff517 	ldw	r3,-44(fp)
   23dd4:	e0bff215 	stw	r2,-56(fp)
   23dd8:	e0fff315 	stw	r3,-52(fp)
      k = k0;
   23ddc:	e0bfea17 	ldw	r2,-88(fp)
   23de0:	e0bfd715 	stw	r2,-164(fp)
      ilim = ilim0;
   23de4:	e0bfeb17 	ldw	r2,-84(fp)
   23de8:	e0bfd415 	stw	r2,-176(fp)
    }

  /* Do we have a "small" integer? */

  if (be >= 0 && k <= Int_max)
   23dec:	e0bff117 	ldw	r2,-60(fp)
   23df0:	1000b816 	blt	r2,zero,240d4 <_dtoa_r+0x11e4>
   23df4:	e0bfd717 	ldw	r2,-164(fp)
   23df8:	108003c8 	cmpgei	r2,r2,15
   23dfc:	1000b51e 	bne	r2,zero,240d4 <_dtoa_r+0x11e4>
    {
      /* Yes. */
      ds = tens[k];
   23e00:	008000f4 	movhi	r2,3
   23e04:	1087b604 	addi	r2,r2,7896
   23e08:	e0ffd717 	ldw	r3,-164(fp)
   23e0c:	180690fa 	slli	r3,r3,3
   23e10:	10c5883a 	add	r2,r2,r3
   23e14:	10c00017 	ldw	r3,0(r2)
   23e18:	e0ffe515 	stw	r3,-108(fp)
   23e1c:	10800117 	ldw	r2,4(r2)
   23e20:	e0bfe615 	stw	r2,-104(fp)
      if (ndigits < 0 && ilim <= 0)
   23e24:	e0800217 	ldw	r2,8(fp)
   23e28:	1000190e 	bge	r2,zero,23e90 <_dtoa_r+0xfa0>
   23e2c:	e0bfd417 	ldw	r2,-176(fp)
   23e30:	00801716 	blt	zero,r2,23e90 <_dtoa_r+0xfa0>
	{
	  S = mhi = 0;
   23e34:	e03fe315 	stw	zero,-116(fp)
   23e38:	e0bfe317 	ldw	r2,-116(fp)
   23e3c:	e0bfe415 	stw	r2,-112(fp)
	  if (ilim < 0 || d.d <= 5 * ds)
   23e40:	e0bfd417 	ldw	r2,-176(fp)
   23e44:	1001bd16 	blt	r2,zero,2453c <_dtoa_r+0x164c>
   23e48:	e43ff217 	ldw	r16,-56(fp)
   23e4c:	e47ff317 	ldw	r17,-52(fp)
   23e50:	000d883a 	mov	r6,zero
   23e54:	01d00534 	movhi	r7,16404
   23e58:	e13fe517 	ldw	r4,-108(fp)
   23e5c:	e17fe617 	ldw	r5,-104(fp)
   23e60:	002eb1c0 	call	2eb1c <__muldf3>
   23e64:	1009883a 	mov	r4,r2
   23e68:	180b883a 	mov	r5,r3
   23e6c:	2005883a 	mov	r2,r4
   23e70:	2807883a 	mov	r3,r5
   23e74:	100d883a 	mov	r6,r2
   23e78:	180f883a 	mov	r7,r3
   23e7c:	8009883a 	mov	r4,r16
   23e80:	880b883a 	mov	r5,r17
   23e84:	002ea280 	call	2ea28 <__ledf2>
   23e88:	0081ac0e 	bge	zero,r2,2453c <_dtoa_r+0x164c>
	    goto no_digits;
	  goto one_digit;
   23e8c:	0001b006 	br	24550 <_dtoa_r+0x1660>
	}
      for (i = 1;; i++)
   23e90:	00800044 	movi	r2,1
   23e94:	e0bfd215 	stw	r2,-184(fp)
	{
	  L = d.d / ds;
   23e98:	e0bff217 	ldw	r2,-56(fp)
   23e9c:	e0fff317 	ldw	r3,-52(fp)
   23ea0:	e1bfe517 	ldw	r6,-108(fp)
   23ea4:	e1ffe617 	ldw	r7,-104(fp)
   23ea8:	1009883a 	mov	r4,r2
   23eac:	180b883a 	mov	r5,r3
   23eb0:	002dfdc0 	call	2dfdc <__divdf3>
   23eb4:	1009883a 	mov	r4,r2
   23eb8:	180b883a 	mov	r5,r3
   23ebc:	2005883a 	mov	r2,r4
   23ec0:	2807883a 	mov	r3,r5
   23ec4:	1009883a 	mov	r4,r2
   23ec8:	180b883a 	mov	r5,r3
   23ecc:	002fb300 	call	2fb30 <__fixdfsi>
   23ed0:	e0bfed15 	stw	r2,-76(fp)
	  d.d -= L * ds;
   23ed4:	e43ff217 	ldw	r16,-56(fp)
   23ed8:	e47ff317 	ldw	r17,-52(fp)
   23edc:	e13fed17 	ldw	r4,-76(fp)
   23ee0:	002fbb00 	call	2fbb0 <__floatsidf>
   23ee4:	1011883a 	mov	r8,r2
   23ee8:	1813883a 	mov	r9,r3
   23eec:	e1bfe517 	ldw	r6,-108(fp)
   23ef0:	e1ffe617 	ldw	r7,-104(fp)
   23ef4:	4009883a 	mov	r4,r8
   23ef8:	480b883a 	mov	r5,r9
   23efc:	002eb1c0 	call	2eb1c <__muldf3>
   23f00:	1009883a 	mov	r4,r2
   23f04:	180b883a 	mov	r5,r3
   23f08:	2005883a 	mov	r2,r4
   23f0c:	2807883a 	mov	r3,r5
   23f10:	100d883a 	mov	r6,r2
   23f14:	180f883a 	mov	r7,r3
   23f18:	8009883a 	mov	r4,r16
   23f1c:	880b883a 	mov	r5,r17
   23f20:	002f2340 	call	2f234 <__subdf3>
   23f24:	1009883a 	mov	r4,r2
   23f28:	180b883a 	mov	r5,r3
   23f2c:	2005883a 	mov	r2,r4
   23f30:	2807883a 	mov	r3,r5
   23f34:	e0bff215 	stw	r2,-56(fp)
   23f38:	e0fff315 	stw	r3,-52(fp)
	    {
	      L--;
	      d.d += ds;
	    }
#endif
	  *s++ = '0' + (int) L;
   23f3c:	e0bfe717 	ldw	r2,-100(fp)
   23f40:	10c00044 	addi	r3,r2,1
   23f44:	e0ffe715 	stw	r3,-100(fp)
   23f48:	e0ffed17 	ldw	r3,-76(fp)
   23f4c:	18c00c04 	addi	r3,r3,48
   23f50:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
   23f54:	e0ffd217 	ldw	r3,-184(fp)
   23f58:	e0bfd417 	ldw	r2,-176(fp)
   23f5c:	1880401e 	bne	r3,r2,24060 <_dtoa_r+0x1170>
	    {
	      d.d += d.d;
   23f60:	e0bff217 	ldw	r2,-56(fp)
   23f64:	e0fff317 	ldw	r3,-52(fp)
   23f68:	100d883a 	mov	r6,r2
   23f6c:	180f883a 	mov	r7,r3
   23f70:	1009883a 	mov	r4,r2
   23f74:	180b883a 	mov	r5,r3
   23f78:	002d7300 	call	2d730 <__adddf3>
   23f7c:	1009883a 	mov	r4,r2
   23f80:	180b883a 	mov	r5,r3
   23f84:	2005883a 	mov	r2,r4
   23f88:	2807883a 	mov	r3,r5
   23f8c:	e0bff215 	stw	r2,-56(fp)
   23f90:	e0fff315 	stw	r3,-52(fp)
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
   23f94:	e0bff217 	ldw	r2,-56(fp)
   23f98:	e0fff317 	ldw	r3,-52(fp)
   23f9c:	e1bfe517 	ldw	r6,-108(fp)
   23fa0:	e1ffe617 	ldw	r7,-104(fp)
   23fa4:	1009883a 	mov	r4,r2
   23fa8:	180b883a 	mov	r5,r3
   23fac:	002e94c0 	call	2e94c <__gedf2>
   23fb0:	00801a16 	blt	zero,r2,2401c <_dtoa_r+0x112c>
   23fb4:	e0bff217 	ldw	r2,-56(fp)
   23fb8:	e0fff317 	ldw	r3,-52(fp)
   23fbc:	e1bfe517 	ldw	r6,-108(fp)
   23fc0:	e1ffe617 	ldw	r7,-104(fp)
   23fc4:	1009883a 	mov	r4,r2
   23fc8:	180b883a 	mov	r5,r3
   23fcc:	002e8c40 	call	2e8c4 <__eqdf2>
   23fd0:	10003c1e 	bne	r2,zero,240c4 <_dtoa_r+0x11d4>
   23fd4:	e0bfed17 	ldw	r2,-76(fp)
   23fd8:	1080004c 	andi	r2,r2,1
   23fdc:	10003926 	beq	r2,zero,240c4 <_dtoa_r+0x11d4>
   23fe0:	00000e06 	br	2401c <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
   23fe4:	0001883a 	nop
   23fe8:	00000c06 	br	2401c <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (i == ilim)
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
   23fec:	0001883a 	nop
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
   23ff0:	00000a06 	br	2401c <_dtoa_r+0x112c>
		    if (s == s0)
   23ff4:	e0ffe717 	ldw	r3,-100(fp)
   23ff8:	e0bfe917 	ldw	r2,-92(fp)
   23ffc:	1880071e 	bne	r3,r2,2401c <_dtoa_r+0x112c>
		      {
			k++;
   24000:	e0bfd717 	ldw	r2,-164(fp)
   24004:	10800044 	addi	r2,r2,1
   24008:	e0bfd715 	stw	r2,-164(fp)
			*s = '0';
   2400c:	e0bfe717 	ldw	r2,-100(fp)
   24010:	00c00c04 	movi	r3,48
   24014:	10c00005 	stb	r3,0(r2)
			break;
   24018:	00000a06 	br	24044 <_dtoa_r+0x1154>
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
   2401c:	e0bfe717 	ldw	r2,-100(fp)
   24020:	10bfffc4 	addi	r2,r2,-1
   24024:	e0bfe715 	stw	r2,-100(fp)
   24028:	e0bfe717 	ldw	r2,-100(fp)
   2402c:	10800003 	ldbu	r2,0(r2)
   24030:	10803fcc 	andi	r2,r2,255
   24034:	1080201c 	xori	r2,r2,128
   24038:	10bfe004 	addi	r2,r2,-128
   2403c:	10800e60 	cmpeqi	r2,r2,57
   24040:	103fec1e 	bne	r2,zero,23ff4 <__alt_data_end+0xfffe3ff4>
		      {
			k++;
			*s = '0';
			break;
		      }
		  ++*s++;
   24044:	e0bfe717 	ldw	r2,-100(fp)
   24048:	10c00044 	addi	r3,r2,1
   2404c:	e0ffe715 	stw	r3,-100(fp)
   24050:	10c00003 	ldbu	r3,0(r2)
   24054:	18c00044 	addi	r3,r3,1
   24058:	10c00005 	stb	r3,0(r2)
		}
	      break;
   2405c:	00001906 	br	240c4 <_dtoa_r+0x11d4>
	    }
	  if (!(d.d *= 10.))
   24060:	e0bff217 	ldw	r2,-56(fp)
   24064:	e0fff317 	ldw	r3,-52(fp)
   24068:	000d883a 	mov	r6,zero
   2406c:	01d00934 	movhi	r7,16420
   24070:	1009883a 	mov	r4,r2
   24074:	180b883a 	mov	r5,r3
   24078:	002eb1c0 	call	2eb1c <__muldf3>
   2407c:	1009883a 	mov	r4,r2
   24080:	180b883a 	mov	r5,r3
   24084:	2005883a 	mov	r2,r4
   24088:	2807883a 	mov	r3,r5
   2408c:	e0bff215 	stw	r2,-56(fp)
   24090:	e0fff315 	stw	r3,-52(fp)
   24094:	e0bff217 	ldw	r2,-56(fp)
   24098:	e0fff317 	ldw	r3,-52(fp)
   2409c:	000d883a 	mov	r6,zero
   240a0:	000f883a 	mov	r7,zero
   240a4:	1009883a 	mov	r4,r2
   240a8:	180b883a 	mov	r5,r3
   240ac:	002e8c40 	call	2e8c4 <__eqdf2>
   240b0:	10000626 	beq	r2,zero,240cc <_dtoa_r+0x11dc>
	  S = mhi = 0;
	  if (ilim < 0 || d.d <= 5 * ds)
	    goto no_digits;
	  goto one_digit;
	}
      for (i = 1;; i++)
   240b4:	e0bfd217 	ldw	r2,-184(fp)
   240b8:	10800044 	addi	r2,r2,1
   240bc:	e0bfd215 	stw	r2,-184(fp)
		}
	      break;
	    }
	  if (!(d.d *= 10.))
	    break;
	}
   240c0:	003f7506 	br	23e98 <__alt_data_end+0xfffe3e98>
			*s = '0';
			break;
		      }
		  ++*s++;
		}
	      break;
   240c4:	0001883a 	nop
   240c8:	00024f06 	br	24a08 <_dtoa_r+0x1b18>
	    }
	  if (!(d.d *= 10.))
	    break;
   240cc:	0001883a 	nop
	}
      goto ret1;
   240d0:	00024d06 	br	24a08 <_dtoa_r+0x1b18>
    }

  m2 = b2;
   240d4:	e0bfcf17 	ldw	r2,-196(fp)
   240d8:	e0bfda15 	stw	r2,-152(fp)
  m5 = b5;
   240dc:	e0bfd017 	ldw	r2,-192(fp)
   240e0:	e0bfdb15 	stw	r2,-148(fp)
  mhi = mlo = 0;
   240e4:	e03fe215 	stw	zero,-120(fp)
   240e8:	e0bfe217 	ldw	r2,-120(fp)
   240ec:	e0bfe315 	stw	r2,-116(fp)
  if (leftright)
   240f0:	e0bfd917 	ldw	r2,-156(fp)
   240f4:	10003a26 	beq	r2,zero,241e0 <_dtoa_r+0x12f0>
    {
      if (mode < 2)
   240f8:	e0bffb17 	ldw	r2,-20(fp)
   240fc:	10800088 	cmpgei	r2,r2,2
   24100:	10000a1e 	bne	r2,zero,2412c <_dtoa_r+0x123c>
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
   24104:	e0bfe017 	ldw	r2,-128(fp)
   24108:	10000326 	beq	r2,zero,24118 <_dtoa_r+0x1228>
   2410c:	e0bff117 	ldw	r2,-60(fp)
   24110:	10810cc4 	addi	r2,r2,1075
   24114:	00000306 	br	24124 <_dtoa_r+0x1234>
#endif
#ifdef IBM
	    1 + 4 * P - 3 - bbits + ((bbits + be - 1) & 3);
#else
	    1 + P - bbits;
   24118:	e0bff017 	ldw	r2,-64(fp)
    {
      if (mode < 2)
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
   2411c:	00c00d84 	movi	r3,54
   24120:	1885c83a 	sub	r2,r3,r2
  mhi = mlo = 0;
  if (leftright)
    {
      if (mode < 2)
	{
	  i =
   24124:	e0bfd215 	stw	r2,-184(fp)
   24128:	00002106 	br	241b0 <_dtoa_r+0x12c0>
	    1 + P - bbits;
#endif
	}
      else
	{
	  j = ilim - 1;
   2412c:	e0bfd417 	ldw	r2,-176(fp)
   24130:	10bfffc4 	addi	r2,r2,-1
   24134:	e0bfd615 	stw	r2,-168(fp)
	  if (m5 >= j)
   24138:	e0ffdb17 	ldw	r3,-148(fp)
   2413c:	e0bfd617 	ldw	r2,-168(fp)
   24140:	18800516 	blt	r3,r2,24158 <_dtoa_r+0x1268>
	    m5 -= j;
   24144:	e0ffdb17 	ldw	r3,-148(fp)
   24148:	e0bfd617 	ldw	r2,-168(fp)
   2414c:	1885c83a 	sub	r2,r3,r2
   24150:	e0bfdb15 	stw	r2,-148(fp)
   24154:	00000d06 	br	2418c <_dtoa_r+0x129c>
	  else
	    {
	      s5 += j -= m5;
   24158:	e0ffd617 	ldw	r3,-168(fp)
   2415c:	e0bfdb17 	ldw	r2,-148(fp)
   24160:	1885c83a 	sub	r2,r3,r2
   24164:	e0bfd615 	stw	r2,-168(fp)
   24168:	e0bfd617 	ldw	r2,-168(fp)
   2416c:	e0ffdd17 	ldw	r3,-140(fp)
   24170:	1885883a 	add	r2,r3,r2
   24174:	e0bfdd15 	stw	r2,-140(fp)
	      b5 += j;
   24178:	e0ffd017 	ldw	r3,-192(fp)
   2417c:	e0bfd617 	ldw	r2,-168(fp)
   24180:	1885883a 	add	r2,r3,r2
   24184:	e0bfd015 	stw	r2,-192(fp)
	      m5 = 0;
   24188:	e03fdb15 	stw	zero,-148(fp)
	    }
	  if ((i = ilim) < 0)
   2418c:	e0bfd417 	ldw	r2,-176(fp)
   24190:	e0bfd215 	stw	r2,-184(fp)
   24194:	e0bfd217 	ldw	r2,-184(fp)
   24198:	1000050e 	bge	r2,zero,241b0 <_dtoa_r+0x12c0>
	    {
	      m2 -= i;
   2419c:	e0ffda17 	ldw	r3,-152(fp)
   241a0:	e0bfd217 	ldw	r2,-184(fp)
   241a4:	1885c83a 	sub	r2,r3,r2
   241a8:	e0bfda15 	stw	r2,-152(fp)
	      i = 0;
   241ac:	e03fd215 	stw	zero,-184(fp)
	    }
	}
      b2 += i;
   241b0:	e0ffcf17 	ldw	r3,-196(fp)
   241b4:	e0bfd217 	ldw	r2,-184(fp)
   241b8:	1885883a 	add	r2,r3,r2
   241bc:	e0bfcf15 	stw	r2,-196(fp)
      s2 += i;
   241c0:	e0ffdc17 	ldw	r3,-144(fp)
   241c4:	e0bfd217 	ldw	r2,-184(fp)
   241c8:	1885883a 	add	r2,r3,r2
   241cc:	e0bfdc15 	stw	r2,-144(fp)
      mhi = i2b (ptr, 1);
   241d0:	01400044 	movi	r5,1
   241d4:	e13ff817 	ldw	r4,-32(fp)
   241d8:	002830c0 	call	2830c <__i2b>
   241dc:	e0bfe315 	stw	r2,-116(fp)
    }
  if (m2 > 0 && s2 > 0)
   241e0:	e0bfda17 	ldw	r2,-152(fp)
   241e4:	0080130e 	bge	zero,r2,24234 <_dtoa_r+0x1344>
   241e8:	e0bfdc17 	ldw	r2,-144(fp)
   241ec:	0080110e 	bge	zero,r2,24234 <_dtoa_r+0x1344>
    {
      i = m2 < s2 ? m2 : s2;
   241f0:	e0ffda17 	ldw	r3,-152(fp)
   241f4:	e0bfdc17 	ldw	r2,-144(fp)
   241f8:	1880010e 	bge	r3,r2,24200 <_dtoa_r+0x1310>
   241fc:	1805883a 	mov	r2,r3
   24200:	e0bfd215 	stw	r2,-184(fp)
      b2 -= i;
   24204:	e0ffcf17 	ldw	r3,-196(fp)
   24208:	e0bfd217 	ldw	r2,-184(fp)
   2420c:	1885c83a 	sub	r2,r3,r2
   24210:	e0bfcf15 	stw	r2,-196(fp)
      m2 -= i;
   24214:	e0ffda17 	ldw	r3,-152(fp)
   24218:	e0bfd217 	ldw	r2,-184(fp)
   2421c:	1885c83a 	sub	r2,r3,r2
   24220:	e0bfda15 	stw	r2,-152(fp)
      s2 -= i;
   24224:	e0ffdc17 	ldw	r3,-144(fp)
   24228:	e0bfd217 	ldw	r2,-184(fp)
   2422c:	1885c83a 	sub	r2,r3,r2
   24230:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b5 > 0)
   24234:	e0bfd017 	ldw	r2,-192(fp)
   24238:	0080240e 	bge	zero,r2,242cc <_dtoa_r+0x13dc>
    {
      if (leftright)
   2423c:	e0bfd917 	ldw	r2,-156(fp)
   24240:	10001d26 	beq	r2,zero,242b8 <_dtoa_r+0x13c8>
	{
	  if (m5 > 0)
   24244:	e0bfdb17 	ldw	r2,-148(fp)
   24248:	00800f0e 	bge	zero,r2,24288 <_dtoa_r+0x1398>
	    {
	      mhi = pow5mult (ptr, mhi, m5);
   2424c:	e1bfdb17 	ldw	r6,-148(fp)
   24250:	e17fe317 	ldw	r5,-116(fp)
   24254:	e13ff817 	ldw	r4,-32(fp)
   24258:	00287340 	call	28734 <__pow5mult>
   2425c:	e0bfe315 	stw	r2,-116(fp)
	      b1 = mult (ptr, mhi, b);
   24260:	e1bfe117 	ldw	r6,-124(fp)
   24264:	e17fe317 	ldw	r5,-116(fp)
   24268:	e13ff817 	ldw	r4,-32(fp)
   2426c:	00283640 	call	28364 <__multiply>
   24270:	e0bfee15 	stw	r2,-72(fp)
	      Bfree (ptr, b);
   24274:	e17fe117 	ldw	r5,-124(fp)
   24278:	e13ff817 	ldw	r4,-32(fp)
   2427c:	0027df80 	call	27df8 <_Bfree>
	      b = b1;
   24280:	e0bfee17 	ldw	r2,-72(fp)
   24284:	e0bfe115 	stw	r2,-124(fp)
	    }
         if ((j = b5 - m5) != 0)
   24288:	e0ffd017 	ldw	r3,-192(fp)
   2428c:	e0bfdb17 	ldw	r2,-148(fp)
   24290:	1885c83a 	sub	r2,r3,r2
   24294:	e0bfd615 	stw	r2,-168(fp)
   24298:	e0bfd617 	ldw	r2,-168(fp)
   2429c:	10000b26 	beq	r2,zero,242cc <_dtoa_r+0x13dc>
	    b = pow5mult (ptr, b, j);
   242a0:	e1bfd617 	ldw	r6,-168(fp)
   242a4:	e17fe117 	ldw	r5,-124(fp)
   242a8:	e13ff817 	ldw	r4,-32(fp)
   242ac:	00287340 	call	28734 <__pow5mult>
   242b0:	e0bfe115 	stw	r2,-124(fp)
   242b4:	00000506 	br	242cc <_dtoa_r+0x13dc>
	}
      else
	b = pow5mult (ptr, b, b5);
   242b8:	e1bfd017 	ldw	r6,-192(fp)
   242bc:	e17fe117 	ldw	r5,-124(fp)
   242c0:	e13ff817 	ldw	r4,-32(fp)
   242c4:	00287340 	call	28734 <__pow5mult>
   242c8:	e0bfe115 	stw	r2,-124(fp)
    }
  S = i2b (ptr, 1);
   242cc:	01400044 	movi	r5,1
   242d0:	e13ff817 	ldw	r4,-32(fp)
   242d4:	002830c0 	call	2830c <__i2b>
   242d8:	e0bfe415 	stw	r2,-112(fp)
  if (s5 > 0)
   242dc:	e0bfdd17 	ldw	r2,-140(fp)
   242e0:	0080050e 	bge	zero,r2,242f8 <_dtoa_r+0x1408>
    S = pow5mult (ptr, S, s5);
   242e4:	e1bfdd17 	ldw	r6,-140(fp)
   242e8:	e17fe417 	ldw	r5,-112(fp)
   242ec:	e13ff817 	ldw	r4,-32(fp)
   242f0:	00287340 	call	28734 <__pow5mult>
   242f4:	e0bfe415 	stw	r2,-112(fp)

  /* Check for special case that d is a normalized power of 2. */

  spec_case = 0;
   242f8:	e03fde15 	stw	zero,-136(fp)
  if (mode < 2)
   242fc:	e0bffb17 	ldw	r2,-20(fp)
   24300:	10800088 	cmpgei	r2,r2,2
   24304:	1000121e 	bne	r2,zero,24350 <_dtoa_r+0x1460>
    {
      if (!word1 (d) && !(word0 (d) & Bndry_mask)
   24308:	e0bff217 	ldw	r2,-56(fp)
   2430c:	1000101e 	bne	r2,zero,24350 <_dtoa_r+0x1460>
   24310:	e0fff317 	ldw	r3,-52(fp)
   24314:	00800434 	movhi	r2,16
   24318:	10bfffc4 	addi	r2,r2,-1
   2431c:	1884703a 	and	r2,r3,r2
   24320:	10000b1e 	bne	r2,zero,24350 <_dtoa_r+0x1460>
#ifndef Sudden_Underflow
	  && word0 (d) & Exp_mask
   24324:	e0bff317 	ldw	r2,-52(fp)
   24328:	109ffc2c 	andhi	r2,r2,32752
   2432c:	10000826 	beq	r2,zero,24350 <_dtoa_r+0x1460>
#endif
	)
	{
	  /* The special case */
	  b2 += Log2P;
   24330:	e0bfcf17 	ldw	r2,-196(fp)
   24334:	10800044 	addi	r2,r2,1
   24338:	e0bfcf15 	stw	r2,-196(fp)
	  s2 += Log2P;
   2433c:	e0bfdc17 	ldw	r2,-144(fp)
   24340:	10800044 	addi	r2,r2,1
   24344:	e0bfdc15 	stw	r2,-144(fp)
	  spec_case = 1;
   24348:	00800044 	movi	r2,1
   2434c:	e0bfde15 	stw	r2,-136(fp)
   * and for all and pass them and a shift to quorem, so it
   * can do shifts and ors to compute the numerator for q.
   */

#ifdef Pack_32
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0x1f) != 0)
   24350:	e0bfdd17 	ldw	r2,-140(fp)
   24354:	10000f26 	beq	r2,zero,24394 <_dtoa_r+0x14a4>
   24358:	e0bfe417 	ldw	r2,-112(fp)
   2435c:	10800417 	ldw	r2,16(r2)
   24360:	10bfffc4 	addi	r2,r2,-1
   24364:	e0ffe417 	ldw	r3,-112(fp)
   24368:	10800144 	addi	r2,r2,5
   2436c:	1085883a 	add	r2,r2,r2
   24370:	1085883a 	add	r2,r2,r2
   24374:	1885883a 	add	r2,r3,r2
   24378:	10800017 	ldw	r2,0(r2)
   2437c:	1009883a 	mov	r4,r2
   24380:	00281900 	call	28190 <__hi0bits>
   24384:	1007883a 	mov	r3,r2
   24388:	00800804 	movi	r2,32
   2438c:	10c5c83a 	sub	r2,r2,r3
   24390:	00000106 	br	24398 <_dtoa_r+0x14a8>
   24394:	00800044 	movi	r2,1
   24398:	e0ffdc17 	ldw	r3,-144(fp)
   2439c:	10c5883a 	add	r2,r2,r3
   243a0:	108007cc 	andi	r2,r2,31
   243a4:	e0bfd215 	stw	r2,-184(fp)
   243a8:	e0bfd217 	ldw	r2,-184(fp)
   243ac:	10000426 	beq	r2,zero,243c0 <_dtoa_r+0x14d0>
    i = 32 - i;
   243b0:	00c00804 	movi	r3,32
   243b4:	e0bfd217 	ldw	r2,-184(fp)
   243b8:	1885c83a 	sub	r2,r3,r2
   243bc:	e0bfd215 	stw	r2,-184(fp)
#else
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0xf) != 0)
    i = 16 - i;
#endif
  if (i > 4)
   243c0:	e0bfd217 	ldw	r2,-184(fp)
   243c4:	10800150 	cmplti	r2,r2,5
   243c8:	1000101e 	bne	r2,zero,2440c <_dtoa_r+0x151c>
    {
      i -= 4;
   243cc:	e0bfd217 	ldw	r2,-184(fp)
   243d0:	10bfff04 	addi	r2,r2,-4
   243d4:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
   243d8:	e0ffcf17 	ldw	r3,-196(fp)
   243dc:	e0bfd217 	ldw	r2,-184(fp)
   243e0:	1885883a 	add	r2,r3,r2
   243e4:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
   243e8:	e0ffda17 	ldw	r3,-152(fp)
   243ec:	e0bfd217 	ldw	r2,-184(fp)
   243f0:	1885883a 	add	r2,r3,r2
   243f4:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
   243f8:	e0ffdc17 	ldw	r3,-144(fp)
   243fc:	e0bfd217 	ldw	r2,-184(fp)
   24400:	1885883a 	add	r2,r3,r2
   24404:	e0bfdc15 	stw	r2,-144(fp)
   24408:	00001206 	br	24454 <_dtoa_r+0x1564>
    }
  else if (i < 4)
   2440c:	e0bfd217 	ldw	r2,-184(fp)
   24410:	10800108 	cmpgei	r2,r2,4
   24414:	10000f1e 	bne	r2,zero,24454 <_dtoa_r+0x1564>
    {
      i += 28;
   24418:	e0bfd217 	ldw	r2,-184(fp)
   2441c:	10800704 	addi	r2,r2,28
   24420:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
   24424:	e0ffcf17 	ldw	r3,-196(fp)
   24428:	e0bfd217 	ldw	r2,-184(fp)
   2442c:	1885883a 	add	r2,r3,r2
   24430:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
   24434:	e0ffda17 	ldw	r3,-152(fp)
   24438:	e0bfd217 	ldw	r2,-184(fp)
   2443c:	1885883a 	add	r2,r3,r2
   24440:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
   24444:	e0ffdc17 	ldw	r3,-144(fp)
   24448:	e0bfd217 	ldw	r2,-184(fp)
   2444c:	1885883a 	add	r2,r3,r2
   24450:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b2 > 0)
   24454:	e0bfcf17 	ldw	r2,-196(fp)
   24458:	0080050e 	bge	zero,r2,24470 <_dtoa_r+0x1580>
    b = lshift (ptr, b, b2);
   2445c:	e1bfcf17 	ldw	r6,-196(fp)
   24460:	e17fe117 	ldw	r5,-124(fp)
   24464:	e13ff817 	ldw	r4,-32(fp)
   24468:	00288ac0 	call	288ac <__lshift>
   2446c:	e0bfe115 	stw	r2,-124(fp)
  if (s2 > 0)
   24470:	e0bfdc17 	ldw	r2,-144(fp)
   24474:	0080050e 	bge	zero,r2,2448c <_dtoa_r+0x159c>
    S = lshift (ptr, S, s2);
   24478:	e1bfdc17 	ldw	r6,-144(fp)
   2447c:	e17fe417 	ldw	r5,-112(fp)
   24480:	e13ff817 	ldw	r4,-32(fp)
   24484:	00288ac0 	call	288ac <__lshift>
   24488:	e0bfe415 	stw	r2,-112(fp)
  if (k_check)
   2448c:	e0bfd817 	ldw	r2,-160(fp)
   24490:	10001726 	beq	r2,zero,244f0 <_dtoa_r+0x1600>
    {
      if (cmp (b, S) < 0)
   24494:	e17fe417 	ldw	r5,-112(fp)
   24498:	e13fe117 	ldw	r4,-124(fp)
   2449c:	0028aa40 	call	28aa4 <__mcmp>
   244a0:	1000130e 	bge	r2,zero,244f0 <_dtoa_r+0x1600>
	{
	  k--;
   244a4:	e0bfd717 	ldw	r2,-164(fp)
   244a8:	10bfffc4 	addi	r2,r2,-1
   244ac:	e0bfd715 	stw	r2,-164(fp)
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
   244b0:	000f883a 	mov	r7,zero
   244b4:	01800284 	movi	r6,10
   244b8:	e17fe117 	ldw	r5,-124(fp)
   244bc:	e13ff817 	ldw	r4,-32(fp)
   244c0:	0027e740 	call	27e74 <__multadd>
   244c4:	e0bfe115 	stw	r2,-124(fp)
	  if (leftright)
   244c8:	e0bfd917 	ldw	r2,-156(fp)
   244cc:	10000626 	beq	r2,zero,244e8 <_dtoa_r+0x15f8>
	    mhi = multadd (ptr, mhi, 10, 0);
   244d0:	000f883a 	mov	r7,zero
   244d4:	01800284 	movi	r6,10
   244d8:	e17fe317 	ldw	r5,-116(fp)
   244dc:	e13ff817 	ldw	r4,-32(fp)
   244e0:	0027e740 	call	27e74 <__multadd>
   244e4:	e0bfe315 	stw	r2,-116(fp)
	  ilim = ilim1;
   244e8:	e0bfd517 	ldw	r2,-172(fp)
   244ec:	e0bfd415 	stw	r2,-176(fp)
	}
    }
  if (ilim <= 0 && mode > 2)
   244f0:	e0bfd417 	ldw	r2,-176(fp)
   244f4:	00801f16 	blt	zero,r2,24574 <_dtoa_r+0x1684>
   244f8:	e0bffb17 	ldw	r2,-20(fp)
   244fc:	108000d0 	cmplti	r2,r2,3
   24500:	10001c1e 	bne	r2,zero,24574 <_dtoa_r+0x1684>
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
   24504:	e0bfd417 	ldw	r2,-176(fp)
   24508:	10000c16 	blt	r2,zero,2453c <_dtoa_r+0x164c>
   2450c:	000f883a 	mov	r7,zero
   24510:	01800144 	movi	r6,5
   24514:	e17fe417 	ldw	r5,-112(fp)
   24518:	e13ff817 	ldw	r4,-32(fp)
   2451c:	0027e740 	call	27e74 <__multadd>
   24520:	e0bfe415 	stw	r2,-112(fp)
   24524:	e17fe417 	ldw	r5,-112(fp)
   24528:	e13fe117 	ldw	r4,-124(fp)
   2452c:	0028aa40 	call	28aa4 <__mcmp>
   24530:	00800716 	blt	zero,r2,24550 <_dtoa_r+0x1660>
   24534:	00000106 	br	2453c <_dtoa_r+0x164c>
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
	  if (d.d < -eps.d)
	    goto no_digits;
   24538:	0001883a 	nop
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
	{
	  /* no digits, fcvt style */
	no_digits:
	  k = -1 - ndigits;
   2453c:	e0800217 	ldw	r2,8(fp)
   24540:	0084303a 	nor	r2,zero,r2
   24544:	e0bfd715 	stw	r2,-164(fp)
	  goto ret;
   24548:	00011d06 	br	249c0 <_dtoa_r+0x1ad0>
      if (ilim == 0)
	{
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
   2454c:	0001883a 	nop
	no_digits:
	  k = -1 - ndigits;
	  goto ret;
	}
    one_digit:
      *s++ = '1';
   24550:	e0bfe717 	ldw	r2,-100(fp)
   24554:	10c00044 	addi	r3,r2,1
   24558:	e0ffe715 	stw	r3,-100(fp)
   2455c:	00c00c44 	movi	r3,49
   24560:	10c00005 	stb	r3,0(r2)
      k++;
   24564:	e0bfd717 	ldw	r2,-164(fp)
   24568:	10800044 	addi	r2,r2,1
   2456c:	e0bfd715 	stw	r2,-164(fp)
      goto ret;
   24570:	00011306 	br	249c0 <_dtoa_r+0x1ad0>
    }
  if (leftright)
   24574:	e0bfd917 	ldw	r2,-156(fp)
   24578:	1000ba26 	beq	r2,zero,24864 <_dtoa_r+0x1974>
    {
      if (m2 > 0)
   2457c:	e0bfda17 	ldw	r2,-152(fp)
   24580:	0080050e 	bge	zero,r2,24598 <_dtoa_r+0x16a8>
	mhi = lshift (ptr, mhi, m2);
   24584:	e1bfda17 	ldw	r6,-152(fp)
   24588:	e17fe317 	ldw	r5,-116(fp)
   2458c:	e13ff817 	ldw	r4,-32(fp)
   24590:	00288ac0 	call	288ac <__lshift>
   24594:	e0bfe315 	stw	r2,-116(fp)

      /* Compute mlo -- check for special case
       * that d is a normalized power of 2.
       */

      mlo = mhi;
   24598:	e0bfe317 	ldw	r2,-116(fp)
   2459c:	e0bfe215 	stw	r2,-120(fp)
      if (spec_case)
   245a0:	e0bfde17 	ldw	r2,-136(fp)
   245a4:	10001826 	beq	r2,zero,24608 <_dtoa_r+0x1718>
	{
	  mhi = Balloc (ptr, mhi->_k);
   245a8:	e0bfe317 	ldw	r2,-116(fp)
   245ac:	10800117 	ldw	r2,4(r2)
   245b0:	100b883a 	mov	r5,r2
   245b4:	e13ff817 	ldw	r4,-32(fp)
   245b8:	0027cc80 	call	27cc8 <_Balloc>
   245bc:	e0bfe315 	stw	r2,-116(fp)
	  Bcopy (mhi, mlo);
   245c0:	e0bfe317 	ldw	r2,-116(fp)
   245c4:	10c00304 	addi	r3,r2,12
   245c8:	e0bfe217 	ldw	r2,-120(fp)
   245cc:	11000304 	addi	r4,r2,12
   245d0:	e0bfe217 	ldw	r2,-120(fp)
   245d4:	10800417 	ldw	r2,16(r2)
   245d8:	10800084 	addi	r2,r2,2
   245dc:	1085883a 	add	r2,r2,r2
   245e0:	1085883a 	add	r2,r2,r2
   245e4:	100d883a 	mov	r6,r2
   245e8:	200b883a 	mov	r5,r4
   245ec:	1809883a 	mov	r4,r3
   245f0:	00277740 	call	27774 <memcpy>
	  mhi = lshift (ptr, mhi, Log2P);
   245f4:	01800044 	movi	r6,1
   245f8:	e17fe317 	ldw	r5,-116(fp)
   245fc:	e13ff817 	ldw	r4,-32(fp)
   24600:	00288ac0 	call	288ac <__lshift>
   24604:	e0bfe315 	stw	r2,-116(fp)
	}

      for (i = 1;; i++)
   24608:	00800044 	movi	r2,1
   2460c:	e0bfd215 	stw	r2,-184(fp)
	{
	  dig = quorem (b, S) + '0';
   24610:	e17fe417 	ldw	r5,-112(fp)
   24614:	e13fe117 	ldw	r4,-124(fp)
   24618:	0022b440 	call	22b44 <quorem>
   2461c:	10800c04 	addi	r2,r2,48
   24620:	e0bfd115 	stw	r2,-188(fp)
	  /* Do we yet have the shortest decimal string
	   * that will round to d?
	   */
	  j = cmp (b, mlo);
   24624:	e17fe217 	ldw	r5,-120(fp)
   24628:	e13fe117 	ldw	r4,-124(fp)
   2462c:	0028aa40 	call	28aa4 <__mcmp>
   24630:	e0bfd615 	stw	r2,-168(fp)
	  delta = diff (ptr, S, mhi);
   24634:	e1bfe317 	ldw	r6,-116(fp)
   24638:	e17fe417 	ldw	r5,-112(fp)
   2463c:	e13ff817 	ldw	r4,-32(fp)
   24640:	0028bb80 	call	28bb8 <__mdiff>
   24644:	e0bfef15 	stw	r2,-68(fp)
	  j1 = delta->_sign ? 1 : cmp (b, delta);
   24648:	e0bfef17 	ldw	r2,-68(fp)
   2464c:	10800317 	ldw	r2,12(r2)
   24650:	1000041e 	bne	r2,zero,24664 <_dtoa_r+0x1774>
   24654:	e17fef17 	ldw	r5,-68(fp)
   24658:	e13fe117 	ldw	r4,-124(fp)
   2465c:	0028aa40 	call	28aa4 <__mcmp>
   24660:	00000106 	br	24668 <_dtoa_r+0x1778>
   24664:	00800044 	movi	r2,1
   24668:	e0bfec15 	stw	r2,-80(fp)
	  Bfree (ptr, delta);
   2466c:	e17fef17 	ldw	r5,-68(fp)
   24670:	e13ff817 	ldw	r4,-32(fp)
   24674:	0027df80 	call	27df8 <_Bfree>
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
   24678:	e0bfec17 	ldw	r2,-80(fp)
   2467c:	1000131e 	bne	r2,zero,246cc <_dtoa_r+0x17dc>
   24680:	e0bffb17 	ldw	r2,-20(fp)
   24684:	1000111e 	bne	r2,zero,246cc <_dtoa_r+0x17dc>
   24688:	e0bff217 	ldw	r2,-56(fp)
   2468c:	1080004c 	andi	r2,r2,1
   24690:	10000e1e 	bne	r2,zero,246cc <_dtoa_r+0x17dc>
	    {
	      if (dig == '9')
   24694:	e0bfd117 	ldw	r2,-188(fp)
   24698:	10800e58 	cmpnei	r2,r2,57
   2469c:	10003726 	beq	r2,zero,2477c <_dtoa_r+0x188c>
		goto round_9_up;
	      if (j > 0)
   246a0:	e0bfd617 	ldw	r2,-168(fp)
   246a4:	0080030e 	bge	zero,r2,246b4 <_dtoa_r+0x17c4>
		dig++;
   246a8:	e0bfd117 	ldw	r2,-188(fp)
   246ac:	10800044 	addi	r2,r2,1
   246b0:	e0bfd115 	stw	r2,-188(fp)
	      *s++ = dig;
   246b4:	e0bfe717 	ldw	r2,-100(fp)
   246b8:	10c00044 	addi	r3,r2,1
   246bc:	e0ffe715 	stw	r3,-100(fp)
   246c0:	e0ffd117 	ldw	r3,-188(fp)
   246c4:	10c00005 	stb	r3,0(r2)
	      goto ret;
   246c8:	0000bd06 	br	249c0 <_dtoa_r+0x1ad0>
	    }
#endif
         if ((j < 0) || ((j == 0) && !mode
   246cc:	e0bfd617 	ldw	r2,-168(fp)
   246d0:	10000716 	blt	r2,zero,246f0 <_dtoa_r+0x1800>
   246d4:	e0bfd617 	ldw	r2,-168(fp)
   246d8:	1000221e 	bne	r2,zero,24764 <_dtoa_r+0x1874>
   246dc:	e0bffb17 	ldw	r2,-20(fp)
   246e0:	1000201e 	bne	r2,zero,24764 <_dtoa_r+0x1874>
#ifndef ROUND_BIASED
	      && !(word1 (d) & 1)
   246e4:	e0bff217 	ldw	r2,-56(fp)
   246e8:	1080004c 	andi	r2,r2,1
   246ec:	10001d1e 	bne	r2,zero,24764 <_dtoa_r+0x1874>
#endif
           ))
	    {
	      if (j1 > 0)
   246f0:	e0bfec17 	ldw	r2,-80(fp)
   246f4:	0080150e 	bge	zero,r2,2474c <_dtoa_r+0x185c>
		{
		  b = lshift (ptr, b, 1);
   246f8:	01800044 	movi	r6,1
   246fc:	e17fe117 	ldw	r5,-124(fp)
   24700:	e13ff817 	ldw	r4,-32(fp)
   24704:	00288ac0 	call	288ac <__lshift>
   24708:	e0bfe115 	stw	r2,-124(fp)
		  j1 = cmp (b, S);
   2470c:	e17fe417 	ldw	r5,-112(fp)
   24710:	e13fe117 	ldw	r4,-124(fp)
   24714:	0028aa40 	call	28aa4 <__mcmp>
   24718:	e0bfec15 	stw	r2,-80(fp)
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
   2471c:	e0bfec17 	ldw	r2,-80(fp)
   24720:	00800516 	blt	zero,r2,24738 <_dtoa_r+0x1848>
   24724:	e0bfec17 	ldw	r2,-80(fp)
   24728:	1000081e 	bne	r2,zero,2474c <_dtoa_r+0x185c>
   2472c:	e0bfd117 	ldw	r2,-188(fp)
   24730:	1080004c 	andi	r2,r2,1
   24734:	10000526 	beq	r2,zero,2474c <_dtoa_r+0x185c>
		      && dig++ == '9')
   24738:	e0bfd117 	ldw	r2,-188(fp)
   2473c:	10c00044 	addi	r3,r2,1
   24740:	e0ffd115 	stw	r3,-188(fp)
   24744:	10800e58 	cmpnei	r2,r2,57
   24748:	10000e26 	beq	r2,zero,24784 <_dtoa_r+0x1894>
		    goto round_9_up;
		}
	      *s++ = dig;
   2474c:	e0bfe717 	ldw	r2,-100(fp)
   24750:	10c00044 	addi	r3,r2,1
   24754:	e0ffe715 	stw	r3,-100(fp)
   24758:	e0ffd117 	ldw	r3,-188(fp)
   2475c:	10c00005 	stb	r3,0(r2)
	      goto ret;
   24760:	00009706 	br	249c0 <_dtoa_r+0x1ad0>
	    }
	  if (j1 > 0)
   24764:	e0bfec17 	ldw	r2,-80(fp)
   24768:	0080140e 	bge	zero,r2,247bc <_dtoa_r+0x18cc>
	    {
	      if (dig == '9')
   2476c:	e0bfd117 	ldw	r2,-188(fp)
   24770:	10800e58 	cmpnei	r2,r2,57
   24774:	10000a1e 	bne	r2,zero,247a0 <_dtoa_r+0x18b0>
   24778:	00000306 	br	24788 <_dtoa_r+0x1898>
	  Bfree (ptr, delta);
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
	    {
	      if (dig == '9')
		goto round_9_up;
   2477c:	0001883a 	nop
   24780:	00000106 	br	24788 <_dtoa_r+0x1898>
		{
		  b = lshift (ptr, b, 1);
		  j1 = cmp (b, S);
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
		      && dig++ == '9')
		    goto round_9_up;
   24784:	0001883a 	nop
	  if (j1 > 0)
	    {
	      if (dig == '9')
		{		/* possible if i == 1 */
		round_9_up:
		  *s++ = '9';
   24788:	e0bfe717 	ldw	r2,-100(fp)
   2478c:	10c00044 	addi	r3,r2,1
   24790:	e0ffe715 	stw	r3,-100(fp)
   24794:	00c00e44 	movi	r3,57
   24798:	10c00005 	stb	r3,0(r2)
		  goto roundoff;
   2479c:	00005d06 	br	24914 <_dtoa_r+0x1a24>
		}
	      *s++ = dig + 1;
   247a0:	e0bfe717 	ldw	r2,-100(fp)
   247a4:	10c00044 	addi	r3,r2,1
   247a8:	e0ffe715 	stw	r3,-100(fp)
   247ac:	e0ffd117 	ldw	r3,-188(fp)
   247b0:	18c00044 	addi	r3,r3,1
   247b4:	10c00005 	stb	r3,0(r2)
	      goto ret;
   247b8:	00008106 	br	249c0 <_dtoa_r+0x1ad0>
	    }
	  *s++ = dig;
   247bc:	e0bfe717 	ldw	r2,-100(fp)
   247c0:	10c00044 	addi	r3,r2,1
   247c4:	e0ffe715 	stw	r3,-100(fp)
   247c8:	e0ffd117 	ldw	r3,-188(fp)
   247cc:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
   247d0:	e0ffd217 	ldw	r3,-184(fp)
   247d4:	e0bfd417 	ldw	r2,-176(fp)
   247d8:	18803b26 	beq	r3,r2,248c8 <_dtoa_r+0x19d8>
	    break;
	  b = multadd (ptr, b, 10, 0);
   247dc:	000f883a 	mov	r7,zero
   247e0:	01800284 	movi	r6,10
   247e4:	e17fe117 	ldw	r5,-124(fp)
   247e8:	e13ff817 	ldw	r4,-32(fp)
   247ec:	0027e740 	call	27e74 <__multadd>
   247f0:	e0bfe115 	stw	r2,-124(fp)
	  if (mlo == mhi)
   247f4:	e0ffe217 	ldw	r3,-120(fp)
   247f8:	e0bfe317 	ldw	r2,-116(fp)
   247fc:	1880091e 	bne	r3,r2,24824 <_dtoa_r+0x1934>
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
   24800:	000f883a 	mov	r7,zero
   24804:	01800284 	movi	r6,10
   24808:	e17fe317 	ldw	r5,-116(fp)
   2480c:	e13ff817 	ldw	r4,-32(fp)
   24810:	0027e740 	call	27e74 <__multadd>
   24814:	e0bfe315 	stw	r2,-116(fp)
   24818:	e0bfe317 	ldw	r2,-116(fp)
   2481c:	e0bfe215 	stw	r2,-120(fp)
   24820:	00000c06 	br	24854 <_dtoa_r+0x1964>
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
   24824:	000f883a 	mov	r7,zero
   24828:	01800284 	movi	r6,10
   2482c:	e17fe217 	ldw	r5,-120(fp)
   24830:	e13ff817 	ldw	r4,-32(fp)
   24834:	0027e740 	call	27e74 <__multadd>
   24838:	e0bfe215 	stw	r2,-120(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
   2483c:	000f883a 	mov	r7,zero
   24840:	01800284 	movi	r6,10
   24844:	e17fe317 	ldw	r5,-116(fp)
   24848:	e13ff817 	ldw	r4,-32(fp)
   2484c:	0027e740 	call	27e74 <__multadd>
   24850:	e0bfe315 	stw	r2,-116(fp)
	  mhi = Balloc (ptr, mhi->_k);
	  Bcopy (mhi, mlo);
	  mhi = lshift (ptr, mhi, Log2P);
	}

      for (i = 1;; i++)
   24854:	e0bfd217 	ldw	r2,-184(fp)
   24858:	10800044 	addi	r2,r2,1
   2485c:	e0bfd215 	stw	r2,-184(fp)
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
   24860:	003f6b06 	br	24610 <__alt_data_end+0xfffe4610>
    }
  else
    for (i = 1;; i++)
   24864:	00800044 	movi	r2,1
   24868:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
   2486c:	e43fe717 	ldw	r16,-100(fp)
   24870:	80800044 	addi	r2,r16,1
   24874:	e0bfe715 	stw	r2,-100(fp)
   24878:	e17fe417 	ldw	r5,-112(fp)
   2487c:	e13fe117 	ldw	r4,-124(fp)
   24880:	0022b440 	call	22b44 <quorem>
   24884:	10800c04 	addi	r2,r2,48
   24888:	e0bfd115 	stw	r2,-188(fp)
   2488c:	e0bfd117 	ldw	r2,-188(fp)
   24890:	80800005 	stb	r2,0(r16)
	if (i >= ilim)
   24894:	e0ffd217 	ldw	r3,-184(fp)
   24898:	e0bfd417 	ldw	r2,-176(fp)
   2489c:	18800c0e 	bge	r3,r2,248d0 <_dtoa_r+0x19e0>
	  break;
	b = multadd (ptr, b, 10, 0);
   248a0:	000f883a 	mov	r7,zero
   248a4:	01800284 	movi	r6,10
   248a8:	e17fe117 	ldw	r5,-124(fp)
   248ac:	e13ff817 	ldw	r4,-32(fp)
   248b0:	0027e740 	call	27e74 <__multadd>
   248b4:	e0bfe115 	stw	r2,-124(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
    }
  else
    for (i = 1;; i++)
   248b8:	e0bfd217 	ldw	r2,-184(fp)
   248bc:	10800044 	addi	r2,r2,1
   248c0:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
	b = multadd (ptr, b, 10, 0);
      }
   248c4:	003fe906 	br	2486c <__alt_data_end+0xfffe486c>
	      *s++ = dig + 1;
	      goto ret;
	    }
	  *s++ = dig;
	  if (i == ilim)
	    break;
   248c8:	0001883a 	nop
   248cc:	00000106 	br	248d4 <_dtoa_r+0x19e4>
  else
    for (i = 1;; i++)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
   248d0:	0001883a 	nop
	b = multadd (ptr, b, 10, 0);
      }

  /* Round off last digit */

  b = lshift (ptr, b, 1);
   248d4:	01800044 	movi	r6,1
   248d8:	e17fe117 	ldw	r5,-124(fp)
   248dc:	e13ff817 	ldw	r4,-32(fp)
   248e0:	00288ac0 	call	288ac <__lshift>
   248e4:	e0bfe115 	stw	r2,-124(fp)
  j = cmp (b, S);
   248e8:	e17fe417 	ldw	r5,-112(fp)
   248ec:	e13fe117 	ldw	r4,-124(fp)
   248f0:	0028aa40 	call	28aa4 <__mcmp>
   248f4:	e0bfd615 	stw	r2,-168(fp)
  if ((j > 0) || ((j == 0) && (dig & 1)))
   248f8:	e0bfd617 	ldw	r2,-168(fp)
   248fc:	00801216 	blt	zero,r2,24948 <_dtoa_r+0x1a58>
   24900:	e0bfd617 	ldw	r2,-168(fp)
   24904:	1000211e 	bne	r2,zero,2498c <_dtoa_r+0x1a9c>
   24908:	e0bfd117 	ldw	r2,-188(fp)
   2490c:	1080004c 	andi	r2,r2,1
   24910:	10001e26 	beq	r2,zero,2498c <_dtoa_r+0x1a9c>
    {
    roundoff:
      while (*--s == '9')
   24914:	00000c06 	br	24948 <_dtoa_r+0x1a58>
	if (s == s0)
   24918:	e0ffe717 	ldw	r3,-100(fp)
   2491c:	e0bfe917 	ldw	r2,-92(fp)
   24920:	1880091e 	bne	r3,r2,24948 <_dtoa_r+0x1a58>
	  {
	    k++;
   24924:	e0bfd717 	ldw	r2,-164(fp)
   24928:	10800044 	addi	r2,r2,1
   2492c:	e0bfd715 	stw	r2,-164(fp)
	    *s++ = '1';
   24930:	e0bfe717 	ldw	r2,-100(fp)
   24934:	10c00044 	addi	r3,r2,1
   24938:	e0ffe715 	stw	r3,-100(fp)
   2493c:	00c00c44 	movi	r3,49
   24940:	10c00005 	stb	r3,0(r2)
	    goto ret;
   24944:	00001e06 	br	249c0 <_dtoa_r+0x1ad0>
  b = lshift (ptr, b, 1);
  j = cmp (b, S);
  if ((j > 0) || ((j == 0) && (dig & 1)))
    {
    roundoff:
      while (*--s == '9')
   24948:	e0bfe717 	ldw	r2,-100(fp)
   2494c:	10bfffc4 	addi	r2,r2,-1
   24950:	e0bfe715 	stw	r2,-100(fp)
   24954:	e0bfe717 	ldw	r2,-100(fp)
   24958:	10800003 	ldbu	r2,0(r2)
   2495c:	10803fcc 	andi	r2,r2,255
   24960:	1080201c 	xori	r2,r2,128
   24964:	10bfe004 	addi	r2,r2,-128
   24968:	10800e60 	cmpeqi	r2,r2,57
   2496c:	103fea1e 	bne	r2,zero,24918 <__alt_data_end+0xfffe4918>
	  {
	    k++;
	    *s++ = '1';
	    goto ret;
	  }
      ++*s++;
   24970:	e0bfe717 	ldw	r2,-100(fp)
   24974:	10c00044 	addi	r3,r2,1
   24978:	e0ffe715 	stw	r3,-100(fp)
   2497c:	10c00003 	ldbu	r3,0(r2)
   24980:	18c00044 	addi	r3,r3,1
   24984:	10c00005 	stb	r3,0(r2)
   24988:	00000d06 	br	249c0 <_dtoa_r+0x1ad0>
    }
  else
    {
      while (*--s == '0');
   2498c:	e0bfe717 	ldw	r2,-100(fp)
   24990:	10bfffc4 	addi	r2,r2,-1
   24994:	e0bfe715 	stw	r2,-100(fp)
   24998:	e0bfe717 	ldw	r2,-100(fp)
   2499c:	10800003 	ldbu	r2,0(r2)
   249a0:	10803fcc 	andi	r2,r2,255
   249a4:	1080201c 	xori	r2,r2,128
   249a8:	10bfe004 	addi	r2,r2,-128
   249ac:	10800c20 	cmpeqi	r2,r2,48
   249b0:	103ff61e 	bne	r2,zero,2498c <__alt_data_end+0xfffe498c>
      s++;
   249b4:	e0bfe717 	ldw	r2,-100(fp)
   249b8:	10800044 	addi	r2,r2,1
   249bc:	e0bfe715 	stw	r2,-100(fp)
    }
ret:
  Bfree (ptr, S);
   249c0:	e17fe417 	ldw	r5,-112(fp)
   249c4:	e13ff817 	ldw	r4,-32(fp)
   249c8:	0027df80 	call	27df8 <_Bfree>
  if (mhi)
   249cc:	e0bfe317 	ldw	r2,-116(fp)
   249d0:	10000d26 	beq	r2,zero,24a08 <_dtoa_r+0x1b18>
    {
      if (mlo && mlo != mhi)
   249d4:	e0bfe217 	ldw	r2,-120(fp)
   249d8:	10000626 	beq	r2,zero,249f4 <_dtoa_r+0x1b04>
   249dc:	e0ffe217 	ldw	r3,-120(fp)
   249e0:	e0bfe317 	ldw	r2,-116(fp)
   249e4:	18800326 	beq	r3,r2,249f4 <_dtoa_r+0x1b04>
	Bfree (ptr, mlo);
   249e8:	e17fe217 	ldw	r5,-120(fp)
   249ec:	e13ff817 	ldw	r4,-32(fp)
   249f0:	0027df80 	call	27df8 <_Bfree>
      Bfree (ptr, mhi);
   249f4:	e17fe317 	ldw	r5,-116(fp)
   249f8:	e13ff817 	ldw	r4,-32(fp)
   249fc:	0027df80 	call	27df8 <_Bfree>
   24a00:	00000106 	br	24a08 <_dtoa_r+0x1b18>
	    {
	      L = d.d;
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
   24a04:	0001883a 	nop
      if (mlo && mlo != mhi)
	Bfree (ptr, mlo);
      Bfree (ptr, mhi);
    }
ret1:
  Bfree (ptr, b);
   24a08:	e17fe117 	ldw	r5,-124(fp)
   24a0c:	e13ff817 	ldw	r4,-32(fp)
   24a10:	0027df80 	call	27df8 <_Bfree>
  *s = 0;
   24a14:	e0bfe717 	ldw	r2,-100(fp)
   24a18:	10000005 	stb	zero,0(r2)
  *decpt = k + 1;
   24a1c:	e0bfd717 	ldw	r2,-164(fp)
   24a20:	10c00044 	addi	r3,r2,1
   24a24:	e0800317 	ldw	r2,12(fp)
   24a28:	10c00015 	stw	r3,0(r2)
  if (rve)
   24a2c:	e0800517 	ldw	r2,20(fp)
   24a30:	10000326 	beq	r2,zero,24a40 <_dtoa_r+0x1b50>
    *rve = s;
   24a34:	e0800517 	ldw	r2,20(fp)
   24a38:	e0ffe717 	ldw	r3,-100(fp)
   24a3c:	10c00015 	stw	r3,0(r2)
  return s0;
   24a40:	e0bfe917 	ldw	r2,-92(fp)
}
   24a44:	e6fffc04 	addi	sp,fp,-16
   24a48:	dfc00517 	ldw	ra,20(sp)
   24a4c:	df000417 	ldw	fp,16(sp)
   24a50:	dcc00317 	ldw	r19,12(sp)
   24a54:	dc800217 	ldw	r18,8(sp)
   24a58:	dc400117 	ldw	r17,4(sp)
   24a5c:	dc000017 	ldw	r16,0(sp)
   24a60:	dec00604 	addi	sp,sp,24
   24a64:	f800283a 	ret

00024a68 <__sflush_r>:
   directly from __srefill. */
int
_DEFUN(__sflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
   24a68:	defff504 	addi	sp,sp,-44
   24a6c:	dfc00a15 	stw	ra,40(sp)
   24a70:	df000915 	stw	fp,36(sp)
   24a74:	dcc00815 	stw	r19,32(sp)
   24a78:	dc800715 	stw	r18,28(sp)
   24a7c:	dc400615 	stw	r17,24(sp)
   24a80:	dc000515 	stw	r16,20(sp)
   24a84:	df000904 	addi	fp,sp,36
   24a88:	e13ffb15 	stw	r4,-20(fp)
   24a8c:	2821883a 	mov	r16,r5
  register unsigned char *p;
  register _READ_WRITE_BUFSIZE_TYPE n;
  register _READ_WRITE_RETURN_TYPE t;
  short flags;

  flags = fp->_flags;
   24a90:	8080030b 	ldhu	r2,12(r16)
   24a94:	e0bff90d 	sth	r2,-28(fp)
  if ((flags & __SWR) == 0)
   24a98:	e0bff90b 	ldhu	r2,-28(fp)
   24a9c:	10bfffcc 	andi	r2,r2,65535
   24aa0:	1080020c 	andi	r2,r2,8
   24aa4:	1000831e 	bne	r2,zero,24cb4 <__sflush_r+0x24c>
    {
#ifdef _FSEEK_OPTIMIZATION
      /* For a read stream, an fflush causes the next seek to be
         unoptimized (i.e. forces a system-level seek).  This conforms
         to the POSIX and SUSv3 standards.  */
      fp->_flags |= __SNPT;
   24aa8:	8080030b 	ldhu	r2,12(r16)
   24aac:	10820014 	ori	r2,r2,2048
   24ab0:	8080030d 	sth	r2,12(r16)
         the next byte from the file rather than the buffer.  This conforms
         to the POSIX and SUSv3 standards.  Note that the standards allow
         this seek to be deferred until necessary, but we choose to do it here
         to make the change simpler, more contained, and less likely
         to miss a code scenario.  */
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
   24ab4:	80800117 	ldw	r2,4(r16)
   24ab8:	00800216 	blt	zero,r2,24ac4 <__sflush_r+0x5c>
   24abc:	80800f17 	ldw	r2,60(r16)
   24ac0:	00807a0e 	bge	zero,r2,24cac <__sflush_r+0x244>
   24ac4:	80800a17 	ldw	r2,40(r16)
   24ac8:	10007826 	beq	r2,zero,24cac <__sflush_r+0x244>
#endif

	  /* Save last errno and set errno to 0, so we can check if a device
	     returns with a valid position -1.  We restore the last errno if
	     no other error condition has been encountered. */
	  tmp_errno = ptr->_errno;
   24acc:	e0bffb17 	ldw	r2,-20(fp)
   24ad0:	10800017 	ldw	r2,0(r2)
   24ad4:	e0bffa15 	stw	r2,-24(fp)
	  ptr->_errno = 0;
   24ad8:	e0bffb17 	ldw	r2,-20(fp)
   24adc:	10000015 	stw	zero,0(r2)
	  /* Get the physical position we are at in the file.  */
	  if (fp->_flags & __SOFF)
   24ae0:	8080030b 	ldhu	r2,12(r16)
   24ae4:	10bfffcc 	andi	r2,r2,65535
   24ae8:	1084000c 	andi	r2,r2,4096
   24aec:	10000326 	beq	r2,zero,24afc <__sflush_r+0x94>
	    curoff = fp->_offset;
   24af0:	80801417 	ldw	r2,80(r16)
   24af4:	e0bff715 	stw	r2,-36(fp)
   24af8:	00002206 	br	24b84 <__sflush_r+0x11c>
#ifdef __LARGE64_FILES
	      if (fp->_flags & __SL64)
		curoff = fp->_seek64 (ptr, fp->_cookie, 0, SEEK_CUR);
	      else
#endif
		curoff = fp->_seek (ptr, fp->_cookie, 0, SEEK_CUR);
   24afc:	80800a17 	ldw	r2,40(r16)
   24b00:	80c00717 	ldw	r3,28(r16)
   24b04:	01c00044 	movi	r7,1
   24b08:	000d883a 	mov	r6,zero
   24b0c:	180b883a 	mov	r5,r3
   24b10:	e13ffb17 	ldw	r4,-20(fp)
   24b14:	103ee83a 	callr	r2
   24b18:	e0bff715 	stw	r2,-36(fp)
	      if (curoff == -1L && ptr->_errno != 0)
   24b1c:	e0bff717 	ldw	r2,-36(fp)
   24b20:	10bfffd8 	cmpnei	r2,r2,-1
   24b24:	1000171e 	bne	r2,zero,24b84 <__sflush_r+0x11c>
   24b28:	e0bffb17 	ldw	r2,-20(fp)
   24b2c:	10800017 	ldw	r2,0(r2)
   24b30:	10001426 	beq	r2,zero,24b84 <__sflush_r+0x11c>
		{
		  int result = EOF;
   24b34:	00bfffc4 	movi	r2,-1
   24b38:	e0bff815 	stw	r2,-32(fp)
		  if (ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
   24b3c:	e0bffb17 	ldw	r2,-20(fp)
   24b40:	10800017 	ldw	r2,0(r2)
   24b44:	10800760 	cmpeqi	r2,r2,29
   24b48:	1000041e 	bne	r2,zero,24b5c <__sflush_r+0xf4>
   24b4c:	e0bffb17 	ldw	r2,-20(fp)
   24b50:	10800017 	ldw	r2,0(r2)
   24b54:	10800598 	cmpnei	r2,r2,22
   24b58:	1000051e 	bne	r2,zero,24b70 <__sflush_r+0x108>
		    {
		      result = 0;
   24b5c:	e03ff815 	stw	zero,-32(fp)
		      ptr->_errno = tmp_errno;
   24b60:	e0bffb17 	ldw	r2,-20(fp)
   24b64:	e0fffa17 	ldw	r3,-24(fp)
   24b68:	10c00015 	stw	r3,0(r2)
   24b6c:	00000306 	br	24b7c <__sflush_r+0x114>
		    }
		  else
		    fp->_flags |= __SERR;
   24b70:	8080030b 	ldhu	r2,12(r16)
   24b74:	10801014 	ori	r2,r2,64
   24b78:	8080030d 	sth	r2,12(r16)
		  return result;
   24b7c:	e0bff817 	ldw	r2,-32(fp)
   24b80:	00007106 	br	24d48 <__sflush_r+0x2e0>
		}
            }
          if (fp->_flags & __SRD)
   24b84:	8080030b 	ldhu	r2,12(r16)
   24b88:	10bfffcc 	andi	r2,r2,65535
   24b8c:	1080010c 	andi	r2,r2,4
   24b90:	10000a26 	beq	r2,zero,24bbc <__sflush_r+0x154>
            {
              /* Current offset is at end of buffer.  Compensate for
                 characters not yet read.  */
              curoff -= fp->_r;
   24b94:	80800117 	ldw	r2,4(r16)
   24b98:	e0fff717 	ldw	r3,-36(fp)
   24b9c:	1885c83a 	sub	r2,r3,r2
   24ba0:	e0bff715 	stw	r2,-36(fp)
              if (HASUB (fp))
   24ba4:	80800c17 	ldw	r2,48(r16)
   24ba8:	10000426 	beq	r2,zero,24bbc <__sflush_r+0x154>
                curoff -= fp->_ur;
   24bac:	80800f17 	ldw	r2,60(r16)
   24bb0:	e0fff717 	ldw	r3,-36(fp)
   24bb4:	1885c83a 	sub	r2,r3,r2
   24bb8:	e0bff715 	stw	r2,-36(fp)
#ifdef __LARGE64_FILES
	  if (fp->_flags & __SL64)
	    curoff = fp->_seek64 (ptr, fp->_cookie, curoff, SEEK_SET);
	  else
#endif
	    curoff = fp->_seek (ptr, fp->_cookie, curoff, SEEK_SET);
   24bbc:	80800a17 	ldw	r2,40(r16)
   24bc0:	80c00717 	ldw	r3,28(r16)
   24bc4:	000f883a 	mov	r7,zero
   24bc8:	e1bff717 	ldw	r6,-36(fp)
   24bcc:	180b883a 	mov	r5,r3
   24bd0:	e13ffb17 	ldw	r4,-20(fp)
   24bd4:	103ee83a 	callr	r2
   24bd8:	e0bff715 	stw	r2,-36(fp)
	  if (curoff != -1 || ptr->_errno == 0
   24bdc:	e0bff717 	ldw	r2,-36(fp)
   24be0:	10bfffd8 	cmpnei	r2,r2,-1
   24be4:	10000b1e 	bne	r2,zero,24c14 <__sflush_r+0x1ac>
   24be8:	e0bffb17 	ldw	r2,-20(fp)
   24bec:	10800017 	ldw	r2,0(r2)
   24bf0:	10000826 	beq	r2,zero,24c14 <__sflush_r+0x1ac>
	      || ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
   24bf4:	e0bffb17 	ldw	r2,-20(fp)
   24bf8:	10800017 	ldw	r2,0(r2)
   24bfc:	10800760 	cmpeqi	r2,r2,29
   24c00:	1000041e 	bne	r2,zero,24c14 <__sflush_r+0x1ac>
   24c04:	e0bffb17 	ldw	r2,-20(fp)
   24c08:	10800017 	ldw	r2,0(r2)
   24c0c:	10800598 	cmpnei	r2,r2,22
   24c10:	1000211e 	bne	r2,zero,24c98 <__sflush_r+0x230>
	    {
	      /* Seek successful or ignorable error condition.
		 We can clear read buffer now.  */
#ifdef _FSEEK_OPTIMIZATION
	      fp->_flags &= ~__SNPT;
   24c14:	80c0030b 	ldhu	r3,12(r16)
   24c18:	00bdffc4 	movi	r2,-2049
   24c1c:	1884703a 	and	r2,r3,r2
   24c20:	8080030d 	sth	r2,12(r16)
#endif
	      fp->_r = 0;
   24c24:	80000115 	stw	zero,4(r16)
	      fp->_p = fp->_bf._base;
   24c28:	80800417 	ldw	r2,16(r16)
   24c2c:	80800015 	stw	r2,0(r16)
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
   24c30:	8080030b 	ldhu	r2,12(r16)
   24c34:	10bfffcc 	andi	r2,r2,65535
   24c38:	1084000c 	andi	r2,r2,4096
   24c3c:	10000826 	beq	r2,zero,24c60 <__sflush_r+0x1f8>
   24c40:	e0bff717 	ldw	r2,-36(fp)
   24c44:	10bfffd8 	cmpnei	r2,r2,-1
   24c48:	1000031e 	bne	r2,zero,24c58 <__sflush_r+0x1f0>
   24c4c:	e0bffb17 	ldw	r2,-20(fp)
   24c50:	10800017 	ldw	r2,0(r2)
   24c54:	1000021e 	bne	r2,zero,24c60 <__sflush_r+0x1f8>
		fp->_offset = curoff;
   24c58:	e0bff717 	ldw	r2,-36(fp)
   24c5c:	80801415 	stw	r2,80(r16)
	      ptr->_errno = tmp_errno;
   24c60:	e0bffb17 	ldw	r2,-20(fp)
   24c64:	e0fffa17 	ldw	r3,-24(fp)
   24c68:	10c00015 	stw	r3,0(r2)
	      if (HASUB (fp))
   24c6c:	80800c17 	ldw	r2,48(r16)
   24c70:	10000e26 	beq	r2,zero,24cac <__sflush_r+0x244>
		FREEUB (ptr, fp);
   24c74:	80c00c17 	ldw	r3,48(r16)
   24c78:	80801004 	addi	r2,r16,64
   24c7c:	18800426 	beq	r3,r2,24c90 <__sflush_r+0x228>
   24c80:	80800c17 	ldw	r2,48(r16)
   24c84:	100b883a 	mov	r5,r2
   24c88:	e13ffb17 	ldw	r4,-20(fp)
   24c8c:	002540c0 	call	2540c <_free_r>
   24c90:	80000c15 	stw	zero,48(r16)
	      fp->_r = 0;
	      fp->_p = fp->_bf._base;
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
		fp->_offset = curoff;
	      ptr->_errno = tmp_errno;
	      if (HASUB (fp))
   24c94:	00000506 	br	24cac <__sflush_r+0x244>
		FREEUB (ptr, fp);
	    }
	  else
	    {
	      fp->_flags |= __SERR;
   24c98:	8080030b 	ldhu	r2,12(r16)
   24c9c:	10801014 	ori	r2,r2,64
   24ca0:	8080030d 	sth	r2,12(r16)
	      return EOF;
   24ca4:	00bfffc4 	movi	r2,-1
   24ca8:	00002706 	br	24d48 <__sflush_r+0x2e0>
	    }
	}
      return 0;
   24cac:	0005883a 	mov	r2,zero
   24cb0:	00002506 	br	24d48 <__sflush_r+0x2e0>
    }
  if ((p = fp->_bf._base) == NULL)
   24cb4:	84400417 	ldw	r17,16(r16)
   24cb8:	8800021e 	bne	r17,zero,24cc4 <__sflush_r+0x25c>
    {
      /* Nothing to flush.  */
      return 0;
   24cbc:	0005883a 	mov	r2,zero
   24cc0:	00002106 	br	24d48 <__sflush_r+0x2e0>
    }
  n = fp->_p - p;		/* write this much */
   24cc4:	80800017 	ldw	r2,0(r16)
   24cc8:	1007883a 	mov	r3,r2
   24ccc:	8805883a 	mov	r2,r17
   24cd0:	18a5c83a 	sub	r18,r3,r2
  /*
   * Set these immediately to avoid problems with longjmp
   * and to allow exchange buffering (via setvbuf) in user
   * write function.
   */
  fp->_p = p;
   24cd4:	84400015 	stw	r17,0(r16)
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
   24cd8:	e0bff90b 	ldhu	r2,-28(fp)
   24cdc:	10bfffcc 	andi	r2,r2,65535
   24ce0:	108000cc 	andi	r2,r2,3
   24ce4:	1000021e 	bne	r2,zero,24cf0 <__sflush_r+0x288>
   24ce8:	80800517 	ldw	r2,20(r16)
   24cec:	00000106 	br	24cf4 <__sflush_r+0x28c>
   24cf0:	0005883a 	mov	r2,zero
   24cf4:	80800215 	stw	r2,8(r16)

  while (n > 0)
   24cf8:	00001106 	br	24d40 <__sflush_r+0x2d8>
    {
      t = fp->_write (ptr, fp->_cookie, (char *) p, n);
   24cfc:	80800917 	ldw	r2,36(r16)
   24d00:	80c00717 	ldw	r3,28(r16)
   24d04:	900f883a 	mov	r7,r18
   24d08:	880d883a 	mov	r6,r17
   24d0c:	180b883a 	mov	r5,r3
   24d10:	e13ffb17 	ldw	r4,-20(fp)
   24d14:	103ee83a 	callr	r2
   24d18:	1027883a 	mov	r19,r2
      if (t <= 0)
   24d1c:	04c00516 	blt	zero,r19,24d34 <__sflush_r+0x2cc>
	{
          fp->_flags |= __SERR;
   24d20:	8080030b 	ldhu	r2,12(r16)
   24d24:	10801014 	ori	r2,r2,64
   24d28:	8080030d 	sth	r2,12(r16)
          return EOF;
   24d2c:	00bfffc4 	movi	r2,-1
   24d30:	00000506 	br	24d48 <__sflush_r+0x2e0>
	}
      p += t;
   24d34:	9805883a 	mov	r2,r19
   24d38:	88a3883a 	add	r17,r17,r2
      n -= t;
   24d3c:	94e5c83a 	sub	r18,r18,r19
   * write function.
   */
  fp->_p = p;
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;

  while (n > 0)
   24d40:	04bfee16 	blt	zero,r18,24cfc <__alt_data_end+0xfffe4cfc>
          return EOF;
	}
      p += t;
      n -= t;
    }
  return 0;
   24d44:	0005883a 	mov	r2,zero
}
   24d48:	e6fffc04 	addi	sp,fp,-16
   24d4c:	dfc00517 	ldw	ra,20(sp)
   24d50:	df000417 	ldw	fp,16(sp)
   24d54:	dcc00317 	ldw	r19,12(sp)
   24d58:	dc800217 	ldw	r18,8(sp)
   24d5c:	dc400117 	ldw	r17,4(sp)
   24d60:	dc000017 	ldw	r16,0(sp)
   24d64:	dec00604 	addi	sp,sp,24
   24d68:	f800283a 	ret

00024d6c <_fflush_r>:

int
_DEFUN(_fflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
   24d6c:	defffa04 	addi	sp,sp,-24
   24d70:	dfc00515 	stw	ra,20(sp)
   24d74:	df000415 	stw	fp,16(sp)
   24d78:	dc000315 	stw	r16,12(sp)
   24d7c:	df000404 	addi	fp,sp,16
   24d80:	e13ffe15 	stw	r4,-8(fp)
   24d84:	2821883a 	mov	r16,r5
     2 is implemented here due to its simplicity.  */
  if (fp->_bf._base == NULL)
    return 0;
#endif /* _REENT_SMALL  */

  CHECK_INIT (ptr, fp);
   24d88:	e0bffe17 	ldw	r2,-8(fp)
   24d8c:	e0bffc15 	stw	r2,-16(fp)
   24d90:	e0bffc17 	ldw	r2,-16(fp)
   24d94:	10000526 	beq	r2,zero,24dac <_fflush_r+0x40>
   24d98:	e0bffc17 	ldw	r2,-16(fp)
   24d9c:	10800e17 	ldw	r2,56(r2)
   24da0:	1000021e 	bne	r2,zero,24dac <_fflush_r+0x40>
   24da4:	e13ffc17 	ldw	r4,-16(fp)
   24da8:	00251ec0 	call	251ec <__sinit>

  if (!fp->_flags)
   24dac:	8080030b 	ldhu	r2,12(r16)
   24db0:	10bfffcc 	andi	r2,r2,65535
   24db4:	10a0001c 	xori	r2,r2,32768
   24db8:	10a00004 	addi	r2,r2,-32768
   24dbc:	1000021e 	bne	r2,zero,24dc8 <_fflush_r+0x5c>
    return 0;
   24dc0:	0005883a 	mov	r2,zero
   24dc4:	00000506 	br	24ddc <_fflush_r+0x70>

  _newlib_flockfile_start (fp);
  ret = __sflush_r (ptr, fp);
   24dc8:	800b883a 	mov	r5,r16
   24dcc:	e13ffe17 	ldw	r4,-8(fp)
   24dd0:	0024a680 	call	24a68 <__sflush_r>
   24dd4:	e0bffd15 	stw	r2,-12(fp)
  _newlib_flockfile_end (fp);
  return ret;
   24dd8:	e0bffd17 	ldw	r2,-12(fp)
}
   24ddc:	e6ffff04 	addi	sp,fp,-4
   24de0:	dfc00217 	ldw	ra,8(sp)
   24de4:	df000117 	ldw	fp,4(sp)
   24de8:	dc000017 	ldw	r16,0(sp)
   24dec:	dec00304 	addi	sp,sp,12
   24df0:	f800283a 	ret

00024df4 <fflush>:
#ifndef _REENT_ONLY

int
_DEFUN(fflush, (fp),
       register FILE * fp)
{
   24df4:	defffe04 	addi	sp,sp,-8
   24df8:	dfc00115 	stw	ra,4(sp)
   24dfc:	df000015 	stw	fp,0(sp)
   24e00:	d839883a 	mov	fp,sp
   24e04:	2005883a 	mov	r2,r4
  if (fp == NULL)
   24e08:	1000061e 	bne	r2,zero,24e24 <fflush+0x30>
    return _fwalk_reent (_GLOBAL_REENT, _fflush_r);
   24e0c:	d0a00117 	ldw	r2,-32764(gp)
   24e10:	014000b4 	movhi	r5,2
   24e14:	29535b04 	addi	r5,r5,19820
   24e18:	1009883a 	mov	r4,r2
   24e1c:	00261dc0 	call	261dc <_fwalk_reent>
   24e20:	00000406 	br	24e34 <fflush+0x40>

  return _fflush_r (_REENT, fp);
   24e24:	d0e00017 	ldw	r3,-32768(gp)
   24e28:	100b883a 	mov	r5,r2
   24e2c:	1809883a 	mov	r4,r3
   24e30:	0024d6c0 	call	24d6c <_fflush_r>
}
   24e34:	e037883a 	mov	sp,fp
   24e38:	dfc00117 	ldw	ra,4(sp)
   24e3c:	df000017 	ldw	fp,0(sp)
   24e40:	dec00204 	addi	sp,sp,8
   24e44:	f800283a 	ret

00024e48 <std>:
_DEFUN(std, (ptr, flags, file, data),
            FILE *ptr _AND
            int flags _AND
            int file  _AND
            struct _reent *data)
{
   24e48:	defffa04 	addi	sp,sp,-24
   24e4c:	dfc00515 	stw	ra,20(sp)
   24e50:	df000415 	stw	fp,16(sp)
   24e54:	df000404 	addi	fp,sp,16
   24e58:	e13ffc15 	stw	r4,-16(fp)
   24e5c:	e17ffd15 	stw	r5,-12(fp)
   24e60:	e1bffe15 	stw	r6,-8(fp)
   24e64:	e1ffff15 	stw	r7,-4(fp)
  ptr->_p = 0;
   24e68:	e0bffc17 	ldw	r2,-16(fp)
   24e6c:	10000015 	stw	zero,0(r2)
  ptr->_r = 0;
   24e70:	e0bffc17 	ldw	r2,-16(fp)
   24e74:	10000115 	stw	zero,4(r2)
  ptr->_w = 0;
   24e78:	e0bffc17 	ldw	r2,-16(fp)
   24e7c:	10000215 	stw	zero,8(r2)
  ptr->_flags = flags;
   24e80:	e0bffd17 	ldw	r2,-12(fp)
   24e84:	1007883a 	mov	r3,r2
   24e88:	e0bffc17 	ldw	r2,-16(fp)
   24e8c:	10c0030d 	sth	r3,12(r2)
  ptr->_flags2 = 0;
   24e90:	e0bffc17 	ldw	r2,-16(fp)
   24e94:	10001915 	stw	zero,100(r2)
  ptr->_file = file;
   24e98:	e0bffe17 	ldw	r2,-8(fp)
   24e9c:	1007883a 	mov	r3,r2
   24ea0:	e0bffc17 	ldw	r2,-16(fp)
   24ea4:	10c0038d 	sth	r3,14(r2)
  ptr->_bf._base = 0;
   24ea8:	e0bffc17 	ldw	r2,-16(fp)
   24eac:	10000415 	stw	zero,16(r2)
  ptr->_bf._size = 0;
   24eb0:	e0bffc17 	ldw	r2,-16(fp)
   24eb4:	10000515 	stw	zero,20(r2)
  ptr->_lbfsize = 0;
   24eb8:	e0bffc17 	ldw	r2,-16(fp)
   24ebc:	10000615 	stw	zero,24(r2)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
   24ec0:	e0bffc17 	ldw	r2,-16(fp)
   24ec4:	10801704 	addi	r2,r2,92
   24ec8:	01800204 	movi	r6,8
   24ecc:	000b883a 	mov	r5,zero
   24ed0:	1009883a 	mov	r4,r2
   24ed4:	0027b040 	call	27b04 <memset>
  ptr->_cookie = ptr;
   24ed8:	e0bffc17 	ldw	r2,-16(fp)
   24edc:	e0fffc17 	ldw	r3,-16(fp)
   24ee0:	10c00715 	stw	r3,28(r2)
  ptr->_read = __sread;
   24ee4:	e0fffc17 	ldw	r3,-16(fp)
   24ee8:	008000f4 	movhi	r2,3
   24eec:	10a92404 	addi	r2,r2,-23408
   24ef0:	18800815 	stw	r2,32(r3)
#ifndef __LARGE64_FILES
  ptr->_write = __swrite;
   24ef4:	e0fffc17 	ldw	r3,-16(fp)
   24ef8:	008000f4 	movhi	r2,3
   24efc:	10a95704 	addi	r2,r2,-23204
   24f00:	18800915 	stw	r2,36(r3)
#else /* __LARGE64_FILES */
  ptr->_write = __swrite64;
  ptr->_seek64 = __sseek64;
  ptr->_flags |= __SL64;
#endif /* __LARGE64_FILES */
  ptr->_seek = __sseek;
   24f04:	e0fffc17 	ldw	r3,-16(fp)
   24f08:	008000f4 	movhi	r2,3
   24f0c:	10a98404 	addi	r2,r2,-23024
   24f10:	18800a15 	stw	r2,40(r3)
#ifdef _STDIO_CLOSE_PER_REENT_STD_STREAMS
  ptr->_close = __sclose;
   24f14:	e0fffc17 	ldw	r3,-16(fp)
   24f18:	008000f4 	movhi	r2,3
   24f1c:	10a9ac04 	addi	r2,r2,-22864
   24f20:	18800b15 	stw	r2,44(r3)

#ifdef __SCLE
  if (__stextmode (ptr->_file))
    ptr->_flags |= __SCLE;
#endif
}
   24f24:	0001883a 	nop
   24f28:	e037883a 	mov	sp,fp
   24f2c:	dfc00117 	ldw	ra,4(sp)
   24f30:	df000017 	ldw	fp,0(sp)
   24f34:	dec00204 	addi	sp,sp,8
   24f38:	f800283a 	ret

00024f3c <__sfmoreglue>:

struct _glue *
_DEFUN(__sfmoreglue, (d, n),
       struct _reent *d _AND
       register int n)
{
   24f3c:	defffb04 	addi	sp,sp,-20
   24f40:	dfc00415 	stw	ra,16(sp)
   24f44:	df000315 	stw	fp,12(sp)
   24f48:	dc000215 	stw	r16,8(sp)
   24f4c:	df000304 	addi	fp,sp,12
   24f50:	e13ffe15 	stw	r4,-8(fp)
   24f54:	2821883a 	mov	r16,r5
  struct glue_with_file *g;

  g = (struct glue_with_file *)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
   24f58:	80bfffc4 	addi	r2,r16,-1
   24f5c:	10801a24 	muli	r2,r2,104
   24f60:	10801d04 	addi	r2,r2,116
       struct _reent *d _AND
       register int n)
{
  struct glue_with_file *g;

  g = (struct glue_with_file *)
   24f64:	100b883a 	mov	r5,r2
   24f68:	e13ffe17 	ldw	r4,-8(fp)
   24f6c:	0026a3c0 	call	26a3c <_malloc_r>
   24f70:	e0bffd15 	stw	r2,-12(fp)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  if (g == NULL)
   24f74:	e0bffd17 	ldw	r2,-12(fp)
   24f78:	1000021e 	bne	r2,zero,24f84 <__sfmoreglue+0x48>
    return NULL;
   24f7c:	0005883a 	mov	r2,zero
   24f80:	00001106 	br	24fc8 <__sfmoreglue+0x8c>
  g->glue._next = NULL;
   24f84:	e0bffd17 	ldw	r2,-12(fp)
   24f88:	10000015 	stw	zero,0(r2)
  g->glue._niobs = n;
   24f8c:	e0bffd17 	ldw	r2,-12(fp)
   24f90:	14000115 	stw	r16,4(r2)
  g->glue._iobs = &g->file;
   24f94:	e0bffd17 	ldw	r2,-12(fp)
   24f98:	10c00304 	addi	r3,r2,12
   24f9c:	e0bffd17 	ldw	r2,-12(fp)
   24fa0:	10c00215 	stw	r3,8(r2)
  memset (&g->file, 0, n * sizeof (FILE));
   24fa4:	e0bffd17 	ldw	r2,-12(fp)
   24fa8:	10800304 	addi	r2,r2,12
   24fac:	8007883a 	mov	r3,r16
   24fb0:	18c01a24 	muli	r3,r3,104
   24fb4:	180d883a 	mov	r6,r3
   24fb8:	000b883a 	mov	r5,zero
   24fbc:	1009883a 	mov	r4,r2
   24fc0:	0027b040 	call	27b04 <memset>
  return &g->glue;
   24fc4:	e0bffd17 	ldw	r2,-12(fp)
}
   24fc8:	e6ffff04 	addi	sp,fp,-4
   24fcc:	dfc00217 	ldw	ra,8(sp)
   24fd0:	df000117 	ldw	fp,4(sp)
   24fd4:	dc000017 	ldw	r16,0(sp)
   24fd8:	dec00304 	addi	sp,sp,12
   24fdc:	f800283a 	ret

00024fe0 <__sfp>:
 */

FILE *
_DEFUN(__sfp, (d),
       struct _reent *d)
{
   24fe0:	defffa04 	addi	sp,sp,-24
   24fe4:	dfc00515 	stw	ra,20(sp)
   24fe8:	df000415 	stw	fp,16(sp)
   24fec:	df000404 	addi	fp,sp,16
   24ff0:	e13fff15 	stw	r4,-4(fp)
  FILE *fp;
  int n;
  struct _glue *g;

  _newlib_sfp_lock_start ();
   24ff4:	00252c40 	call	252c4 <__sfp_lock_acquire>

  if (!_GLOBAL_REENT->__sdidinit)
   24ff8:	d0a00117 	ldw	r2,-32764(gp)
   24ffc:	10800e17 	ldw	r2,56(r2)
   25000:	1000031e 	bne	r2,zero,25010 <__sfp+0x30>
    __sinit (_GLOBAL_REENT);
   25004:	d0a00117 	ldw	r2,-32764(gp)
   25008:	1009883a 	mov	r4,r2
   2500c:	00251ec0 	call	251ec <__sinit>
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
   25010:	d0a00117 	ldw	r2,-32764(gp)
   25014:	1080b804 	addi	r2,r2,736
   25018:	e0bffe15 	stw	r2,-8(fp)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
   2501c:	e0bffe17 	ldw	r2,-8(fp)
   25020:	10800217 	ldw	r2,8(r2)
   25024:	e0bffc15 	stw	r2,-16(fp)
   25028:	e0bffe17 	ldw	r2,-8(fp)
   2502c:	10800117 	ldw	r2,4(r2)
   25030:	e0bffd15 	stw	r2,-12(fp)
   25034:	00000906 	br	2505c <__sfp+0x7c>
	if (fp->_flags == 0)
   25038:	e0bffc17 	ldw	r2,-16(fp)
   2503c:	1080030b 	ldhu	r2,12(r2)
   25040:	10bfffcc 	andi	r2,r2,65535
   25044:	10a0001c 	xori	r2,r2,32768
   25048:	10a00004 	addi	r2,r2,-32768
   2504c:	10001f26 	beq	r2,zero,250cc <__sfp+0xec>

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
   25050:	e0bffc17 	ldw	r2,-16(fp)
   25054:	10801a04 	addi	r2,r2,104
   25058:	e0bffc15 	stw	r2,-16(fp)
   2505c:	e0bffd17 	ldw	r2,-12(fp)
   25060:	10bfffc4 	addi	r2,r2,-1
   25064:	e0bffd15 	stw	r2,-12(fp)
   25068:	e0bffd17 	ldw	r2,-12(fp)
   2506c:	103ff20e 	bge	r2,zero,25038 <__alt_data_end+0xfffe5038>
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
   25070:	e0bffe17 	ldw	r2,-8(fp)
   25074:	10800017 	ldw	r2,0(r2)
   25078:	1000091e 	bne	r2,zero,250a0 <__sfp+0xc0>
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
   2507c:	01400104 	movi	r5,4
   25080:	e13fff17 	ldw	r4,-4(fp)
   25084:	0024f3c0 	call	24f3c <__sfmoreglue>
   25088:	1007883a 	mov	r3,r2
   2508c:	e0bffe17 	ldw	r2,-8(fp)
   25090:	10c00015 	stw	r3,0(r2)
   25094:	e0bffe17 	ldw	r2,-8(fp)
   25098:	10800017 	ldw	r2,0(r2)
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
   2509c:	10000426 	beq	r2,zero,250b0 <__sfp+0xd0>

  _newlib_sfp_lock_start ();

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
   250a0:	e0bffe17 	ldw	r2,-8(fp)
   250a4:	10800017 	ldw	r2,0(r2)
   250a8:	e0bffe15 	stw	r2,-8(fp)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
    }
   250ac:	003fdb06 	br	2501c <__alt_data_end+0xfffe501c>
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
   250b0:	0001883a 	nop
    }
  _newlib_sfp_lock_exit ();
   250b4:	00252e40 	call	252e4 <__sfp_lock_release>
  d->_errno = ENOMEM;
   250b8:	e0bfff17 	ldw	r2,-4(fp)
   250bc:	00c00304 	movi	r3,12
   250c0:	10c00015 	stw	r3,0(r2)
  return NULL;
   250c4:	0005883a 	mov	r2,zero
   250c8:	00002506 	br	25160 <__sfp+0x180>
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
   250cc:	0001883a 	nop
  _newlib_sfp_lock_exit ();
  d->_errno = ENOMEM;
  return NULL;

found:
  fp->_file = -1;		/* no file */
   250d0:	e0bffc17 	ldw	r2,-16(fp)
   250d4:	00ffffc4 	movi	r3,-1
   250d8:	10c0038d 	sth	r3,14(r2)
  fp->_flags = 1;		/* reserve this slot; caller sets real flags */
   250dc:	e0bffc17 	ldw	r2,-16(fp)
   250e0:	00c00044 	movi	r3,1
   250e4:	10c0030d 	sth	r3,12(r2)
  fp->_flags2 = 0;
   250e8:	e0bffc17 	ldw	r2,-16(fp)
   250ec:	10001915 	stw	zero,100(r2)
#ifndef __SINGLE_THREAD__
  __lock_init_recursive (fp->_lock);
#endif
  _newlib_sfp_lock_end ();
   250f0:	00252e40 	call	252e4 <__sfp_lock_release>

  fp->_p = NULL;		/* no current pointer */
   250f4:	e0bffc17 	ldw	r2,-16(fp)
   250f8:	10000015 	stw	zero,0(r2)
  fp->_w = 0;			/* nothing to read or write */
   250fc:	e0bffc17 	ldw	r2,-16(fp)
   25100:	10000215 	stw	zero,8(r2)
  fp->_r = 0;
   25104:	e0bffc17 	ldw	r2,-16(fp)
   25108:	10000115 	stw	zero,4(r2)
  fp->_bf._base = NULL;		/* no buffer */
   2510c:	e0bffc17 	ldw	r2,-16(fp)
   25110:	10000415 	stw	zero,16(r2)
  fp->_bf._size = 0;
   25114:	e0bffc17 	ldw	r2,-16(fp)
   25118:	10000515 	stw	zero,20(r2)
  fp->_lbfsize = 0;		/* not line buffered */
   2511c:	e0bffc17 	ldw	r2,-16(fp)
   25120:	10000615 	stw	zero,24(r2)
  memset (&fp->_mbstate, 0, sizeof (_mbstate_t));
   25124:	e0bffc17 	ldw	r2,-16(fp)
   25128:	10801704 	addi	r2,r2,92
   2512c:	01800204 	movi	r6,8
   25130:	000b883a 	mov	r5,zero
   25134:	1009883a 	mov	r4,r2
   25138:	0027b040 	call	27b04 <memset>
  /* fp->_cookie = <any>; */	/* caller sets cookie, _read/_write etc */
  fp->_ub._base = NULL;		/* no ungetc buffer */
   2513c:	e0bffc17 	ldw	r2,-16(fp)
   25140:	10000c15 	stw	zero,48(r2)
  fp->_ub._size = 0;
   25144:	e0bffc17 	ldw	r2,-16(fp)
   25148:	10000d15 	stw	zero,52(r2)
  fp->_lb._base = NULL;		/* no line buffer */
   2514c:	e0bffc17 	ldw	r2,-16(fp)
   25150:	10001115 	stw	zero,68(r2)
  fp->_lb._size = 0;
   25154:	e0bffc17 	ldw	r2,-16(fp)
   25158:	10001215 	stw	zero,72(r2)

  return fp;
   2515c:	e0bffc17 	ldw	r2,-16(fp)
}
   25160:	e037883a 	mov	sp,fp
   25164:	dfc00117 	ldw	ra,4(sp)
   25168:	df000017 	ldw	fp,0(sp)
   2516c:	dec00204 	addi	sp,sp,8
   25170:	f800283a 	ret

00025174 <_cleanup_r>:
 */

_VOID
_DEFUN(_cleanup_r, (ptr),
       struct _reent *ptr)
{
   25174:	defffc04 	addi	sp,sp,-16
   25178:	dfc00315 	stw	ra,12(sp)
   2517c:	df000215 	stw	fp,8(sp)
   25180:	df000204 	addi	fp,sp,8
   25184:	e13fff15 	stw	r4,-4(fp)
  /* Otherwise close files and flush read streams, too.
     Note we call flush directly if "--enable-lite-exit" is in effect.  */
#ifdef _LITE_EXIT
  cleanup_func = _fflush_r;
#else
  cleanup_func = _fclose_r;
   25188:	008000f4 	movhi	r2,3
   2518c:	10b02b04 	addi	r2,r2,-16212
   25190:	e0bffe15 	stw	r2,-8(fp)
#endif
#endif
  _CAST_VOID _fwalk_reent (ptr, cleanup_func);
   25194:	e17ffe17 	ldw	r5,-8(fp)
   25198:	e13fff17 	ldw	r4,-4(fp)
   2519c:	00261dc0 	call	261dc <_fwalk_reent>
}
   251a0:	0001883a 	nop
   251a4:	e037883a 	mov	sp,fp
   251a8:	dfc00117 	ldw	ra,4(sp)
   251ac:	df000017 	ldw	fp,0(sp)
   251b0:	dec00204 	addi	sp,sp,8
   251b4:	f800283a 	ret

000251b8 <_cleanup>:

#ifndef _REENT_ONLY
_VOID
_DEFUN_VOID(_cleanup)
{
   251b8:	defffe04 	addi	sp,sp,-8
   251bc:	dfc00115 	stw	ra,4(sp)
   251c0:	df000015 	stw	fp,0(sp)
   251c4:	d839883a 	mov	fp,sp
  _cleanup_r (_GLOBAL_REENT);
   251c8:	d0a00117 	ldw	r2,-32764(gp)
   251cc:	1009883a 	mov	r4,r2
   251d0:	00251740 	call	25174 <_cleanup_r>
}
   251d4:	0001883a 	nop
   251d8:	e037883a 	mov	sp,fp
   251dc:	dfc00117 	ldw	ra,4(sp)
   251e0:	df000017 	ldw	fp,0(sp)
   251e4:	dec00204 	addi	sp,sp,8
   251e8:	f800283a 	ret

000251ec <__sinit>:
 */

_VOID
_DEFUN(__sinit, (s),
       struct _reent *s)
{
   251ec:	defffd04 	addi	sp,sp,-12
   251f0:	dfc00215 	stw	ra,8(sp)
   251f4:	df000115 	stw	fp,4(sp)
   251f8:	df000104 	addi	fp,sp,4
   251fc:	e13fff15 	stw	r4,-4(fp)
  __sinit_lock_acquire ();
   25200:	00253040 	call	25304 <__sinit_lock_acquire>

  if (s->__sdidinit)
   25204:	e0bfff17 	ldw	r2,-4(fp)
   25208:	10800e17 	ldw	r2,56(r2)
   2520c:	10000226 	beq	r2,zero,25218 <__sinit+0x2c>
    {
      __sinit_lock_release ();
   25210:	00253240 	call	25324 <__sinit_lock_release>
      return;
   25214:	00002606 	br	252b0 <__sinit+0xc4>
    }

  /* make sure we clean up on exit */
  s->__cleanup = _cleanup_r;	/* conservative */
   25218:	e0ffff17 	ldw	r3,-4(fp)
   2521c:	008000b4 	movhi	r2,2
   25220:	10945d04 	addi	r2,r2,20852
   25224:	18800f15 	stw	r2,60(r3)

  s->__sglue._next = NULL;
   25228:	e0bfff17 	ldw	r2,-4(fp)
   2522c:	1000b815 	stw	zero,736(r2)
#ifndef _REENT_SMALL
  s->__sglue._niobs = 3;
   25230:	e0bfff17 	ldw	r2,-4(fp)
   25234:	00c000c4 	movi	r3,3
   25238:	10c0b915 	stw	r3,740(r2)
  s->__sglue._iobs = &s->__sf[0];
   2523c:	e0bfff17 	ldw	r2,-4(fp)
   25240:	10c0bb04 	addi	r3,r2,748
   25244:	e0bfff17 	ldw	r2,-4(fp)
   25248:	10c0ba15 	stw	r3,744(r2)
  s->_stdin = __sfp(s);
  s->_stdout = __sfp(s);
  s->_stderr = __sfp(s);
#endif

  std (s->_stdin,  __SRD, 0, s);
   2524c:	e0bfff17 	ldw	r2,-4(fp)
   25250:	10800117 	ldw	r2,4(r2)
   25254:	e1ffff17 	ldw	r7,-4(fp)
   25258:	000d883a 	mov	r6,zero
   2525c:	01400104 	movi	r5,4
   25260:	1009883a 	mov	r4,r2
   25264:	0024e480 	call	24e48 <std>
#ifdef HAVE_FCNTL
/*std (s->_stdout, __SWR, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
#else
/*std (s->_stdout, __SWR | __SLBF, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
   25268:	e0bfff17 	ldw	r2,-4(fp)
   2526c:	10800217 	ldw	r2,8(r2)
   25270:	e1ffff17 	ldw	r7,-4(fp)
   25274:	01800044 	movi	r6,1
   25278:	01400284 	movi	r5,10
   2527c:	1009883a 	mov	r4,r2
   25280:	0024e480 	call	24e48 <std>
#endif

  /* POSIX requires stderr to be opened for reading and writing, even
     when the underlying fd 2 is write-only.  */
  std (s->_stderr, __SRW | __SNBF, 2, s);
   25284:	e0bfff17 	ldw	r2,-4(fp)
   25288:	10800317 	ldw	r2,12(r2)
   2528c:	e1ffff17 	ldw	r7,-4(fp)
   25290:	01800084 	movi	r6,2
   25294:	01400484 	movi	r5,18
   25298:	1009883a 	mov	r4,r2
   2529c:	0024e480 	call	24e48 <std>

  s->__sdidinit = 1;
   252a0:	e0bfff17 	ldw	r2,-4(fp)
   252a4:	00c00044 	movi	r3,1
   252a8:	10c00e15 	stw	r3,56(r2)

  __sinit_lock_release ();
   252ac:	00253240 	call	25324 <__sinit_lock_release>
}
   252b0:	e037883a 	mov	sp,fp
   252b4:	dfc00117 	ldw	ra,4(sp)
   252b8:	df000017 	ldw	fp,0(sp)
   252bc:	dec00204 	addi	sp,sp,8
   252c0:	f800283a 	ret

000252c4 <__sfp_lock_acquire>:
__LOCK_INIT_RECURSIVE(static, __sfp_lock);
__LOCK_INIT_RECURSIVE(static, __sinit_lock);

_VOID
_DEFUN_VOID(__sfp_lock_acquire)
{
   252c4:	deffff04 	addi	sp,sp,-4
   252c8:	df000015 	stw	fp,0(sp)
   252cc:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sfp_lock);
}
   252d0:	0001883a 	nop
   252d4:	e037883a 	mov	sp,fp
   252d8:	df000017 	ldw	fp,0(sp)
   252dc:	dec00104 	addi	sp,sp,4
   252e0:	f800283a 	ret

000252e4 <__sfp_lock_release>:

_VOID
_DEFUN_VOID(__sfp_lock_release)
{
   252e4:	deffff04 	addi	sp,sp,-4
   252e8:	df000015 	stw	fp,0(sp)
   252ec:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sfp_lock);
}
   252f0:	0001883a 	nop
   252f4:	e037883a 	mov	sp,fp
   252f8:	df000017 	ldw	fp,0(sp)
   252fc:	dec00104 	addi	sp,sp,4
   25300:	f800283a 	ret

00025304 <__sinit_lock_acquire>:

_VOID
_DEFUN_VOID(__sinit_lock_acquire)
{
   25304:	deffff04 	addi	sp,sp,-4
   25308:	df000015 	stw	fp,0(sp)
   2530c:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sinit_lock);
}
   25310:	0001883a 	nop
   25314:	e037883a 	mov	sp,fp
   25318:	df000017 	ldw	fp,0(sp)
   2531c:	dec00104 	addi	sp,sp,4
   25320:	f800283a 	ret

00025324 <__sinit_lock_release>:

_VOID
_DEFUN_VOID(__sinit_lock_release)
{
   25324:	deffff04 	addi	sp,sp,-4
   25328:	df000015 	stw	fp,0(sp)
   2532c:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sinit_lock);
}
   25330:	0001883a 	nop
   25334:	e037883a 	mov	sp,fp
   25338:	df000017 	ldw	fp,0(sp)
   2533c:	dec00104 	addi	sp,sp,4
   25340:	f800283a 	ret

00025344 <__fp_lock>:

/* Walkable file locking routine.  */
static int
_DEFUN(__fp_lock, (ptr),
       FILE * ptr)
{
   25344:	defffe04 	addi	sp,sp,-8
   25348:	df000115 	stw	fp,4(sp)
   2534c:	df000104 	addi	fp,sp,4
   25350:	e13fff15 	stw	r4,-4(fp)
  _flockfile (ptr);

  return 0;
   25354:	0005883a 	mov	r2,zero
}
   25358:	e037883a 	mov	sp,fp
   2535c:	df000017 	ldw	fp,0(sp)
   25360:	dec00104 	addi	sp,sp,4
   25364:	f800283a 	ret

00025368 <__fp_unlock>:

/* Walkable file unlocking routine.  */
static int
_DEFUN(__fp_unlock, (ptr),
       FILE * ptr)
{
   25368:	defffe04 	addi	sp,sp,-8
   2536c:	df000115 	stw	fp,4(sp)
   25370:	df000104 	addi	fp,sp,4
   25374:	e13fff15 	stw	r4,-4(fp)
  _funlockfile (ptr);

  return 0;
   25378:	0005883a 	mov	r2,zero
}
   2537c:	e037883a 	mov	sp,fp
   25380:	df000017 	ldw	fp,0(sp)
   25384:	dec00104 	addi	sp,sp,4
   25388:	f800283a 	ret

0002538c <__fp_lock_all>:

_VOID
_DEFUN_VOID(__fp_lock_all)
{
   2538c:	defffe04 	addi	sp,sp,-8
   25390:	dfc00115 	stw	ra,4(sp)
   25394:	df000015 	stw	fp,0(sp)
   25398:	d839883a 	mov	fp,sp
  __sfp_lock_acquire ();
   2539c:	00252c40 	call	252c4 <__sfp_lock_acquire>

  _CAST_VOID _fwalk (_REENT, __fp_lock);
   253a0:	d0a00017 	ldw	r2,-32768(gp)
   253a4:	014000b4 	movhi	r5,2
   253a8:	2954d104 	addi	r5,r5,21316
   253ac:	1009883a 	mov	r4,r2
   253b0:	00261040 	call	26104 <_fwalk>
}
   253b4:	0001883a 	nop
   253b8:	e037883a 	mov	sp,fp
   253bc:	dfc00117 	ldw	ra,4(sp)
   253c0:	df000017 	ldw	fp,0(sp)
   253c4:	dec00204 	addi	sp,sp,8
   253c8:	f800283a 	ret

000253cc <__fp_unlock_all>:

_VOID
_DEFUN_VOID(__fp_unlock_all)
{
   253cc:	defffe04 	addi	sp,sp,-8
   253d0:	dfc00115 	stw	ra,4(sp)
   253d4:	df000015 	stw	fp,0(sp)
   253d8:	d839883a 	mov	fp,sp
  _CAST_VOID _fwalk (_REENT, __fp_unlock);
   253dc:	d0a00017 	ldw	r2,-32768(gp)
   253e0:	014000b4 	movhi	r5,2
   253e4:	2954da04 	addi	r5,r5,21352
   253e8:	1009883a 	mov	r4,r2
   253ec:	00261040 	call	26104 <_fwalk>

  __sfp_lock_release ();
   253f0:	00252e40 	call	252e4 <__sfp_lock_release>
}
   253f4:	0001883a 	nop
   253f8:	e037883a 	mov	sp,fp
   253fc:	dfc00117 	ldw	ra,4(sp)
   25400:	df000017 	ldw	fp,0(sp)
   25404:	dec00204 	addi	sp,sp,8
   25408:	f800283a 	ret

0002540c <_free_r>:
#if __STD_C
void fREe(RARG Void_t* mem)
#else
void fREe(RARG mem) RDECL Void_t* mem;
#endif
{
   2540c:	defff204 	addi	sp,sp,-56
   25410:	dfc00d15 	stw	ra,52(sp)
   25414:	df000c15 	stw	fp,48(sp)
   25418:	df000c04 	addi	fp,sp,48
   2541c:	e13ffe15 	stw	r4,-8(fp)
   25420:	e17fff15 	stw	r5,-4(fp)
  INTERNAL_SIZE_T prevsz; /* size of previous contiguous chunk */
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
   25424:	e0bfff17 	ldw	r2,-4(fp)
   25428:	10014a26 	beq	r2,zero,25954 <_free_r+0x548>
    return;

  MALLOC_LOCK;
   2542c:	e13ffe17 	ldw	r4,-8(fp)
   25430:	00301240 	call	30124 <__malloc_lock>

  p = mem2chunk(mem);
   25434:	e0bfff17 	ldw	r2,-4(fp)
   25438:	10bffe04 	addi	r2,r2,-8
   2543c:	e0bff415 	stw	r2,-48(fp)
  hd = p->size;
   25440:	e0bff417 	ldw	r2,-48(fp)
   25444:	10800117 	ldw	r2,4(r2)
   25448:	e0bff915 	stw	r2,-28(fp)
  }
#endif
  
  check_inuse_chunk(p);
  
  sz = hd & ~PREV_INUSE;
   2544c:	e0fff917 	ldw	r3,-28(fp)
   25450:	00bfff84 	movi	r2,-2
   25454:	1884703a 	and	r2,r3,r2
   25458:	e0bff515 	stw	r2,-44(fp)
  next = chunk_at_offset(p, sz);
   2545c:	e0fff417 	ldw	r3,-48(fp)
   25460:	e0bff517 	ldw	r2,-44(fp)
   25464:	1885883a 	add	r2,r3,r2
   25468:	e0bffa15 	stw	r2,-24(fp)
  nextsz = chunksize(next);
   2546c:	e0bffa17 	ldw	r2,-24(fp)
   25470:	10c00117 	ldw	r3,4(r2)
   25474:	00bfff04 	movi	r2,-4
   25478:	1884703a 	and	r2,r3,r2
   2547c:	e0bffb15 	stw	r2,-20(fp)
  
  if (next == top)                            /* merge with top */
   25480:	008000f4 	movhi	r2,3
   25484:	10898b04 	addi	r2,r2,9772
   25488:	10c00217 	ldw	r3,8(r2)
   2548c:	e0bffa17 	ldw	r2,-24(fp)
   25490:	1880311e 	bne	r3,r2,25558 <_free_r+0x14c>
  {
    sz += nextsz;
   25494:	e0fff517 	ldw	r3,-44(fp)
   25498:	e0bffb17 	ldw	r2,-20(fp)
   2549c:	1885883a 	add	r2,r3,r2
   254a0:	e0bff515 	stw	r2,-44(fp)

    if (!(hd & PREV_INUSE))                    /* consolidate backward */
   254a4:	e0bff917 	ldw	r2,-28(fp)
   254a8:	1080004c 	andi	r2,r2,1
   254ac:	1000181e 	bne	r2,zero,25510 <_free_r+0x104>
    {
      prevsz = p->prev_size;
   254b0:	e0bff417 	ldw	r2,-48(fp)
   254b4:	10800017 	ldw	r2,0(r2)
   254b8:	e0bffc15 	stw	r2,-16(fp)
      p = chunk_at_offset(p, -prevsz);
   254bc:	e0bffc17 	ldw	r2,-16(fp)
   254c0:	0085c83a 	sub	r2,zero,r2
   254c4:	e0fff417 	ldw	r3,-48(fp)
   254c8:	1885883a 	add	r2,r3,r2
   254cc:	e0bff415 	stw	r2,-48(fp)
      sz += prevsz;
   254d0:	e0fff517 	ldw	r3,-44(fp)
   254d4:	e0bffc17 	ldw	r2,-16(fp)
   254d8:	1885883a 	add	r2,r3,r2
   254dc:	e0bff515 	stw	r2,-44(fp)
      unlink(p, bck, fwd);
   254e0:	e0bff417 	ldw	r2,-48(fp)
   254e4:	10800317 	ldw	r2,12(r2)
   254e8:	e0bff615 	stw	r2,-40(fp)
   254ec:	e0bff417 	ldw	r2,-48(fp)
   254f0:	10800217 	ldw	r2,8(r2)
   254f4:	e0bff715 	stw	r2,-36(fp)
   254f8:	e0bff717 	ldw	r2,-36(fp)
   254fc:	e0fff617 	ldw	r3,-40(fp)
   25500:	10c00315 	stw	r3,12(r2)
   25504:	e0bff617 	ldw	r2,-40(fp)
   25508:	e0fff717 	ldw	r3,-36(fp)
   2550c:	10c00215 	stw	r3,8(r2)
    }

    set_head(p, sz | PREV_INUSE);
   25510:	e0bff517 	ldw	r2,-44(fp)
   25514:	10c00054 	ori	r3,r2,1
   25518:	e0bff417 	ldw	r2,-48(fp)
   2551c:	10c00115 	stw	r3,4(r2)
    top = p;
   25520:	008000f4 	movhi	r2,3
   25524:	10898b04 	addi	r2,r2,9772
   25528:	e0fff417 	ldw	r3,-48(fp)
   2552c:	10c00215 	stw	r3,8(r2)
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
   25530:	d0a00317 	ldw	r2,-32756(gp)
   25534:	e0fff517 	ldw	r3,-44(fp)
   25538:	18800436 	bltu	r3,r2,2554c <_free_r+0x140>
      malloc_trim(RCALL top_pad); 
   2553c:	d0a70217 	ldw	r2,-25592(gp)
   25540:	100b883a 	mov	r5,r2
   25544:	e13ffe17 	ldw	r4,-8(fp)
   25548:	002596c0 	call	2596c <_malloc_trim_r>
    MALLOC_UNLOCK;
   2554c:	e13ffe17 	ldw	r4,-8(fp)
   25550:	00301480 	call	30148 <__malloc_unlock>
    return;
   25554:	00010006 	br	25958 <_free_r+0x54c>
  }

  set_head(next, nextsz);                    /* clear inuse bit */
   25558:	e0bffa17 	ldw	r2,-24(fp)
   2555c:	e0fffb17 	ldw	r3,-20(fp)
   25560:	10c00115 	stw	r3,4(r2)

  islr = 0;
   25564:	e03ff815 	stw	zero,-32(fp)

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
   25568:	e0bff917 	ldw	r2,-28(fp)
   2556c:	1080004c 	andi	r2,r2,1
   25570:	1000201e 	bne	r2,zero,255f4 <_free_r+0x1e8>
  {
    prevsz = p->prev_size;
   25574:	e0bff417 	ldw	r2,-48(fp)
   25578:	10800017 	ldw	r2,0(r2)
   2557c:	e0bffc15 	stw	r2,-16(fp)
    p = chunk_at_offset(p, -prevsz);
   25580:	e0bffc17 	ldw	r2,-16(fp)
   25584:	0085c83a 	sub	r2,zero,r2
   25588:	e0fff417 	ldw	r3,-48(fp)
   2558c:	1885883a 	add	r2,r3,r2
   25590:	e0bff415 	stw	r2,-48(fp)
    sz += prevsz;
   25594:	e0fff517 	ldw	r3,-44(fp)
   25598:	e0bffc17 	ldw	r2,-16(fp)
   2559c:	1885883a 	add	r2,r3,r2
   255a0:	e0bff515 	stw	r2,-44(fp)
    
    if (p->fd == last_remainder)             /* keep as last_remainder */
   255a4:	e0bff417 	ldw	r2,-48(fp)
   255a8:	10c00217 	ldw	r3,8(r2)
   255ac:	008000f4 	movhi	r2,3
   255b0:	10898d04 	addi	r2,r2,9780
   255b4:	1880031e 	bne	r3,r2,255c4 <_free_r+0x1b8>
      islr = 1;
   255b8:	00800044 	movi	r2,1
   255bc:	e0bff815 	stw	r2,-32(fp)
   255c0:	00000c06 	br	255f4 <_free_r+0x1e8>
    else
      unlink(p, bck, fwd);
   255c4:	e0bff417 	ldw	r2,-48(fp)
   255c8:	10800317 	ldw	r2,12(r2)
   255cc:	e0bff615 	stw	r2,-40(fp)
   255d0:	e0bff417 	ldw	r2,-48(fp)
   255d4:	10800217 	ldw	r2,8(r2)
   255d8:	e0bff715 	stw	r2,-36(fp)
   255dc:	e0bff717 	ldw	r2,-36(fp)
   255e0:	e0fff617 	ldw	r3,-40(fp)
   255e4:	10c00315 	stw	r3,12(r2)
   255e8:	e0bff617 	ldw	r2,-40(fp)
   255ec:	e0fff717 	ldw	r3,-36(fp)
   255f0:	10c00215 	stw	r3,8(r2)
  }
  
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
   255f4:	e0fffa17 	ldw	r3,-24(fp)
   255f8:	e0bffb17 	ldw	r2,-20(fp)
   255fc:	1885883a 	add	r2,r3,r2
   25600:	10800117 	ldw	r2,4(r2)
   25604:	1080004c 	andi	r2,r2,1
   25608:	10002a1e 	bne	r2,zero,256b4 <_free_r+0x2a8>
  {
    sz += nextsz;
   2560c:	e0fff517 	ldw	r3,-44(fp)
   25610:	e0bffb17 	ldw	r2,-20(fp)
   25614:	1885883a 	add	r2,r3,r2
   25618:	e0bff515 	stw	r2,-44(fp)
    
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
   2561c:	e0bff817 	ldw	r2,-32(fp)
   25620:	1000181e 	bne	r2,zero,25684 <_free_r+0x278>
   25624:	e0bffa17 	ldw	r2,-24(fp)
   25628:	10c00217 	ldw	r3,8(r2)
   2562c:	008000f4 	movhi	r2,3
   25630:	10898d04 	addi	r2,r2,9780
   25634:	1880131e 	bne	r3,r2,25684 <_free_r+0x278>
    {
      islr = 1;
   25638:	00800044 	movi	r2,1
   2563c:	e0bff815 	stw	r2,-32(fp)
      link_last_remainder(p);   
   25640:	00c000f4 	movhi	r3,3
   25644:	18c98d04 	addi	r3,r3,9780
   25648:	008000f4 	movhi	r2,3
   2564c:	10898d04 	addi	r2,r2,9780
   25650:	e13ff417 	ldw	r4,-48(fp)
   25654:	11000315 	stw	r4,12(r2)
   25658:	10800317 	ldw	r2,12(r2)
   2565c:	18800215 	stw	r2,8(r3)
   25660:	008000f4 	movhi	r2,3
   25664:	10898d04 	addi	r2,r2,9780
   25668:	e0fff417 	ldw	r3,-48(fp)
   2566c:	18800315 	stw	r2,12(r3)
   25670:	e0bff417 	ldw	r2,-48(fp)
   25674:	10c00317 	ldw	r3,12(r2)
   25678:	e0bff417 	ldw	r2,-48(fp)
   2567c:	10c00215 	stw	r3,8(r2)
   25680:	00000c06 	br	256b4 <_free_r+0x2a8>
    }
    else
      unlink(next, bck, fwd);
   25684:	e0bffa17 	ldw	r2,-24(fp)
   25688:	10800317 	ldw	r2,12(r2)
   2568c:	e0bff615 	stw	r2,-40(fp)
   25690:	e0bffa17 	ldw	r2,-24(fp)
   25694:	10800217 	ldw	r2,8(r2)
   25698:	e0bff715 	stw	r2,-36(fp)
   2569c:	e0bff717 	ldw	r2,-36(fp)
   256a0:	e0fff617 	ldw	r3,-40(fp)
   256a4:	10c00315 	stw	r3,12(r2)
   256a8:	e0bff617 	ldw	r2,-40(fp)
   256ac:	e0fff717 	ldw	r3,-36(fp)
   256b0:	10c00215 	stw	r3,8(r2)
  }


  set_head(p, sz | PREV_INUSE);
   256b4:	e0bff517 	ldw	r2,-44(fp)
   256b8:	10c00054 	ori	r3,r2,1
   256bc:	e0bff417 	ldw	r2,-48(fp)
   256c0:	10c00115 	stw	r3,4(r2)
  set_foot(p, sz);
   256c4:	e0fff417 	ldw	r3,-48(fp)
   256c8:	e0bff517 	ldw	r2,-44(fp)
   256cc:	1885883a 	add	r2,r3,r2
   256d0:	e0fff517 	ldw	r3,-44(fp)
   256d4:	10c00015 	stw	r3,0(r2)
  if (!islr)
   256d8:	e0bff817 	ldw	r2,-32(fp)
   256dc:	10009a1e 	bne	r2,zero,25948 <_free_r+0x53c>
    frontlink(p, sz, idx, bck, fwd);  
   256e0:	e0bff517 	ldw	r2,-44(fp)
   256e4:	10808028 	cmpgeui	r2,r2,512
   256e8:	10002c1e 	bne	r2,zero,2579c <_free_r+0x390>
   256ec:	e0bff517 	ldw	r2,-44(fp)
   256f0:	1004d0fa 	srli	r2,r2,3
   256f4:	e0bffd15 	stw	r2,-12(fp)
   256f8:	00c000f4 	movhi	r3,3
   256fc:	18c98b04 	addi	r3,r3,9772
   25700:	008000f4 	movhi	r2,3
   25704:	10898b04 	addi	r2,r2,9772
   25708:	11000117 	ldw	r4,4(r2)
   2570c:	e0bffd17 	ldw	r2,-12(fp)
   25710:	1000010e 	bge	r2,zero,25718 <_free_r+0x30c>
   25714:	108000c4 	addi	r2,r2,3
   25718:	1005d0ba 	srai	r2,r2,2
   2571c:	100b883a 	mov	r5,r2
   25720:	00800044 	movi	r2,1
   25724:	1144983a 	sll	r2,r2,r5
   25728:	2084b03a 	or	r2,r4,r2
   2572c:	18800115 	stw	r2,4(r3)
   25730:	e0bffd17 	ldw	r2,-12(fp)
   25734:	10800044 	addi	r2,r2,1
   25738:	1085883a 	add	r2,r2,r2
   2573c:	1085883a 	add	r2,r2,r2
   25740:	1087883a 	add	r3,r2,r2
   25744:	008000f4 	movhi	r2,3
   25748:	10898b04 	addi	r2,r2,9772
   2574c:	1885883a 	add	r2,r3,r2
   25750:	10bffe04 	addi	r2,r2,-8
   25754:	e0bff615 	stw	r2,-40(fp)
   25758:	e0bff617 	ldw	r2,-40(fp)
   2575c:	10800217 	ldw	r2,8(r2)
   25760:	e0bff715 	stw	r2,-36(fp)
   25764:	e0bff417 	ldw	r2,-48(fp)
   25768:	e0fff617 	ldw	r3,-40(fp)
   2576c:	10c00315 	stw	r3,12(r2)
   25770:	e0bff417 	ldw	r2,-48(fp)
   25774:	e0fff717 	ldw	r3,-36(fp)
   25778:	10c00215 	stw	r3,8(r2)
   2577c:	e0bff617 	ldw	r2,-40(fp)
   25780:	e0fff417 	ldw	r3,-48(fp)
   25784:	10c00215 	stw	r3,8(r2)
   25788:	e0bff617 	ldw	r2,-40(fp)
   2578c:	10c00217 	ldw	r3,8(r2)
   25790:	e0bff717 	ldw	r2,-36(fp)
   25794:	10c00315 	stw	r3,12(r2)
   25798:	00006b06 	br	25948 <_free_r+0x53c>
   2579c:	e0bff517 	ldw	r2,-44(fp)
   257a0:	1004d27a 	srli	r2,r2,9
   257a4:	1000031e 	bne	r2,zero,257b4 <_free_r+0x3a8>
   257a8:	e0bff517 	ldw	r2,-44(fp)
   257ac:	1004d0fa 	srli	r2,r2,3
   257b0:	00002906 	br	25858 <_free_r+0x44c>
   257b4:	e0bff517 	ldw	r2,-44(fp)
   257b8:	1004d27a 	srli	r2,r2,9
   257bc:	10800168 	cmpgeui	r2,r2,5
   257c0:	1000041e 	bne	r2,zero,257d4 <_free_r+0x3c8>
   257c4:	e0bff517 	ldw	r2,-44(fp)
   257c8:	1004d1ba 	srli	r2,r2,6
   257cc:	10800e04 	addi	r2,r2,56
   257d0:	00002106 	br	25858 <_free_r+0x44c>
   257d4:	e0bff517 	ldw	r2,-44(fp)
   257d8:	1004d27a 	srli	r2,r2,9
   257dc:	10800568 	cmpgeui	r2,r2,21
   257e0:	1000041e 	bne	r2,zero,257f4 <_free_r+0x3e8>
   257e4:	e0bff517 	ldw	r2,-44(fp)
   257e8:	1004d27a 	srli	r2,r2,9
   257ec:	108016c4 	addi	r2,r2,91
   257f0:	00001906 	br	25858 <_free_r+0x44c>
   257f4:	e0bff517 	ldw	r2,-44(fp)
   257f8:	1004d27a 	srli	r2,r2,9
   257fc:	10801568 	cmpgeui	r2,r2,85
   25800:	1000041e 	bne	r2,zero,25814 <_free_r+0x408>
   25804:	e0bff517 	ldw	r2,-44(fp)
   25808:	1004d33a 	srli	r2,r2,12
   2580c:	10801b84 	addi	r2,r2,110
   25810:	00001106 	br	25858 <_free_r+0x44c>
   25814:	e0bff517 	ldw	r2,-44(fp)
   25818:	1004d27a 	srli	r2,r2,9
   2581c:	10805568 	cmpgeui	r2,r2,341
   25820:	1000041e 	bne	r2,zero,25834 <_free_r+0x428>
   25824:	e0bff517 	ldw	r2,-44(fp)
   25828:	1004d3fa 	srli	r2,r2,15
   2582c:	10801dc4 	addi	r2,r2,119
   25830:	00000906 	br	25858 <_free_r+0x44c>
   25834:	e0bff517 	ldw	r2,-44(fp)
   25838:	1004d27a 	srli	r2,r2,9
   2583c:	10815568 	cmpgeui	r2,r2,1365
   25840:	1000041e 	bne	r2,zero,25854 <_free_r+0x448>
   25844:	e0bff517 	ldw	r2,-44(fp)
   25848:	1004d4ba 	srli	r2,r2,18
   2584c:	10801f04 	addi	r2,r2,124
   25850:	00000106 	br	25858 <_free_r+0x44c>
   25854:	00801f84 	movi	r2,126
   25858:	e0bffd15 	stw	r2,-12(fp)
   2585c:	e0bffd17 	ldw	r2,-12(fp)
   25860:	10800044 	addi	r2,r2,1
   25864:	1085883a 	add	r2,r2,r2
   25868:	1085883a 	add	r2,r2,r2
   2586c:	1087883a 	add	r3,r2,r2
   25870:	008000f4 	movhi	r2,3
   25874:	10898b04 	addi	r2,r2,9772
   25878:	1885883a 	add	r2,r3,r2
   2587c:	10bffe04 	addi	r2,r2,-8
   25880:	e0bff615 	stw	r2,-40(fp)
   25884:	e0bff617 	ldw	r2,-40(fp)
   25888:	10800217 	ldw	r2,8(r2)
   2588c:	e0bff715 	stw	r2,-36(fp)
   25890:	e0fff717 	ldw	r3,-36(fp)
   25894:	e0bff617 	ldw	r2,-40(fp)
   25898:	1880121e 	bne	r3,r2,258e4 <_free_r+0x4d8>
   2589c:	00c000f4 	movhi	r3,3
   258a0:	18c98b04 	addi	r3,r3,9772
   258a4:	008000f4 	movhi	r2,3
   258a8:	10898b04 	addi	r2,r2,9772
   258ac:	11000117 	ldw	r4,4(r2)
   258b0:	e0bffd17 	ldw	r2,-12(fp)
   258b4:	1000010e 	bge	r2,zero,258bc <_free_r+0x4b0>
   258b8:	108000c4 	addi	r2,r2,3
   258bc:	1005d0ba 	srai	r2,r2,2
   258c0:	100b883a 	mov	r5,r2
   258c4:	00800044 	movi	r2,1
   258c8:	1144983a 	sll	r2,r2,r5
   258cc:	2084b03a 	or	r2,r4,r2
   258d0:	18800115 	stw	r2,4(r3)
   258d4:	00000f06 	br	25914 <_free_r+0x508>
   258d8:	e0bff717 	ldw	r2,-36(fp)
   258dc:	10800217 	ldw	r2,8(r2)
   258e0:	e0bff715 	stw	r2,-36(fp)
   258e4:	e0fff717 	ldw	r3,-36(fp)
   258e8:	e0bff617 	ldw	r2,-40(fp)
   258ec:	18800626 	beq	r3,r2,25908 <_free_r+0x4fc>
   258f0:	e0bff717 	ldw	r2,-36(fp)
   258f4:	10c00117 	ldw	r3,4(r2)
   258f8:	00bfff04 	movi	r2,-4
   258fc:	1884703a 	and	r2,r3,r2
   25900:	e0fff517 	ldw	r3,-44(fp)
   25904:	18bff436 	bltu	r3,r2,258d8 <__alt_data_end+0xfffe58d8>
   25908:	e0bff717 	ldw	r2,-36(fp)
   2590c:	10800317 	ldw	r2,12(r2)
   25910:	e0bff615 	stw	r2,-40(fp)
   25914:	e0bff417 	ldw	r2,-48(fp)
   25918:	e0fff617 	ldw	r3,-40(fp)
   2591c:	10c00315 	stw	r3,12(r2)
   25920:	e0bff417 	ldw	r2,-48(fp)
   25924:	e0fff717 	ldw	r3,-36(fp)
   25928:	10c00215 	stw	r3,8(r2)
   2592c:	e0bff617 	ldw	r2,-40(fp)
   25930:	e0fff417 	ldw	r3,-48(fp)
   25934:	10c00215 	stw	r3,8(r2)
   25938:	e0bff617 	ldw	r2,-40(fp)
   2593c:	10c00217 	ldw	r3,8(r2)
   25940:	e0bff717 	ldw	r2,-36(fp)
   25944:	10c00315 	stw	r3,12(r2)

  MALLOC_UNLOCK;
   25948:	e13ffe17 	ldw	r4,-8(fp)
   2594c:	00301480 	call	30148 <__malloc_unlock>
   25950:	00000106 	br	25958 <_free_r+0x54c>
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
    return;
   25954:	0001883a 	nop
    frontlink(p, sz, idx, bck, fwd);  

  MALLOC_UNLOCK;

#endif /* MALLOC_PROVIDED */
}
   25958:	e037883a 	mov	sp,fp
   2595c:	dfc00117 	ldw	ra,4(sp)
   25960:	df000017 	ldw	fp,0(sp)
   25964:	dec00204 	addi	sp,sp,8
   25968:	f800283a 	ret

0002596c <_malloc_trim_r>:
#if __STD_C
int malloc_trim(RARG size_t pad)
#else
int malloc_trim(RARG pad) RDECL size_t pad;
#endif
{
   2596c:	defff704 	addi	sp,sp,-36
   25970:	dfc00815 	stw	ra,32(sp)
   25974:	df000715 	stw	fp,28(sp)
   25978:	df000704 	addi	fp,sp,28
   2597c:	e13ffe15 	stw	r4,-8(fp)
   25980:	e17fff15 	stw	r5,-4(fp)
  long  top_size;        /* Amount of top-most memory */
  long  extra;           /* Amount to release */
  char* current_brk;     /* address returned by pre-check sbrk call */
  char* new_brk;         /* address returned by negative sbrk call */

  unsigned long pagesz = malloc_getpagesize;
   25984:	00840004 	movi	r2,4096
   25988:	e0bff915 	stw	r2,-28(fp)

  MALLOC_LOCK;
   2598c:	e13ffe17 	ldw	r4,-8(fp)
   25990:	00301240 	call	30124 <__malloc_lock>

  top_size = chunksize(top);
   25994:	008000f4 	movhi	r2,3
   25998:	10898b04 	addi	r2,r2,9772
   2599c:	10800217 	ldw	r2,8(r2)
   259a0:	10800117 	ldw	r2,4(r2)
   259a4:	1007883a 	mov	r3,r2
   259a8:	00bfff04 	movi	r2,-4
   259ac:	1884703a 	and	r2,r3,r2
   259b0:	e0bffa15 	stw	r2,-24(fp)
  extra = ((top_size - pad - MINSIZE + (pagesz-1)) / pagesz - 1) * pagesz;
   259b4:	e0fffa17 	ldw	r3,-24(fp)
   259b8:	e0bfff17 	ldw	r2,-4(fp)
   259bc:	1887c83a 	sub	r3,r3,r2
   259c0:	e0bff917 	ldw	r2,-28(fp)
   259c4:	1885883a 	add	r2,r3,r2
   259c8:	10fffbc4 	addi	r3,r2,-17
   259cc:	e0bff917 	ldw	r2,-28(fp)
   259d0:	1885203a 	divu	r2,r3,r2
   259d4:	10ffffc4 	addi	r3,r2,-1
   259d8:	e0bff917 	ldw	r2,-28(fp)
   259dc:	1885383a 	mul	r2,r3,r2
   259e0:	e0bffb15 	stw	r2,-20(fp)

  if (extra < (long)pagesz)  /* Not enough memory to release */
   259e4:	e0bff917 	ldw	r2,-28(fp)
   259e8:	e0fffb17 	ldw	r3,-20(fp)
   259ec:	1880040e 	bge	r3,r2,25a00 <_malloc_trim_r+0x94>
  {
    MALLOC_UNLOCK;
   259f0:	e13ffe17 	ldw	r4,-8(fp)
   259f4:	00301480 	call	30148 <__malloc_unlock>
    return 0;
   259f8:	0005883a 	mov	r2,zero
   259fc:	00004806 	br	25b20 <_malloc_trim_r+0x1b4>
  }

  else
  {
    /* Test to make sure no one else called sbrk */
    current_brk = (char*)(MORECORE (0));
   25a00:	000b883a 	mov	r5,zero
   25a04:	e13ffe17 	ldw	r4,-8(fp)
   25a08:	002a4300 	call	2a430 <_sbrk_r>
   25a0c:	e0bffc15 	stw	r2,-16(fp)
    if (current_brk != (char*)(top) + top_size)
   25a10:	008000f4 	movhi	r2,3
   25a14:	10898b04 	addi	r2,r2,9772
   25a18:	10c00217 	ldw	r3,8(r2)
   25a1c:	e0bffa17 	ldw	r2,-24(fp)
   25a20:	1887883a 	add	r3,r3,r2
   25a24:	e0bffc17 	ldw	r2,-16(fp)
   25a28:	18800426 	beq	r3,r2,25a3c <_malloc_trim_r+0xd0>
    {
      MALLOC_UNLOCK;
   25a2c:	e13ffe17 	ldw	r4,-8(fp)
   25a30:	00301480 	call	30148 <__malloc_unlock>
      return 0;     /* Apparently we don't own memory; must fail */
   25a34:	0005883a 	mov	r2,zero
   25a38:	00003906 	br	25b20 <_malloc_trim_r+0x1b4>
    }

    else
    {
      new_brk = (char*)(MORECORE (-extra));
   25a3c:	e0bffb17 	ldw	r2,-20(fp)
   25a40:	0085c83a 	sub	r2,zero,r2
   25a44:	100b883a 	mov	r5,r2
   25a48:	e13ffe17 	ldw	r4,-8(fp)
   25a4c:	002a4300 	call	2a430 <_sbrk_r>
   25a50:	e0bffd15 	stw	r2,-12(fp)
      
      if (new_brk == (char*)(MORECORE_FAILURE)) /* sbrk failed? */
   25a54:	e0bffd17 	ldw	r2,-12(fp)
   25a58:	10bfffd8 	cmpnei	r2,r2,-1
   25a5c:	10001d1e 	bne	r2,zero,25ad4 <_malloc_trim_r+0x168>
      {
        /* Try to figure out what we have */
        current_brk = (char*)(MORECORE (0));
   25a60:	000b883a 	mov	r5,zero
   25a64:	e13ffe17 	ldw	r4,-8(fp)
   25a68:	002a4300 	call	2a430 <_sbrk_r>
   25a6c:	e0bffc15 	stw	r2,-16(fp)
        top_size = current_brk - (char*)top;
   25a70:	e0fffc17 	ldw	r3,-16(fp)
   25a74:	008000f4 	movhi	r2,3
   25a78:	10898b04 	addi	r2,r2,9772
   25a7c:	10800217 	ldw	r2,8(r2)
   25a80:	1885c83a 	sub	r2,r3,r2
   25a84:	e0bffa15 	stw	r2,-24(fp)
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
   25a88:	e0bffa17 	ldw	r2,-24(fp)
   25a8c:	10800410 	cmplti	r2,r2,16
   25a90:	10000c1e 	bne	r2,zero,25ac4 <_malloc_trim_r+0x158>
        {
          sbrked_mem = current_brk - sbrk_base;
   25a94:	e0bffc17 	ldw	r2,-16(fp)
   25a98:	d0e00417 	ldw	r3,-32752(gp)
   25a9c:	10c7c83a 	sub	r3,r2,r3
   25aa0:	008000f4 	movhi	r2,3
   25aa4:	10964e04 	addi	r2,r2,22840
   25aa8:	10c00015 	stw	r3,0(r2)
          set_head(top, top_size | PREV_INUSE);
   25aac:	008000f4 	movhi	r2,3
   25ab0:	10898b04 	addi	r2,r2,9772
   25ab4:	10800217 	ldw	r2,8(r2)
   25ab8:	e0fffa17 	ldw	r3,-24(fp)
   25abc:	18c00054 	ori	r3,r3,1
   25ac0:	10c00115 	stw	r3,4(r2)
        }
        check_chunk(top);
	MALLOC_UNLOCK;
   25ac4:	e13ffe17 	ldw	r4,-8(fp)
   25ac8:	00301480 	call	30148 <__malloc_unlock>
        return 0; 
   25acc:	0005883a 	mov	r2,zero
   25ad0:	00001306 	br	25b20 <_malloc_trim_r+0x1b4>
      }

      else
      {
        /* Success. Adjust top accordingly. */
        set_head(top, (top_size - extra) | PREV_INUSE);
   25ad4:	008000f4 	movhi	r2,3
   25ad8:	10898b04 	addi	r2,r2,9772
   25adc:	10800217 	ldw	r2,8(r2)
   25ae0:	e13ffa17 	ldw	r4,-24(fp)
   25ae4:	e0fffb17 	ldw	r3,-20(fp)
   25ae8:	20c7c83a 	sub	r3,r4,r3
   25aec:	18c00054 	ori	r3,r3,1
   25af0:	10c00115 	stw	r3,4(r2)
        sbrked_mem -= extra;
   25af4:	008000f4 	movhi	r2,3
   25af8:	10964e04 	addi	r2,r2,22840
   25afc:	10c00017 	ldw	r3,0(r2)
   25b00:	e0bffb17 	ldw	r2,-20(fp)
   25b04:	1887c83a 	sub	r3,r3,r2
   25b08:	008000f4 	movhi	r2,3
   25b0c:	10964e04 	addi	r2,r2,22840
   25b10:	10c00015 	stw	r3,0(r2)
        check_chunk(top);
	MALLOC_UNLOCK;
   25b14:	e13ffe17 	ldw	r4,-8(fp)
   25b18:	00301480 	call	30148 <__malloc_unlock>
        return 1;
   25b1c:	00800044 	movi	r2,1
      }
    }
  }
}
   25b20:	e037883a 	mov	sp,fp
   25b24:	dfc00117 	ldw	ra,4(sp)
   25b28:	df000017 	ldw	fp,0(sp)
   25b2c:	dec00204 	addi	sp,sp,8
   25b30:	f800283a 	ret

00025b34 <__sfvwrite_r>:
int
_DEFUN(__sfvwrite_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       register FILE *fp _AND
       register struct __suio *uio)
{
   25b34:	defff004 	addi	sp,sp,-64
   25b38:	dfc00f15 	stw	ra,60(sp)
   25b3c:	df000e15 	stw	fp,56(sp)
   25b40:	dd800d15 	stw	r22,52(sp)
   25b44:	dd400c15 	stw	r21,48(sp)
   25b48:	dd000b15 	stw	r20,44(sp)
   25b4c:	dcc00a15 	stw	r19,40(sp)
   25b50:	dc800915 	stw	r18,36(sp)
   25b54:	dc400815 	stw	r17,32(sp)
   25b58:	dc000715 	stw	r16,28(sp)
   25b5c:	df000e04 	addi	fp,sp,56
   25b60:	e13ff815 	stw	r4,-32(fp)
   25b64:	2821883a 	mov	r16,r5
   25b68:	302b883a 	mov	r21,r6
  register size_t len;
  register _CONST char *p = NULL;
   25b6c:	0027883a 	mov	r19,zero
  register struct __siov *iov;
  register _READ_WRITE_RETURN_TYPE w, s;
  char *nl;
  int nlknown, nldist;

  if ((len = uio->uio_resid) == 0)
   25b70:	ac800217 	ldw	r18,8(r21)
   25b74:	9000021e 	bne	r18,zero,25b80 <__sfvwrite_r+0x4c>
    return 0;
   25b78:	0005883a 	mov	r2,zero
   25b7c:	00015506 	br	260d4 <__sfvwrite_r+0x5a0>

  /* make sure we can write */
  if (cantwrite (ptr, fp))
   25b80:	8080030b 	ldhu	r2,12(r16)
   25b84:	10bfffcc 	andi	r2,r2,65535
   25b88:	1080020c 	andi	r2,r2,8
   25b8c:	10000226 	beq	r2,zero,25b98 <__sfvwrite_r+0x64>
   25b90:	80800417 	ldw	r2,16(r16)
   25b94:	1000061e 	bne	r2,zero,25bb0 <__sfvwrite_r+0x7c>
   25b98:	800b883a 	mov	r5,r16
   25b9c:	e13ff817 	ldw	r4,-32(fp)
   25ba0:	00229a40 	call	229a4 <__swsetup_r>
   25ba4:	10000226 	beq	r2,zero,25bb0 <__sfvwrite_r+0x7c>
    return EOF;
   25ba8:	00bfffc4 	movi	r2,-1
   25bac:	00014906 	br	260d4 <__sfvwrite_r+0x5a0>

  iov = uio->uio_iov;
   25bb0:	ad000017 	ldw	r20,0(r21)
  len = 0;
   25bb4:	0025883a 	mov	r18,zero
      while (uio->uio_resid > 0);
      return 0;
    }
#endif

  if (fp->_flags & __SNBF)
   25bb8:	8080030b 	ldhu	r2,12(r16)
   25bbc:	10bfffcc 	andi	r2,r2,65535
   25bc0:	1080008c 	andi	r2,r2,2
   25bc4:	10001f26 	beq	r2,zero,25c44 <__sfvwrite_r+0x110>
       * Unbuffered: Split buffer in the largest multiple of BUFSIZ < INT_MAX
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
   25bc8:	00000306 	br	25bd8 <__sfvwrite_r+0xa4>
   25bcc:	a4c00017 	ldw	r19,0(r20)
   25bd0:	a4800117 	ldw	r18,4(r20)
   25bd4:	a5000204 	addi	r20,r20,8
   25bd8:	903ffc26 	beq	r18,zero,25bcc <__alt_data_end+0xfffe5bcc>
	  w = fp->_write (ptr, fp->_cookie, p,
   25bdc:	82000917 	ldw	r8,36(r16)
   25be0:	81000717 	ldw	r4,28(r16)
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
   25be4:	9005883a 	mov	r2,r18
   25be8:	00e00034 	movhi	r3,32768
   25bec:	18ff0004 	addi	r3,r3,-1024
   25bf0:	1880022e 	bgeu	r3,r2,25bfc <__sfvwrite_r+0xc8>
   25bf4:	00a00034 	movhi	r2,32768
   25bf8:	10bf0004 	addi	r2,r2,-1024
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
   25bfc:	100f883a 	mov	r7,r2
   25c00:	980d883a 	mov	r6,r19
   25c04:	200b883a 	mov	r5,r4
   25c08:	e13ff817 	ldw	r4,-32(fp)
   25c0c:	403ee83a 	callr	r8
   25c10:	1023883a 	mov	r17,r2
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
   25c14:	0441260e 	bge	zero,r17,260b0 <__sfvwrite_r+0x57c>
	    goto err;
	  p += w;
   25c18:	8805883a 	mov	r2,r17
   25c1c:	98a7883a 	add	r19,r19,r2
	  len -= w;
   25c20:	8805883a 	mov	r2,r17
   25c24:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
   25c28:	a8800217 	ldw	r2,8(r21)
   25c2c:	8807883a 	mov	r3,r17
   25c30:	10c5c83a 	sub	r2,r2,r3
   25c34:	a8800215 	stw	r2,8(r21)
   25c38:	a8800217 	ldw	r2,8(r21)
   25c3c:	103fe61e 	bne	r2,zero,25bd8 <__alt_data_end+0xfffe5bd8>
   25c40:	00011906 	br	260a8 <__sfvwrite_r+0x574>
    }
  else if ((fp->_flags & __SLBF) == 0)
   25c44:	8080030b 	ldhu	r2,12(r16)
   25c48:	10bfffcc 	andi	r2,r2,65535
   25c4c:	1080004c 	andi	r2,r2,1
   25c50:	1000b21e 	bne	r2,zero,25f1c <__sfvwrite_r+0x3e8>
       * we are dealing with the asprintf routines, we will
       * dynamically increase the buffer size as needed.
       */
      do
	{
	  GETIOV (;);
   25c54:	00000306 	br	25c64 <__sfvwrite_r+0x130>
   25c58:	a4c00017 	ldw	r19,0(r20)
   25c5c:	a4800117 	ldw	r18,4(r20)
   25c60:	a5000204 	addi	r20,r20,8
   25c64:	903ffc26 	beq	r18,zero,25c58 <__alt_data_end+0xfffe5c58>
	  w = fp->_w;
   25c68:	84400217 	ldw	r17,8(r16)
	  if (fp->_flags & __SSTR)
   25c6c:	8080030b 	ldhu	r2,12(r16)
   25c70:	10bfffcc 	andi	r2,r2,65535
   25c74:	1080800c 	andi	r2,r2,512
   25c78:	10006b26 	beq	r2,zero,25e28 <__sfvwrite_r+0x2f4>
	    {
	      if (len >= w && fp->_flags & (__SMBF | __SOPT))
   25c7c:	8805883a 	mov	r2,r17
   25c80:	90805736 	bltu	r18,r2,25de0 <__sfvwrite_r+0x2ac>
   25c84:	8080030b 	ldhu	r2,12(r16)
   25c88:	10bfffcc 	andi	r2,r2,65535
   25c8c:	1081200c 	andi	r2,r2,1152
   25c90:	10005326 	beq	r2,zero,25de0 <__sfvwrite_r+0x2ac>
		{ /* must be asprintf family */
		  unsigned char *str;
		  int curpos = (fp->_p - fp->_bf._base);
   25c94:	80800017 	ldw	r2,0(r16)
   25c98:	1007883a 	mov	r3,r2
   25c9c:	80800417 	ldw	r2,16(r16)
   25ca0:	1885c83a 	sub	r2,r3,r2
   25ca4:	e0bff615 	stw	r2,-40(fp)
		     than (1+sqrt(5))/2 to accomodate malloc
		     overhead. asprintf EXPECTS us to overallocate, so
		     that it can add a trailing \0 without
		     reallocating.  The new allocation should thus be
		     max(prev_size*1.5, curpos+len+1). */
		  int newsize = fp->_bf._size * 3 / 2;
   25ca8:	80c00517 	ldw	r3,20(r16)
   25cac:	1805883a 	mov	r2,r3
   25cb0:	1085883a 	add	r2,r2,r2
   25cb4:	10c5883a 	add	r2,r2,r3
   25cb8:	1006d7fa 	srli	r3,r2,31
   25cbc:	1885883a 	add	r2,r3,r2
   25cc0:	1005d07a 	srai	r2,r2,1
   25cc4:	e0bff515 	stw	r2,-44(fp)
		  if (newsize < curpos + len + 1)
   25cc8:	e0bff617 	ldw	r2,-40(fp)
   25ccc:	1485883a 	add	r2,r2,r18
   25cd0:	10800044 	addi	r2,r2,1
   25cd4:	e0fff517 	ldw	r3,-44(fp)
   25cd8:	1880042e 	bgeu	r3,r2,25cec <__sfvwrite_r+0x1b8>
		    newsize = curpos + len + 1;
   25cdc:	e0bff617 	ldw	r2,-40(fp)
   25ce0:	1485883a 	add	r2,r2,r18
   25ce4:	10800044 	addi	r2,r2,1
   25ce8:	e0bff515 	stw	r2,-44(fp)
		  if (fp->_flags & __SOPT)
   25cec:	8080030b 	ldhu	r2,12(r16)
   25cf0:	10bfffcc 	andi	r2,r2,65535
   25cf4:	1081000c 	andi	r2,r2,1024
   25cf8:	10001726 	beq	r2,zero,25d58 <__sfvwrite_r+0x224>
		    {
		      /* asnprintf leaves original buffer alone.  */
		      str = (unsigned char *)_malloc_r (ptr, newsize);
   25cfc:	e0bff517 	ldw	r2,-44(fp)
   25d00:	100b883a 	mov	r5,r2
   25d04:	e13ff817 	ldw	r4,-32(fp)
   25d08:	0026a3c0 	call	26a3c <_malloc_r>
   25d0c:	e0bff415 	stw	r2,-48(fp)
		      if (!str)
   25d10:	e0bff417 	ldw	r2,-48(fp)
   25d14:	1000041e 	bne	r2,zero,25d28 <__sfvwrite_r+0x1f4>
			{
			  ptr->_errno = ENOMEM;
   25d18:	e0bff817 	ldw	r2,-32(fp)
   25d1c:	00c00304 	movi	r3,12
   25d20:	10c00015 	stw	r3,0(r2)
			  goto err;
   25d24:	0000e706 	br	260c4 <__sfvwrite_r+0x590>
			}
		      memcpy (str, fp->_bf._base, curpos);
   25d28:	80800417 	ldw	r2,16(r16)
   25d2c:	e0fff617 	ldw	r3,-40(fp)
   25d30:	180d883a 	mov	r6,r3
   25d34:	100b883a 	mov	r5,r2
   25d38:	e13ff417 	ldw	r4,-48(fp)
   25d3c:	00277740 	call	27774 <memcpy>
		      fp->_flags = (fp->_flags & ~__SOPT) | __SMBF;
   25d40:	80c0030b 	ldhu	r3,12(r16)
   25d44:	00bedfc4 	movi	r2,-1153
   25d48:	1884703a 	and	r2,r3,r2
   25d4c:	10802014 	ori	r2,r2,128
   25d50:	8080030d 	sth	r2,12(r16)
   25d54:	00001506 	br	25dac <__sfvwrite_r+0x278>
		    }
		  else
		    {
		      str = (unsigned char *)_realloc_r (ptr, fp->_bf._base,
   25d58:	80800417 	ldw	r2,16(r16)
   25d5c:	e0fff517 	ldw	r3,-44(fp)
   25d60:	180d883a 	mov	r6,r3
   25d64:	100b883a 	mov	r5,r2
   25d68:	e13ff817 	ldw	r4,-32(fp)
   25d6c:	002973c0 	call	2973c <_realloc_r>
   25d70:	e0bff415 	stw	r2,-48(fp)
							 newsize);
		      if (!str)
   25d74:	e0bff417 	ldw	r2,-48(fp)
   25d78:	10000c1e 	bne	r2,zero,25dac <__sfvwrite_r+0x278>
			{
			  /* Free buffer which is no longer used and clear
			     __SMBF flag to avoid double free in fclose.  */
			  _free_r (ptr, fp->_bf._base);
   25d7c:	80800417 	ldw	r2,16(r16)
   25d80:	100b883a 	mov	r5,r2
   25d84:	e13ff817 	ldw	r4,-32(fp)
   25d88:	002540c0 	call	2540c <_free_r>
			  fp->_flags &=  ~__SMBF;
   25d8c:	80c0030b 	ldhu	r3,12(r16)
   25d90:	00bfdfc4 	movi	r2,-129
   25d94:	1884703a 	and	r2,r3,r2
   25d98:	8080030d 	sth	r2,12(r16)
			  /* Ensure correct errno, even if free changed it.  */
			  ptr->_errno = ENOMEM;
   25d9c:	e0bff817 	ldw	r2,-32(fp)
   25da0:	00c00304 	movi	r3,12
   25da4:	10c00015 	stw	r3,0(r2)
			  goto err;
   25da8:	0000c606 	br	260c4 <__sfvwrite_r+0x590>
			}
		    }
		  fp->_bf._base = str;
   25dac:	e0bff417 	ldw	r2,-48(fp)
   25db0:	80800415 	stw	r2,16(r16)
		  fp->_p = str + curpos;
   25db4:	e0bff617 	ldw	r2,-40(fp)
   25db8:	e0fff417 	ldw	r3,-48(fp)
   25dbc:	1885883a 	add	r2,r3,r2
   25dc0:	80800015 	stw	r2,0(r16)
		  fp->_bf._size = newsize;
   25dc4:	e0bff517 	ldw	r2,-44(fp)
   25dc8:	80800515 	stw	r2,20(r16)
		  w = len;
   25dcc:	9023883a 	mov	r17,r18
		  fp->_w = newsize - curpos;
   25dd0:	e0fff517 	ldw	r3,-44(fp)
   25dd4:	e0bff617 	ldw	r2,-40(fp)
   25dd8:	1885c83a 	sub	r2,r3,r2
   25ddc:	80800215 	stw	r2,8(r16)
		}
	      if (len < w)
   25de0:	8805883a 	mov	r2,r17
   25de4:	9080012e 	bgeu	r18,r2,25dec <__sfvwrite_r+0x2b8>
		w = len;
   25de8:	9023883a 	mov	r17,r18
	      COPY (w);		/* copy MIN(fp->_w,len), */
   25dec:	80800017 	ldw	r2,0(r16)
   25df0:	8807883a 	mov	r3,r17
   25df4:	180d883a 	mov	r6,r3
   25df8:	980b883a 	mov	r5,r19
   25dfc:	1009883a 	mov	r4,r2
   25e00:	00278fc0 	call	278fc <memmove>
	      fp->_w -= w;
   25e04:	80800217 	ldw	r2,8(r16)
   25e08:	1445c83a 	sub	r2,r2,r17
   25e0c:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
   25e10:	80800017 	ldw	r2,0(r16)
   25e14:	8807883a 	mov	r3,r17
   25e18:	10c5883a 	add	r2,r2,r3
   25e1c:	80800015 	stw	r2,0(r16)
	      w = len;		/* but pretend copied all */
   25e20:	9023883a 	mov	r17,r18
   25e24:	00003206 	br	25ef0 <__sfvwrite_r+0x3bc>
	    }
	  else if (fp->_p > fp->_bf._base || len < fp->_bf._size)
   25e28:	80800017 	ldw	r2,0(r16)
   25e2c:	80c00417 	ldw	r3,16(r16)
   25e30:	18800236 	bltu	r3,r2,25e3c <__sfvwrite_r+0x308>
   25e34:	80800517 	ldw	r2,20(r16)
   25e38:	9080182e 	bgeu	r18,r2,25e9c <__sfvwrite_r+0x368>
	    {
	      /* pass through the buffer */
	      w = MIN (len, w);
   25e3c:	8805883a 	mov	r2,r17
   25e40:	9080012e 	bgeu	r18,r2,25e48 <__sfvwrite_r+0x314>
   25e44:	9005883a 	mov	r2,r18
   25e48:	1023883a 	mov	r17,r2
	      COPY (w);
   25e4c:	80800017 	ldw	r2,0(r16)
   25e50:	8807883a 	mov	r3,r17
   25e54:	180d883a 	mov	r6,r3
   25e58:	980b883a 	mov	r5,r19
   25e5c:	1009883a 	mov	r4,r2
   25e60:	00278fc0 	call	278fc <memmove>
	      fp->_w -= w;
   25e64:	80800217 	ldw	r2,8(r16)
   25e68:	1445c83a 	sub	r2,r2,r17
   25e6c:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
   25e70:	80800017 	ldw	r2,0(r16)
   25e74:	8807883a 	mov	r3,r17
   25e78:	10c5883a 	add	r2,r2,r3
   25e7c:	80800015 	stw	r2,0(r16)
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
   25e80:	80800217 	ldw	r2,8(r16)
   25e84:	1000191e 	bne	r2,zero,25eec <__sfvwrite_r+0x3b8>
   25e88:	800b883a 	mov	r5,r16
   25e8c:	e13ff817 	ldw	r4,-32(fp)
   25e90:	0024d6c0 	call	24d6c <_fflush_r>
   25e94:	10001526 	beq	r2,zero,25eec <__sfvwrite_r+0x3b8>
		goto err;
   25e98:	00008a06 	br	260c4 <__sfvwrite_r+0x590>
	    }
	  else
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
   25e9c:	9005883a 	mov	r2,r18
   25ea0:	00e00034 	movhi	r3,32768
   25ea4:	10c00236 	bltu	r2,r3,25eb0 <__sfvwrite_r+0x37c>
   25ea8:	00a00034 	movhi	r2,32768
   25eac:	10bfffc4 	addi	r2,r2,-1
   25eb0:	1007883a 	mov	r3,r2
   25eb4:	80800517 	ldw	r2,20(r16)
   25eb8:	1887283a 	div	r3,r3,r2
   25ebc:	80800517 	ldw	r2,20(r16)
   25ec0:	18a3383a 	mul	r17,r3,r2
	      w = fp->_write (ptr, fp->_cookie, p, w);
   25ec4:	80800917 	ldw	r2,36(r16)
   25ec8:	80c00717 	ldw	r3,28(r16)
   25ecc:	880f883a 	mov	r7,r17
   25ed0:	980d883a 	mov	r6,r19
   25ed4:	180b883a 	mov	r5,r3
   25ed8:	e13ff817 	ldw	r4,-32(fp)
   25edc:	103ee83a 	callr	r2
   25ee0:	1023883a 	mov	r17,r2
	      if (w <= 0)
   25ee4:	0440740e 	bge	zero,r17,260b8 <__sfvwrite_r+0x584>
   25ee8:	00000106 	br	25ef0 <__sfvwrite_r+0x3bc>
	      /* pass through the buffer */
	      w = MIN (len, w);
	      COPY (w);
	      fp->_w -= w;
	      fp->_p += w;
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
   25eec:	0001883a 	nop
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
	    }
	  p += w;
   25ef0:	8805883a 	mov	r2,r17
   25ef4:	98a7883a 	add	r19,r19,r2
	  len -= w;
   25ef8:	8805883a 	mov	r2,r17
   25efc:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
   25f00:	a8800217 	ldw	r2,8(r21)
   25f04:	8807883a 	mov	r3,r17
   25f08:	10c5c83a 	sub	r2,r2,r3
   25f0c:	a8800215 	stw	r2,8(r21)
   25f10:	a8800217 	ldw	r2,8(r21)
   25f14:	103f531e 	bne	r2,zero,25c64 <__alt_data_end+0xfffe5c64>
   25f18:	00006306 	br	260a8 <__sfvwrite_r+0x574>
       * must check for newlines.  Compute the distance
       * to the first newline (including the newline),
       * or `infinity' if there is none, then pretend
       * that the amount to write is MIN(len,nldist).
       */
      nlknown = 0;
   25f1c:	e03ff215 	stw	zero,-56(fp)
      nldist = 0;
   25f20:	e03ff315 	stw	zero,-52(fp)
      do
	{
	  GETIOV (nlknown = 0);
   25f24:	00000406 	br	25f38 <__sfvwrite_r+0x404>
   25f28:	e03ff215 	stw	zero,-56(fp)
   25f2c:	a4c00017 	ldw	r19,0(r20)
   25f30:	a4800117 	ldw	r18,4(r20)
   25f34:	a5000204 	addi	r20,r20,8
   25f38:	903ffb26 	beq	r18,zero,25f28 <__alt_data_end+0xfffe5f28>
	  if (!nlknown)
   25f3c:	e0bff217 	ldw	r2,-56(fp)
   25f40:	1000111e 	bne	r2,zero,25f88 <__sfvwrite_r+0x454>
	    {
	      nl = memchr ((_PTR) p, '\n', len);
   25f44:	900d883a 	mov	r6,r18
   25f48:	01400284 	movi	r5,10
   25f4c:	9809883a 	mov	r4,r19
   25f50:	00275b80 	call	275b8 <memchr>
   25f54:	e0bff715 	stw	r2,-36(fp)
	      nldist = nl ? nl + 1 - p : len + 1;
   25f58:	e0bff717 	ldw	r2,-36(fp)
   25f5c:	10000626 	beq	r2,zero,25f78 <__sfvwrite_r+0x444>
   25f60:	e0bff717 	ldw	r2,-36(fp)
   25f64:	10800044 	addi	r2,r2,1
   25f68:	1007883a 	mov	r3,r2
   25f6c:	9805883a 	mov	r2,r19
   25f70:	1885c83a 	sub	r2,r3,r2
   25f74:	00000106 	br	25f7c <__sfvwrite_r+0x448>
   25f78:	90800044 	addi	r2,r18,1
   25f7c:	e0bff315 	stw	r2,-52(fp)
	      nlknown = 1;
   25f80:	00800044 	movi	r2,1
   25f84:	e0bff215 	stw	r2,-56(fp)
	    }
	  s = MIN (len, nldist);
   25f88:	e0bff317 	ldw	r2,-52(fp)
   25f8c:	9080012e 	bgeu	r18,r2,25f94 <__sfvwrite_r+0x460>
   25f90:	9005883a 	mov	r2,r18
   25f94:	102d883a 	mov	r22,r2
	  w = fp->_w + fp->_bf._size;
   25f98:	80c00217 	ldw	r3,8(r16)
   25f9c:	80800517 	ldw	r2,20(r16)
   25fa0:	18a3883a 	add	r17,r3,r2
	  if (fp->_p > fp->_bf._base && s > w)
   25fa4:	80800017 	ldw	r2,0(r16)
   25fa8:	80c00417 	ldw	r3,16(r16)
   25fac:	1880102e 	bgeu	r3,r2,25ff0 <__sfvwrite_r+0x4bc>
   25fb0:	8d800f0e 	bge	r17,r22,25ff0 <__sfvwrite_r+0x4bc>
	    {
	      COPY (w);
   25fb4:	80800017 	ldw	r2,0(r16)
   25fb8:	8807883a 	mov	r3,r17
   25fbc:	180d883a 	mov	r6,r3
   25fc0:	980b883a 	mov	r5,r19
   25fc4:	1009883a 	mov	r4,r2
   25fc8:	00278fc0 	call	278fc <memmove>
	      /* fp->_w -= w; */
	      fp->_p += w;
   25fcc:	80800017 	ldw	r2,0(r16)
   25fd0:	8807883a 	mov	r3,r17
   25fd4:	10c5883a 	add	r2,r2,r3
   25fd8:	80800015 	stw	r2,0(r16)
	      if (_fflush_r (ptr, fp))
   25fdc:	800b883a 	mov	r5,r16
   25fe0:	e13ff817 	ldw	r4,-32(fp)
   25fe4:	0024d6c0 	call	24d6c <_fflush_r>
   25fe8:	10001b26 	beq	r2,zero,26058 <__sfvwrite_r+0x524>
		goto err;
   25fec:	00003506 	br	260c4 <__sfvwrite_r+0x590>
	    }
	  else if (s >= (w = fp->_bf._size))
   25ff0:	84400517 	ldw	r17,20(r16)
   25ff4:	b4400a16 	blt	r22,r17,26020 <__sfvwrite_r+0x4ec>
	    {
	      w = fp->_write (ptr, fp->_cookie, p, w);
   25ff8:	80800917 	ldw	r2,36(r16)
   25ffc:	80c00717 	ldw	r3,28(r16)
   26000:	880f883a 	mov	r7,r17
   26004:	980d883a 	mov	r6,r19
   26008:	180b883a 	mov	r5,r3
   2600c:	e13ff817 	ldw	r4,-32(fp)
   26010:	103ee83a 	callr	r2
   26014:	1023883a 	mov	r17,r2
	      if (w <= 0)
   26018:	04400f16 	blt	zero,r17,26058 <__sfvwrite_r+0x524>
		goto err;
   2601c:	00002906 	br	260c4 <__sfvwrite_r+0x590>
	    }
	  else
	    {
	      w = s;
   26020:	b023883a 	mov	r17,r22
	      COPY (w);
   26024:	80800017 	ldw	r2,0(r16)
   26028:	8807883a 	mov	r3,r17
   2602c:	180d883a 	mov	r6,r3
   26030:	980b883a 	mov	r5,r19
   26034:	1009883a 	mov	r4,r2
   26038:	00278fc0 	call	278fc <memmove>
	      fp->_w -= w;
   2603c:	80800217 	ldw	r2,8(r16)
   26040:	1445c83a 	sub	r2,r2,r17
   26044:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
   26048:	80800017 	ldw	r2,0(r16)
   2604c:	8807883a 	mov	r3,r17
   26050:	10c5883a 	add	r2,r2,r3
   26054:	80800015 	stw	r2,0(r16)
	    }
	  if ((nldist -= w) == 0)
   26058:	e0bff317 	ldw	r2,-52(fp)
   2605c:	1445c83a 	sub	r2,r2,r17
   26060:	e0bff315 	stw	r2,-52(fp)
   26064:	e0bff317 	ldw	r2,-52(fp)
   26068:	1000051e 	bne	r2,zero,26080 <__sfvwrite_r+0x54c>
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
   2606c:	800b883a 	mov	r5,r16
   26070:	e13ff817 	ldw	r4,-32(fp)
   26074:	0024d6c0 	call	24d6c <_fflush_r>
   26078:	1000111e 	bne	r2,zero,260c0 <__sfvwrite_r+0x58c>
		goto err;
	      nlknown = 0;
   2607c:	e03ff215 	stw	zero,-56(fp)
	    }
	  p += w;
   26080:	8805883a 	mov	r2,r17
   26084:	98a7883a 	add	r19,r19,r2
	  len -= w;
   26088:	8805883a 	mov	r2,r17
   2608c:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
   26090:	a8800217 	ldw	r2,8(r21)
   26094:	8807883a 	mov	r3,r17
   26098:	10c5c83a 	sub	r2,r2,r3
   2609c:	a8800215 	stw	r2,8(r21)
   260a0:	a8800217 	ldw	r2,8(r21)
   260a4:	103fa41e 	bne	r2,zero,25f38 <__alt_data_end+0xfffe5f38>
    }
  return 0;
   260a8:	0005883a 	mov	r2,zero
   260ac:	00000906 	br	260d4 <__sfvwrite_r+0x5a0>
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
	    goto err;
   260b0:	0001883a 	nop
   260b4:	00000306 	br	260c4 <__sfvwrite_r+0x590>
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
   260b8:	0001883a 	nop
   260bc:	00000106 	br	260c4 <__sfvwrite_r+0x590>
	    }
	  if ((nldist -= w) == 0)
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
		goto err;
   260c0:	0001883a 	nop
      while ((uio->uio_resid -= w) != 0);
    }
  return 0;

err:
  fp->_flags |= __SERR;
   260c4:	8080030b 	ldhu	r2,12(r16)
   260c8:	10801014 	ori	r2,r2,64
   260cc:	8080030d 	sth	r2,12(r16)
  return EOF;
   260d0:	00bfffc4 	movi	r2,-1
}
   260d4:	e6fff904 	addi	sp,fp,-28
   260d8:	dfc00817 	ldw	ra,32(sp)
   260dc:	df000717 	ldw	fp,28(sp)
   260e0:	dd800617 	ldw	r22,24(sp)
   260e4:	dd400517 	ldw	r21,20(sp)
   260e8:	dd000417 	ldw	r20,16(sp)
   260ec:	dcc00317 	ldw	r19,12(sp)
   260f0:	dc800217 	ldw	r18,8(sp)
   260f4:	dc400117 	ldw	r17,4(sp)
   260f8:	dc000017 	ldw	r16,0(sp)
   260fc:	dec00904 	addi	sp,sp,36
   26100:	f800283a 	ret

00026104 <_fwalk>:

int
_DEFUN(_fwalk, (ptr, function),
       struct _reent *ptr _AND
       register int (*function) (FILE *))
{
   26104:	defff804 	addi	sp,sp,-32
   26108:	dfc00715 	stw	ra,28(sp)
   2610c:	df000615 	stw	fp,24(sp)
   26110:	dd000515 	stw	r20,20(sp)
   26114:	dcc00415 	stw	r19,16(sp)
   26118:	dc800315 	stw	r18,12(sp)
   2611c:	dc400215 	stw	r17,8(sp)
   26120:	dc000115 	stw	r16,4(sp)
   26124:	df000604 	addi	fp,sp,24
   26128:	e13ffa15 	stw	r4,-24(fp)
   2612c:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
   26130:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
   26134:	e0bffa17 	ldw	r2,-24(fp)
   26138:	1440b804 	addi	r17,r2,736
   2613c:	00001b06 	br	261ac <_fwalk+0xa8>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
   26140:	8c000217 	ldw	r16,8(r17)
   26144:	8c800117 	ldw	r18,4(r17)
   26148:	00001506 	br	261a0 <_fwalk+0x9c>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
   2614c:	8080030b 	ldhu	r2,12(r16)
   26150:	10bfffcc 	andi	r2,r2,65535
   26154:	10a0001c 	xori	r2,r2,32768
   26158:	10a00004 	addi	r2,r2,-32768
   2615c:	10000f26 	beq	r2,zero,2619c <_fwalk+0x98>
   26160:	8080030b 	ldhu	r2,12(r16)
   26164:	10bfffcc 	andi	r2,r2,65535
   26168:	10a0001c 	xori	r2,r2,32768
   2616c:	10a00004 	addi	r2,r2,-32768
   26170:	10800060 	cmpeqi	r2,r2,1
   26174:	1000091e 	bne	r2,zero,2619c <_fwalk+0x98>
   26178:	8080038b 	ldhu	r2,14(r16)
   2617c:	10bfffcc 	andi	r2,r2,65535
   26180:	10a0001c 	xori	r2,r2,32768
   26184:	10a00004 	addi	r2,r2,-32768
   26188:	10bfffe0 	cmpeqi	r2,r2,-1
   2618c:	1000031e 	bne	r2,zero,2619c <_fwalk+0x98>
	ret |= (*function) (fp);
   26190:	8009883a 	mov	r4,r16
   26194:	a03ee83a 	callr	r20
   26198:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
   2619c:	84001a04 	addi	r16,r16,104
   261a0:	94bfffc4 	addi	r18,r18,-1
   261a4:	903fe90e 	bge	r18,zero,2614c <__alt_data_end+0xfffe614c>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
   261a8:	8c400017 	ldw	r17,0(r17)
   261ac:	883fe41e 	bne	r17,zero,26140 <__alt_data_end+0xfffe6140>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*function) (fp);

  return ret;
   261b0:	9805883a 	mov	r2,r19
}
   261b4:	e6fffb04 	addi	sp,fp,-20
   261b8:	dfc00617 	ldw	ra,24(sp)
   261bc:	df000517 	ldw	fp,20(sp)
   261c0:	dd000417 	ldw	r20,16(sp)
   261c4:	dcc00317 	ldw	r19,12(sp)
   261c8:	dc800217 	ldw	r18,8(sp)
   261cc:	dc400117 	ldw	r17,4(sp)
   261d0:	dc000017 	ldw	r16,0(sp)
   261d4:	dec00704 	addi	sp,sp,28
   261d8:	f800283a 	ret

000261dc <_fwalk_reent>:
   I/O function (e.g. _fclose_r).  */
int
_DEFUN(_fwalk_reent, (ptr, reent_function),
       struct _reent *ptr _AND
       register int (*reent_function) (struct _reent *, FILE *))
{
   261dc:	defff804 	addi	sp,sp,-32
   261e0:	dfc00715 	stw	ra,28(sp)
   261e4:	df000615 	stw	fp,24(sp)
   261e8:	dd000515 	stw	r20,20(sp)
   261ec:	dcc00415 	stw	r19,16(sp)
   261f0:	dc800315 	stw	r18,12(sp)
   261f4:	dc400215 	stw	r17,8(sp)
   261f8:	dc000115 	stw	r16,4(sp)
   261fc:	df000604 	addi	fp,sp,24
   26200:	e13ffa15 	stw	r4,-24(fp)
   26204:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
   26208:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
   2620c:	e0bffa17 	ldw	r2,-24(fp)
   26210:	1440b804 	addi	r17,r2,736
   26214:	00001c06 	br	26288 <_fwalk_reent+0xac>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
   26218:	8c000217 	ldw	r16,8(r17)
   2621c:	8c800117 	ldw	r18,4(r17)
   26220:	00001606 	br	2627c <_fwalk_reent+0xa0>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
   26224:	8080030b 	ldhu	r2,12(r16)
   26228:	10bfffcc 	andi	r2,r2,65535
   2622c:	10a0001c 	xori	r2,r2,32768
   26230:	10a00004 	addi	r2,r2,-32768
   26234:	10001026 	beq	r2,zero,26278 <_fwalk_reent+0x9c>
   26238:	8080030b 	ldhu	r2,12(r16)
   2623c:	10bfffcc 	andi	r2,r2,65535
   26240:	10a0001c 	xori	r2,r2,32768
   26244:	10a00004 	addi	r2,r2,-32768
   26248:	10800060 	cmpeqi	r2,r2,1
   2624c:	10000a1e 	bne	r2,zero,26278 <_fwalk_reent+0x9c>
   26250:	8080038b 	ldhu	r2,14(r16)
   26254:	10bfffcc 	andi	r2,r2,65535
   26258:	10a0001c 	xori	r2,r2,32768
   2625c:	10a00004 	addi	r2,r2,-32768
   26260:	10bfffe0 	cmpeqi	r2,r2,-1
   26264:	1000041e 	bne	r2,zero,26278 <_fwalk_reent+0x9c>
	ret |= (*reent_function) (ptr, fp);
   26268:	800b883a 	mov	r5,r16
   2626c:	e13ffa17 	ldw	r4,-24(fp)
   26270:	a03ee83a 	callr	r20
   26274:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
   26278:	84001a04 	addi	r16,r16,104
   2627c:	94bfffc4 	addi	r18,r18,-1
   26280:	903fe80e 	bge	r18,zero,26224 <__alt_data_end+0xfffe6224>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
   26284:	8c400017 	ldw	r17,0(r17)
   26288:	883fe31e 	bne	r17,zero,26218 <__alt_data_end+0xfffe6218>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*reent_function) (ptr, fp);

  return ret;
   2628c:	9805883a 	mov	r2,r19
}
   26290:	e6fffb04 	addi	sp,fp,-20
   26294:	dfc00617 	ldw	ra,24(sp)
   26298:	df000517 	ldw	fp,20(sp)
   2629c:	dd000417 	ldw	r20,16(sp)
   262a0:	dcc00317 	ldw	r19,12(sp)
   262a4:	dc800217 	ldw	r18,8(sp)
   262a8:	dc400117 	ldw	r17,4(sp)
   262ac:	dc000017 	ldw	r16,0(sp)
   262b0:	dec00704 	addi	sp,sp,28
   262b4:	f800283a 	ret

000262b8 <_setlocale_r>:
char *
_DEFUN(_setlocale_r, (p, category, locale),
       struct _reent *p _AND
       int category _AND
       _CONST char *locale)
{
   262b8:	defffb04 	addi	sp,sp,-20
   262bc:	dfc00415 	stw	ra,16(sp)
   262c0:	df000315 	stw	fp,12(sp)
   262c4:	df000304 	addi	fp,sp,12
   262c8:	e13ffd15 	stw	r4,-12(fp)
   262cc:	e17ffe15 	stw	r5,-8(fp)
   262d0:	e1bfff15 	stw	r6,-4(fp)
#ifndef _MB_CAPABLE
  if (locale)
   262d4:	e0bfff17 	ldw	r2,-4(fp)
   262d8:	10001126 	beq	r2,zero,26320 <_setlocale_r+0x68>
    { 
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
   262dc:	014000f4 	movhi	r5,3
   262e0:	2947b304 	addi	r5,r5,7884
   262e4:	e13fff17 	ldw	r4,-4(fp)
   262e8:	002a7040 	call	2a704 <strcmp>
   262ec:	10000c26 	beq	r2,zero,26320 <_setlocale_r+0x68>
   262f0:	014000f4 	movhi	r5,3
   262f4:	2947b504 	addi	r5,r5,7892
   262f8:	e13fff17 	ldw	r4,-4(fp)
   262fc:	002a7040 	call	2a704 <strcmp>
   26300:	10000726 	beq	r2,zero,26320 <_setlocale_r+0x68>
	  && strcmp (locale, ""))
   26304:	014000f4 	movhi	r5,3
   26308:	2947b204 	addi	r5,r5,7880
   2630c:	e13fff17 	ldw	r4,-4(fp)
   26310:	002a7040 	call	2a704 <strcmp>
   26314:	10000226 	beq	r2,zero,26320 <_setlocale_r+0x68>
        return NULL;
   26318:	0005883a 	mov	r2,zero
   2631c:	00000206 	br	26328 <_setlocale_r+0x70>
    }
  return "C";
   26320:	008000f4 	movhi	r2,3
   26324:	1087b504 	addi	r2,r2,7892
	  return NULL;
	}
    }
  return currentlocale ();
#endif /* !_MB_CAPABLE */
}
   26328:	e037883a 	mov	sp,fp
   2632c:	dfc00117 	ldw	ra,4(sp)
   26330:	df000017 	ldw	fp,0(sp)
   26334:	dec00204 	addi	sp,sp,8
   26338:	f800283a 	ret

0002633c <__locale_charset>:
}
#endif /* _MB_CAPABLE */

char *
_DEFUN_VOID(__locale_charset)
{
   2633c:	deffff04 	addi	sp,sp,-4
   26340:	df000015 	stw	fp,0(sp)
   26344:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->codeset;
#else
  return lc_ctype_charset;
   26348:	008000f4 	movhi	r2,3
   2634c:	10897b04 	addi	r2,r2,9708
#endif
}
   26350:	e037883a 	mov	sp,fp
   26354:	df000017 	ldw	fp,0(sp)
   26358:	dec00104 	addi	sp,sp,4
   2635c:	f800283a 	ret

00026360 <__locale_mb_cur_max>:

int
_DEFUN_VOID(__locale_mb_cur_max)
{
   26360:	deffff04 	addi	sp,sp,-4
   26364:	df000015 	stw	fp,0(sp)
   26368:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->mb_cur_max[0];
#else
  return __mb_cur_max;
   2636c:	d0a00217 	ldw	r2,-32760(gp)
#endif
}
   26370:	e037883a 	mov	sp,fp
   26374:	df000017 	ldw	fp,0(sp)
   26378:	dec00104 	addi	sp,sp,4
   2637c:	f800283a 	ret

00026380 <__locale_msgcharset>:


char *
_DEFUN_VOID(__locale_msgcharset)
{
   26380:	deffff04 	addi	sp,sp,-4
   26384:	df000015 	stw	fp,0(sp)
   26388:	d839883a 	mov	fp,sp
#ifdef __HAVE_LOCALE_INFO__
  return (char *) __get_current_messages_locale ()->codeset;
#else
  return lc_message_charset;
   2638c:	008000f4 	movhi	r2,3
   26390:	10898304 	addi	r2,r2,9740
#endif
}
   26394:	e037883a 	mov	sp,fp
   26398:	df000017 	ldw	fp,0(sp)
   2639c:	dec00104 	addi	sp,sp,4
   263a0:	f800283a 	ret

000263a4 <__locale_cjk_lang>:

int
_DEFUN_VOID(__locale_cjk_lang)
{
   263a4:	deffff04 	addi	sp,sp,-4
   263a8:	df000015 	stw	fp,0(sp)
   263ac:	d839883a 	mov	fp,sp
  return lc_ctype_cjk_lang;
   263b0:	d0a70117 	ldw	r2,-25596(gp)
}
   263b4:	e037883a 	mov	sp,fp
   263b8:	df000017 	ldw	fp,0(sp)
   263bc:	dec00104 	addi	sp,sp,4
   263c0:	f800283a 	ret

000263c4 <_localeconv_r>:

struct lconv *
_DEFUN(_localeconv_r, (data), 
      struct _reent *data)
{
   263c4:	defffe04 	addi	sp,sp,-8
   263c8:	df000115 	stw	fp,4(sp)
   263cc:	df000104 	addi	fp,sp,4
   263d0:	e13fff15 	stw	r4,-4(fp)
      lconv.int_p_sign_posn = m->p_sign_posn[0];
#endif /* !__HAVE_LOCALE_INFO_EXTENDED__ */
      __mlocale_changed = 0;
    }
#endif /* __HAVE_LOCALE_INFO__ */
  return (struct lconv *) &lconv;
   263d4:	008000f4 	movhi	r2,3
   263d8:	10896d04 	addi	r2,r2,9652
}
   263dc:	e037883a 	mov	sp,fp
   263e0:	df000017 	ldw	fp,0(sp)
   263e4:	dec00104 	addi	sp,sp,4
   263e8:	f800283a 	ret

000263ec <setlocale>:
   initialization work.  It calls _setlocale_r, though. */
char *
_DEFUN(setlocale, (category, locale),
       int category _AND
       _CONST char *locale)
{
   263ec:	defffc04 	addi	sp,sp,-16
   263f0:	dfc00315 	stw	ra,12(sp)
   263f4:	df000215 	stw	fp,8(sp)
   263f8:	df000204 	addi	fp,sp,8
   263fc:	e13ffe15 	stw	r4,-8(fp)
   26400:	e17fff15 	stw	r5,-4(fp)
  return _setlocale_r (_REENT, category, locale);
   26404:	d0a00017 	ldw	r2,-32768(gp)
   26408:	e1bfff17 	ldw	r6,-4(fp)
   2640c:	e17ffe17 	ldw	r5,-8(fp)
   26410:	1009883a 	mov	r4,r2
   26414:	00262b80 	call	262b8 <_setlocale_r>
}
   26418:	e037883a 	mov	sp,fp
   2641c:	dfc00117 	ldw	ra,4(sp)
   26420:	df000017 	ldw	fp,0(sp)
   26424:	dec00204 	addi	sp,sp,8
   26428:	f800283a 	ret

0002642c <localeconv>:
#endif /* __CYGWIN__ */

struct lconv *
_DEFUN_VOID(localeconv)
{
   2642c:	defffe04 	addi	sp,sp,-8
   26430:	dfc00115 	stw	ra,4(sp)
   26434:	df000015 	stw	fp,0(sp)
   26438:	d839883a 	mov	fp,sp
  return _localeconv_r (_REENT);
   2643c:	d0a00017 	ldw	r2,-32768(gp)
   26440:	1009883a 	mov	r4,r2
   26444:	00263c40 	call	263c4 <_localeconv_r>
}
   26448:	e037883a 	mov	sp,fp
   2644c:	dfc00117 	ldw	ra,4(sp)
   26450:	df000017 	ldw	fp,0(sp)
   26454:	dec00204 	addi	sp,sp,8
   26458:	f800283a 	ret

0002645c <__smakebuf_r>:

_VOID
_DEFUN(__smakebuf_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE *fp)
{
   2645c:	deffea04 	addi	sp,sp,-88
   26460:	dfc01515 	stw	ra,84(sp)
   26464:	df001415 	stw	fp,80(sp)
   26468:	dcc01315 	stw	r19,76(sp)
   2646c:	dc801215 	stw	r18,72(sp)
   26470:	dc401115 	stw	r17,68(sp)
   26474:	dc001015 	stw	r16,64(sp)
   26478:	df001404 	addi	fp,sp,80
   2647c:	e13ffb15 	stw	r4,-20(fp)
   26480:	2821883a 	mov	r16,r5
  struct stat64 st;
#else
  struct stat st;
#endif

  if (fp->_flags & __SNBF)
   26484:	8080030b 	ldhu	r2,12(r16)
   26488:	10bfffcc 	andi	r2,r2,65535
   2648c:	1080008c 	andi	r2,r2,2
   26490:	10000726 	beq	r2,zero,264b0 <__smakebuf_r+0x54>
    {
      fp->_bf._base = fp->_p = fp->_nbuf;
   26494:	808010c4 	addi	r2,r16,67
   26498:	80800015 	stw	r2,0(r16)
   2649c:	80800017 	ldw	r2,0(r16)
   264a0:	80800415 	stw	r2,16(r16)
      fp->_bf._size = 1;
   264a4:	00800044 	movi	r2,1
   264a8:	80800515 	stw	r2,20(r16)
   264ac:	00006d06 	br	26664 <__smakebuf_r+0x208>
      return;
    }
#ifdef __USE_INTERNAL_STAT64
  if (fp->_file < 0 || _fstat64_r (ptr, fp->_file, &st) < 0)
#else
  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
   264b0:	8080038b 	ldhu	r2,14(r16)
   264b4:	10bfffcc 	andi	r2,r2,65535
   264b8:	10a0001c 	xori	r2,r2,32768
   264bc:	10a00004 	addi	r2,r2,-32768
   264c0:	10000916 	blt	r2,zero,264e8 <__smakebuf_r+0x8c>
   264c4:	8080038b 	ldhu	r2,14(r16)
   264c8:	10bfffcc 	andi	r2,r2,65535
   264cc:	10a0001c 	xori	r2,r2,32768
   264d0:	10a00004 	addi	r2,r2,-32768
   264d4:	e1bfec04 	addi	r6,fp,-80
   264d8:	100b883a 	mov	r5,r2
   264dc:	e13ffb17 	ldw	r4,-20(fp)
   264e0:	002c4f40 	call	2c4f4 <_fstat_r>
   264e4:	10000c0e 	bge	r2,zero,26518 <__smakebuf_r+0xbc>
#endif
    {
      couldbetty = 0;
   264e8:	0025883a 	mov	r18,zero
      /* Check if we are be called by asprintf family for initial buffer.  */
      if (fp->_flags & __SMBF)
   264ec:	8080030b 	ldhu	r2,12(r16)
   264f0:	10bfffcc 	andi	r2,r2,65535
   264f4:	1080200c 	andi	r2,r2,128
   264f8:	10000226 	beq	r2,zero,26504 <__smakebuf_r+0xa8>
        size = _DEFAULT_ASPRINTF_BUFSIZE;
   264fc:	04401004 	movi	r17,64
   26500:	00000106 	br	26508 <__smakebuf_r+0xac>
      else
        size = BUFSIZ;
   26504:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /* do not try to optimise fseek() */
      fp->_flags |= __SNPT;
   26508:	8080030b 	ldhu	r2,12(r16)
   2650c:	10820014 	ori	r2,r2,2048
   26510:	8080030d 	sth	r2,12(r16)
   26514:	00001606 	br	26570 <__smakebuf_r+0x114>
#endif
    }
  else
    {
      couldbetty = (st.st_mode & S_IFMT) == S_IFCHR;
   26518:	e0bfed17 	ldw	r2,-76(fp)
   2651c:	10bc000c 	andi	r2,r2,61440
   26520:	10880020 	cmpeqi	r2,r2,8192
   26524:	14803fcc 	andi	r18,r2,255
#ifdef HAVE_BLKSIZE
      size = st.st_blksize <= 0 ? BUFSIZ : st.st_blksize;
#else
      size = BUFSIZ;
   26528:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /*
       * Optimize fseek() only if it is a regular file.
       * (The test for __sseek is mainly paranoia.)
       */
      if ((st.st_mode & S_IFMT) == S_IFREG && fp->_seek == __sseek)
   2652c:	e0bfed17 	ldw	r2,-76(fp)
   26530:	10fc000c 	andi	r3,r2,61440
   26534:	00a00014 	movui	r2,32768
   26538:	18800a1e 	bne	r3,r2,26564 <__smakebuf_r+0x108>
   2653c:	80c00a17 	ldw	r3,40(r16)
   26540:	008000f4 	movhi	r2,3
   26544:	10a98404 	addi	r2,r2,-23024
   26548:	1880061e 	bne	r3,r2,26564 <__smakebuf_r+0x108>
	{
	  fp->_flags |= __SOPT;
   2654c:	8080030b 	ldhu	r2,12(r16)
   26550:	10810014 	ori	r2,r2,1024
   26554:	8080030d 	sth	r2,12(r16)
#ifdef HAVE_BLKSIZE
	  fp->_blksize = st.st_blksize;
#else
	  fp->_blksize = 1024;
   26558:	00810004 	movi	r2,1024
   2655c:	80801315 	stw	r2,76(r16)
   26560:	00000306 	br	26570 <__smakebuf_r+0x114>
#endif
	}
      else
	fp->_flags |= __SNPT;
   26564:	8080030b 	ldhu	r2,12(r16)
   26568:	10820014 	ori	r2,r2,2048
   2656c:	8080030d 	sth	r2,12(r16)
#endif
    }

  /* Make unbuffered by default: */			/* AlteraSpecific */
  if (couldbetty && _isatty_r (ptr, fp->_file))		/* AlteraSpecific */
   26570:	90001126 	beq	r18,zero,265b8 <__smakebuf_r+0x15c>
   26574:	8080038b 	ldhu	r2,14(r16)
   26578:	10bfffcc 	andi	r2,r2,65535
   2657c:	10a0001c 	xori	r2,r2,32768
   26580:	10a00004 	addi	r2,r2,-32768
   26584:	100b883a 	mov	r5,r2
   26588:	e13ffb17 	ldw	r4,-20(fp)
   2658c:	002c55c0 	call	2c55c <_isatty_r>
   26590:	10000926 	beq	r2,zero,265b8 <__smakebuf_r+0x15c>
  {							/* AlteraSpecific */
    fp->_flags |= __SLBF;				/* AlteraSpecific __SLBF == "line buffered */
   26594:	8080030b 	ldhu	r2,12(r16)
   26598:	10800054 	ori	r2,r2,1
   2659c:	8080030d 	sth	r2,12(r16)
    fp->_bf._base = fp->_p = fp->_nbuf;			/* AlteraSpecific (see newlib/libc/include/stdio.h) */
   265a0:	808010c4 	addi	r2,r16,67
   265a4:	80800015 	stw	r2,0(r16)
   265a8:	80800017 	ldw	r2,0(r16)
   265ac:	80800415 	stw	r2,16(r16)
    fp->_bf._size = 1;					/* AlteraSpecific */
   265b0:	00800044 	movi	r2,1
   265b4:	80800515 	stw	r2,20(r16)
  }							/* AlteraSpecific */

  if ((p = _malloc_r (ptr, size)) == NULL)
   265b8:	880b883a 	mov	r5,r17
   265bc:	e13ffb17 	ldw	r4,-20(fp)
   265c0:	0026a3c0 	call	26a3c <_malloc_r>
   265c4:	1027883a 	mov	r19,r2
   265c8:	98000e1e 	bne	r19,zero,26604 <__smakebuf_r+0x1a8>
    {
      if (!(fp->_flags & __SSTR))
   265cc:	8080030b 	ldhu	r2,12(r16)
   265d0:	10bfffcc 	andi	r2,r2,65535
   265d4:	1080800c 	andi	r2,r2,512
   265d8:	1000221e 	bne	r2,zero,26664 <__smakebuf_r+0x208>
	{
	  fp->_flags |= __SNBF;
   265dc:	8080030b 	ldhu	r2,12(r16)
   265e0:	10800094 	ori	r2,r2,2
   265e4:	8080030d 	sth	r2,12(r16)
	  fp->_bf._base = fp->_p = fp->_nbuf;
   265e8:	808010c4 	addi	r2,r16,67
   265ec:	80800015 	stw	r2,0(r16)
   265f0:	80800017 	ldw	r2,0(r16)
   265f4:	80800415 	stw	r2,16(r16)
	  fp->_bf._size = 1;
   265f8:	00800044 	movi	r2,1
   265fc:	80800515 	stw	r2,20(r16)
   26600:	00001806 	br	26664 <__smakebuf_r+0x208>
	}
    }
  else
    {
      ptr->__cleanup = _cleanup_r;
   26604:	e0fffb17 	ldw	r3,-20(fp)
   26608:	008000b4 	movhi	r2,2
   2660c:	10945d04 	addi	r2,r2,20852
   26610:	18800f15 	stw	r2,60(r3)
      fp->_flags |= __SMBF;
   26614:	8080030b 	ldhu	r2,12(r16)
   26618:	10802014 	ori	r2,r2,128
   2661c:	8080030d 	sth	r2,12(r16)
      fp->_bf._base = fp->_p = (unsigned char *) p;
   26620:	84c00015 	stw	r19,0(r16)
   26624:	80800017 	ldw	r2,0(r16)
   26628:	80800415 	stw	r2,16(r16)
      fp->_bf._size = size;
   2662c:	8805883a 	mov	r2,r17
   26630:	80800515 	stw	r2,20(r16)
      if (couldbetty && _isatty_r (ptr, fp->_file))
   26634:	90000b26 	beq	r18,zero,26664 <__smakebuf_r+0x208>
   26638:	8080038b 	ldhu	r2,14(r16)
   2663c:	10bfffcc 	andi	r2,r2,65535
   26640:	10a0001c 	xori	r2,r2,32768
   26644:	10a00004 	addi	r2,r2,-32768
   26648:	100b883a 	mov	r5,r2
   2664c:	e13ffb17 	ldw	r4,-20(fp)
   26650:	002c55c0 	call	2c55c <_isatty_r>
   26654:	10000326 	beq	r2,zero,26664 <__smakebuf_r+0x208>
	fp->_flags |= __SLBF;
   26658:	8080030b 	ldhu	r2,12(r16)
   2665c:	10800054 	ori	r2,r2,1
   26660:	8080030d 	sth	r2,12(r16)
    }
}
   26664:	e6fffc04 	addi	sp,fp,-16
   26668:	dfc00517 	ldw	ra,20(sp)
   2666c:	df000417 	ldw	fp,16(sp)
   26670:	dcc00317 	ldw	r19,12(sp)
   26674:	dc800217 	ldw	r18,8(sp)
   26678:	dc400117 	ldw	r17,4(sp)
   2667c:	dc000017 	ldw	r16,0(sp)
   26680:	dec00604 	addi	sp,sp,24
   26684:	f800283a 	ret

00026688 <malloc_extend_top>:
#if __STD_C
static void malloc_extend_top(RARG INTERNAL_SIZE_T nb)
#else
static void malloc_extend_top(RARG nb) RDECL INTERNAL_SIZE_T nb;
#endif
{
   26688:	defff104 	addi	sp,sp,-60
   2668c:	dfc00e15 	stw	ra,56(sp)
   26690:	df000d15 	stw	fp,52(sp)
   26694:	df000d04 	addi	fp,sp,52
   26698:	e13ffe15 	stw	r4,-8(fp)
   2669c:	e17fff15 	stw	r5,-4(fp)
  char*     brk;                  /* return value from sbrk */
  INTERNAL_SIZE_T front_misalign; /* unusable bytes at front of sbrked space */
  INTERNAL_SIZE_T correction;     /* bytes for 2nd sbrk call */
  int correction_failed = 0;      /* whether we should relax the assertion */
   266a0:	e03ff715 	stw	zero,-36(fp)
  char*     new_brk;              /* return of 2nd sbrk call */
  INTERNAL_SIZE_T top_size;       /* new size of top chunk */

  mchunkptr old_top     = top;  /* Record state of old top */
   266a4:	008000f4 	movhi	r2,3
   266a8:	10898b04 	addi	r2,r2,9772
   266ac:	10800217 	ldw	r2,8(r2)
   266b0:	e0bff815 	stw	r2,-32(fp)
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
   266b4:	e0bff817 	ldw	r2,-32(fp)
   266b8:	10c00117 	ldw	r3,4(r2)
   266bc:	00bfff04 	movi	r2,-4
   266c0:	1884703a 	and	r2,r3,r2
   266c4:	e0bff915 	stw	r2,-28(fp)
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));
   266c8:	e0fff817 	ldw	r3,-32(fp)
   266cc:	e0bff917 	ldw	r2,-28(fp)
   266d0:	1885883a 	add	r2,r3,r2
   266d4:	e0bffa15 	stw	r2,-24(fp)

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
   266d8:	d0e70217 	ldw	r3,-25592(gp)
   266dc:	e0bfff17 	ldw	r2,-4(fp)
   266e0:	1885883a 	add	r2,r3,r2
   266e4:	10800404 	addi	r2,r2,16
   266e8:	e0bff615 	stw	r2,-40(fp)
  unsigned long pagesz    = malloc_getpagesize;
   266ec:	00840004 	movi	r2,4096
   266f0:	e0bffb15 	stw	r2,-20(fp)

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
   266f4:	d0a00417 	ldw	r2,-32752(gp)
   266f8:	10bfffe0 	cmpeqi	r2,r2,-1
   266fc:	1000081e 	bne	r2,zero,26720 <malloc_extend_top+0x98>
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);
   26700:	e0fffb17 	ldw	r3,-20(fp)
   26704:	e0bff617 	ldw	r2,-40(fp)
   26708:	1885883a 	add	r2,r3,r2
   2670c:	10ffffc4 	addi	r3,r2,-1
   26710:	e0bffb17 	ldw	r2,-20(fp)
   26714:	0085c83a 	sub	r2,zero,r2
   26718:	1884703a 	and	r2,r3,r2
   2671c:	e0bff615 	stw	r2,-40(fp)

  brk = (char*)(MORECORE (sbrk_size));
   26720:	e0bff617 	ldw	r2,-40(fp)
   26724:	100b883a 	mov	r5,r2
   26728:	e13ffe17 	ldw	r4,-8(fp)
   2672c:	002a4300 	call	2a430 <_sbrk_r>
   26730:	e0bff315 	stw	r2,-52(fp)

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
   26734:	e0bff317 	ldw	r2,-52(fp)
   26738:	10bfffe0 	cmpeqi	r2,r2,-1
   2673c:	1000b91e 	bne	r2,zero,26a24 <malloc_extend_top+0x39c>
   26740:	e0fff317 	ldw	r3,-52(fp)
   26744:	e0bffa17 	ldw	r2,-24(fp)
   26748:	1880042e 	bgeu	r3,r2,2675c <malloc_extend_top+0xd4>
      (brk < old_end && old_top != initial_top))
   2674c:	008000f4 	movhi	r2,3
   26750:	10898b04 	addi	r2,r2,9772
   26754:	e0fff817 	ldw	r3,-32(fp)
   26758:	1880b21e 	bne	r3,r2,26a24 <malloc_extend_top+0x39c>
    return;

  sbrked_mem += sbrk_size;
   2675c:	008000f4 	movhi	r2,3
   26760:	10964e04 	addi	r2,r2,22840
   26764:	10800017 	ldw	r2,0(r2)
   26768:	1007883a 	mov	r3,r2
   2676c:	e0bff617 	ldw	r2,-40(fp)
   26770:	1885883a 	add	r2,r3,r2
   26774:	1007883a 	mov	r3,r2
   26778:	008000f4 	movhi	r2,3
   2677c:	10964e04 	addi	r2,r2,22840
   26780:	10c00015 	stw	r3,0(r2)

  if (brk == old_end /* can just add bytes to current top, unless
   26784:	e0fff317 	ldw	r3,-52(fp)
   26788:	e0bffa17 	ldw	r2,-24(fp)
   2678c:	1880101e 	bne	r3,r2,267d0 <malloc_extend_top+0x148>
			previous correction failed */
      && ((POINTER_UINT)old_end & (pagesz - 1)) == 0)
   26790:	e0bffb17 	ldw	r2,-20(fp)
   26794:	10ffffc4 	addi	r3,r2,-1
   26798:	e0bffa17 	ldw	r2,-24(fp)
   2679c:	1884703a 	and	r2,r3,r2
   267a0:	10000b1e 	bne	r2,zero,267d0 <malloc_extend_top+0x148>
  {
    top_size = sbrk_size + old_top_size;
   267a4:	e0fff617 	ldw	r3,-40(fp)
   267a8:	e0bff917 	ldw	r2,-28(fp)
   267ac:	1885883a 	add	r2,r3,r2
   267b0:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
   267b4:	008000f4 	movhi	r2,3
   267b8:	10898b04 	addi	r2,r2,9772
   267bc:	10800217 	ldw	r2,8(r2)
   267c0:	e0fffc17 	ldw	r3,-16(fp)
   267c4:	18c00054 	ori	r3,r3,1
   267c8:	10c00115 	stw	r3,4(r2)
   267cc:	00008006 	br	269d0 <malloc_extend_top+0x348>
  }
  else
  {
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
   267d0:	d0a00417 	ldw	r2,-32752(gp)
   267d4:	10bfffd8 	cmpnei	r2,r2,-1
   267d8:	1000031e 	bne	r2,zero,267e8 <malloc_extend_top+0x160>
      sbrk_base = brk;
   267dc:	e0bff317 	ldw	r2,-52(fp)
   267e0:	d0a00415 	stw	r2,-32752(gp)
   267e4:	00000a06 	br	26810 <malloc_extend_top+0x188>
    else  /* Someone else called sbrk().  Count those bytes as sbrked_mem. */
      sbrked_mem += brk - (char*)old_end;
   267e8:	008000f4 	movhi	r2,3
   267ec:	10964e04 	addi	r2,r2,22840
   267f0:	10c00017 	ldw	r3,0(r2)
   267f4:	e13ff317 	ldw	r4,-52(fp)
   267f8:	e0bffa17 	ldw	r2,-24(fp)
   267fc:	2085c83a 	sub	r2,r4,r2
   26800:	1887883a 	add	r3,r3,r2
   26804:	008000f4 	movhi	r2,3
   26808:	10964e04 	addi	r2,r2,22840
   2680c:	10c00015 	stw	r3,0(r2)

    /* Guarantee alignment of first new chunk made from this space */
    front_misalign = (POINTER_UINT)chunk2mem(brk) & MALLOC_ALIGN_MASK;
   26810:	e0bff317 	ldw	r2,-52(fp)
   26814:	10800204 	addi	r2,r2,8
   26818:	108001cc 	andi	r2,r2,7
   2681c:	e0bffd15 	stw	r2,-12(fp)
    if (front_misalign > 0) 
   26820:	e0bffd17 	ldw	r2,-12(fp)
   26824:	10000926 	beq	r2,zero,2684c <malloc_extend_top+0x1c4>
    {
      correction = (MALLOC_ALIGNMENT) - front_misalign;
   26828:	00c00204 	movi	r3,8
   2682c:	e0bffd17 	ldw	r2,-12(fp)
   26830:	1885c83a 	sub	r2,r3,r2
   26834:	e0bff415 	stw	r2,-48(fp)
      brk += correction;
   26838:	e0fff317 	ldw	r3,-52(fp)
   2683c:	e0bff417 	ldw	r2,-48(fp)
   26840:	1885883a 	add	r2,r3,r2
   26844:	e0bff315 	stw	r2,-52(fp)
   26848:	00000106 	br	26850 <malloc_extend_top+0x1c8>
    }
    else
      correction = 0;
   2684c:	e03ff415 	stw	zero,-48(fp)

    /* Guarantee the next brk will be at a page boundary */
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
   26850:	e0fff317 	ldw	r3,-52(fp)
   26854:	e0bff617 	ldw	r2,-40(fp)
   26858:	1885883a 	add	r2,r3,r2
   2685c:	1007883a 	mov	r3,r2
   26860:	e0bffb17 	ldw	r2,-20(fp)
   26864:	10bfffc4 	addi	r2,r2,-1
   26868:	1884703a 	and	r2,r3,r2
   2686c:	e0fffb17 	ldw	r3,-20(fp)
   26870:	1885c83a 	sub	r2,r3,r2
   26874:	e0fff417 	ldw	r3,-48(fp)
   26878:	1885883a 	add	r2,r3,r2
   2687c:	e0bff415 	stw	r2,-48(fp)

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
   26880:	e0bff417 	ldw	r2,-48(fp)
   26884:	100b883a 	mov	r5,r2
   26888:	e13ffe17 	ldw	r4,-8(fp)
   2688c:	002a4300 	call	2a430 <_sbrk_r>
   26890:	e0bff515 	stw	r2,-44(fp)
    if (new_brk == (char*)(MORECORE_FAILURE))
   26894:	e0bff517 	ldw	r2,-44(fp)
   26898:	10bfffd8 	cmpnei	r2,r2,-1
   2689c:	1000051e 	bne	r2,zero,268b4 <malloc_extend_top+0x22c>
      {
	correction = 0;
   268a0:	e03ff415 	stw	zero,-48(fp)
	correction_failed = 1;
   268a4:	00800044 	movi	r2,1
   268a8:	e0bff715 	stw	r2,-36(fp)
	new_brk = brk;
   268ac:	e0bff317 	ldw	r2,-52(fp)
   268b0:	e0bff515 	stw	r2,-44(fp)
      }

    sbrked_mem += correction;
   268b4:	008000f4 	movhi	r2,3
   268b8:	10964e04 	addi	r2,r2,22840
   268bc:	10800017 	ldw	r2,0(r2)
   268c0:	1007883a 	mov	r3,r2
   268c4:	e0bff417 	ldw	r2,-48(fp)
   268c8:	1885883a 	add	r2,r3,r2
   268cc:	1007883a 	mov	r3,r2
   268d0:	008000f4 	movhi	r2,3
   268d4:	10964e04 	addi	r2,r2,22840
   268d8:	10c00015 	stw	r3,0(r2)

    top = (mchunkptr)brk;
   268dc:	008000f4 	movhi	r2,3
   268e0:	10898b04 	addi	r2,r2,9772
   268e4:	e0fff317 	ldw	r3,-52(fp)
   268e8:	10c00215 	stw	r3,8(r2)
    top_size = new_brk - brk + correction;
   268ec:	e0fff517 	ldw	r3,-44(fp)
   268f0:	e0bff317 	ldw	r2,-52(fp)
   268f4:	1885c83a 	sub	r2,r3,r2
   268f8:	1007883a 	mov	r3,r2
   268fc:	e0bff417 	ldw	r2,-48(fp)
   26900:	1885883a 	add	r2,r3,r2
   26904:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
   26908:	008000f4 	movhi	r2,3
   2690c:	10898b04 	addi	r2,r2,9772
   26910:	10800217 	ldw	r2,8(r2)
   26914:	e0fffc17 	ldw	r3,-16(fp)
   26918:	18c00054 	ori	r3,r3,1
   2691c:	10c00115 	stw	r3,4(r2)

    if (old_top != initial_top)
   26920:	008000f4 	movhi	r2,3
   26924:	10898b04 	addi	r2,r2,9772
   26928:	e0fff817 	ldw	r3,-32(fp)
   2692c:	18802826 	beq	r3,r2,269d0 <malloc_extend_top+0x348>

      /* There must have been an intervening foreign sbrk call. */
      /* A double fencepost is necessary to prevent consolidation */

      /* If not enough space to do this, then user did something very wrong */
      if (old_top_size < MINSIZE) 
   26930:	e0bff917 	ldw	r2,-28(fp)
   26934:	10800428 	cmpgeui	r2,r2,16
   26938:	1000061e 	bne	r2,zero,26954 <malloc_extend_top+0x2cc>
      {
        set_head(top, PREV_INUSE); /* will force null return from malloc */
   2693c:	008000f4 	movhi	r2,3
   26940:	10898b04 	addi	r2,r2,9772
   26944:	10800217 	ldw	r2,8(r2)
   26948:	00c00044 	movi	r3,1
   2694c:	10c00115 	stw	r3,4(r2)
        return;
   26950:	00003506 	br	26a28 <malloc_extend_top+0x3a0>
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
   26954:	e0bff917 	ldw	r2,-28(fp)
   26958:	10fffd04 	addi	r3,r2,-12
   2695c:	00bffe04 	movi	r2,-8
   26960:	1884703a 	and	r2,r3,r2
   26964:	e0bff915 	stw	r2,-28(fp)
      set_head_size(old_top, old_top_size);
   26968:	e0bff817 	ldw	r2,-32(fp)
   2696c:	10800117 	ldw	r2,4(r2)
   26970:	10c0004c 	andi	r3,r2,1
   26974:	e0bff917 	ldw	r2,-28(fp)
   26978:	1886b03a 	or	r3,r3,r2
   2697c:	e0bff817 	ldw	r2,-32(fp)
   26980:	10c00115 	stw	r3,4(r2)
      chunk_at_offset(old_top, old_top_size          )->size =
   26984:	e0fff817 	ldw	r3,-32(fp)
   26988:	e0bff917 	ldw	r2,-28(fp)
   2698c:	1885883a 	add	r2,r3,r2
   26990:	00c00144 	movi	r3,5
   26994:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
   26998:	e0bff917 	ldw	r2,-28(fp)
   2699c:	10800104 	addi	r2,r2,4
   269a0:	e0fff817 	ldw	r3,-32(fp)
   269a4:	1885883a 	add	r2,r3,r2
   269a8:	00c00144 	movi	r3,5
   269ac:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      /* If possible, release the rest. */
      if (old_top_size >= MINSIZE) 
   269b0:	e0bff917 	ldw	r2,-28(fp)
   269b4:	10800430 	cmpltui	r2,r2,16
   269b8:	1000051e 	bne	r2,zero,269d0 <malloc_extend_top+0x348>
        fREe(RCALL chunk2mem(old_top));
   269bc:	e0bff817 	ldw	r2,-32(fp)
   269c0:	10800204 	addi	r2,r2,8
   269c4:	100b883a 	mov	r5,r2
   269c8:	e13ffe17 	ldw	r4,-8(fp)
   269cc:	002540c0 	call	2540c <_free_r>
    }
  }

  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
   269d0:	008000f4 	movhi	r2,3
   269d4:	10964e04 	addi	r2,r2,22840
   269d8:	10800017 	ldw	r2,0(r2)
   269dc:	1007883a 	mov	r3,r2
   269e0:	d0a70317 	ldw	r2,-25588(gp)
   269e4:	10c0042e 	bgeu	r2,r3,269f8 <malloc_extend_top+0x370>
    max_sbrked_mem = sbrked_mem;
   269e8:	008000f4 	movhi	r2,3
   269ec:	10964e04 	addi	r2,r2,22840
   269f0:	10800017 	ldw	r2,0(r2)
   269f4:	d0a70315 	stw	r2,-25588(gp)
#if HAVE_MMAP
  if ((unsigned long)(mmapped_mem + sbrked_mem) > (unsigned long)max_total_mem) 
    max_total_mem = mmapped_mem + sbrked_mem;
#else
  if ((unsigned long)(sbrked_mem) > (unsigned long)max_total_mem) 
   269f8:	008000f4 	movhi	r2,3
   269fc:	10964e04 	addi	r2,r2,22840
   26a00:	10800017 	ldw	r2,0(r2)
   26a04:	1007883a 	mov	r3,r2
   26a08:	d0a70417 	ldw	r2,-25584(gp)
   26a0c:	10c0062e 	bgeu	r2,r3,26a28 <malloc_extend_top+0x3a0>
    max_total_mem = sbrked_mem;
   26a10:	008000f4 	movhi	r2,3
   26a14:	10964e04 	addi	r2,r2,22840
   26a18:	10800017 	ldw	r2,0(r2)
   26a1c:	d0a70415 	stw	r2,-25584(gp)
   26a20:	00000106 	br	26a28 <malloc_extend_top+0x3a0>
  brk = (char*)(MORECORE (sbrk_size));

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
      (brk < old_end && old_top != initial_top))
    return;
   26a24:	0001883a 	nop
#endif

  /* We always land on a page boundary */
  assert(((unsigned long)((char*)top + top_size) & (pagesz - 1)) == 0
	 || correction_failed);
}
   26a28:	e037883a 	mov	sp,fp
   26a2c:	dfc00117 	ldw	ra,4(sp)
   26a30:	df000017 	ldw	fp,0(sp)
   26a34:	dec00204 	addi	sp,sp,8
   26a38:	f800283a 	ret

00026a3c <_malloc_r>:
#if __STD_C
Void_t* mALLOc(RARG size_t bytes)
#else
Void_t* mALLOc(RARG bytes) RDECL size_t bytes;
#endif
{
   26a3c:	deffef04 	addi	sp,sp,-68
   26a40:	dfc01015 	stw	ra,64(sp)
   26a44:	df000f15 	stw	fp,60(sp)
   26a48:	df000f04 	addi	fp,sp,60
   26a4c:	e13ffe15 	stw	r4,-8(fp)
   26a50:	e17fff15 	stw	r5,-4(fp)
  int       startidx;                /* first bin of a traversed block */
  mchunkptr fwd;                     /* misc temp for linking */
  mchunkptr bck;                     /* misc temp for linking */
  mbinptr q;                         /* misc temp */

  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
   26a54:	e0bfff17 	ldw	r2,-4(fp)
   26a58:	108002c4 	addi	r2,r2,11
   26a5c:	108005f0 	cmpltui	r2,r2,23
   26a60:	1000051e 	bne	r2,zero,26a78 <_malloc_r+0x3c>
   26a64:	e0bfff17 	ldw	r2,-4(fp)
   26a68:	10c002c4 	addi	r3,r2,11
   26a6c:	00bffe04 	movi	r2,-8
   26a70:	1884703a 	and	r2,r3,r2
   26a74:	00000106 	br	26a7c <_malloc_r+0x40>
   26a78:	00800404 	movi	r2,16
   26a7c:	e0bffa15 	stw	r2,-24(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
   26a80:	e0bffa17 	ldw	r2,-24(fp)
   26a84:	10000316 	blt	r2,zero,26a94 <_malloc_r+0x58>
   26a88:	e0fffa17 	ldw	r3,-24(fp)
   26a8c:	e0bfff17 	ldw	r2,-4(fp)
   26a90:	1880052e 	bgeu	r3,r2,26aa8 <_malloc_r+0x6c>
  {
    RERRNO = ENOMEM;
   26a94:	e0bffe17 	ldw	r2,-8(fp)
   26a98:	00c00304 	movi	r3,12
   26a9c:	10c00015 	stw	r3,0(r2)
    return 0;
   26aa0:	0005883a 	mov	r2,zero
   26aa4:	0002bf06 	br	275a4 <_malloc_r+0xb68>
  }

  MALLOC_LOCK;
   26aa8:	e13ffe17 	ldw	r4,-8(fp)
   26aac:	00301240 	call	30124 <__malloc_lock>

  /* Check for exact match in a bin */

  if (is_small_request(nb))  /* Faster version for small requests */
   26ab0:	e0bffa17 	ldw	r2,-24(fp)
   26ab4:	10807e28 	cmpgeui	r2,r2,504
   26ab8:	10003f1e 	bne	r2,zero,26bb8 <_malloc_r+0x17c>
  {
    idx = smallbin_index(nb); 
   26abc:	e0bffa17 	ldw	r2,-24(fp)
   26ac0:	1004d0fa 	srli	r2,r2,3
   26ac4:	e0bff215 	stw	r2,-56(fp)

    /* No traversal or size check necessary for small bins.  */

    q = bin_at(idx);
   26ac8:	e0bff217 	ldw	r2,-56(fp)
   26acc:	10800044 	addi	r2,r2,1
   26ad0:	1085883a 	add	r2,r2,r2
   26ad4:	1085883a 	add	r2,r2,r2
   26ad8:	1087883a 	add	r3,r2,r2
   26adc:	008000f4 	movhi	r2,3
   26ae0:	10898b04 	addi	r2,r2,9772
   26ae4:	1885883a 	add	r2,r3,r2
   26ae8:	10bffe04 	addi	r2,r2,-8
   26aec:	e0bff915 	stw	r2,-28(fp)
    victim = last(q);
   26af0:	e0bff917 	ldw	r2,-28(fp)
   26af4:	10800317 	ldw	r2,12(r2)
   26af8:	e0bff115 	stw	r2,-60(fp)

#if MALLOC_ALIGN != 16
    /* Also scan the next one, since it would have a remainder < MINSIZE */
    if (victim == q)
   26afc:	e0fff117 	ldw	r3,-60(fp)
   26b00:	e0bff917 	ldw	r2,-28(fp)
   26b04:	1880061e 	bne	r3,r2,26b20 <_malloc_r+0xe4>
    {
      q = next_bin(q);
   26b08:	e0bff917 	ldw	r2,-28(fp)
   26b0c:	10800204 	addi	r2,r2,8
   26b10:	e0bff915 	stw	r2,-28(fp)
      victim = last(q);
   26b14:	e0bff917 	ldw	r2,-28(fp)
   26b18:	10800317 	ldw	r2,12(r2)
   26b1c:	e0bff115 	stw	r2,-60(fp)
    }
#endif
    if (victim != q)
   26b20:	e0fff117 	ldw	r3,-60(fp)
   26b24:	e0bff917 	ldw	r2,-28(fp)
   26b28:	18801f26 	beq	r3,r2,26ba8 <_malloc_r+0x16c>
    {
      victim_size = chunksize(victim);
   26b2c:	e0bff117 	ldw	r2,-60(fp)
   26b30:	10c00117 	ldw	r3,4(r2)
   26b34:	00bfff04 	movi	r2,-4
   26b38:	1884703a 	and	r2,r3,r2
   26b3c:	e0bffb15 	stw	r2,-20(fp)
      unlink(victim, bck, fwd);
   26b40:	e0bff117 	ldw	r2,-60(fp)
   26b44:	10800317 	ldw	r2,12(r2)
   26b48:	e0bff815 	stw	r2,-32(fp)
   26b4c:	e0bff117 	ldw	r2,-60(fp)
   26b50:	10800217 	ldw	r2,8(r2)
   26b54:	e0bff715 	stw	r2,-36(fp)
   26b58:	e0bff717 	ldw	r2,-36(fp)
   26b5c:	e0fff817 	ldw	r3,-32(fp)
   26b60:	10c00315 	stw	r3,12(r2)
   26b64:	e0bff817 	ldw	r2,-32(fp)
   26b68:	e0fff717 	ldw	r3,-36(fp)
   26b6c:	10c00215 	stw	r3,8(r2)
      set_inuse_bit_at_offset(victim, victim_size);
   26b70:	e0fff117 	ldw	r3,-60(fp)
   26b74:	e0bffb17 	ldw	r2,-20(fp)
   26b78:	1885883a 	add	r2,r3,r2
   26b7c:	e13ff117 	ldw	r4,-60(fp)
   26b80:	e0fffb17 	ldw	r3,-20(fp)
   26b84:	20c7883a 	add	r3,r4,r3
   26b88:	18c00117 	ldw	r3,4(r3)
   26b8c:	18c00054 	ori	r3,r3,1
   26b90:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
   26b94:	e13ffe17 	ldw	r4,-8(fp)
   26b98:	00301480 	call	30148 <__malloc_unlock>
      return chunk2mem(victim);
   26b9c:	e0bff117 	ldw	r2,-60(fp)
   26ba0:	10800204 	addi	r2,r2,8
   26ba4:	00027f06 	br	275a4 <_malloc_r+0xb68>
    }

    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */
   26ba8:	e0bff217 	ldw	r2,-56(fp)
   26bac:	10800084 	addi	r2,r2,2
   26bb0:	e0bff215 	stw	r2,-56(fp)
   26bb4:	00007306 	br	26d84 <_malloc_r+0x348>

  }
  else
  {
    idx = bin_index(nb);
   26bb8:	e0bffa17 	ldw	r2,-24(fp)
   26bbc:	1004d27a 	srli	r2,r2,9
   26bc0:	1000031e 	bne	r2,zero,26bd0 <_malloc_r+0x194>
   26bc4:	e0bffa17 	ldw	r2,-24(fp)
   26bc8:	1004d0fa 	srli	r2,r2,3
   26bcc:	00002906 	br	26c74 <_malloc_r+0x238>
   26bd0:	e0bffa17 	ldw	r2,-24(fp)
   26bd4:	1004d27a 	srli	r2,r2,9
   26bd8:	10800168 	cmpgeui	r2,r2,5
   26bdc:	1000041e 	bne	r2,zero,26bf0 <_malloc_r+0x1b4>
   26be0:	e0bffa17 	ldw	r2,-24(fp)
   26be4:	1004d1ba 	srli	r2,r2,6
   26be8:	10800e04 	addi	r2,r2,56
   26bec:	00002106 	br	26c74 <_malloc_r+0x238>
   26bf0:	e0bffa17 	ldw	r2,-24(fp)
   26bf4:	1004d27a 	srli	r2,r2,9
   26bf8:	10800568 	cmpgeui	r2,r2,21
   26bfc:	1000041e 	bne	r2,zero,26c10 <_malloc_r+0x1d4>
   26c00:	e0bffa17 	ldw	r2,-24(fp)
   26c04:	1004d27a 	srli	r2,r2,9
   26c08:	108016c4 	addi	r2,r2,91
   26c0c:	00001906 	br	26c74 <_malloc_r+0x238>
   26c10:	e0bffa17 	ldw	r2,-24(fp)
   26c14:	1004d27a 	srli	r2,r2,9
   26c18:	10801568 	cmpgeui	r2,r2,85
   26c1c:	1000041e 	bne	r2,zero,26c30 <_malloc_r+0x1f4>
   26c20:	e0bffa17 	ldw	r2,-24(fp)
   26c24:	1004d33a 	srli	r2,r2,12
   26c28:	10801b84 	addi	r2,r2,110
   26c2c:	00001106 	br	26c74 <_malloc_r+0x238>
   26c30:	e0bffa17 	ldw	r2,-24(fp)
   26c34:	1004d27a 	srli	r2,r2,9
   26c38:	10805568 	cmpgeui	r2,r2,341
   26c3c:	1000041e 	bne	r2,zero,26c50 <_malloc_r+0x214>
   26c40:	e0bffa17 	ldw	r2,-24(fp)
   26c44:	1004d3fa 	srli	r2,r2,15
   26c48:	10801dc4 	addi	r2,r2,119
   26c4c:	00000906 	br	26c74 <_malloc_r+0x238>
   26c50:	e0bffa17 	ldw	r2,-24(fp)
   26c54:	1004d27a 	srli	r2,r2,9
   26c58:	10815568 	cmpgeui	r2,r2,1365
   26c5c:	1000041e 	bne	r2,zero,26c70 <_malloc_r+0x234>
   26c60:	e0bffa17 	ldw	r2,-24(fp)
   26c64:	1004d4ba 	srli	r2,r2,18
   26c68:	10801f04 	addi	r2,r2,124
   26c6c:	00000106 	br	26c74 <_malloc_r+0x238>
   26c70:	00801f84 	movi	r2,126
   26c74:	e0bff215 	stw	r2,-56(fp)
    bin = bin_at(idx);
   26c78:	e0bff217 	ldw	r2,-56(fp)
   26c7c:	10800044 	addi	r2,r2,1
   26c80:	1085883a 	add	r2,r2,r2
   26c84:	1085883a 	add	r2,r2,r2
   26c88:	1087883a 	add	r3,r2,r2
   26c8c:	008000f4 	movhi	r2,3
   26c90:	10898b04 	addi	r2,r2,9772
   26c94:	1885883a 	add	r2,r3,r2
   26c98:	10bffe04 	addi	r2,r2,-8
   26c9c:	e0bff315 	stw	r2,-52(fp)

    for (victim = last(bin); victim != bin; victim = victim->bk)
   26ca0:	e0bff317 	ldw	r2,-52(fp)
   26ca4:	10800317 	ldw	r2,12(r2)
   26ca8:	e0bff115 	stw	r2,-60(fp)
   26cac:	00002f06 	br	26d6c <_malloc_r+0x330>
    {
      victim_size = chunksize(victim);
   26cb0:	e0bff117 	ldw	r2,-60(fp)
   26cb4:	10c00117 	ldw	r3,4(r2)
   26cb8:	00bfff04 	movi	r2,-4
   26cbc:	1884703a 	and	r2,r3,r2
   26cc0:	e0bffb15 	stw	r2,-20(fp)
      remainder_size = long_sub_size_t(victim_size, nb);
   26cc4:	e0fffb17 	ldw	r3,-20(fp)
   26cc8:	e0bffa17 	ldw	r2,-24(fp)
   26ccc:	1885c83a 	sub	r2,r3,r2
   26cd0:	e0bff415 	stw	r2,-48(fp)
      
      if (remainder_size >= (long)MINSIZE) /* too big */
   26cd4:	e0bff417 	ldw	r2,-48(fp)
   26cd8:	10800410 	cmplti	r2,r2,16
   26cdc:	1000041e 	bne	r2,zero,26cf0 <_malloc_r+0x2b4>
      {
        --idx; /* adjust to rescan below after checking last remainder */
   26ce0:	e0bff217 	ldw	r2,-56(fp)
   26ce4:	10bfffc4 	addi	r2,r2,-1
   26ce8:	e0bff215 	stw	r2,-56(fp)
        break;   
   26cec:	00002206 	br	26d78 <_malloc_r+0x33c>
      }

      else if (remainder_size >= 0) /* exact fit */
   26cf0:	e0bff417 	ldw	r2,-48(fp)
   26cf4:	10001a16 	blt	r2,zero,26d60 <_malloc_r+0x324>
      {
        unlink(victim, bck, fwd);
   26cf8:	e0bff117 	ldw	r2,-60(fp)
   26cfc:	10800317 	ldw	r2,12(r2)
   26d00:	e0bff815 	stw	r2,-32(fp)
   26d04:	e0bff117 	ldw	r2,-60(fp)
   26d08:	10800217 	ldw	r2,8(r2)
   26d0c:	e0bff715 	stw	r2,-36(fp)
   26d10:	e0bff717 	ldw	r2,-36(fp)
   26d14:	e0fff817 	ldw	r3,-32(fp)
   26d18:	10c00315 	stw	r3,12(r2)
   26d1c:	e0bff817 	ldw	r2,-32(fp)
   26d20:	e0fff717 	ldw	r3,-36(fp)
   26d24:	10c00215 	stw	r3,8(r2)
        set_inuse_bit_at_offset(victim, victim_size);
   26d28:	e0fff117 	ldw	r3,-60(fp)
   26d2c:	e0bffb17 	ldw	r2,-20(fp)
   26d30:	1885883a 	add	r2,r3,r2
   26d34:	e13ff117 	ldw	r4,-60(fp)
   26d38:	e0fffb17 	ldw	r3,-20(fp)
   26d3c:	20c7883a 	add	r3,r4,r3
   26d40:	18c00117 	ldw	r3,4(r3)
   26d44:	18c00054 	ori	r3,r3,1
   26d48:	10c00115 	stw	r3,4(r2)
        check_malloced_chunk(victim, nb);
	MALLOC_UNLOCK;
   26d4c:	e13ffe17 	ldw	r4,-8(fp)
   26d50:	00301480 	call	30148 <__malloc_unlock>
        return chunk2mem(victim);
   26d54:	e0bff117 	ldw	r2,-60(fp)
   26d58:	10800204 	addi	r2,r2,8
   26d5c:	00021106 	br	275a4 <_malloc_r+0xb68>
  else
  {
    idx = bin_index(nb);
    bin = bin_at(idx);

    for (victim = last(bin); victim != bin; victim = victim->bk)
   26d60:	e0bff117 	ldw	r2,-60(fp)
   26d64:	10800317 	ldw	r2,12(r2)
   26d68:	e0bff115 	stw	r2,-60(fp)
   26d6c:	e0fff117 	ldw	r3,-60(fp)
   26d70:	e0bff317 	ldw	r2,-52(fp)
   26d74:	18bfce1e 	bne	r3,r2,26cb0 <__alt_data_end+0xfffe6cb0>
	MALLOC_UNLOCK;
        return chunk2mem(victim);
      }
    }

    ++idx; 
   26d78:	e0bff217 	ldw	r2,-56(fp)
   26d7c:	10800044 	addi	r2,r2,1
   26d80:	e0bff215 	stw	r2,-56(fp)

  }

  /* Try to use the last split-off remainder */

  if ( (victim = last_remainder->fd) != last_remainder)
   26d84:	008000f4 	movhi	r2,3
   26d88:	10898d04 	addi	r2,r2,9780
   26d8c:	10800217 	ldw	r2,8(r2)
   26d90:	e0bff115 	stw	r2,-60(fp)
   26d94:	008000f4 	movhi	r2,3
   26d98:	10898d04 	addi	r2,r2,9780
   26d9c:	e0fff117 	ldw	r3,-60(fp)
   26da0:	1880e626 	beq	r3,r2,2713c <_malloc_r+0x700>
  {
    victim_size = chunksize(victim);
   26da4:	e0bff117 	ldw	r2,-60(fp)
   26da8:	10c00117 	ldw	r3,4(r2)
   26dac:	00bfff04 	movi	r2,-4
   26db0:	1884703a 	and	r2,r3,r2
   26db4:	e0bffb15 	stw	r2,-20(fp)
    remainder_size = long_sub_size_t(victim_size, nb);
   26db8:	e0fffb17 	ldw	r3,-20(fp)
   26dbc:	e0bffa17 	ldw	r2,-24(fp)
   26dc0:	1885c83a 	sub	r2,r3,r2
   26dc4:	e0bff415 	stw	r2,-48(fp)

    if (remainder_size >= (long)MINSIZE) /* re-split */
   26dc8:	e0bff417 	ldw	r2,-48(fp)
   26dcc:	10800410 	cmplti	r2,r2,16
   26dd0:	1000271e 	bne	r2,zero,26e70 <_malloc_r+0x434>
    {
      remainder = chunk_at_offset(victim, nb);
   26dd4:	e0fff117 	ldw	r3,-60(fp)
   26dd8:	e0bffa17 	ldw	r2,-24(fp)
   26ddc:	1885883a 	add	r2,r3,r2
   26de0:	e0bffc15 	stw	r2,-16(fp)
      set_head(victim, nb | PREV_INUSE);
   26de4:	e0bffa17 	ldw	r2,-24(fp)
   26de8:	10c00054 	ori	r3,r2,1
   26dec:	e0bff117 	ldw	r2,-60(fp)
   26df0:	10c00115 	stw	r3,4(r2)
      link_last_remainder(remainder);
   26df4:	00c000f4 	movhi	r3,3
   26df8:	18c98d04 	addi	r3,r3,9780
   26dfc:	008000f4 	movhi	r2,3
   26e00:	10898d04 	addi	r2,r2,9780
   26e04:	e13ffc17 	ldw	r4,-16(fp)
   26e08:	11000315 	stw	r4,12(r2)
   26e0c:	10800317 	ldw	r2,12(r2)
   26e10:	18800215 	stw	r2,8(r3)
   26e14:	008000f4 	movhi	r2,3
   26e18:	10898d04 	addi	r2,r2,9780
   26e1c:	e0fffc17 	ldw	r3,-16(fp)
   26e20:	18800315 	stw	r2,12(r3)
   26e24:	e0bffc17 	ldw	r2,-16(fp)
   26e28:	10c00317 	ldw	r3,12(r2)
   26e2c:	e0bffc17 	ldw	r2,-16(fp)
   26e30:	10c00215 	stw	r3,8(r2)
      set_head(remainder, remainder_size | PREV_INUSE);
   26e34:	e0bff417 	ldw	r2,-48(fp)
   26e38:	10800054 	ori	r2,r2,1
   26e3c:	1007883a 	mov	r3,r2
   26e40:	e0bffc17 	ldw	r2,-16(fp)
   26e44:	10c00115 	stw	r3,4(r2)
      set_foot(remainder, remainder_size);
   26e48:	e0bff417 	ldw	r2,-48(fp)
   26e4c:	e0fffc17 	ldw	r3,-16(fp)
   26e50:	1885883a 	add	r2,r3,r2
   26e54:	e0fff417 	ldw	r3,-48(fp)
   26e58:	10c00015 	stw	r3,0(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
   26e5c:	e13ffe17 	ldw	r4,-8(fp)
   26e60:	00301480 	call	30148 <__malloc_unlock>
      return chunk2mem(victim);
   26e64:	e0bff117 	ldw	r2,-60(fp)
   26e68:	10800204 	addi	r2,r2,8
   26e6c:	0001cd06 	br	275a4 <_malloc_r+0xb68>
    }

    clear_last_remainder;
   26e70:	00c000f4 	movhi	r3,3
   26e74:	18c98d04 	addi	r3,r3,9780
   26e78:	008000f4 	movhi	r2,3
   26e7c:	10898d04 	addi	r2,r2,9780
   26e80:	010000f4 	movhi	r4,3
   26e84:	21098d04 	addi	r4,r4,9780
   26e88:	11000315 	stw	r4,12(r2)
   26e8c:	10800317 	ldw	r2,12(r2)
   26e90:	18800215 	stw	r2,8(r3)

    if (remainder_size >= 0)  /* exhaust */
   26e94:	e0bff417 	ldw	r2,-48(fp)
   26e98:	10000e16 	blt	r2,zero,26ed4 <_malloc_r+0x498>
    {
      set_inuse_bit_at_offset(victim, victim_size);
   26e9c:	e0fff117 	ldw	r3,-60(fp)
   26ea0:	e0bffb17 	ldw	r2,-20(fp)
   26ea4:	1885883a 	add	r2,r3,r2
   26ea8:	e13ff117 	ldw	r4,-60(fp)
   26eac:	e0fffb17 	ldw	r3,-20(fp)
   26eb0:	20c7883a 	add	r3,r4,r3
   26eb4:	18c00117 	ldw	r3,4(r3)
   26eb8:	18c00054 	ori	r3,r3,1
   26ebc:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
   26ec0:	e13ffe17 	ldw	r4,-8(fp)
   26ec4:	00301480 	call	30148 <__malloc_unlock>
      return chunk2mem(victim);
   26ec8:	e0bff117 	ldw	r2,-60(fp)
   26ecc:	10800204 	addi	r2,r2,8
   26ed0:	0001b406 	br	275a4 <_malloc_r+0xb68>
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
   26ed4:	e0bffb17 	ldw	r2,-20(fp)
   26ed8:	10808028 	cmpgeui	r2,r2,512
   26edc:	10002c1e 	bne	r2,zero,26f90 <_malloc_r+0x554>
   26ee0:	e0bffb17 	ldw	r2,-20(fp)
   26ee4:	1004d0fa 	srli	r2,r2,3
   26ee8:	e0bffd15 	stw	r2,-12(fp)
   26eec:	00c000f4 	movhi	r3,3
   26ef0:	18c98b04 	addi	r3,r3,9772
   26ef4:	008000f4 	movhi	r2,3
   26ef8:	10898b04 	addi	r2,r2,9772
   26efc:	11000117 	ldw	r4,4(r2)
   26f00:	e0bffd17 	ldw	r2,-12(fp)
   26f04:	1000010e 	bge	r2,zero,26f0c <_malloc_r+0x4d0>
   26f08:	108000c4 	addi	r2,r2,3
   26f0c:	1005d0ba 	srai	r2,r2,2
   26f10:	100b883a 	mov	r5,r2
   26f14:	00800044 	movi	r2,1
   26f18:	1144983a 	sll	r2,r2,r5
   26f1c:	2084b03a 	or	r2,r4,r2
   26f20:	18800115 	stw	r2,4(r3)
   26f24:	e0bffd17 	ldw	r2,-12(fp)
   26f28:	10800044 	addi	r2,r2,1
   26f2c:	1085883a 	add	r2,r2,r2
   26f30:	1085883a 	add	r2,r2,r2
   26f34:	1087883a 	add	r3,r2,r2
   26f38:	008000f4 	movhi	r2,3
   26f3c:	10898b04 	addi	r2,r2,9772
   26f40:	1885883a 	add	r2,r3,r2
   26f44:	10bffe04 	addi	r2,r2,-8
   26f48:	e0bff815 	stw	r2,-32(fp)
   26f4c:	e0bff817 	ldw	r2,-32(fp)
   26f50:	10800217 	ldw	r2,8(r2)
   26f54:	e0bff715 	stw	r2,-36(fp)
   26f58:	e0bff117 	ldw	r2,-60(fp)
   26f5c:	e0fff817 	ldw	r3,-32(fp)
   26f60:	10c00315 	stw	r3,12(r2)
   26f64:	e0bff117 	ldw	r2,-60(fp)
   26f68:	e0fff717 	ldw	r3,-36(fp)
   26f6c:	10c00215 	stw	r3,8(r2)
   26f70:	e0bff817 	ldw	r2,-32(fp)
   26f74:	e0fff117 	ldw	r3,-60(fp)
   26f78:	10c00215 	stw	r3,8(r2)
   26f7c:	e0bff817 	ldw	r2,-32(fp)
   26f80:	10c00217 	ldw	r3,8(r2)
   26f84:	e0bff717 	ldw	r2,-36(fp)
   26f88:	10c00315 	stw	r3,12(r2)
   26f8c:	00006b06 	br	2713c <_malloc_r+0x700>
   26f90:	e0bffb17 	ldw	r2,-20(fp)
   26f94:	1004d27a 	srli	r2,r2,9
   26f98:	1000031e 	bne	r2,zero,26fa8 <_malloc_r+0x56c>
   26f9c:	e0bffb17 	ldw	r2,-20(fp)
   26fa0:	1004d0fa 	srli	r2,r2,3
   26fa4:	00002906 	br	2704c <_malloc_r+0x610>
   26fa8:	e0bffb17 	ldw	r2,-20(fp)
   26fac:	1004d27a 	srli	r2,r2,9
   26fb0:	10800168 	cmpgeui	r2,r2,5
   26fb4:	1000041e 	bne	r2,zero,26fc8 <_malloc_r+0x58c>
   26fb8:	e0bffb17 	ldw	r2,-20(fp)
   26fbc:	1004d1ba 	srli	r2,r2,6
   26fc0:	10800e04 	addi	r2,r2,56
   26fc4:	00002106 	br	2704c <_malloc_r+0x610>
   26fc8:	e0bffb17 	ldw	r2,-20(fp)
   26fcc:	1004d27a 	srli	r2,r2,9
   26fd0:	10800568 	cmpgeui	r2,r2,21
   26fd4:	1000041e 	bne	r2,zero,26fe8 <_malloc_r+0x5ac>
   26fd8:	e0bffb17 	ldw	r2,-20(fp)
   26fdc:	1004d27a 	srli	r2,r2,9
   26fe0:	108016c4 	addi	r2,r2,91
   26fe4:	00001906 	br	2704c <_malloc_r+0x610>
   26fe8:	e0bffb17 	ldw	r2,-20(fp)
   26fec:	1004d27a 	srli	r2,r2,9
   26ff0:	10801568 	cmpgeui	r2,r2,85
   26ff4:	1000041e 	bne	r2,zero,27008 <_malloc_r+0x5cc>
   26ff8:	e0bffb17 	ldw	r2,-20(fp)
   26ffc:	1004d33a 	srli	r2,r2,12
   27000:	10801b84 	addi	r2,r2,110
   27004:	00001106 	br	2704c <_malloc_r+0x610>
   27008:	e0bffb17 	ldw	r2,-20(fp)
   2700c:	1004d27a 	srli	r2,r2,9
   27010:	10805568 	cmpgeui	r2,r2,341
   27014:	1000041e 	bne	r2,zero,27028 <_malloc_r+0x5ec>
   27018:	e0bffb17 	ldw	r2,-20(fp)
   2701c:	1004d3fa 	srli	r2,r2,15
   27020:	10801dc4 	addi	r2,r2,119
   27024:	00000906 	br	2704c <_malloc_r+0x610>
   27028:	e0bffb17 	ldw	r2,-20(fp)
   2702c:	1004d27a 	srli	r2,r2,9
   27030:	10815568 	cmpgeui	r2,r2,1365
   27034:	1000041e 	bne	r2,zero,27048 <_malloc_r+0x60c>
   27038:	e0bffb17 	ldw	r2,-20(fp)
   2703c:	1004d4ba 	srli	r2,r2,18
   27040:	10801f04 	addi	r2,r2,124
   27044:	00000106 	br	2704c <_malloc_r+0x610>
   27048:	00801f84 	movi	r2,126
   2704c:	e0bffd15 	stw	r2,-12(fp)
   27050:	e0bffd17 	ldw	r2,-12(fp)
   27054:	10800044 	addi	r2,r2,1
   27058:	1085883a 	add	r2,r2,r2
   2705c:	1085883a 	add	r2,r2,r2
   27060:	1087883a 	add	r3,r2,r2
   27064:	008000f4 	movhi	r2,3
   27068:	10898b04 	addi	r2,r2,9772
   2706c:	1885883a 	add	r2,r3,r2
   27070:	10bffe04 	addi	r2,r2,-8
   27074:	e0bff815 	stw	r2,-32(fp)
   27078:	e0bff817 	ldw	r2,-32(fp)
   2707c:	10800217 	ldw	r2,8(r2)
   27080:	e0bff715 	stw	r2,-36(fp)
   27084:	e0fff717 	ldw	r3,-36(fp)
   27088:	e0bff817 	ldw	r2,-32(fp)
   2708c:	1880121e 	bne	r3,r2,270d8 <_malloc_r+0x69c>
   27090:	00c000f4 	movhi	r3,3
   27094:	18c98b04 	addi	r3,r3,9772
   27098:	008000f4 	movhi	r2,3
   2709c:	10898b04 	addi	r2,r2,9772
   270a0:	11000117 	ldw	r4,4(r2)
   270a4:	e0bffd17 	ldw	r2,-12(fp)
   270a8:	1000010e 	bge	r2,zero,270b0 <_malloc_r+0x674>
   270ac:	108000c4 	addi	r2,r2,3
   270b0:	1005d0ba 	srai	r2,r2,2
   270b4:	100b883a 	mov	r5,r2
   270b8:	00800044 	movi	r2,1
   270bc:	1144983a 	sll	r2,r2,r5
   270c0:	2084b03a 	or	r2,r4,r2
   270c4:	18800115 	stw	r2,4(r3)
   270c8:	00000f06 	br	27108 <_malloc_r+0x6cc>
   270cc:	e0bff717 	ldw	r2,-36(fp)
   270d0:	10800217 	ldw	r2,8(r2)
   270d4:	e0bff715 	stw	r2,-36(fp)
   270d8:	e0fff717 	ldw	r3,-36(fp)
   270dc:	e0bff817 	ldw	r2,-32(fp)
   270e0:	18800626 	beq	r3,r2,270fc <_malloc_r+0x6c0>
   270e4:	e0bff717 	ldw	r2,-36(fp)
   270e8:	10c00117 	ldw	r3,4(r2)
   270ec:	00bfff04 	movi	r2,-4
   270f0:	1884703a 	and	r2,r3,r2
   270f4:	e0fffb17 	ldw	r3,-20(fp)
   270f8:	18bff436 	bltu	r3,r2,270cc <__alt_data_end+0xfffe70cc>
   270fc:	e0bff717 	ldw	r2,-36(fp)
   27100:	10800317 	ldw	r2,12(r2)
   27104:	e0bff815 	stw	r2,-32(fp)
   27108:	e0bff117 	ldw	r2,-60(fp)
   2710c:	e0fff817 	ldw	r3,-32(fp)
   27110:	10c00315 	stw	r3,12(r2)
   27114:	e0bff117 	ldw	r2,-60(fp)
   27118:	e0fff717 	ldw	r3,-36(fp)
   2711c:	10c00215 	stw	r3,8(r2)
   27120:	e0bff817 	ldw	r2,-32(fp)
   27124:	e0fff117 	ldw	r3,-60(fp)
   27128:	10c00215 	stw	r3,8(r2)
   2712c:	e0bff817 	ldw	r2,-32(fp)
   27130:	10c00217 	ldw	r3,8(r2)
   27134:	e0bff717 	ldw	r2,-36(fp)
   27138:	10c00315 	stw	r3,12(r2)
  /* 
     If there are any possibly nonempty big-enough blocks, 
     search for best fitting chunk by scanning bins in blockwidth units.
  */

  if ( (block = idx2binblock(idx)) <= binblocks)  
   2713c:	e0bff217 	ldw	r2,-56(fp)
   27140:	1000010e 	bge	r2,zero,27148 <_malloc_r+0x70c>
   27144:	108000c4 	addi	r2,r2,3
   27148:	1005d0ba 	srai	r2,r2,2
   2714c:	1007883a 	mov	r3,r2
   27150:	00800044 	movi	r2,1
   27154:	10c4983a 	sll	r2,r2,r3
   27158:	e0bff515 	stw	r2,-44(fp)
   2715c:	008000f4 	movhi	r2,3
   27160:	10898b04 	addi	r2,r2,9772
   27164:	10c00117 	ldw	r3,4(r2)
   27168:	e0bff517 	ldw	r2,-44(fp)
   2716c:	1880c636 	bltu	r3,r2,27488 <_malloc_r+0xa4c>
  {

    /* Get to the first marked block */

    if ( (block & binblocks) == 0) 
   27170:	008000f4 	movhi	r2,3
   27174:	10898b04 	addi	r2,r2,9772
   27178:	10c00117 	ldw	r3,4(r2)
   2717c:	e0bff517 	ldw	r2,-44(fp)
   27180:	1884703a 	and	r2,r3,r2
   27184:	1000151e 	bne	r2,zero,271dc <_malloc_r+0x7a0>
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
   27188:	e0fff217 	ldw	r3,-56(fp)
   2718c:	00bfff04 	movi	r2,-4
   27190:	1884703a 	and	r2,r3,r2
   27194:	10800104 	addi	r2,r2,4
   27198:	e0bff215 	stw	r2,-56(fp)
      block <<= 1;
   2719c:	e0bff517 	ldw	r2,-44(fp)
   271a0:	1085883a 	add	r2,r2,r2
   271a4:	e0bff515 	stw	r2,-44(fp)
      while ((block & binblocks) == 0)
   271a8:	00000606 	br	271c4 <_malloc_r+0x788>
      {
        idx += BINBLOCKWIDTH;
   271ac:	e0bff217 	ldw	r2,-56(fp)
   271b0:	10800104 	addi	r2,r2,4
   271b4:	e0bff215 	stw	r2,-56(fp)
        block <<= 1;
   271b8:	e0bff517 	ldw	r2,-44(fp)
   271bc:	1085883a 	add	r2,r2,r2
   271c0:	e0bff515 	stw	r2,-44(fp)
    if ( (block & binblocks) == 0) 
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
      block <<= 1;
      while ((block & binblocks) == 0)
   271c4:	008000f4 	movhi	r2,3
   271c8:	10898b04 	addi	r2,r2,9772
   271cc:	10c00117 	ldw	r3,4(r2)
   271d0:	e0bff517 	ldw	r2,-44(fp)
   271d4:	1884703a 	and	r2,r3,r2
   271d8:	103ff426 	beq	r2,zero,271ac <__alt_data_end+0xfffe71ac>
    }
      
    /* For each possibly nonempty block ... */
    for (;;)  
    {
      startidx = idx;          /* (track incomplete blocks) */
   271dc:	e0bff217 	ldw	r2,-56(fp)
   271e0:	e0bff615 	stw	r2,-40(fp)
      q = bin = bin_at(idx);
   271e4:	e0bff217 	ldw	r2,-56(fp)
   271e8:	10800044 	addi	r2,r2,1
   271ec:	1085883a 	add	r2,r2,r2
   271f0:	1085883a 	add	r2,r2,r2
   271f4:	1087883a 	add	r3,r2,r2
   271f8:	008000f4 	movhi	r2,3
   271fc:	10898b04 	addi	r2,r2,9772
   27200:	1885883a 	add	r2,r3,r2
   27204:	10bffe04 	addi	r2,r2,-8
   27208:	e0bff315 	stw	r2,-52(fp)
   2720c:	e0bff317 	ldw	r2,-52(fp)
   27210:	e0bff915 	stw	r2,-28(fp)
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
   27214:	e0bff317 	ldw	r2,-52(fp)
   27218:	10800317 	ldw	r2,12(r2)
   2721c:	e0bff115 	stw	r2,-60(fp)
   27220:	00005e06 	br	2739c <_malloc_r+0x960>
        {
          victim_size = chunksize(victim);
   27224:	e0bff117 	ldw	r2,-60(fp)
   27228:	10c00117 	ldw	r3,4(r2)
   2722c:	00bfff04 	movi	r2,-4
   27230:	1884703a 	and	r2,r3,r2
   27234:	e0bffb15 	stw	r2,-20(fp)
          remainder_size = long_sub_size_t(victim_size, nb);
   27238:	e0fffb17 	ldw	r3,-20(fp)
   2723c:	e0bffa17 	ldw	r2,-24(fp)
   27240:	1885c83a 	sub	r2,r3,r2
   27244:	e0bff415 	stw	r2,-48(fp)

          if (remainder_size >= (long)MINSIZE) /* split */
   27248:	e0bff417 	ldw	r2,-48(fp)
   2724c:	10800410 	cmplti	r2,r2,16
   27250:	1000331e 	bne	r2,zero,27320 <_malloc_r+0x8e4>
          {
            remainder = chunk_at_offset(victim, nb);
   27254:	e0fff117 	ldw	r3,-60(fp)
   27258:	e0bffa17 	ldw	r2,-24(fp)
   2725c:	1885883a 	add	r2,r3,r2
   27260:	e0bffc15 	stw	r2,-16(fp)
            set_head(victim, nb | PREV_INUSE);
   27264:	e0bffa17 	ldw	r2,-24(fp)
   27268:	10c00054 	ori	r3,r2,1
   2726c:	e0bff117 	ldw	r2,-60(fp)
   27270:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
   27274:	e0bff117 	ldw	r2,-60(fp)
   27278:	10800317 	ldw	r2,12(r2)
   2727c:	e0bff815 	stw	r2,-32(fp)
   27280:	e0bff117 	ldw	r2,-60(fp)
   27284:	10800217 	ldw	r2,8(r2)
   27288:	e0bff715 	stw	r2,-36(fp)
   2728c:	e0bff717 	ldw	r2,-36(fp)
   27290:	e0fff817 	ldw	r3,-32(fp)
   27294:	10c00315 	stw	r3,12(r2)
   27298:	e0bff817 	ldw	r2,-32(fp)
   2729c:	e0fff717 	ldw	r3,-36(fp)
   272a0:	10c00215 	stw	r3,8(r2)
            link_last_remainder(remainder);
   272a4:	00c000f4 	movhi	r3,3
   272a8:	18c98d04 	addi	r3,r3,9780
   272ac:	008000f4 	movhi	r2,3
   272b0:	10898d04 	addi	r2,r2,9780
   272b4:	e13ffc17 	ldw	r4,-16(fp)
   272b8:	11000315 	stw	r4,12(r2)
   272bc:	10800317 	ldw	r2,12(r2)
   272c0:	18800215 	stw	r2,8(r3)
   272c4:	008000f4 	movhi	r2,3
   272c8:	10898d04 	addi	r2,r2,9780
   272cc:	e0fffc17 	ldw	r3,-16(fp)
   272d0:	18800315 	stw	r2,12(r3)
   272d4:	e0bffc17 	ldw	r2,-16(fp)
   272d8:	10c00317 	ldw	r3,12(r2)
   272dc:	e0bffc17 	ldw	r2,-16(fp)
   272e0:	10c00215 	stw	r3,8(r2)
            set_head(remainder, remainder_size | PREV_INUSE);
   272e4:	e0bff417 	ldw	r2,-48(fp)
   272e8:	10800054 	ori	r2,r2,1
   272ec:	1007883a 	mov	r3,r2
   272f0:	e0bffc17 	ldw	r2,-16(fp)
   272f4:	10c00115 	stw	r3,4(r2)
            set_foot(remainder, remainder_size);
   272f8:	e0bff417 	ldw	r2,-48(fp)
   272fc:	e0fffc17 	ldw	r3,-16(fp)
   27300:	1885883a 	add	r2,r3,r2
   27304:	e0fff417 	ldw	r3,-48(fp)
   27308:	10c00015 	stw	r3,0(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
   2730c:	e13ffe17 	ldw	r4,-8(fp)
   27310:	00301480 	call	30148 <__malloc_unlock>
            return chunk2mem(victim);
   27314:	e0bff117 	ldw	r2,-60(fp)
   27318:	10800204 	addi	r2,r2,8
   2731c:	0000a106 	br	275a4 <_malloc_r+0xb68>
          }

          else if (remainder_size >= 0)  /* take */
   27320:	e0bff417 	ldw	r2,-48(fp)
   27324:	10001a16 	blt	r2,zero,27390 <_malloc_r+0x954>
          {
            set_inuse_bit_at_offset(victim, victim_size);
   27328:	e0fff117 	ldw	r3,-60(fp)
   2732c:	e0bffb17 	ldw	r2,-20(fp)
   27330:	1885883a 	add	r2,r3,r2
   27334:	e13ff117 	ldw	r4,-60(fp)
   27338:	e0fffb17 	ldw	r3,-20(fp)
   2733c:	20c7883a 	add	r3,r4,r3
   27340:	18c00117 	ldw	r3,4(r3)
   27344:	18c00054 	ori	r3,r3,1
   27348:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
   2734c:	e0bff117 	ldw	r2,-60(fp)
   27350:	10800317 	ldw	r2,12(r2)
   27354:	e0bff815 	stw	r2,-32(fp)
   27358:	e0bff117 	ldw	r2,-60(fp)
   2735c:	10800217 	ldw	r2,8(r2)
   27360:	e0bff715 	stw	r2,-36(fp)
   27364:	e0bff717 	ldw	r2,-36(fp)
   27368:	e0fff817 	ldw	r3,-32(fp)
   2736c:	10c00315 	stw	r3,12(r2)
   27370:	e0bff817 	ldw	r2,-32(fp)
   27374:	e0fff717 	ldw	r3,-36(fp)
   27378:	10c00215 	stw	r3,8(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
   2737c:	e13ffe17 	ldw	r4,-8(fp)
   27380:	00301480 	call	30148 <__malloc_unlock>
            return chunk2mem(victim);
   27384:	e0bff117 	ldw	r2,-60(fp)
   27388:	10800204 	addi	r2,r2,8
   2738c:	00008506 	br	275a4 <_malloc_r+0xb68>
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
   27390:	e0bff117 	ldw	r2,-60(fp)
   27394:	10800317 	ldw	r2,12(r2)
   27398:	e0bff115 	stw	r2,-60(fp)
   2739c:	e0fff117 	ldw	r3,-60(fp)
   273a0:	e0bff317 	ldw	r2,-52(fp)
   273a4:	18bf9f1e 	bne	r3,r2,27224 <__alt_data_end+0xfffe7224>
            return chunk2mem(victim);
          }

        }

       bin = next_bin(bin);
   273a8:	e0bff317 	ldw	r2,-52(fp)
   273ac:	10800204 	addi	r2,r2,8
   273b0:	e0bff315 	stw	r2,-52(fp)
         {
           bin = next_bin(bin);
           ++idx;
         }
#endif
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
   273b4:	e0bff217 	ldw	r2,-56(fp)
   273b8:	10800044 	addi	r2,r2,1
   273bc:	e0bff215 	stw	r2,-56(fp)
   273c0:	e0bff217 	ldw	r2,-56(fp)
   273c4:	108000cc 	andi	r2,r2,3
   273c8:	103f921e 	bne	r2,zero,27214 <__alt_data_end+0xfffe7214>

      /* Clear out the block bit. */

      do   /* Possibly backtrack to try to clear a partial block */
      {
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
   273cc:	e0bff617 	ldw	r2,-40(fp)
   273d0:	108000cc 	andi	r2,r2,3
   273d4:	10000a1e 	bne	r2,zero,27400 <_malloc_r+0x9c4>
        {
          binblocks &= ~block;
   273d8:	008000f4 	movhi	r2,3
   273dc:	10898b04 	addi	r2,r2,9772
   273e0:	00c000f4 	movhi	r3,3
   273e4:	18c98b04 	addi	r3,r3,9772
   273e8:	19000117 	ldw	r4,4(r3)
   273ec:	e0fff517 	ldw	r3,-44(fp)
   273f0:	00c6303a 	nor	r3,zero,r3
   273f4:	20c6703a 	and	r3,r4,r3
   273f8:	10c00115 	stw	r3,4(r2)
          break;
   273fc:	00000a06 	br	27428 <_malloc_r+0x9ec>
        }
        --startidx;
   27400:	e0bff617 	ldw	r2,-40(fp)
   27404:	10bfffc4 	addi	r2,r2,-1
   27408:	e0bff615 	stw	r2,-40(fp)
       q = prev_bin(q);
   2740c:	e0bff917 	ldw	r2,-28(fp)
   27410:	10bffe04 	addi	r2,r2,-8
   27414:	e0bff915 	stw	r2,-28(fp)
      } while (first(q) == q);
   27418:	e0bff917 	ldw	r2,-28(fp)
   2741c:	10c00217 	ldw	r3,8(r2)
   27420:	e0bff917 	ldw	r2,-28(fp)
   27424:	18bfe926 	beq	r3,r2,273cc <__alt_data_end+0xfffe73cc>

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
   27428:	e0bff517 	ldw	r2,-44(fp)
   2742c:	1085883a 	add	r2,r2,r2
   27430:	e0bff515 	stw	r2,-44(fp)
   27434:	008000f4 	movhi	r2,3
   27438:	10898b04 	addi	r2,r2,9772
   2743c:	10c00117 	ldw	r3,4(r2)
   27440:	e0bff517 	ldw	r2,-44(fp)
   27444:	18801036 	bltu	r3,r2,27488 <_malloc_r+0xa4c>
   27448:	e0bff517 	ldw	r2,-44(fp)
   2744c:	10000e26 	beq	r2,zero,27488 <_malloc_r+0xa4c>
      {
        while ((block & binblocks) == 0)
   27450:	00000606 	br	2746c <_malloc_r+0xa30>
        {
          idx += BINBLOCKWIDTH;
   27454:	e0bff217 	ldw	r2,-56(fp)
   27458:	10800104 	addi	r2,r2,4
   2745c:	e0bff215 	stw	r2,-56(fp)
          block <<= 1;
   27460:	e0bff517 	ldw	r2,-44(fp)
   27464:	1085883a 	add	r2,r2,r2
   27468:	e0bff515 	stw	r2,-44(fp)

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
      {
        while ((block & binblocks) == 0)
   2746c:	008000f4 	movhi	r2,3
   27470:	10898b04 	addi	r2,r2,9772
   27474:	10c00117 	ldw	r3,4(r2)
   27478:	e0bff517 	ldw	r2,-44(fp)
   2747c:	1884703a 	and	r2,r3,r2
   27480:	103ff426 	beq	r2,zero,27454 <__alt_data_end+0xfffe7454>
          block <<= 1;
        }
      }
      else
        break;
    }
   27484:	003f5506 	br	271dc <__alt_data_end+0xfffe71dc>


  /* Try to use top chunk */

  /* Require that there be a remainder, ensuring top always exists  */
  remainder_size = long_sub_size_t(chunksize(top), nb);
   27488:	008000f4 	movhi	r2,3
   2748c:	10898b04 	addi	r2,r2,9772
   27490:	10800217 	ldw	r2,8(r2)
   27494:	10c00117 	ldw	r3,4(r2)
   27498:	00bfff04 	movi	r2,-4
   2749c:	1886703a 	and	r3,r3,r2
   274a0:	e0bffa17 	ldw	r2,-24(fp)
   274a4:	1885c83a 	sub	r2,r3,r2
   274a8:	e0bff415 	stw	r2,-48(fp)
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
   274ac:	008000f4 	movhi	r2,3
   274b0:	10898b04 	addi	r2,r2,9772
   274b4:	10800217 	ldw	r2,8(r2)
   274b8:	10c00117 	ldw	r3,4(r2)
   274bc:	00bfff04 	movi	r2,-4
   274c0:	1886703a 	and	r3,r3,r2
   274c4:	e0bffa17 	ldw	r2,-24(fp)
   274c8:	18800336 	bltu	r3,r2,274d8 <_malloc_r+0xa9c>
   274cc:	e0bff417 	ldw	r2,-48(fp)
   274d0:	10800408 	cmpgei	r2,r2,16
   274d4:	10001b1e 	bne	r2,zero,27544 <_malloc_r+0xb08>
      return chunk2mem(victim);
    }
#endif

    /* Try to extend */
    malloc_extend_top(RCALL nb);
   274d8:	e17ffa17 	ldw	r5,-24(fp)
   274dc:	e13ffe17 	ldw	r4,-8(fp)
   274e0:	00266880 	call	26688 <malloc_extend_top>
    remainder_size = long_sub_size_t(chunksize(top), nb);
   274e4:	008000f4 	movhi	r2,3
   274e8:	10898b04 	addi	r2,r2,9772
   274ec:	10800217 	ldw	r2,8(r2)
   274f0:	10c00117 	ldw	r3,4(r2)
   274f4:	00bfff04 	movi	r2,-4
   274f8:	1886703a 	and	r3,r3,r2
   274fc:	e0bffa17 	ldw	r2,-24(fp)
   27500:	1885c83a 	sub	r2,r3,r2
   27504:	e0bff415 	stw	r2,-48(fp)
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
   27508:	008000f4 	movhi	r2,3
   2750c:	10898b04 	addi	r2,r2,9772
   27510:	10800217 	ldw	r2,8(r2)
   27514:	10c00117 	ldw	r3,4(r2)
   27518:	00bfff04 	movi	r2,-4
   2751c:	1886703a 	and	r3,r3,r2
   27520:	e0bffa17 	ldw	r2,-24(fp)
   27524:	18800336 	bltu	r3,r2,27534 <_malloc_r+0xaf8>
   27528:	e0bff417 	ldw	r2,-48(fp)
   2752c:	10800408 	cmpgei	r2,r2,16
   27530:	1000041e 	bne	r2,zero,27544 <_malloc_r+0xb08>
    {
      MALLOC_UNLOCK;
   27534:	e13ffe17 	ldw	r4,-8(fp)
   27538:	00301480 	call	30148 <__malloc_unlock>
      return 0; /* propagate failure */
   2753c:	0005883a 	mov	r2,zero
   27540:	00001806 	br	275a4 <_malloc_r+0xb68>
    }
  }

  victim = top;
   27544:	008000f4 	movhi	r2,3
   27548:	10898b04 	addi	r2,r2,9772
   2754c:	10800217 	ldw	r2,8(r2)
   27550:	e0bff115 	stw	r2,-60(fp)
  set_head(victim, nb | PREV_INUSE);
   27554:	e0bffa17 	ldw	r2,-24(fp)
   27558:	10c00054 	ori	r3,r2,1
   2755c:	e0bff117 	ldw	r2,-60(fp)
   27560:	10c00115 	stw	r3,4(r2)
  top = chunk_at_offset(victim, nb);
   27564:	008000f4 	movhi	r2,3
   27568:	10898b04 	addi	r2,r2,9772
   2756c:	e13ff117 	ldw	r4,-60(fp)
   27570:	e0fffa17 	ldw	r3,-24(fp)
   27574:	20c7883a 	add	r3,r4,r3
   27578:	10c00215 	stw	r3,8(r2)
  set_head(top, remainder_size | PREV_INUSE);
   2757c:	008000f4 	movhi	r2,3
   27580:	10898b04 	addi	r2,r2,9772
   27584:	10800217 	ldw	r2,8(r2)
   27588:	e0fff417 	ldw	r3,-48(fp)
   2758c:	18c00054 	ori	r3,r3,1
   27590:	10c00115 	stw	r3,4(r2)
  check_malloced_chunk(victim, nb);
  MALLOC_UNLOCK;
   27594:	e13ffe17 	ldw	r4,-8(fp)
   27598:	00301480 	call	30148 <__malloc_unlock>
  return chunk2mem(victim);
   2759c:	e0bff117 	ldw	r2,-60(fp)
   275a0:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
   275a4:	e037883a 	mov	sp,fp
   275a8:	dfc00117 	ldw	ra,4(sp)
   275ac:	df000017 	ldw	fp,0(sp)
   275b0:	dec00204 	addi	sp,sp,8
   275b4:	f800283a 	ret

000275b8 <memchr>:
_PTR
_DEFUN (memchr, (src_void, c, length),
	_CONST _PTR src_void _AND
	int c _AND
	size_t length)
{
   275b8:	defff704 	addi	sp,sp,-36
   275bc:	df000815 	stw	fp,32(sp)
   275c0:	df000804 	addi	fp,sp,32
   275c4:	e13ffd15 	stw	r4,-12(fp)
   275c8:	e17ffe15 	stw	r5,-8(fp)
   275cc:	e1bfff15 	stw	r6,-4(fp)
  _CONST unsigned char *src = (_CONST unsigned char *) src_void;
   275d0:	e0bffd17 	ldw	r2,-12(fp)
   275d4:	e0bff815 	stw	r2,-32(fp)
  unsigned char d = c;
   275d8:	e0bffe17 	ldw	r2,-8(fp)
   275dc:	e0bffc05 	stb	r2,-16(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
   275e0:	00001006 	br	27624 <memchr+0x6c>
    {
      if (!length--)
   275e4:	e0bfff17 	ldw	r2,-4(fp)
   275e8:	10ffffc4 	addi	r3,r2,-1
   275ec:	e0ffff15 	stw	r3,-4(fp)
   275f0:	1000021e 	bne	r2,zero,275fc <memchr+0x44>
        return NULL;
   275f4:	0005883a 	mov	r2,zero
   275f8:	00005a06 	br	27764 <memchr+0x1ac>
      if (*src == d)
   275fc:	e0bff817 	ldw	r2,-32(fp)
   27600:	10800003 	ldbu	r2,0(r2)
   27604:	10c03fcc 	andi	r3,r2,255
   27608:	e0bffc03 	ldbu	r2,-16(fp)
   2760c:	1880021e 	bne	r3,r2,27618 <memchr+0x60>
        return (void *) src;
   27610:	e0bff817 	ldw	r2,-32(fp)
   27614:	00005306 	br	27764 <memchr+0x1ac>
      src++;
   27618:	e0bff817 	ldw	r2,-32(fp)
   2761c:	10800044 	addi	r2,r2,1
   27620:	e0bff815 	stw	r2,-32(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
   27624:	e0bff817 	ldw	r2,-32(fp)
   27628:	108000cc 	andi	r2,r2,3
   2762c:	103fed1e 	bne	r2,zero,275e4 <__alt_data_end+0xfffe75e4>
      if (*src == d)
        return (void *) src;
      src++;
    }

  if (!TOO_SMALL (length))
   27630:	e0bfff17 	ldw	r2,-4(fp)
   27634:	10800130 	cmpltui	r2,r2,4
   27638:	1000451e 	bne	r2,zero,27750 <memchr+0x198>
         performs the bytewise search on word-sized segments if they
         contain the search character, which is detected by XORing
         the word-sized segment with a word-sized block of the search
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
   2763c:	e0bff817 	ldw	r2,-32(fp)
   27640:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
   27644:	e0bffc03 	ldbu	r2,-16(fp)
   27648:	1006923a 	slli	r3,r2,8
   2764c:	e0bffc03 	ldbu	r2,-16(fp)
   27650:	1884b03a 	or	r2,r3,r2
   27654:	e0bffa15 	stw	r2,-24(fp)
      mask = mask << 16 | mask;
   27658:	e0bffa17 	ldw	r2,-24(fp)
   2765c:	1004943a 	slli	r2,r2,16
   27660:	e0fffa17 	ldw	r3,-24(fp)
   27664:	1884b03a 	or	r2,r3,r2
   27668:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
   2766c:	00800804 	movi	r2,32
   27670:	e0bffb15 	stw	r2,-20(fp)
   27674:	00000906 	br	2769c <memchr+0xe4>
        mask = (mask << i) | mask;
   27678:	e0fffa17 	ldw	r3,-24(fp)
   2767c:	e0bffb17 	ldw	r2,-20(fp)
   27680:	1884983a 	sll	r2,r3,r2
   27684:	e0fffa17 	ldw	r3,-24(fp)
   27688:	1884b03a 	or	r2,r3,r2
   2768c:	e0bffa15 	stw	r2,-24(fp)
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
   27690:	e0bffb17 	ldw	r2,-20(fp)
   27694:	1085883a 	add	r2,r2,r2
   27698:	e0bffb15 	stw	r2,-20(fp)
   2769c:	e0bffb17 	ldw	r2,-20(fp)
   276a0:	10800830 	cmpltui	r2,r2,32
   276a4:	103ff41e 	bne	r2,zero,27678 <__alt_data_end+0xfffe7678>
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
   276a8:	00001706 	br	27708 <memchr+0x150>
        {
          if (DETECTCHAR (*asrc, mask))
   276ac:	e0bff917 	ldw	r2,-28(fp)
   276b0:	10c00017 	ldw	r3,0(r2)
   276b4:	e0bffa17 	ldw	r2,-24(fp)
   276b8:	1886f03a 	xor	r3,r3,r2
   276bc:	00bfbff4 	movhi	r2,65279
   276c0:	10bfbfc4 	addi	r2,r2,-257
   276c4:	1887883a 	add	r3,r3,r2
   276c8:	e0bff917 	ldw	r2,-28(fp)
   276cc:	11000017 	ldw	r4,0(r2)
   276d0:	e0bffa17 	ldw	r2,-24(fp)
   276d4:	2084f03a 	xor	r2,r4,r2
   276d8:	0084303a 	nor	r2,zero,r2
   276dc:	1886703a 	and	r3,r3,r2
   276e0:	00a02074 	movhi	r2,32897
   276e4:	10a02004 	addi	r2,r2,-32640
   276e8:	1884703a 	and	r2,r3,r2
   276ec:	10000a1e 	bne	r2,zero,27718 <memchr+0x160>
            break;
          length -= LBLOCKSIZE;
   276f0:	e0bfff17 	ldw	r2,-4(fp)
   276f4:	10bfff04 	addi	r2,r2,-4
   276f8:	e0bfff15 	stw	r2,-4(fp)
          asrc++;
   276fc:	e0bff917 	ldw	r2,-28(fp)
   27700:	10800104 	addi	r2,r2,4
   27704:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
   27708:	e0bfff17 	ldw	r2,-4(fp)
   2770c:	10800128 	cmpgeui	r2,r2,4
   27710:	103fe61e 	bne	r2,zero,276ac <__alt_data_end+0xfffe76ac>
   27714:	00000106 	br	2771c <memchr+0x164>
        {
          if (DETECTCHAR (*asrc, mask))
            break;
   27718:	0001883a 	nop
        }

      /* If there are fewer than LBLOCKSIZE characters left,
         then we resort to the bytewise loop.  */

      src = (unsigned char *) asrc;
   2771c:	e0bff917 	ldw	r2,-28(fp)
   27720:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
   27724:	00000a06 	br	27750 <memchr+0x198>
    {
      if (*src == d)
   27728:	e0bff817 	ldw	r2,-32(fp)
   2772c:	10800003 	ldbu	r2,0(r2)
   27730:	10c03fcc 	andi	r3,r2,255
   27734:	e0bffc03 	ldbu	r2,-16(fp)
   27738:	1880021e 	bne	r3,r2,27744 <memchr+0x18c>
        return (void *) src;
   2773c:	e0bff817 	ldw	r2,-32(fp)
   27740:	00000806 	br	27764 <memchr+0x1ac>
      src++;
   27744:	e0bff817 	ldw	r2,-32(fp)
   27748:	10800044 	addi	r2,r2,1
   2774c:	e0bff815 	stw	r2,-32(fp)
      src = (unsigned char *) asrc;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
   27750:	e0bfff17 	ldw	r2,-4(fp)
   27754:	10ffffc4 	addi	r3,r2,-1
   27758:	e0ffff15 	stw	r3,-4(fp)
   2775c:	103ff21e 	bne	r2,zero,27728 <__alt_data_end+0xfffe7728>
      if (*src == d)
        return (void *) src;
      src++;
    }

  return NULL;
   27760:	0005883a 	mov	r2,zero
}
   27764:	e037883a 	mov	sp,fp
   27768:	df000017 	ldw	fp,0(sp)
   2776c:	dec00104 	addi	sp,sp,4
   27770:	f800283a 	ret

00027774 <memcpy>:
_PTR
_DEFUN (memcpy, (dst0, src0, len0),
	_PTR __restrict dst0 _AND
	_CONST _PTR __restrict src0 _AND
	size_t len0)
{
   27774:	defff804 	addi	sp,sp,-32
   27778:	df000715 	stw	fp,28(sp)
   2777c:	df000704 	addi	fp,sp,28
   27780:	e13ffd15 	stw	r4,-12(fp)
   27784:	e17ffe15 	stw	r5,-8(fp)
   27788:	e1bfff15 	stw	r6,-4(fp)
      *dst++ = *src++;
    }

  return save;
#else
  char *dst = dst0;
   2778c:	e0bffd17 	ldw	r2,-12(fp)
   27790:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src0;
   27794:	e0bffe17 	ldw	r2,-8(fp)
   27798:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  /* If the size is small, or either SRC or DST is unaligned,
     then punt into the byte copy loop.  This should be rare.  */
  if (!TOO_SMALL(len0) && !UNALIGNED (src, dst))
   2779c:	e0bfff17 	ldw	r2,-4(fp)
   277a0:	10800430 	cmpltui	r2,r2,16
   277a4:	10004c1e 	bne	r2,zero,278d8 <memcpy+0x164>
   277a8:	e0fffa17 	ldw	r3,-24(fp)
   277ac:	e0bff917 	ldw	r2,-28(fp)
   277b0:	1884b03a 	or	r2,r3,r2
   277b4:	108000cc 	andi	r2,r2,3
   277b8:	1000471e 	bne	r2,zero,278d8 <memcpy+0x164>
    {
      aligned_dst = (long*)dst;
   277bc:	e0bff917 	ldw	r2,-28(fp)
   277c0:	e0bffb15 	stw	r2,-20(fp)
      aligned_src = (long*)src;
   277c4:	e0bffa17 	ldw	r2,-24(fp)
   277c8:	e0bffc15 	stw	r2,-16(fp)

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
   277cc:	00002306 	br	2785c <memcpy+0xe8>
        {
          *aligned_dst++ = *aligned_src++;
   277d0:	e0bffb17 	ldw	r2,-20(fp)
   277d4:	10c00104 	addi	r3,r2,4
   277d8:	e0fffb15 	stw	r3,-20(fp)
   277dc:	e0fffc17 	ldw	r3,-16(fp)
   277e0:	19000104 	addi	r4,r3,4
   277e4:	e13ffc15 	stw	r4,-16(fp)
   277e8:	18c00017 	ldw	r3,0(r3)
   277ec:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
   277f0:	e0bffb17 	ldw	r2,-20(fp)
   277f4:	10c00104 	addi	r3,r2,4
   277f8:	e0fffb15 	stw	r3,-20(fp)
   277fc:	e0fffc17 	ldw	r3,-16(fp)
   27800:	19000104 	addi	r4,r3,4
   27804:	e13ffc15 	stw	r4,-16(fp)
   27808:	18c00017 	ldw	r3,0(r3)
   2780c:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
   27810:	e0bffb17 	ldw	r2,-20(fp)
   27814:	10c00104 	addi	r3,r2,4
   27818:	e0fffb15 	stw	r3,-20(fp)
   2781c:	e0fffc17 	ldw	r3,-16(fp)
   27820:	19000104 	addi	r4,r3,4
   27824:	e13ffc15 	stw	r4,-16(fp)
   27828:	18c00017 	ldw	r3,0(r3)
   2782c:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
   27830:	e0bffb17 	ldw	r2,-20(fp)
   27834:	10c00104 	addi	r3,r2,4
   27838:	e0fffb15 	stw	r3,-20(fp)
   2783c:	e0fffc17 	ldw	r3,-16(fp)
   27840:	19000104 	addi	r4,r3,4
   27844:	e13ffc15 	stw	r4,-16(fp)
   27848:	18c00017 	ldw	r3,0(r3)
   2784c:	10c00015 	stw	r3,0(r2)
          len0 -= BIGBLOCKSIZE;
   27850:	e0bfff17 	ldw	r2,-4(fp)
   27854:	10bffc04 	addi	r2,r2,-16
   27858:	e0bfff15 	stw	r2,-4(fp)
    {
      aligned_dst = (long*)dst;
      aligned_src = (long*)src;

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
   2785c:	e0bfff17 	ldw	r2,-4(fp)
   27860:	10800428 	cmpgeui	r2,r2,16
   27864:	103fda1e 	bne	r2,zero,277d0 <__alt_data_end+0xfffe77d0>
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
   27868:	00000b06 	br	27898 <memcpy+0x124>
        {
          *aligned_dst++ = *aligned_src++;
   2786c:	e0bffb17 	ldw	r2,-20(fp)
   27870:	10c00104 	addi	r3,r2,4
   27874:	e0fffb15 	stw	r3,-20(fp)
   27878:	e0fffc17 	ldw	r3,-16(fp)
   2787c:	19000104 	addi	r4,r3,4
   27880:	e13ffc15 	stw	r4,-16(fp)
   27884:	18c00017 	ldw	r3,0(r3)
   27888:	10c00015 	stw	r3,0(r2)
          len0 -= LITTLEBLOCKSIZE;
   2788c:	e0bfff17 	ldw	r2,-4(fp)
   27890:	10bfff04 	addi	r2,r2,-4
   27894:	e0bfff15 	stw	r2,-4(fp)
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
   27898:	e0bfff17 	ldw	r2,-4(fp)
   2789c:	10800128 	cmpgeui	r2,r2,4
   278a0:	103ff21e 	bne	r2,zero,2786c <__alt_data_end+0xfffe786c>
          *aligned_dst++ = *aligned_src++;
          len0 -= LITTLEBLOCKSIZE;
        }

       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
   278a4:	e0bffb17 	ldw	r2,-20(fp)
   278a8:	e0bff915 	stw	r2,-28(fp)
      src = (char*)aligned_src;
   278ac:	e0bffc17 	ldw	r2,-16(fp)
   278b0:	e0bffa15 	stw	r2,-24(fp)
    }

  while (len0--)
   278b4:	00000806 	br	278d8 <memcpy+0x164>
    *dst++ = *src++;
   278b8:	e0bff917 	ldw	r2,-28(fp)
   278bc:	10c00044 	addi	r3,r2,1
   278c0:	e0fff915 	stw	r3,-28(fp)
   278c4:	e0fffa17 	ldw	r3,-24(fp)
   278c8:	19000044 	addi	r4,r3,1
   278cc:	e13ffa15 	stw	r4,-24(fp)
   278d0:	18c00003 	ldbu	r3,0(r3)
   278d4:	10c00005 	stb	r3,0(r2)
       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
      src = (char*)aligned_src;
    }

  while (len0--)
   278d8:	e0bfff17 	ldw	r2,-4(fp)
   278dc:	10ffffc4 	addi	r3,r2,-1
   278e0:	e0ffff15 	stw	r3,-4(fp)
   278e4:	103ff41e 	bne	r2,zero,278b8 <__alt_data_end+0xfffe78b8>
    *dst++ = *src++;

  return dst0;
   278e8:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
   278ec:	e037883a 	mov	sp,fp
   278f0:	df000017 	ldw	fp,0(sp)
   278f4:	dec00104 	addi	sp,sp,4
   278f8:	f800283a 	ret

000278fc <memmove>:
__inhibit_loop_to_libcall
_DEFUN (memmove, (dst_void, src_void, length),
	_PTR dst_void _AND
	_CONST _PTR src_void _AND
	size_t length)
{
   278fc:	defff804 	addi	sp,sp,-32
   27900:	df000715 	stw	fp,28(sp)
   27904:	df000704 	addi	fp,sp,28
   27908:	e13ffd15 	stw	r4,-12(fp)
   2790c:	e17ffe15 	stw	r5,-8(fp)
   27910:	e1bfff15 	stw	r6,-4(fp)
	}
    }

  return dst_void;
#else
  char *dst = dst_void;
   27914:	e0bffd17 	ldw	r2,-12(fp)
   27918:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src_void;
   2791c:	e0bffe17 	ldw	r2,-8(fp)
   27920:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
   27924:	e0fffa17 	ldw	r3,-24(fp)
   27928:	e0bff917 	ldw	r2,-28(fp)
   2792c:	18801d2e 	bgeu	r3,r2,279a4 <memmove+0xa8>
   27930:	e0fffa17 	ldw	r3,-24(fp)
   27934:	e0bfff17 	ldw	r2,-4(fp)
   27938:	1885883a 	add	r2,r3,r2
   2793c:	e0fff917 	ldw	r3,-28(fp)
   27940:	1880182e 	bgeu	r3,r2,279a4 <memmove+0xa8>
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
   27944:	e0fffa17 	ldw	r3,-24(fp)
   27948:	e0bfff17 	ldw	r2,-4(fp)
   2794c:	1885883a 	add	r2,r3,r2
   27950:	e0bffa15 	stw	r2,-24(fp)
      dst += length;
   27954:	e0fff917 	ldw	r3,-28(fp)
   27958:	e0bfff17 	ldw	r2,-4(fp)
   2795c:	1885883a 	add	r2,r3,r2
   27960:	e0bff915 	stw	r2,-28(fp)
      while (length--)
   27964:	00000a06 	br	27990 <memmove+0x94>
	{
	  *--dst = *--src;
   27968:	e0bff917 	ldw	r2,-28(fp)
   2796c:	10bfffc4 	addi	r2,r2,-1
   27970:	e0bff915 	stw	r2,-28(fp)
   27974:	e0bffa17 	ldw	r2,-24(fp)
   27978:	10bfffc4 	addi	r2,r2,-1
   2797c:	e0bffa15 	stw	r2,-24(fp)
   27980:	e0bffa17 	ldw	r2,-24(fp)
   27984:	10c00003 	ldbu	r3,0(r2)
   27988:	e0bff917 	ldw	r2,-28(fp)
   2798c:	10c00005 	stb	r3,0(r2)
  if (src < dst && dst < src + length)
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
      dst += length;
      while (length--)
   27990:	e0bfff17 	ldw	r2,-4(fp)
   27994:	10ffffc4 	addi	r3,r2,-1
   27998:	e0ffff15 	stw	r3,-4(fp)
   2799c:	103ff21e 	bne	r2,zero,27968 <__alt_data_end+0xfffe7968>
  char *dst = dst_void;
  _CONST char *src = src_void;
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
   279a0:	00005306 	br	27af0 <memmove+0x1f4>
  else
    {
      /* Use optimizing algorithm for a non-destructive copy to closely 
         match memcpy. If the size is small or either SRC or DST is unaligned,
         then punt into the byte copy loop.  This should be rare.  */
      if (!TOO_SMALL(length) && !UNALIGNED (src, dst))
   279a4:	e0bfff17 	ldw	r2,-4(fp)
   279a8:	10800430 	cmpltui	r2,r2,16
   279ac:	10004c1e 	bne	r2,zero,27ae0 <memmove+0x1e4>
   279b0:	e0fffa17 	ldw	r3,-24(fp)
   279b4:	e0bff917 	ldw	r2,-28(fp)
   279b8:	1884b03a 	or	r2,r3,r2
   279bc:	108000cc 	andi	r2,r2,3
   279c0:	1000471e 	bne	r2,zero,27ae0 <memmove+0x1e4>
        {
          aligned_dst = (long*)dst;
   279c4:	e0bff917 	ldw	r2,-28(fp)
   279c8:	e0bffb15 	stw	r2,-20(fp)
          aligned_src = (long*)src;
   279cc:	e0bffa17 	ldw	r2,-24(fp)
   279d0:	e0bffc15 	stw	r2,-16(fp)

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
   279d4:	00002306 	br	27a64 <memmove+0x168>
            {
              *aligned_dst++ = *aligned_src++;
   279d8:	e0bffb17 	ldw	r2,-20(fp)
   279dc:	10c00104 	addi	r3,r2,4
   279e0:	e0fffb15 	stw	r3,-20(fp)
   279e4:	e0fffc17 	ldw	r3,-16(fp)
   279e8:	19000104 	addi	r4,r3,4
   279ec:	e13ffc15 	stw	r4,-16(fp)
   279f0:	18c00017 	ldw	r3,0(r3)
   279f4:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
   279f8:	e0bffb17 	ldw	r2,-20(fp)
   279fc:	10c00104 	addi	r3,r2,4
   27a00:	e0fffb15 	stw	r3,-20(fp)
   27a04:	e0fffc17 	ldw	r3,-16(fp)
   27a08:	19000104 	addi	r4,r3,4
   27a0c:	e13ffc15 	stw	r4,-16(fp)
   27a10:	18c00017 	ldw	r3,0(r3)
   27a14:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
   27a18:	e0bffb17 	ldw	r2,-20(fp)
   27a1c:	10c00104 	addi	r3,r2,4
   27a20:	e0fffb15 	stw	r3,-20(fp)
   27a24:	e0fffc17 	ldw	r3,-16(fp)
   27a28:	19000104 	addi	r4,r3,4
   27a2c:	e13ffc15 	stw	r4,-16(fp)
   27a30:	18c00017 	ldw	r3,0(r3)
   27a34:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
   27a38:	e0bffb17 	ldw	r2,-20(fp)
   27a3c:	10c00104 	addi	r3,r2,4
   27a40:	e0fffb15 	stw	r3,-20(fp)
   27a44:	e0fffc17 	ldw	r3,-16(fp)
   27a48:	19000104 	addi	r4,r3,4
   27a4c:	e13ffc15 	stw	r4,-16(fp)
   27a50:	18c00017 	ldw	r3,0(r3)
   27a54:	10c00015 	stw	r3,0(r2)
              length -= BIGBLOCKSIZE;
   27a58:	e0bfff17 	ldw	r2,-4(fp)
   27a5c:	10bffc04 	addi	r2,r2,-16
   27a60:	e0bfff15 	stw	r2,-4(fp)
        {
          aligned_dst = (long*)dst;
          aligned_src = (long*)src;

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
   27a64:	e0bfff17 	ldw	r2,-4(fp)
   27a68:	10800428 	cmpgeui	r2,r2,16
   27a6c:	103fda1e 	bne	r2,zero,279d8 <__alt_data_end+0xfffe79d8>
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
   27a70:	00000b06 	br	27aa0 <memmove+0x1a4>
            {
              *aligned_dst++ = *aligned_src++;
   27a74:	e0bffb17 	ldw	r2,-20(fp)
   27a78:	10c00104 	addi	r3,r2,4
   27a7c:	e0fffb15 	stw	r3,-20(fp)
   27a80:	e0fffc17 	ldw	r3,-16(fp)
   27a84:	19000104 	addi	r4,r3,4
   27a88:	e13ffc15 	stw	r4,-16(fp)
   27a8c:	18c00017 	ldw	r3,0(r3)
   27a90:	10c00015 	stw	r3,0(r2)
              length -= LITTLEBLOCKSIZE;
   27a94:	e0bfff17 	ldw	r2,-4(fp)
   27a98:	10bfff04 	addi	r2,r2,-4
   27a9c:	e0bfff15 	stw	r2,-4(fp)
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
   27aa0:	e0bfff17 	ldw	r2,-4(fp)
   27aa4:	10800128 	cmpgeui	r2,r2,4
   27aa8:	103ff21e 	bne	r2,zero,27a74 <__alt_data_end+0xfffe7a74>
              *aligned_dst++ = *aligned_src++;
              length -= LITTLEBLOCKSIZE;
            }

          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
   27aac:	e0bffb17 	ldw	r2,-20(fp)
   27ab0:	e0bff915 	stw	r2,-28(fp)
          src = (char*)aligned_src;
   27ab4:	e0bffc17 	ldw	r2,-16(fp)
   27ab8:	e0bffa15 	stw	r2,-24(fp)
        }

      while (length--)
   27abc:	00000806 	br	27ae0 <memmove+0x1e4>
        {
          *dst++ = *src++;
   27ac0:	e0bff917 	ldw	r2,-28(fp)
   27ac4:	10c00044 	addi	r3,r2,1
   27ac8:	e0fff915 	stw	r3,-28(fp)
   27acc:	e0fffa17 	ldw	r3,-24(fp)
   27ad0:	19000044 	addi	r4,r3,1
   27ad4:	e13ffa15 	stw	r4,-24(fp)
   27ad8:	18c00003 	ldbu	r3,0(r3)
   27adc:	10c00005 	stb	r3,0(r2)
          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
          src = (char*)aligned_src;
        }

      while (length--)
   27ae0:	e0bfff17 	ldw	r2,-4(fp)
   27ae4:	10ffffc4 	addi	r3,r2,-1
   27ae8:	e0ffff15 	stw	r3,-4(fp)
   27aec:	103ff41e 	bne	r2,zero,27ac0 <__alt_data_end+0xfffe7ac0>
        {
          *dst++ = *src++;
        }
    }

  return dst_void;
   27af0:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
   27af4:	e037883a 	mov	sp,fp
   27af8:	df000017 	ldw	fp,0(sp)
   27afc:	dec00104 	addi	sp,sp,4
   27b00:	f800283a 	ret

00027b04 <memset>:
__inhibit_loop_to_libcall
_DEFUN (memset, (m, c, n),
	_PTR m _AND
	int c _AND
	size_t n)
{
   27b04:	defff704 	addi	sp,sp,-36
   27b08:	df000815 	stw	fp,32(sp)
   27b0c:	df000804 	addi	fp,sp,32
   27b10:	e13ffd15 	stw	r4,-12(fp)
   27b14:	e17ffe15 	stw	r5,-8(fp)
   27b18:	e1bfff15 	stw	r6,-4(fp)
  char *s = (char *) m;
   27b1c:	e0bffd17 	ldw	r2,-12(fp)
   27b20:	e0bff815 	stw	r2,-32(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned int i;
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
   27b24:	e0bffe17 	ldw	r2,-8(fp)
   27b28:	10803fcc 	andi	r2,r2,255
   27b2c:	e0bffc15 	stw	r2,-16(fp)
				   unsigned variable.  */

  while (UNALIGNED (s))
   27b30:	00000c06 	br	27b64 <memset+0x60>
    {
      if (n--)
   27b34:	e0bfff17 	ldw	r2,-4(fp)
   27b38:	10ffffc4 	addi	r3,r2,-1
   27b3c:	e0ffff15 	stw	r3,-4(fp)
   27b40:	10000626 	beq	r2,zero,27b5c <memset+0x58>
        *s++ = (char) c;
   27b44:	e0bff817 	ldw	r2,-32(fp)
   27b48:	10c00044 	addi	r3,r2,1
   27b4c:	e0fff815 	stw	r3,-32(fp)
   27b50:	e0fffe17 	ldw	r3,-8(fp)
   27b54:	10c00005 	stb	r3,0(r2)
   27b58:	00000206 	br	27b64 <memset+0x60>
      else
        return m;
   27b5c:	e0bffd17 	ldw	r2,-12(fp)
   27b60:	00005506 	br	27cb8 <memset+0x1b4>
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
				   unsigned variable.  */

  while (UNALIGNED (s))
   27b64:	e0bff817 	ldw	r2,-32(fp)
   27b68:	108000cc 	andi	r2,r2,3
   27b6c:	103ff11e 	bne	r2,zero,27b34 <__alt_data_end+0xfffe7b34>
        *s++ = (char) c;
      else
        return m;
    }

  if (!TOO_SMALL (n))
   27b70:	e0bfff17 	ldw	r2,-4(fp)
   27b74:	10800130 	cmpltui	r2,r2,4
   27b78:	10004a1e 	bne	r2,zero,27ca4 <memset+0x1a0>
    {
      /* If we get this far, we know that n is large and s is word-aligned. */
      aligned_addr = (unsigned long *) s;
   27b7c:	e0bff817 	ldw	r2,-32(fp)
   27b80:	e0bffb15 	stw	r2,-20(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
   27b84:	e0bffc17 	ldw	r2,-16(fp)
   27b88:	1006923a 	slli	r3,r2,8
   27b8c:	e0bffc17 	ldw	r2,-16(fp)
   27b90:	1884b03a 	or	r2,r3,r2
   27b94:	e0bffa15 	stw	r2,-24(fp)
      buffer |= (buffer << 16);
   27b98:	e0bffa17 	ldw	r2,-24(fp)
   27b9c:	1004943a 	slli	r2,r2,16
   27ba0:	e0fffa17 	ldw	r3,-24(fp)
   27ba4:	1884b03a 	or	r2,r3,r2
   27ba8:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
   27bac:	00800804 	movi	r2,32
   27bb0:	e0bff915 	stw	r2,-28(fp)
   27bb4:	00000906 	br	27bdc <memset+0xd8>
        buffer = (buffer << i) | buffer;
   27bb8:	e0fffa17 	ldw	r3,-24(fp)
   27bbc:	e0bff917 	ldw	r2,-28(fp)
   27bc0:	1884983a 	sll	r2,r3,r2
   27bc4:	e0fffa17 	ldw	r3,-24(fp)
   27bc8:	1884b03a 	or	r2,r3,r2
   27bcc:	e0bffa15 	stw	r2,-24(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
   27bd0:	e0bff917 	ldw	r2,-28(fp)
   27bd4:	1085883a 	add	r2,r2,r2
   27bd8:	e0bff915 	stw	r2,-28(fp)
   27bdc:	e0bff917 	ldw	r2,-28(fp)
   27be0:	10800830 	cmpltui	r2,r2,32
   27be4:	103ff41e 	bne	r2,zero,27bb8 <__alt_data_end+0xfffe7bb8>
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
   27be8:	00001706 	br	27c48 <memset+0x144>
        {
          *aligned_addr++ = buffer;
   27bec:	e0bffb17 	ldw	r2,-20(fp)
   27bf0:	10c00104 	addi	r3,r2,4
   27bf4:	e0fffb15 	stw	r3,-20(fp)
   27bf8:	e0fffa17 	ldw	r3,-24(fp)
   27bfc:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
   27c00:	e0bffb17 	ldw	r2,-20(fp)
   27c04:	10c00104 	addi	r3,r2,4
   27c08:	e0fffb15 	stw	r3,-20(fp)
   27c0c:	e0fffa17 	ldw	r3,-24(fp)
   27c10:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
   27c14:	e0bffb17 	ldw	r2,-20(fp)
   27c18:	10c00104 	addi	r3,r2,4
   27c1c:	e0fffb15 	stw	r3,-20(fp)
   27c20:	e0fffa17 	ldw	r3,-24(fp)
   27c24:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
   27c28:	e0bffb17 	ldw	r2,-20(fp)
   27c2c:	10c00104 	addi	r3,r2,4
   27c30:	e0fffb15 	stw	r3,-20(fp)
   27c34:	e0fffa17 	ldw	r3,-24(fp)
   27c38:	10c00015 	stw	r3,0(r2)
          n -= 4*LBLOCKSIZE;
   27c3c:	e0bfff17 	ldw	r2,-4(fp)
   27c40:	10bffc04 	addi	r2,r2,-16
   27c44:	e0bfff15 	stw	r2,-4(fp)
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
   27c48:	e0bfff17 	ldw	r2,-4(fp)
   27c4c:	10800428 	cmpgeui	r2,r2,16
   27c50:	103fe61e 	bne	r2,zero,27bec <__alt_data_end+0xfffe7bec>
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
   27c54:	00000806 	br	27c78 <memset+0x174>
        {
          *aligned_addr++ = buffer;
   27c58:	e0bffb17 	ldw	r2,-20(fp)
   27c5c:	10c00104 	addi	r3,r2,4
   27c60:	e0fffb15 	stw	r3,-20(fp)
   27c64:	e0fffa17 	ldw	r3,-24(fp)
   27c68:	10c00015 	stw	r3,0(r2)
          n -= LBLOCKSIZE;
   27c6c:	e0bfff17 	ldw	r2,-4(fp)
   27c70:	10bfff04 	addi	r2,r2,-4
   27c74:	e0bfff15 	stw	r2,-4(fp)
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
   27c78:	e0bfff17 	ldw	r2,-4(fp)
   27c7c:	10800128 	cmpgeui	r2,r2,4
   27c80:	103ff51e 	bne	r2,zero,27c58 <__alt_data_end+0xfffe7c58>
        {
          *aligned_addr++ = buffer;
          n -= LBLOCKSIZE;
        }
      /* Pick up the remainder with a bytewise loop.  */
      s = (char*)aligned_addr;
   27c84:	e0bffb17 	ldw	r2,-20(fp)
   27c88:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
   27c8c:	00000506 	br	27ca4 <memset+0x1a0>
    *s++ = (char) c;
   27c90:	e0bff817 	ldw	r2,-32(fp)
   27c94:	10c00044 	addi	r3,r2,1
   27c98:	e0fff815 	stw	r3,-32(fp)
   27c9c:	e0fffe17 	ldw	r3,-8(fp)
   27ca0:	10c00005 	stb	r3,0(r2)
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
   27ca4:	e0bfff17 	ldw	r2,-4(fp)
   27ca8:	10ffffc4 	addi	r3,r2,-1
   27cac:	e0ffff15 	stw	r3,-4(fp)
   27cb0:	103ff71e 	bne	r2,zero,27c90 <__alt_data_end+0xfffe7c90>
    *s++ = (char) c;

  return m;
   27cb4:	e0bffd17 	ldw	r2,-12(fp)
}
   27cb8:	e037883a 	mov	sp,fp
   27cbc:	df000017 	ldw	fp,0(sp)
   27cc0:	dec00104 	addi	sp,sp,4
   27cc4:	f800283a 	ret

00027cc8 <_Balloc>:
#define _Kmax 15
*/

_Bigint *
_DEFUN (Balloc, (ptr, k), struct _reent *ptr _AND int k)
{
   27cc8:	defffa04 	addi	sp,sp,-24
   27ccc:	dfc00515 	stw	ra,20(sp)
   27cd0:	df000415 	stw	fp,16(sp)
   27cd4:	df000404 	addi	fp,sp,16
   27cd8:	e13ffe15 	stw	r4,-8(fp)
   27cdc:	e17fff15 	stw	r5,-4(fp)
  int x;
  _Bigint *rv ;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_FREELIST(ptr) == NULL)
   27ce0:	e0bffe17 	ldw	r2,-8(fp)
   27ce4:	10801317 	ldw	r2,76(r2)
   27ce8:	10000c1e 	bne	r2,zero,27d1c <_Balloc+0x54>
    {
      /* Allocate a list of pointers to the mprec objects */
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
   27cec:	01800844 	movi	r6,33
   27cf0:	01400104 	movi	r5,4
   27cf4:	e13ffe17 	ldw	r4,-8(fp)
   27cf8:	002bf480 	call	2bf48 <_calloc_r>
   27cfc:	1007883a 	mov	r3,r2
   27d00:	e0bffe17 	ldw	r2,-8(fp)
   27d04:	10c01315 	stw	r3,76(r2)
						      sizeof (struct _Bigint *),
						      _Kmax + 1);
      if (_REENT_MP_FREELIST(ptr) == NULL)
   27d08:	e0bffe17 	ldw	r2,-8(fp)
   27d0c:	10801317 	ldw	r2,76(r2)
   27d10:	1000021e 	bne	r2,zero,27d1c <_Balloc+0x54>
	{
	  return NULL;
   27d14:	0005883a 	mov	r2,zero
   27d18:	00003206 	br	27de4 <_Balloc+0x11c>
	}
    }

  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
   27d1c:	e0bffe17 	ldw	r2,-8(fp)
   27d20:	10c01317 	ldw	r3,76(r2)
   27d24:	e0bfff17 	ldw	r2,-4(fp)
   27d28:	1085883a 	add	r2,r2,r2
   27d2c:	1085883a 	add	r2,r2,r2
   27d30:	1885883a 	add	r2,r3,r2
   27d34:	10800017 	ldw	r2,0(r2)
   27d38:	e0bffc15 	stw	r2,-16(fp)
   27d3c:	e0bffc17 	ldw	r2,-16(fp)
   27d40:	10000a26 	beq	r2,zero,27d6c <_Balloc+0xa4>
    {
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
   27d44:	e0bffe17 	ldw	r2,-8(fp)
   27d48:	10c01317 	ldw	r3,76(r2)
   27d4c:	e0bfff17 	ldw	r2,-4(fp)
   27d50:	1085883a 	add	r2,r2,r2
   27d54:	1085883a 	add	r2,r2,r2
   27d58:	1885883a 	add	r2,r3,r2
   27d5c:	e0fffc17 	ldw	r3,-16(fp)
   27d60:	18c00017 	ldw	r3,0(r3)
   27d64:	10c00015 	stw	r3,0(r2)
   27d68:	00001706 	br	27dc8 <_Balloc+0x100>
    }
  else
    {
      x = 1 << k;
   27d6c:	00c00044 	movi	r3,1
   27d70:	e0bfff17 	ldw	r2,-4(fp)
   27d74:	1884983a 	sll	r2,r3,r2
   27d78:	e0bffd15 	stw	r2,-12(fp)
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
				  1,
				  sizeof (_Bigint) +
   27d7c:	e0bffd17 	ldw	r2,-12(fp)
    }
  else
    {
      x = 1 << k;
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
   27d80:	10800144 	addi	r2,r2,5
   27d84:	1085883a 	add	r2,r2,r2
   27d88:	1085883a 	add	r2,r2,r2
   27d8c:	100d883a 	mov	r6,r2
   27d90:	01400044 	movi	r5,1
   27d94:	e13ffe17 	ldw	r4,-8(fp)
   27d98:	002bf480 	call	2bf48 <_calloc_r>
   27d9c:	e0bffc15 	stw	r2,-16(fp)
				  1,
				  sizeof (_Bigint) +
				  (x-1) * sizeof(rv->_x));
      if (rv == NULL) return NULL;
   27da0:	e0bffc17 	ldw	r2,-16(fp)
   27da4:	1000021e 	bne	r2,zero,27db0 <_Balloc+0xe8>
   27da8:	0005883a 	mov	r2,zero
   27dac:	00000d06 	br	27de4 <_Balloc+0x11c>
      rv->_k = k;
   27db0:	e0bffc17 	ldw	r2,-16(fp)
   27db4:	e0ffff17 	ldw	r3,-4(fp)
   27db8:	10c00115 	stw	r3,4(r2)
      rv->_maxwds = x;
   27dbc:	e0bffc17 	ldw	r2,-16(fp)
   27dc0:	e0fffd17 	ldw	r3,-12(fp)
   27dc4:	10c00215 	stw	r3,8(r2)
    }
  rv->_sign = rv->_wds = 0;
   27dc8:	e0bffc17 	ldw	r2,-16(fp)
   27dcc:	10000415 	stw	zero,16(r2)
   27dd0:	e0bffc17 	ldw	r2,-16(fp)
   27dd4:	10c00417 	ldw	r3,16(r2)
   27dd8:	e0bffc17 	ldw	r2,-16(fp)
   27ddc:	10c00315 	stw	r3,12(r2)
  return rv;
   27de0:	e0bffc17 	ldw	r2,-16(fp)
}
   27de4:	e037883a 	mov	sp,fp
   27de8:	dfc00117 	ldw	ra,4(sp)
   27dec:	df000017 	ldw	fp,0(sp)
   27df0:	dec00204 	addi	sp,sp,8
   27df4:	f800283a 	ret

00027df8 <_Bfree>:

void
_DEFUN (Bfree, (ptr, v), struct _reent *ptr _AND _Bigint * v)
{
   27df8:	defffd04 	addi	sp,sp,-12
   27dfc:	df000215 	stw	fp,8(sp)
   27e00:	df000204 	addi	fp,sp,8
   27e04:	e13ffe15 	stw	r4,-8(fp)
   27e08:	e17fff15 	stw	r5,-4(fp)
  _REENT_CHECK_MP(ptr);
  if (v)
   27e0c:	e0bfff17 	ldw	r2,-4(fp)
   27e10:	10001326 	beq	r2,zero,27e60 <_Bfree+0x68>
    {
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
   27e14:	e0bffe17 	ldw	r2,-8(fp)
   27e18:	10c01317 	ldw	r3,76(r2)
   27e1c:	e0bfff17 	ldw	r2,-4(fp)
   27e20:	10800117 	ldw	r2,4(r2)
   27e24:	1085883a 	add	r2,r2,r2
   27e28:	1085883a 	add	r2,r2,r2
   27e2c:	1885883a 	add	r2,r3,r2
   27e30:	10c00017 	ldw	r3,0(r2)
   27e34:	e0bfff17 	ldw	r2,-4(fp)
   27e38:	10c00015 	stw	r3,0(r2)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
   27e3c:	e0bffe17 	ldw	r2,-8(fp)
   27e40:	10c01317 	ldw	r3,76(r2)
   27e44:	e0bfff17 	ldw	r2,-4(fp)
   27e48:	10800117 	ldw	r2,4(r2)
   27e4c:	1085883a 	add	r2,r2,r2
   27e50:	1085883a 	add	r2,r2,r2
   27e54:	1885883a 	add	r2,r3,r2
   27e58:	e0ffff17 	ldw	r3,-4(fp)
   27e5c:	10c00015 	stw	r3,0(r2)
    }
}
   27e60:	0001883a 	nop
   27e64:	e037883a 	mov	sp,fp
   27e68:	df000017 	ldw	fp,0(sp)
   27e6c:	dec00104 	addi	sp,sp,4
   27e70:	f800283a 	ret

00027e74 <__multadd>:
_DEFUN (multadd, (ptr, b, m, a),
	struct _reent *ptr _AND
	_Bigint * b _AND
	int m _AND
	int a)
{
   27e74:	defff304 	addi	sp,sp,-52
   27e78:	dfc00c15 	stw	ra,48(sp)
   27e7c:	df000b15 	stw	fp,44(sp)
   27e80:	df000b04 	addi	fp,sp,44
   27e84:	e13ffc15 	stw	r4,-16(fp)
   27e88:	e17ffd15 	stw	r5,-12(fp)
   27e8c:	e1bffe15 	stw	r6,-8(fp)
   27e90:	e1ffff15 	stw	r7,-4(fp)
#ifdef Pack_32
  __ULong xi, z;
#endif
  _Bigint *b1;

  wds = b->_wds;
   27e94:	e0bffd17 	ldw	r2,-12(fp)
   27e98:	10800417 	ldw	r2,16(r2)
   27e9c:	e0bff715 	stw	r2,-36(fp)
  x = b->_x;
   27ea0:	e0bffd17 	ldw	r2,-12(fp)
   27ea4:	10800504 	addi	r2,r2,20
   27ea8:	e0bff615 	stw	r2,-40(fp)
  i = 0;
   27eac:	e03ff515 	stw	zero,-44(fp)
  do
    {
#ifdef Pack_32
      xi = *x;
   27eb0:	e0bff617 	ldw	r2,-40(fp)
   27eb4:	10800017 	ldw	r2,0(r2)
   27eb8:	e0bff815 	stw	r2,-32(fp)
      y = (xi & 0xffff) * m + a;
   27ebc:	e0bff817 	ldw	r2,-32(fp)
   27ec0:	10ffffcc 	andi	r3,r2,65535
   27ec4:	e0bffe17 	ldw	r2,-8(fp)
   27ec8:	1887383a 	mul	r3,r3,r2
   27ecc:	e0bfff17 	ldw	r2,-4(fp)
   27ed0:	1885883a 	add	r2,r3,r2
   27ed4:	e0bff915 	stw	r2,-28(fp)
      z = (xi >> 16) * m + (y >> 16);
   27ed8:	e0bff817 	ldw	r2,-32(fp)
   27edc:	1006d43a 	srli	r3,r2,16
   27ee0:	e0bffe17 	ldw	r2,-8(fp)
   27ee4:	1887383a 	mul	r3,r3,r2
   27ee8:	e0bff917 	ldw	r2,-28(fp)
   27eec:	1004d43a 	srli	r2,r2,16
   27ef0:	1885883a 	add	r2,r3,r2
   27ef4:	e0bffa15 	stw	r2,-24(fp)
      a = (int) (z >> 16);
   27ef8:	e0bffa17 	ldw	r2,-24(fp)
   27efc:	1004d43a 	srli	r2,r2,16
   27f00:	e0bfff15 	stw	r2,-4(fp)
      *x++ = (z << 16) + (y & 0xffff);
   27f04:	e0bff617 	ldw	r2,-40(fp)
   27f08:	10c00104 	addi	r3,r2,4
   27f0c:	e0fff615 	stw	r3,-40(fp)
   27f10:	e0fffa17 	ldw	r3,-24(fp)
   27f14:	1808943a 	slli	r4,r3,16
   27f18:	e0fff917 	ldw	r3,-28(fp)
   27f1c:	18ffffcc 	andi	r3,r3,65535
   27f20:	20c7883a 	add	r3,r4,r3
   27f24:	10c00015 	stw	r3,0(r2)
      y = *x * m + a;
      a = (int) (y >> 16);
      *x++ = y & 0xffff;
#endif
    }
  while (++i < wds);
   27f28:	e0bff517 	ldw	r2,-44(fp)
   27f2c:	10800044 	addi	r2,r2,1
   27f30:	e0bff515 	stw	r2,-44(fp)
   27f34:	e0fff517 	ldw	r3,-44(fp)
   27f38:	e0bff717 	ldw	r2,-36(fp)
   27f3c:	18bfdc16 	blt	r3,r2,27eb0 <__alt_data_end+0xfffe7eb0>
  if (a)
   27f40:	e0bfff17 	ldw	r2,-4(fp)
   27f44:	10002a26 	beq	r2,zero,27ff0 <__multadd+0x17c>
    {
      if (wds >= b->_maxwds)
   27f48:	e0bffd17 	ldw	r2,-12(fp)
   27f4c:	10800217 	ldw	r2,8(r2)
   27f50:	e0fff717 	ldw	r3,-36(fp)
   27f54:	18801916 	blt	r3,r2,27fbc <__multadd+0x148>
	{
	  b1 = Balloc (ptr, b->_k + 1);
   27f58:	e0bffd17 	ldw	r2,-12(fp)
   27f5c:	10800117 	ldw	r2,4(r2)
   27f60:	10800044 	addi	r2,r2,1
   27f64:	100b883a 	mov	r5,r2
   27f68:	e13ffc17 	ldw	r4,-16(fp)
   27f6c:	0027cc80 	call	27cc8 <_Balloc>
   27f70:	e0bffb15 	stw	r2,-20(fp)
	  Bcopy (b1, b);
   27f74:	e0bffb17 	ldw	r2,-20(fp)
   27f78:	10c00304 	addi	r3,r2,12
   27f7c:	e0bffd17 	ldw	r2,-12(fp)
   27f80:	11000304 	addi	r4,r2,12
   27f84:	e0bffd17 	ldw	r2,-12(fp)
   27f88:	10800417 	ldw	r2,16(r2)
   27f8c:	10800084 	addi	r2,r2,2
   27f90:	1085883a 	add	r2,r2,r2
   27f94:	1085883a 	add	r2,r2,r2
   27f98:	100d883a 	mov	r6,r2
   27f9c:	200b883a 	mov	r5,r4
   27fa0:	1809883a 	mov	r4,r3
   27fa4:	00277740 	call	27774 <memcpy>
	  Bfree (ptr, b);
   27fa8:	e17ffd17 	ldw	r5,-12(fp)
   27fac:	e13ffc17 	ldw	r4,-16(fp)
   27fb0:	0027df80 	call	27df8 <_Bfree>
	  b = b1;
   27fb4:	e0bffb17 	ldw	r2,-20(fp)
   27fb8:	e0bffd15 	stw	r2,-12(fp)
	}
      b->_x[wds++] = a;
   27fbc:	e0bff717 	ldw	r2,-36(fp)
   27fc0:	10c00044 	addi	r3,r2,1
   27fc4:	e0fff715 	stw	r3,-36(fp)
   27fc8:	e0ffff17 	ldw	r3,-4(fp)
   27fcc:	e13ffd17 	ldw	r4,-12(fp)
   27fd0:	10800144 	addi	r2,r2,5
   27fd4:	1085883a 	add	r2,r2,r2
   27fd8:	1085883a 	add	r2,r2,r2
   27fdc:	2085883a 	add	r2,r4,r2
   27fe0:	10c00015 	stw	r3,0(r2)
      b->_wds = wds;
   27fe4:	e0bffd17 	ldw	r2,-12(fp)
   27fe8:	e0fff717 	ldw	r3,-36(fp)
   27fec:	10c00415 	stw	r3,16(r2)
    }
  return b;
   27ff0:	e0bffd17 	ldw	r2,-12(fp)
}
   27ff4:	e037883a 	mov	sp,fp
   27ff8:	dfc00117 	ldw	ra,4(sp)
   27ffc:	df000017 	ldw	fp,0(sp)
   28000:	dec00204 	addi	sp,sp,8
   28004:	f800283a 	ret

00028008 <__s2b>:
	struct _reent * ptr _AND
	_CONST char *s _AND
	int nd0 _AND
	int nd _AND
	__ULong y9)
{
   28008:	defff504 	addi	sp,sp,-44
   2800c:	dfc00a15 	stw	ra,40(sp)
   28010:	df000915 	stw	fp,36(sp)
   28014:	df000904 	addi	fp,sp,36
   28018:	e13ffc15 	stw	r4,-16(fp)
   2801c:	e17ffd15 	stw	r5,-12(fp)
   28020:	e1bffe15 	stw	r6,-8(fp)
   28024:	e1ffff15 	stw	r7,-4(fp)
  _Bigint *b;
  int i, k;
  __Long x, y;

  x = (nd + 8) / 9;
   28028:	e0bfff17 	ldw	r2,-4(fp)
   2802c:	10c00204 	addi	r3,r2,8
   28030:	00800244 	movi	r2,9
   28034:	1885283a 	div	r2,r3,r2
   28038:	e0bffb15 	stw	r2,-20(fp)
  for (k = 0, y = 1; x > y; y <<= 1, k++);
   2803c:	e03ff915 	stw	zero,-28(fp)
   28040:	00800044 	movi	r2,1
   28044:	e0bffa15 	stw	r2,-24(fp)
   28048:	00000606 	br	28064 <__s2b+0x5c>
   2804c:	e0bffa17 	ldw	r2,-24(fp)
   28050:	1085883a 	add	r2,r2,r2
   28054:	e0bffa15 	stw	r2,-24(fp)
   28058:	e0bff917 	ldw	r2,-28(fp)
   2805c:	10800044 	addi	r2,r2,1
   28060:	e0bff915 	stw	r2,-28(fp)
   28064:	e0bffb17 	ldw	r2,-20(fp)
   28068:	e0fffa17 	ldw	r3,-24(fp)
   2806c:	18bff716 	blt	r3,r2,2804c <__alt_data_end+0xfffe804c>
#ifdef Pack_32
  b = Balloc (ptr, k);
   28070:	e17ff917 	ldw	r5,-28(fp)
   28074:	e13ffc17 	ldw	r4,-16(fp)
   28078:	0027cc80 	call	27cc8 <_Balloc>
   2807c:	e0bff715 	stw	r2,-36(fp)
  b->_x[0] = y9;
   28080:	e0bff717 	ldw	r2,-36(fp)
   28084:	e0c00217 	ldw	r3,8(fp)
   28088:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
   2808c:	e0bff717 	ldw	r2,-36(fp)
   28090:	00c00044 	movi	r3,1
   28094:	10c00415 	stw	r3,16(r2)
  b = Balloc (ptr, k + 1);
  b->_x[0] = y9 & 0xffff;
  b->_wds = (b->_x[1] = y9 >> 16) ? 2 : 1;
#endif

  i = 9;
   28098:	00800244 	movi	r2,9
   2809c:	e0bff815 	stw	r2,-32(fp)
  if (9 < nd0)
   280a0:	e0bffe17 	ldw	r2,-8(fp)
   280a4:	10800290 	cmplti	r2,r2,10
   280a8:	10001b1e 	bne	r2,zero,28118 <__s2b+0x110>
    {
      s += 9;
   280ac:	e0bffd17 	ldw	r2,-12(fp)
   280b0:	10800244 	addi	r2,r2,9
   280b4:	e0bffd15 	stw	r2,-12(fp)
      do
	b = multadd (ptr, b, 10, *s++ - '0');
   280b8:	e0bffd17 	ldw	r2,-12(fp)
   280bc:	10c00044 	addi	r3,r2,1
   280c0:	e0fffd15 	stw	r3,-12(fp)
   280c4:	10800003 	ldbu	r2,0(r2)
   280c8:	10803fcc 	andi	r2,r2,255
   280cc:	1080201c 	xori	r2,r2,128
   280d0:	10bfe004 	addi	r2,r2,-128
   280d4:	10bff404 	addi	r2,r2,-48
   280d8:	100f883a 	mov	r7,r2
   280dc:	01800284 	movi	r6,10
   280e0:	e17ff717 	ldw	r5,-36(fp)
   280e4:	e13ffc17 	ldw	r4,-16(fp)
   280e8:	0027e740 	call	27e74 <__multadd>
   280ec:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
   280f0:	e0bff817 	ldw	r2,-32(fp)
   280f4:	10800044 	addi	r2,r2,1
   280f8:	e0bff815 	stw	r2,-32(fp)
   280fc:	e0fff817 	ldw	r3,-32(fp)
   28100:	e0bffe17 	ldw	r2,-8(fp)
   28104:	18bfec16 	blt	r3,r2,280b8 <__alt_data_end+0xfffe80b8>
      s++;
   28108:	e0bffd17 	ldw	r2,-12(fp)
   2810c:	10800044 	addi	r2,r2,1
   28110:	e0bffd15 	stw	r2,-12(fp)
   28114:	00001506 	br	2816c <__s2b+0x164>
    }
  else
    s += 10;
   28118:	e0bffd17 	ldw	r2,-12(fp)
   2811c:	10800284 	addi	r2,r2,10
   28120:	e0bffd15 	stw	r2,-12(fp)
  for (; i < nd; i++)
   28124:	00001106 	br	2816c <__s2b+0x164>
    b = multadd (ptr, b, 10, *s++ - '0');
   28128:	e0bffd17 	ldw	r2,-12(fp)
   2812c:	10c00044 	addi	r3,r2,1
   28130:	e0fffd15 	stw	r3,-12(fp)
   28134:	10800003 	ldbu	r2,0(r2)
   28138:	10803fcc 	andi	r2,r2,255
   2813c:	1080201c 	xori	r2,r2,128
   28140:	10bfe004 	addi	r2,r2,-128
   28144:	10bff404 	addi	r2,r2,-48
   28148:	100f883a 	mov	r7,r2
   2814c:	01800284 	movi	r6,10
   28150:	e17ff717 	ldw	r5,-36(fp)
   28154:	e13ffc17 	ldw	r4,-16(fp)
   28158:	0027e740 	call	27e74 <__multadd>
   2815c:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
      s++;
    }
  else
    s += 10;
  for (; i < nd; i++)
   28160:	e0bff817 	ldw	r2,-32(fp)
   28164:	10800044 	addi	r2,r2,1
   28168:	e0bff815 	stw	r2,-32(fp)
   2816c:	e0fff817 	ldw	r3,-32(fp)
   28170:	e0bfff17 	ldw	r2,-4(fp)
   28174:	18bfec16 	blt	r3,r2,28128 <__alt_data_end+0xfffe8128>
    b = multadd (ptr, b, 10, *s++ - '0');
  return b;
   28178:	e0bff717 	ldw	r2,-36(fp)
}
   2817c:	e037883a 	mov	sp,fp
   28180:	dfc00117 	ldw	ra,4(sp)
   28184:	df000017 	ldw	fp,0(sp)
   28188:	dec00204 	addi	sp,sp,8
   2818c:	f800283a 	ret

00028190 <__hi0bits>:

int
_DEFUN (hi0bits,
	(x), register __ULong x)
{
   28190:	defffe04 	addi	sp,sp,-8
   28194:	df000115 	stw	fp,4(sp)
   28198:	dc000015 	stw	r16,0(sp)
   2819c:	df000104 	addi	fp,sp,4
   281a0:	2005883a 	mov	r2,r4
  register int k = 0;
   281a4:	0021883a 	mov	r16,zero

  if (!(x & 0xffff0000))
   281a8:	10ffffec 	andhi	r3,r2,65535
   281ac:	1800021e 	bne	r3,zero,281b8 <__hi0bits+0x28>
    {
      k = 16;
   281b0:	04000404 	movi	r16,16
      x <<= 16;
   281b4:	1004943a 	slli	r2,r2,16
    }
  if (!(x & 0xff000000))
   281b8:	10ffc02c 	andhi	r3,r2,65280
   281bc:	1800021e 	bne	r3,zero,281c8 <__hi0bits+0x38>
    {
      k += 8;
   281c0:	84000204 	addi	r16,r16,8
      x <<= 8;
   281c4:	1004923a 	slli	r2,r2,8
    }
  if (!(x & 0xf0000000))
   281c8:	10fc002c 	andhi	r3,r2,61440
   281cc:	1800021e 	bne	r3,zero,281d8 <__hi0bits+0x48>
    {
      k += 4;
   281d0:	84000104 	addi	r16,r16,4
      x <<= 4;
   281d4:	1004913a 	slli	r2,r2,4
    }
  if (!(x & 0xc0000000))
   281d8:	10f0002c 	andhi	r3,r2,49152
   281dc:	1800031e 	bne	r3,zero,281ec <__hi0bits+0x5c>
    {
      k += 2;
   281e0:	84000084 	addi	r16,r16,2
      x <<= 2;
   281e4:	1085883a 	add	r2,r2,r2
   281e8:	1085883a 	add	r2,r2,r2
    }
  if (!(x & 0x80000000))
   281ec:	1007883a 	mov	r3,r2
   281f0:	18000516 	blt	r3,zero,28208 <__hi0bits+0x78>
    {
      k++;
   281f4:	84000044 	addi	r16,r16,1
      if (!(x & 0x40000000))
   281f8:	1090002c 	andhi	r2,r2,16384
   281fc:	1000021e 	bne	r2,zero,28208 <__hi0bits+0x78>
	return 32;
   28200:	00800804 	movi	r2,32
   28204:	00000106 	br	2820c <__hi0bits+0x7c>
    }
  return k;
   28208:	8005883a 	mov	r2,r16
}
   2820c:	e6ffff04 	addi	sp,fp,-4
   28210:	df000117 	ldw	fp,4(sp)
   28214:	dc000017 	ldw	r16,0(sp)
   28218:	dec00204 	addi	sp,sp,8
   2821c:	f800283a 	ret

00028220 <__lo0bits>:

int
_DEFUN (lo0bits, (y), __ULong *y)
{
   28220:	defffc04 	addi	sp,sp,-16
   28224:	df000315 	stw	fp,12(sp)
   28228:	dc400215 	stw	r17,8(sp)
   2822c:	dc000115 	stw	r16,4(sp)
   28230:	df000304 	addi	fp,sp,12
   28234:	e13ffd15 	stw	r4,-12(fp)
  register int k;
  register __ULong x = *y;
   28238:	e0bffd17 	ldw	r2,-12(fp)
   2823c:	14000017 	ldw	r16,0(r2)

  if (x & 7)
   28240:	808001cc 	andi	r2,r16,7
   28244:	10001026 	beq	r2,zero,28288 <__lo0bits+0x68>
    {
      if (x & 1)
   28248:	8080004c 	andi	r2,r16,1
   2824c:	10000226 	beq	r2,zero,28258 <__lo0bits+0x38>
	return 0;
   28250:	0005883a 	mov	r2,zero
   28254:	00002706 	br	282f4 <__lo0bits+0xd4>
      if (x & 2)
   28258:	8080008c 	andi	r2,r16,2
   2825c:	10000526 	beq	r2,zero,28274 <__lo0bits+0x54>
	{
	  *y = x >> 1;
   28260:	8006d07a 	srli	r3,r16,1
   28264:	e0bffd17 	ldw	r2,-12(fp)
   28268:	10c00015 	stw	r3,0(r2)
	  return 1;
   2826c:	00800044 	movi	r2,1
   28270:	00002006 	br	282f4 <__lo0bits+0xd4>
	}
      *y = x >> 2;
   28274:	8006d0ba 	srli	r3,r16,2
   28278:	e0bffd17 	ldw	r2,-12(fp)
   2827c:	10c00015 	stw	r3,0(r2)
      return 2;
   28280:	00800084 	movi	r2,2
   28284:	00001b06 	br	282f4 <__lo0bits+0xd4>
    }
  k = 0;
   28288:	0023883a 	mov	r17,zero
  if (!(x & 0xffff))
   2828c:	80bfffcc 	andi	r2,r16,65535
   28290:	1000021e 	bne	r2,zero,2829c <__lo0bits+0x7c>
    {
      k = 16;
   28294:	04400404 	movi	r17,16
      x >>= 16;
   28298:	8020d43a 	srli	r16,r16,16
    }
  if (!(x & 0xff))
   2829c:	80803fcc 	andi	r2,r16,255
   282a0:	1000021e 	bne	r2,zero,282ac <__lo0bits+0x8c>
    {
      k += 8;
   282a4:	8c400204 	addi	r17,r17,8
      x >>= 8;
   282a8:	8020d23a 	srli	r16,r16,8
    }
  if (!(x & 0xf))
   282ac:	808003cc 	andi	r2,r16,15
   282b0:	1000021e 	bne	r2,zero,282bc <__lo0bits+0x9c>
    {
      k += 4;
   282b4:	8c400104 	addi	r17,r17,4
      x >>= 4;
   282b8:	8020d13a 	srli	r16,r16,4
    }
  if (!(x & 0x3))
   282bc:	808000cc 	andi	r2,r16,3
   282c0:	1000021e 	bne	r2,zero,282cc <__lo0bits+0xac>
    {
      k += 2;
   282c4:	8c400084 	addi	r17,r17,2
      x >>= 2;
   282c8:	8020d0ba 	srli	r16,r16,2
    }
  if (!(x & 1))
   282cc:	8080004c 	andi	r2,r16,1
   282d0:	1000051e 	bne	r2,zero,282e8 <__lo0bits+0xc8>
    {
      k++;
   282d4:	8c400044 	addi	r17,r17,1
      x >>= 1;
   282d8:	8020d07a 	srli	r16,r16,1
      if (!x & 1)
   282dc:	8000021e 	bne	r16,zero,282e8 <__lo0bits+0xc8>
	return 32;
   282e0:	00800804 	movi	r2,32
   282e4:	00000306 	br	282f4 <__lo0bits+0xd4>
    }
  *y = x;
   282e8:	e0bffd17 	ldw	r2,-12(fp)
   282ec:	14000015 	stw	r16,0(r2)
  return k;
   282f0:	8805883a 	mov	r2,r17
}
   282f4:	e6fffe04 	addi	sp,fp,-8
   282f8:	df000217 	ldw	fp,8(sp)
   282fc:	dc400117 	ldw	r17,4(sp)
   28300:	dc000017 	ldw	r16,0(sp)
   28304:	dec00304 	addi	sp,sp,12
   28308:	f800283a 	ret

0002830c <__i2b>:

_Bigint *
_DEFUN (i2b, (ptr, i), struct _reent * ptr _AND int i)
{
   2830c:	defffb04 	addi	sp,sp,-20
   28310:	dfc00415 	stw	ra,16(sp)
   28314:	df000315 	stw	fp,12(sp)
   28318:	df000304 	addi	fp,sp,12
   2831c:	e13ffe15 	stw	r4,-8(fp)
   28320:	e17fff15 	stw	r5,-4(fp)
  _Bigint *b;

  b = Balloc (ptr, 1);
   28324:	01400044 	movi	r5,1
   28328:	e13ffe17 	ldw	r4,-8(fp)
   2832c:	0027cc80 	call	27cc8 <_Balloc>
   28330:	e0bffd15 	stw	r2,-12(fp)
  b->_x[0] = i;
   28334:	e0ffff17 	ldw	r3,-4(fp)
   28338:	e0bffd17 	ldw	r2,-12(fp)
   2833c:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
   28340:	e0bffd17 	ldw	r2,-12(fp)
   28344:	00c00044 	movi	r3,1
   28348:	10c00415 	stw	r3,16(r2)
  return b;
   2834c:	e0bffd17 	ldw	r2,-12(fp)
}
   28350:	e037883a 	mov	sp,fp
   28354:	dfc00117 	ldw	ra,4(sp)
   28358:	df000017 	ldw	fp,0(sp)
   2835c:	dec00204 	addi	sp,sp,8
   28360:	f800283a 	ret

00028364 <__multiply>:

_Bigint *
_DEFUN (mult, (ptr, a, b), struct _reent * ptr _AND _Bigint * a _AND _Bigint * b)
{
   28364:	deffeb04 	addi	sp,sp,-84
   28368:	dfc01415 	stw	ra,80(sp)
   2836c:	df001315 	stw	fp,76(sp)
   28370:	df001304 	addi	fp,sp,76
   28374:	e13ffd15 	stw	r4,-12(fp)
   28378:	e17ffe15 	stw	r5,-8(fp)
   2837c:	e1bfff15 	stw	r6,-4(fp)
  __ULong *x, *xa, *xae, *xb, *xbe, *xc, *xc0;
#ifdef Pack_32
  __ULong z2;
#endif

  if (a->_wds < b->_wds)
   28380:	e0bffe17 	ldw	r2,-8(fp)
   28384:	10c00417 	ldw	r3,16(r2)
   28388:	e0bfff17 	ldw	r2,-4(fp)
   2838c:	10800417 	ldw	r2,16(r2)
   28390:	1880060e 	bge	r3,r2,283ac <__multiply+0x48>
    {
      c = a;
   28394:	e0bffe17 	ldw	r2,-8(fp)
   28398:	e0bff515 	stw	r2,-44(fp)
      a = b;
   2839c:	e0bfff17 	ldw	r2,-4(fp)
   283a0:	e0bffe15 	stw	r2,-8(fp)
      b = c;
   283a4:	e0bff517 	ldw	r2,-44(fp)
   283a8:	e0bfff15 	stw	r2,-4(fp)
    }
  k = a->_k;
   283ac:	e0bffe17 	ldw	r2,-8(fp)
   283b0:	10800117 	ldw	r2,4(r2)
   283b4:	e0bfed15 	stw	r2,-76(fp)
  wa = a->_wds;
   283b8:	e0bffe17 	ldw	r2,-8(fp)
   283bc:	10800417 	ldw	r2,16(r2)
   283c0:	e0bff615 	stw	r2,-40(fp)
  wb = b->_wds;
   283c4:	e0bfff17 	ldw	r2,-4(fp)
   283c8:	10800417 	ldw	r2,16(r2)
   283cc:	e0bff715 	stw	r2,-36(fp)
  wc = wa + wb;
   283d0:	e0fff617 	ldw	r3,-40(fp)
   283d4:	e0bff717 	ldw	r2,-36(fp)
   283d8:	1885883a 	add	r2,r3,r2
   283dc:	e0bfee15 	stw	r2,-72(fp)
  if (wc > a->_maxwds)
   283e0:	e0bffe17 	ldw	r2,-8(fp)
   283e4:	10c00217 	ldw	r3,8(r2)
   283e8:	e0bfee17 	ldw	r2,-72(fp)
   283ec:	1880030e 	bge	r3,r2,283fc <__multiply+0x98>
    k++;
   283f0:	e0bfed17 	ldw	r2,-76(fp)
   283f4:	10800044 	addi	r2,r2,1
   283f8:	e0bfed15 	stw	r2,-76(fp)
  c = Balloc (ptr, k);
   283fc:	e17fed17 	ldw	r5,-76(fp)
   28400:	e13ffd17 	ldw	r4,-12(fp)
   28404:	0027cc80 	call	27cc8 <_Balloc>
   28408:	e0bff515 	stw	r2,-44(fp)
  for (x = c->_x, xa = x + wc; x < xa; x++)
   2840c:	e0bff517 	ldw	r2,-44(fp)
   28410:	10800504 	addi	r2,r2,20
   28414:	e0bff015 	stw	r2,-64(fp)
   28418:	e0bfee17 	ldw	r2,-72(fp)
   2841c:	1085883a 	add	r2,r2,r2
   28420:	1085883a 	add	r2,r2,r2
   28424:	1007883a 	mov	r3,r2
   28428:	e0bff017 	ldw	r2,-64(fp)
   2842c:	10c5883a 	add	r2,r2,r3
   28430:	e0bff815 	stw	r2,-32(fp)
   28434:	00000506 	br	2844c <__multiply+0xe8>
    *x = 0;
   28438:	e0bff017 	ldw	r2,-64(fp)
   2843c:	10000015 	stw	zero,0(r2)
  wb = b->_wds;
  wc = wa + wb;
  if (wc > a->_maxwds)
    k++;
  c = Balloc (ptr, k);
  for (x = c->_x, xa = x + wc; x < xa; x++)
   28440:	e0bff017 	ldw	r2,-64(fp)
   28444:	10800104 	addi	r2,r2,4
   28448:	e0bff015 	stw	r2,-64(fp)
   2844c:	e0fff017 	ldw	r3,-64(fp)
   28450:	e0bff817 	ldw	r2,-32(fp)
   28454:	18bff836 	bltu	r3,r2,28438 <__alt_data_end+0xfffe8438>
    *x = 0;
  xa = a->_x;
   28458:	e0bffe17 	ldw	r2,-8(fp)
   2845c:	10800504 	addi	r2,r2,20
   28460:	e0bff815 	stw	r2,-32(fp)
  xae = xa + wa;
   28464:	e0bff617 	ldw	r2,-40(fp)
   28468:	1085883a 	add	r2,r2,r2
   2846c:	1085883a 	add	r2,r2,r2
   28470:	1007883a 	mov	r3,r2
   28474:	e0bff817 	ldw	r2,-32(fp)
   28478:	10c5883a 	add	r2,r2,r3
   2847c:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
   28480:	e0bfff17 	ldw	r2,-4(fp)
   28484:	10800504 	addi	r2,r2,20
   28488:	e0bff115 	stw	r2,-60(fp)
  xbe = xb + wb;
   2848c:	e0bff717 	ldw	r2,-36(fp)
   28490:	1085883a 	add	r2,r2,r2
   28494:	1085883a 	add	r2,r2,r2
   28498:	1007883a 	mov	r3,r2
   2849c:	e0bff117 	ldw	r2,-60(fp)
   284a0:	10c5883a 	add	r2,r2,r3
   284a4:	e0bffa15 	stw	r2,-24(fp)
  xc0 = c->_x;
   284a8:	e0bff517 	ldw	r2,-44(fp)
   284ac:	10800504 	addi	r2,r2,20
   284b0:	e0bff315 	stw	r2,-52(fp)
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
   284b4:	00007d06 	br	286ac <__multiply+0x348>
    {
      if ((y = *xb & 0xffff) != 0)
   284b8:	e0bff117 	ldw	r2,-60(fp)
   284bc:	10800017 	ldw	r2,0(r2)
   284c0:	10bfffcc 	andi	r2,r2,65535
   284c4:	e0bffb15 	stw	r2,-20(fp)
   284c8:	e0bffb17 	ldw	r2,-20(fp)
   284cc:	10003426 	beq	r2,zero,285a0 <__multiply+0x23c>
	{
	  x = xa;
   284d0:	e0bff817 	ldw	r2,-32(fp)
   284d4:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
   284d8:	e0bff317 	ldw	r2,-52(fp)
   284dc:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
   284e0:	e03fef15 	stw	zero,-68(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
   284e4:	e0bff017 	ldw	r2,-64(fp)
   284e8:	10800017 	ldw	r2,0(r2)
   284ec:	10ffffcc 	andi	r3,r2,65535
   284f0:	e0bffb17 	ldw	r2,-20(fp)
   284f4:	1887383a 	mul	r3,r3,r2
   284f8:	e0bff217 	ldw	r2,-56(fp)
   284fc:	10800017 	ldw	r2,0(r2)
   28500:	10bfffcc 	andi	r2,r2,65535
   28504:	1887883a 	add	r3,r3,r2
   28508:	e0bfef17 	ldw	r2,-68(fp)
   2850c:	1885883a 	add	r2,r3,r2
   28510:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
   28514:	e0bffc17 	ldw	r2,-16(fp)
   28518:	1004d43a 	srli	r2,r2,16
   2851c:	e0bfef15 	stw	r2,-68(fp)
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
   28520:	e0bff017 	ldw	r2,-64(fp)
   28524:	10c00104 	addi	r3,r2,4
   28528:	e0fff015 	stw	r3,-64(fp)
   2852c:	10800017 	ldw	r2,0(r2)
   28530:	1006d43a 	srli	r3,r2,16
   28534:	e0bffb17 	ldw	r2,-20(fp)
   28538:	1887383a 	mul	r3,r3,r2
   2853c:	e0bff217 	ldw	r2,-56(fp)
   28540:	10800017 	ldw	r2,0(r2)
   28544:	1004d43a 	srli	r2,r2,16
   28548:	1887883a 	add	r3,r3,r2
   2854c:	e0bfef17 	ldw	r2,-68(fp)
   28550:	1885883a 	add	r2,r3,r2
   28554:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
   28558:	e0bff417 	ldw	r2,-48(fp)
   2855c:	1004d43a 	srli	r2,r2,16
   28560:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z2, z);
   28564:	e0bff217 	ldw	r2,-56(fp)
   28568:	10c00104 	addi	r3,r2,4
   2856c:	e0fff215 	stw	r3,-56(fp)
   28570:	e0fff417 	ldw	r3,-48(fp)
   28574:	1808943a 	slli	r4,r3,16
   28578:	e0fffc17 	ldw	r3,-16(fp)
   2857c:	18ffffcc 	andi	r3,r3,65535
   28580:	20c6b03a 	or	r3,r4,r3
   28584:	10c00015 	stw	r3,0(r2)
	    }
	  while (x < xae);
   28588:	e0fff017 	ldw	r3,-64(fp)
   2858c:	e0bff917 	ldw	r2,-28(fp)
   28590:	18bfd436 	bltu	r3,r2,284e4 <__alt_data_end+0xfffe84e4>
	  *xc = carry;
   28594:	e0bff217 	ldw	r2,-56(fp)
   28598:	e0ffef17 	ldw	r3,-68(fp)
   2859c:	10c00015 	stw	r3,0(r2)
	}
      if ((y = *xb >> 16) != 0)
   285a0:	e0bff117 	ldw	r2,-60(fp)
   285a4:	10800017 	ldw	r2,0(r2)
   285a8:	1004d43a 	srli	r2,r2,16
   285ac:	e0bffb15 	stw	r2,-20(fp)
   285b0:	e0bffb17 	ldw	r2,-20(fp)
   285b4:	10003726 	beq	r2,zero,28694 <__multiply+0x330>
	{
	  x = xa;
   285b8:	e0bff817 	ldw	r2,-32(fp)
   285bc:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
   285c0:	e0bff317 	ldw	r2,-52(fp)
   285c4:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
   285c8:	e03fef15 	stw	zero,-68(fp)
	  z2 = *xc;
   285cc:	e0bff217 	ldw	r2,-56(fp)
   285d0:	10800017 	ldw	r2,0(r2)
   285d4:	e0bff415 	stw	r2,-48(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
   285d8:	e0bff017 	ldw	r2,-64(fp)
   285dc:	10800017 	ldw	r2,0(r2)
   285e0:	10ffffcc 	andi	r3,r2,65535
   285e4:	e0bffb17 	ldw	r2,-20(fp)
   285e8:	1887383a 	mul	r3,r3,r2
   285ec:	e0bff217 	ldw	r2,-56(fp)
   285f0:	10800017 	ldw	r2,0(r2)
   285f4:	1004d43a 	srli	r2,r2,16
   285f8:	1887883a 	add	r3,r3,r2
   285fc:	e0bfef17 	ldw	r2,-68(fp)
   28600:	1885883a 	add	r2,r3,r2
   28604:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
   28608:	e0bffc17 	ldw	r2,-16(fp)
   2860c:	1004d43a 	srli	r2,r2,16
   28610:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z, z2);
   28614:	e0bff217 	ldw	r2,-56(fp)
   28618:	10c00104 	addi	r3,r2,4
   2861c:	e0fff215 	stw	r3,-56(fp)
   28620:	e0fffc17 	ldw	r3,-16(fp)
   28624:	1808943a 	slli	r4,r3,16
   28628:	e0fff417 	ldw	r3,-48(fp)
   2862c:	18ffffcc 	andi	r3,r3,65535
   28630:	20c6b03a 	or	r3,r4,r3
   28634:	10c00015 	stw	r3,0(r2)
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
   28638:	e0bff017 	ldw	r2,-64(fp)
   2863c:	10c00104 	addi	r3,r2,4
   28640:	e0fff015 	stw	r3,-64(fp)
   28644:	10800017 	ldw	r2,0(r2)
   28648:	1006d43a 	srli	r3,r2,16
   2864c:	e0bffb17 	ldw	r2,-20(fp)
   28650:	1887383a 	mul	r3,r3,r2
   28654:	e0bff217 	ldw	r2,-56(fp)
   28658:	10800017 	ldw	r2,0(r2)
   2865c:	10bfffcc 	andi	r2,r2,65535
   28660:	1887883a 	add	r3,r3,r2
   28664:	e0bfef17 	ldw	r2,-68(fp)
   28668:	1885883a 	add	r2,r3,r2
   2866c:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
   28670:	e0bff417 	ldw	r2,-48(fp)
   28674:	1004d43a 	srli	r2,r2,16
   28678:	e0bfef15 	stw	r2,-68(fp)
	    }
	  while (x < xae);
   2867c:	e0fff017 	ldw	r3,-64(fp)
   28680:	e0bff917 	ldw	r2,-28(fp)
   28684:	18bfd436 	bltu	r3,r2,285d8 <__alt_data_end+0xfffe85d8>
	  *xc = z2;
   28688:	e0bff217 	ldw	r2,-56(fp)
   2868c:	e0fff417 	ldw	r3,-48(fp)
   28690:	10c00015 	stw	r3,0(r2)
  xae = xa + wa;
  xb = b->_x;
  xbe = xb + wb;
  xc0 = c->_x;
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
   28694:	e0bff117 	ldw	r2,-60(fp)
   28698:	10800104 	addi	r2,r2,4
   2869c:	e0bff115 	stw	r2,-60(fp)
   286a0:	e0bff317 	ldw	r2,-52(fp)
   286a4:	10800104 	addi	r2,r2,4
   286a8:	e0bff315 	stw	r2,-52(fp)
   286ac:	e0fff117 	ldw	r3,-60(fp)
   286b0:	e0bffa17 	ldw	r2,-24(fp)
   286b4:	18bf8036 	bltu	r3,r2,284b8 <__alt_data_end+0xfffe84b8>
	  while (x < xae);
	  *xc = carry;
	}
    }
#endif
  for (xc0 = c->_x, xc = xc0 + wc; wc > 0 && !*--xc; --wc);
   286b8:	e0bff517 	ldw	r2,-44(fp)
   286bc:	10800504 	addi	r2,r2,20
   286c0:	e0bff315 	stw	r2,-52(fp)
   286c4:	e0bfee17 	ldw	r2,-72(fp)
   286c8:	1085883a 	add	r2,r2,r2
   286cc:	1085883a 	add	r2,r2,r2
   286d0:	1007883a 	mov	r3,r2
   286d4:	e0bff317 	ldw	r2,-52(fp)
   286d8:	10c5883a 	add	r2,r2,r3
   286dc:	e0bff215 	stw	r2,-56(fp)
   286e0:	00000306 	br	286f0 <__multiply+0x38c>
   286e4:	e0bfee17 	ldw	r2,-72(fp)
   286e8:	10bfffc4 	addi	r2,r2,-1
   286ec:	e0bfee15 	stw	r2,-72(fp)
   286f0:	e0bfee17 	ldw	r2,-72(fp)
   286f4:	0080060e 	bge	zero,r2,28710 <__multiply+0x3ac>
   286f8:	e0bff217 	ldw	r2,-56(fp)
   286fc:	10bfff04 	addi	r2,r2,-4
   28700:	e0bff215 	stw	r2,-56(fp)
   28704:	e0bff217 	ldw	r2,-56(fp)
   28708:	10800017 	ldw	r2,0(r2)
   2870c:	103ff526 	beq	r2,zero,286e4 <__alt_data_end+0xfffe86e4>
  c->_wds = wc;
   28710:	e0bff517 	ldw	r2,-44(fp)
   28714:	e0ffee17 	ldw	r3,-72(fp)
   28718:	10c00415 	stw	r3,16(r2)
  return c;
   2871c:	e0bff517 	ldw	r2,-44(fp)
}
   28720:	e037883a 	mov	sp,fp
   28724:	dfc00117 	ldw	ra,4(sp)
   28728:	df000017 	ldw	fp,0(sp)
   2872c:	dec00204 	addi	sp,sp,8
   28730:	f800283a 	ret

00028734 <__pow5mult>:

_Bigint *
_DEFUN (pow5mult,
	(ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
   28734:	defff704 	addi	sp,sp,-36
   28738:	dfc00815 	stw	ra,32(sp)
   2873c:	df000715 	stw	fp,28(sp)
   28740:	df000704 	addi	fp,sp,28
   28744:	e13ffd15 	stw	r4,-12(fp)
   28748:	e17ffe15 	stw	r5,-8(fp)
   2874c:	e1bfff15 	stw	r6,-4(fp)
  _Bigint *b1, *p5, *p51;
  int i;
  static _CONST int p05[3] = {5, 25, 125};

  if ((i = k & 3) != 0)
   28750:	e0bfff17 	ldw	r2,-4(fp)
   28754:	108000cc 	andi	r2,r2,3
   28758:	e0bffb15 	stw	r2,-20(fp)
   2875c:	e0bffb17 	ldw	r2,-20(fp)
   28760:	10000e26 	beq	r2,zero,2879c <__pow5mult+0x68>
    b = multadd (ptr, b, p05[i - 1], 0);
   28764:	e0bffb17 	ldw	r2,-20(fp)
   28768:	10ffffc4 	addi	r3,r2,-1
   2876c:	008000f4 	movhi	r2,3
   28770:	1087fc04 	addi	r2,r2,8176
   28774:	18c7883a 	add	r3,r3,r3
   28778:	18c7883a 	add	r3,r3,r3
   2877c:	10c5883a 	add	r2,r2,r3
   28780:	10800017 	ldw	r2,0(r2)
   28784:	000f883a 	mov	r7,zero
   28788:	100d883a 	mov	r6,r2
   2878c:	e17ffe17 	ldw	r5,-8(fp)
   28790:	e13ffd17 	ldw	r4,-12(fp)
   28794:	0027e740 	call	27e74 <__multadd>
   28798:	e0bffe15 	stw	r2,-8(fp)

  if (!(k >>= 2))
   2879c:	e0bfff17 	ldw	r2,-4(fp)
   287a0:	1005d0ba 	srai	r2,r2,2
   287a4:	e0bfff15 	stw	r2,-4(fp)
   287a8:	e0bfff17 	ldw	r2,-4(fp)
   287ac:	1000021e 	bne	r2,zero,287b8 <__pow5mult+0x84>
    return b;
   287b0:	e0bffe17 	ldw	r2,-8(fp)
   287b4:	00003806 	br	28898 <__pow5mult+0x164>
  _REENT_CHECK_MP(ptr);
  if (!(p5 = _REENT_MP_P5S(ptr)))
   287b8:	e0bffd17 	ldw	r2,-12(fp)
   287bc:	10801217 	ldw	r2,72(r2)
   287c0:	e0bff915 	stw	r2,-28(fp)
   287c4:	e0bff917 	ldw	r2,-28(fp)
   287c8:	10000b1e 	bne	r2,zero,287f8 <__pow5mult+0xc4>
    {
      /* first time */
      p5 = _REENT_MP_P5S(ptr) = i2b (ptr, 625);
   287cc:	01409c44 	movi	r5,625
   287d0:	e13ffd17 	ldw	r4,-12(fp)
   287d4:	002830c0 	call	2830c <__i2b>
   287d8:	1007883a 	mov	r3,r2
   287dc:	e0bffd17 	ldw	r2,-12(fp)
   287e0:	10c01215 	stw	r3,72(r2)
   287e4:	e0bffd17 	ldw	r2,-12(fp)
   287e8:	10801217 	ldw	r2,72(r2)
   287ec:	e0bff915 	stw	r2,-28(fp)
      p5->_next = 0;
   287f0:	e0bff917 	ldw	r2,-28(fp)
   287f4:	10000015 	stw	zero,0(r2)
    }
  for (;;)
    {
      if (k & 1)
   287f8:	e0bfff17 	ldw	r2,-4(fp)
   287fc:	1080004c 	andi	r2,r2,1
   28800:	10000a26 	beq	r2,zero,2882c <__pow5mult+0xf8>
	{
	  b1 = mult (ptr, b, p5);
   28804:	e1bff917 	ldw	r6,-28(fp)
   28808:	e17ffe17 	ldw	r5,-8(fp)
   2880c:	e13ffd17 	ldw	r4,-12(fp)
   28810:	00283640 	call	28364 <__multiply>
   28814:	e0bffc15 	stw	r2,-16(fp)
	  Bfree (ptr, b);
   28818:	e17ffe17 	ldw	r5,-8(fp)
   2881c:	e13ffd17 	ldw	r4,-12(fp)
   28820:	0027df80 	call	27df8 <_Bfree>
	  b = b1;
   28824:	e0bffc17 	ldw	r2,-16(fp)
   28828:	e0bffe15 	stw	r2,-8(fp)
	}
      if (!(k >>= 1))
   2882c:	e0bfff17 	ldw	r2,-4(fp)
   28830:	1005d07a 	srai	r2,r2,1
   28834:	e0bfff15 	stw	r2,-4(fp)
   28838:	e0bfff17 	ldw	r2,-4(fp)
   2883c:	10001426 	beq	r2,zero,28890 <__pow5mult+0x15c>
	break;
      if (!(p51 = p5->_next))
   28840:	e0bff917 	ldw	r2,-28(fp)
   28844:	10800017 	ldw	r2,0(r2)
   28848:	e0bffa15 	stw	r2,-24(fp)
   2884c:	e0bffa17 	ldw	r2,-24(fp)
   28850:	10000c1e 	bne	r2,zero,28884 <__pow5mult+0x150>
	{
	  p51 = p5->_next = mult (ptr, p5, p5);
   28854:	e1bff917 	ldw	r6,-28(fp)
   28858:	e17ff917 	ldw	r5,-28(fp)
   2885c:	e13ffd17 	ldw	r4,-12(fp)
   28860:	00283640 	call	28364 <__multiply>
   28864:	1007883a 	mov	r3,r2
   28868:	e0bff917 	ldw	r2,-28(fp)
   2886c:	10c00015 	stw	r3,0(r2)
   28870:	e0bff917 	ldw	r2,-28(fp)
   28874:	10800017 	ldw	r2,0(r2)
   28878:	e0bffa15 	stw	r2,-24(fp)
	  p51->_next = 0;
   2887c:	e0bffa17 	ldw	r2,-24(fp)
   28880:	10000015 	stw	zero,0(r2)
	}
      p5 = p51;
   28884:	e0bffa17 	ldw	r2,-24(fp)
   28888:	e0bff915 	stw	r2,-28(fp)
    }
   2888c:	003fda06 	br	287f8 <__alt_data_end+0xfffe87f8>
	  b1 = mult (ptr, b, p5);
	  Bfree (ptr, b);
	  b = b1;
	}
      if (!(k >>= 1))
	break;
   28890:	0001883a 	nop
	  p51 = p5->_next = mult (ptr, p5, p5);
	  p51->_next = 0;
	}
      p5 = p51;
    }
  return b;
   28894:	e0bffe17 	ldw	r2,-8(fp)
}
   28898:	e037883a 	mov	sp,fp
   2889c:	dfc00117 	ldw	ra,4(sp)
   288a0:	df000017 	ldw	fp,0(sp)
   288a4:	dec00204 	addi	sp,sp,8
   288a8:	f800283a 	ret

000288ac <__lshift>:

_Bigint *
_DEFUN (lshift, (ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
   288ac:	defff204 	addi	sp,sp,-56
   288b0:	dfc00d15 	stw	ra,52(sp)
   288b4:	df000c15 	stw	fp,48(sp)
   288b8:	df000c04 	addi	fp,sp,48
   288bc:	e13ffd15 	stw	r4,-12(fp)
   288c0:	e17ffe15 	stw	r5,-8(fp)
   288c4:	e1bfff15 	stw	r6,-4(fp)
  int i, k1, n, n1;
  _Bigint *b1;
  __ULong *x, *x1, *xe, z;

#ifdef Pack_32
  n = k >> 5;
   288c8:	e0bfff17 	ldw	r2,-4(fp)
   288cc:	1005d17a 	srai	r2,r2,5
   288d0:	e0bffa15 	stw	r2,-24(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
   288d4:	e0bffe17 	ldw	r2,-8(fp)
   288d8:	10800117 	ldw	r2,4(r2)
   288dc:	e0bff515 	stw	r2,-44(fp)
  n1 = n + b->_wds + 1;
   288e0:	e0bffe17 	ldw	r2,-8(fp)
   288e4:	10c00417 	ldw	r3,16(r2)
   288e8:	e0bffa17 	ldw	r2,-24(fp)
   288ec:	1885883a 	add	r2,r3,r2
   288f0:	10800044 	addi	r2,r2,1
   288f4:	e0bff615 	stw	r2,-40(fp)
  for (i = b->_maxwds; n1 > i; i <<= 1)
   288f8:	e0bffe17 	ldw	r2,-8(fp)
   288fc:	10800217 	ldw	r2,8(r2)
   28900:	e0bff415 	stw	r2,-48(fp)
   28904:	00000606 	br	28920 <__lshift+0x74>
    k1++;
   28908:	e0bff517 	ldw	r2,-44(fp)
   2890c:	10800044 	addi	r2,r2,1
   28910:	e0bff515 	stw	r2,-44(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
   28914:	e0bff417 	ldw	r2,-48(fp)
   28918:	1085883a 	add	r2,r2,r2
   2891c:	e0bff415 	stw	r2,-48(fp)
   28920:	e0bff617 	ldw	r2,-40(fp)
   28924:	e0fff417 	ldw	r3,-48(fp)
   28928:	18bff716 	blt	r3,r2,28908 <__alt_data_end+0xfffe8908>
    k1++;
  b1 = Balloc (ptr, k1);
   2892c:	e17ff517 	ldw	r5,-44(fp)
   28930:	e13ffd17 	ldw	r4,-12(fp)
   28934:	0027cc80 	call	27cc8 <_Balloc>
   28938:	e0bffb15 	stw	r2,-20(fp)
  x1 = b1->_x;
   2893c:	e0bffb17 	ldw	r2,-20(fp)
   28940:	10800504 	addi	r2,r2,20
   28944:	e0bff815 	stw	r2,-32(fp)
  for (i = 0; i < n; i++)
   28948:	e03ff415 	stw	zero,-48(fp)
   2894c:	00000706 	br	2896c <__lshift+0xc0>
    *x1++ = 0;
   28950:	e0bff817 	ldw	r2,-32(fp)
   28954:	10c00104 	addi	r3,r2,4
   28958:	e0fff815 	stw	r3,-32(fp)
   2895c:	10000015 	stw	zero,0(r2)
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
    k1++;
  b1 = Balloc (ptr, k1);
  x1 = b1->_x;
  for (i = 0; i < n; i++)
   28960:	e0bff417 	ldw	r2,-48(fp)
   28964:	10800044 	addi	r2,r2,1
   28968:	e0bff415 	stw	r2,-48(fp)
   2896c:	e0fff417 	ldw	r3,-48(fp)
   28970:	e0bffa17 	ldw	r2,-24(fp)
   28974:	18bff616 	blt	r3,r2,28950 <__alt_data_end+0xfffe8950>
    *x1++ = 0;
  x = b->_x;
   28978:	e0bffe17 	ldw	r2,-8(fp)
   2897c:	10800504 	addi	r2,r2,20
   28980:	e0bff715 	stw	r2,-36(fp)
  xe = x + b->_wds;
   28984:	e0bffe17 	ldw	r2,-8(fp)
   28988:	10800417 	ldw	r2,16(r2)
   2898c:	1085883a 	add	r2,r2,r2
   28990:	1085883a 	add	r2,r2,r2
   28994:	1007883a 	mov	r3,r2
   28998:	e0bff717 	ldw	r2,-36(fp)
   2899c:	10c5883a 	add	r2,r2,r3
   289a0:	e0bffc15 	stw	r2,-16(fp)
#ifdef Pack_32
  if (k &= 0x1f)
   289a4:	e0bfff17 	ldw	r2,-4(fp)
   289a8:	108007cc 	andi	r2,r2,31
   289ac:	e0bfff15 	stw	r2,-4(fp)
   289b0:	e0bfff17 	ldw	r2,-4(fp)
   289b4:	10002326 	beq	r2,zero,28a44 <__lshift+0x198>
    {
      k1 = 32 - k;
   289b8:	00c00804 	movi	r3,32
   289bc:	e0bfff17 	ldw	r2,-4(fp)
   289c0:	1885c83a 	sub	r2,r3,r2
   289c4:	e0bff515 	stw	r2,-44(fp)
      z = 0;
   289c8:	e03ff915 	stw	zero,-28(fp)
      do
	{
	  *x1++ = *x << k | z;
   289cc:	e0bff817 	ldw	r2,-32(fp)
   289d0:	10c00104 	addi	r3,r2,4
   289d4:	e0fff815 	stw	r3,-32(fp)
   289d8:	e0fff717 	ldw	r3,-36(fp)
   289dc:	19000017 	ldw	r4,0(r3)
   289e0:	e0ffff17 	ldw	r3,-4(fp)
   289e4:	20c8983a 	sll	r4,r4,r3
   289e8:	e0fff917 	ldw	r3,-28(fp)
   289ec:	20c6b03a 	or	r3,r4,r3
   289f0:	10c00015 	stw	r3,0(r2)
	  z = *x++ >> k1;
   289f4:	e0bff717 	ldw	r2,-36(fp)
   289f8:	10c00104 	addi	r3,r2,4
   289fc:	e0fff715 	stw	r3,-36(fp)
   28a00:	10c00017 	ldw	r3,0(r2)
   28a04:	e0bff517 	ldw	r2,-44(fp)
   28a08:	1884d83a 	srl	r2,r3,r2
   28a0c:	e0bff915 	stw	r2,-28(fp)
	}
      while (x < xe);
   28a10:	e0fff717 	ldw	r3,-36(fp)
   28a14:	e0bffc17 	ldw	r2,-16(fp)
   28a18:	18bfec36 	bltu	r3,r2,289cc <__alt_data_end+0xfffe89cc>
      if ((*x1 = z) != 0)
   28a1c:	e0bff817 	ldw	r2,-32(fp)
   28a20:	e0fff917 	ldw	r3,-28(fp)
   28a24:	10c00015 	stw	r3,0(r2)
   28a28:	e0bff817 	ldw	r2,-32(fp)
   28a2c:	10800017 	ldw	r2,0(r2)
   28a30:	10000f26 	beq	r2,zero,28a70 <__lshift+0x1c4>
	++n1;
   28a34:	e0bff617 	ldw	r2,-40(fp)
   28a38:	10800044 	addi	r2,r2,1
   28a3c:	e0bff615 	stw	r2,-40(fp)
   28a40:	00000b06 	br	28a70 <__lshift+0x1c4>
	++n1;
    }
#endif
  else
    do
      *x1++ = *x++;
   28a44:	e0bff817 	ldw	r2,-32(fp)
   28a48:	10c00104 	addi	r3,r2,4
   28a4c:	e0fff815 	stw	r3,-32(fp)
   28a50:	e0fff717 	ldw	r3,-36(fp)
   28a54:	19000104 	addi	r4,r3,4
   28a58:	e13ff715 	stw	r4,-36(fp)
   28a5c:	18c00017 	ldw	r3,0(r3)
   28a60:	10c00015 	stw	r3,0(r2)
    while (x < xe);
   28a64:	e0fff717 	ldw	r3,-36(fp)
   28a68:	e0bffc17 	ldw	r2,-16(fp)
   28a6c:	18bff536 	bltu	r3,r2,28a44 <__alt_data_end+0xfffe8a44>
  b1->_wds = n1 - 1;
   28a70:	e0bff617 	ldw	r2,-40(fp)
   28a74:	10ffffc4 	addi	r3,r2,-1
   28a78:	e0bffb17 	ldw	r2,-20(fp)
   28a7c:	10c00415 	stw	r3,16(r2)
  Bfree (ptr, b);
   28a80:	e17ffe17 	ldw	r5,-8(fp)
   28a84:	e13ffd17 	ldw	r4,-12(fp)
   28a88:	0027df80 	call	27df8 <_Bfree>
  return b1;
   28a8c:	e0bffb17 	ldw	r2,-20(fp)
}
   28a90:	e037883a 	mov	sp,fp
   28a94:	dfc00117 	ldw	ra,4(sp)
   28a98:	df000017 	ldw	fp,0(sp)
   28a9c:	dec00204 	addi	sp,sp,8
   28aa0:	f800283a 	ret

00028aa4 <__mcmp>:

int
_DEFUN (cmp, (a, b), _Bigint * a _AND _Bigint * b)
{
   28aa4:	defff704 	addi	sp,sp,-36
   28aa8:	df000815 	stw	fp,32(sp)
   28aac:	df000804 	addi	fp,sp,32
   28ab0:	e13ffe15 	stw	r4,-8(fp)
   28ab4:	e17fff15 	stw	r5,-4(fp)
  __ULong *xa, *xa0, *xb, *xb0;
  int i, j;

  i = a->_wds;
   28ab8:	e0bffe17 	ldw	r2,-8(fp)
   28abc:	10800417 	ldw	r2,16(r2)
   28ac0:	e0bffa15 	stw	r2,-24(fp)
  j = b->_wds;
   28ac4:	e0bfff17 	ldw	r2,-4(fp)
   28ac8:	10800417 	ldw	r2,16(r2)
   28acc:	e0bffb15 	stw	r2,-20(fp)
  if (i > 1 && !a->_x[i - 1])
    Bug ("cmp called with a->_x[a->_wds-1] == 0");
  if (j > 1 && !b->_x[j - 1])
    Bug ("cmp called with b->_x[b->_wds-1] == 0");
#endif
  if (i -= j)
   28ad0:	e0fffa17 	ldw	r3,-24(fp)
   28ad4:	e0bffb17 	ldw	r2,-20(fp)
   28ad8:	1885c83a 	sub	r2,r3,r2
   28adc:	e0bffa15 	stw	r2,-24(fp)
   28ae0:	e0bffa17 	ldw	r2,-24(fp)
   28ae4:	10000226 	beq	r2,zero,28af0 <__mcmp+0x4c>
    return i;
   28ae8:	e0bffa17 	ldw	r2,-24(fp)
   28aec:	00002e06 	br	28ba8 <__mcmp+0x104>
  xa0 = a->_x;
   28af0:	e0bffe17 	ldw	r2,-8(fp)
   28af4:	10800504 	addi	r2,r2,20
   28af8:	e0bffc15 	stw	r2,-16(fp)
  xa = xa0 + j;
   28afc:	e0bffb17 	ldw	r2,-20(fp)
   28b00:	1085883a 	add	r2,r2,r2
   28b04:	1085883a 	add	r2,r2,r2
   28b08:	1007883a 	mov	r3,r2
   28b0c:	e0bffc17 	ldw	r2,-16(fp)
   28b10:	10c5883a 	add	r2,r2,r3
   28b14:	e0bff815 	stw	r2,-32(fp)
  xb0 = b->_x;
   28b18:	e0bfff17 	ldw	r2,-4(fp)
   28b1c:	10800504 	addi	r2,r2,20
   28b20:	e0bffd15 	stw	r2,-12(fp)
  xb = xb0 + j;
   28b24:	e0bffb17 	ldw	r2,-20(fp)
   28b28:	1085883a 	add	r2,r2,r2
   28b2c:	1085883a 	add	r2,r2,r2
   28b30:	1007883a 	mov	r3,r2
   28b34:	e0bffd17 	ldw	r2,-12(fp)
   28b38:	10c5883a 	add	r2,r2,r3
   28b3c:	e0bff915 	stw	r2,-28(fp)
  for (;;)
    {
      if (*--xa != *--xb)
   28b40:	e0bff817 	ldw	r2,-32(fp)
   28b44:	10bfff04 	addi	r2,r2,-4
   28b48:	e0bff815 	stw	r2,-32(fp)
   28b4c:	e0bff817 	ldw	r2,-32(fp)
   28b50:	10c00017 	ldw	r3,0(r2)
   28b54:	e0bff917 	ldw	r2,-28(fp)
   28b58:	10bfff04 	addi	r2,r2,-4
   28b5c:	e0bff915 	stw	r2,-28(fp)
   28b60:	e0bff917 	ldw	r2,-28(fp)
   28b64:	10800017 	ldw	r2,0(r2)
   28b68:	18800926 	beq	r3,r2,28b90 <__mcmp+0xec>
	return *xa < *xb ? -1 : 1;
   28b6c:	e0bff817 	ldw	r2,-32(fp)
   28b70:	10c00017 	ldw	r3,0(r2)
   28b74:	e0bff917 	ldw	r2,-28(fp)
   28b78:	10800017 	ldw	r2,0(r2)
   28b7c:	1880022e 	bgeu	r3,r2,28b88 <__mcmp+0xe4>
   28b80:	00bfffc4 	movi	r2,-1
   28b84:	00000806 	br	28ba8 <__mcmp+0x104>
   28b88:	00800044 	movi	r2,1
   28b8c:	00000606 	br	28ba8 <__mcmp+0x104>
      if (xa <= xa0)
   28b90:	e0bff817 	ldw	r2,-32(fp)
   28b94:	e0fffc17 	ldw	r3,-16(fp)
   28b98:	1880012e 	bgeu	r3,r2,28ba0 <__mcmp+0xfc>
	break;
    }
   28b9c:	003fe806 	br	28b40 <__alt_data_end+0xfffe8b40>
  for (;;)
    {
      if (*--xa != *--xb)
	return *xa < *xb ? -1 : 1;
      if (xa <= xa0)
	break;
   28ba0:	0001883a 	nop
    }
  return 0;
   28ba4:	0005883a 	mov	r2,zero
}
   28ba8:	e037883a 	mov	sp,fp
   28bac:	df000017 	ldw	fp,0(sp)
   28bb0:	dec00104 	addi	sp,sp,4
   28bb4:	f800283a 	ret

00028bb8 <__mdiff>:

_Bigint *
_DEFUN (diff, (ptr, a, b), struct _reent * ptr _AND
	_Bigint * a _AND _Bigint * b)
{
   28bb8:	deffef04 	addi	sp,sp,-68
   28bbc:	dfc01015 	stw	ra,64(sp)
   28bc0:	df000f15 	stw	fp,60(sp)
   28bc4:	df000f04 	addi	fp,sp,60
   28bc8:	e13ffd15 	stw	r4,-12(fp)
   28bcc:	e17ffe15 	stw	r5,-8(fp)
   28bd0:	e1bfff15 	stw	r6,-4(fp)
  __ULong *xa, *xae, *xb, *xbe, *xc;
#ifdef Pack_32
  __Long z;
#endif

  i = cmp (a, b);
   28bd4:	e17fff17 	ldw	r5,-4(fp)
   28bd8:	e13ffe17 	ldw	r4,-8(fp)
   28bdc:	0028aa40 	call	28aa4 <__mcmp>
   28be0:	e0bff115 	stw	r2,-60(fp)
  if (!i)
   28be4:	e0bff117 	ldw	r2,-60(fp)
   28be8:	10000b1e 	bne	r2,zero,28c18 <__mdiff+0x60>
    {
      c = Balloc (ptr, 0);
   28bec:	000b883a 	mov	r5,zero
   28bf0:	e13ffd17 	ldw	r4,-12(fp)
   28bf4:	0027cc80 	call	27cc8 <_Balloc>
   28bf8:	e0bff715 	stw	r2,-36(fp)
      c->_wds = 1;
   28bfc:	e0bff717 	ldw	r2,-36(fp)
   28c00:	00c00044 	movi	r3,1
   28c04:	10c00415 	stw	r3,16(r2)
      c->_x[0] = 0;
   28c08:	e0bff717 	ldw	r2,-36(fp)
   28c0c:	10000515 	stw	zero,20(r2)
      return c;
   28c10:	e0bff717 	ldw	r2,-36(fp)
   28c14:	00008c06 	br	28e48 <__mdiff+0x290>
    }
  if (i < 0)
   28c18:	e0bff117 	ldw	r2,-60(fp)
   28c1c:	1000090e 	bge	r2,zero,28c44 <__mdiff+0x8c>
    {
      c = a;
   28c20:	e0bffe17 	ldw	r2,-8(fp)
   28c24:	e0bff715 	stw	r2,-36(fp)
      a = b;
   28c28:	e0bfff17 	ldw	r2,-4(fp)
   28c2c:	e0bffe15 	stw	r2,-8(fp)
      b = c;
   28c30:	e0bff717 	ldw	r2,-36(fp)
   28c34:	e0bfff15 	stw	r2,-4(fp)
      i = 1;
   28c38:	00800044 	movi	r2,1
   28c3c:	e0bff115 	stw	r2,-60(fp)
   28c40:	00000106 	br	28c48 <__mdiff+0x90>
    }
  else
    i = 0;
   28c44:	e03ff115 	stw	zero,-60(fp)
  c = Balloc (ptr, a->_k);
   28c48:	e0bffe17 	ldw	r2,-8(fp)
   28c4c:	10800117 	ldw	r2,4(r2)
   28c50:	100b883a 	mov	r5,r2
   28c54:	e13ffd17 	ldw	r4,-12(fp)
   28c58:	0027cc80 	call	27cc8 <_Balloc>
   28c5c:	e0bff715 	stw	r2,-36(fp)
  c->_sign = i;
   28c60:	e0bff717 	ldw	r2,-36(fp)
   28c64:	e0fff117 	ldw	r3,-60(fp)
   28c68:	10c00315 	stw	r3,12(r2)
  wa = a->_wds;
   28c6c:	e0bffe17 	ldw	r2,-8(fp)
   28c70:	10800417 	ldw	r2,16(r2)
   28c74:	e0bff215 	stw	r2,-56(fp)
  xa = a->_x;
   28c78:	e0bffe17 	ldw	r2,-8(fp)
   28c7c:	10800504 	addi	r2,r2,20
   28c80:	e0bff415 	stw	r2,-48(fp)
  xae = xa + wa;
   28c84:	e0bff217 	ldw	r2,-56(fp)
   28c88:	1085883a 	add	r2,r2,r2
   28c8c:	1085883a 	add	r2,r2,r2
   28c90:	1007883a 	mov	r3,r2
   28c94:	e0bff417 	ldw	r2,-48(fp)
   28c98:	10c5883a 	add	r2,r2,r3
   28c9c:	e0bff815 	stw	r2,-32(fp)
  wb = b->_wds;
   28ca0:	e0bfff17 	ldw	r2,-4(fp)
   28ca4:	10800417 	ldw	r2,16(r2)
   28ca8:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
   28cac:	e0bfff17 	ldw	r2,-4(fp)
   28cb0:	10800504 	addi	r2,r2,20
   28cb4:	e0bff515 	stw	r2,-44(fp)
  xbe = xb + wb;
   28cb8:	e0bff917 	ldw	r2,-28(fp)
   28cbc:	1085883a 	add	r2,r2,r2
   28cc0:	1085883a 	add	r2,r2,r2
   28cc4:	1007883a 	mov	r3,r2
   28cc8:	e0bff517 	ldw	r2,-44(fp)
   28ccc:	10c5883a 	add	r2,r2,r3
   28cd0:	e0bffa15 	stw	r2,-24(fp)
  xc = c->_x;
   28cd4:	e0bff717 	ldw	r2,-36(fp)
   28cd8:	10800504 	addi	r2,r2,20
   28cdc:	e0bff615 	stw	r2,-40(fp)
  borrow = 0;
   28ce0:	e03ff315 	stw	zero,-52(fp)
#ifdef Pack_32
  do
    {
      y = (*xa & 0xffff) - (*xb & 0xffff) + borrow;
   28ce4:	e0bff417 	ldw	r2,-48(fp)
   28ce8:	10800017 	ldw	r2,0(r2)
   28cec:	10ffffcc 	andi	r3,r2,65535
   28cf0:	e0bff517 	ldw	r2,-44(fp)
   28cf4:	10800017 	ldw	r2,0(r2)
   28cf8:	10bfffcc 	andi	r2,r2,65535
   28cfc:	1887c83a 	sub	r3,r3,r2
   28d00:	e0bff317 	ldw	r2,-52(fp)
   28d04:	1885883a 	add	r2,r3,r2
   28d08:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
   28d0c:	e0bffb17 	ldw	r2,-20(fp)
   28d10:	1005d43a 	srai	r2,r2,16
   28d14:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
   28d18:	e0bff417 	ldw	r2,-48(fp)
   28d1c:	10c00104 	addi	r3,r2,4
   28d20:	e0fff415 	stw	r3,-48(fp)
   28d24:	10800017 	ldw	r2,0(r2)
   28d28:	1006d43a 	srli	r3,r2,16
   28d2c:	e0bff517 	ldw	r2,-44(fp)
   28d30:	11000104 	addi	r4,r2,4
   28d34:	e13ff515 	stw	r4,-44(fp)
   28d38:	10800017 	ldw	r2,0(r2)
   28d3c:	1004d43a 	srli	r2,r2,16
   28d40:	1887c83a 	sub	r3,r3,r2
   28d44:	e0bff317 	ldw	r2,-52(fp)
   28d48:	1885883a 	add	r2,r3,r2
   28d4c:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
   28d50:	e0bffc17 	ldw	r2,-16(fp)
   28d54:	1005d43a 	srai	r2,r2,16
   28d58:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
   28d5c:	e0bff617 	ldw	r2,-40(fp)
   28d60:	10c00104 	addi	r3,r2,4
   28d64:	e0fff615 	stw	r3,-40(fp)
   28d68:	e0fffc17 	ldw	r3,-16(fp)
   28d6c:	1808943a 	slli	r4,r3,16
   28d70:	e0fffb17 	ldw	r3,-20(fp)
   28d74:	18ffffcc 	andi	r3,r3,65535
   28d78:	20c6b03a 	or	r3,r4,r3
   28d7c:	10c00015 	stw	r3,0(r2)
    }
  while (xb < xbe);
   28d80:	e0fff517 	ldw	r3,-44(fp)
   28d84:	e0bffa17 	ldw	r2,-24(fp)
   28d88:	18bfd636 	bltu	r3,r2,28ce4 <__alt_data_end+0xfffe8ce4>
  while (xa < xae)
   28d8c:	00001d06 	br	28e04 <__mdiff+0x24c>
    {
      y = (*xa & 0xffff) + borrow;
   28d90:	e0bff417 	ldw	r2,-48(fp)
   28d94:	10800017 	ldw	r2,0(r2)
   28d98:	10ffffcc 	andi	r3,r2,65535
   28d9c:	e0bff317 	ldw	r2,-52(fp)
   28da0:	1885883a 	add	r2,r3,r2
   28da4:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
   28da8:	e0bffb17 	ldw	r2,-20(fp)
   28dac:	1005d43a 	srai	r2,r2,16
   28db0:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) + borrow;
   28db4:	e0bff417 	ldw	r2,-48(fp)
   28db8:	10c00104 	addi	r3,r2,4
   28dbc:	e0fff415 	stw	r3,-48(fp)
   28dc0:	10800017 	ldw	r2,0(r2)
   28dc4:	1006d43a 	srli	r3,r2,16
   28dc8:	e0bff317 	ldw	r2,-52(fp)
   28dcc:	1885883a 	add	r2,r3,r2
   28dd0:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
   28dd4:	e0bffc17 	ldw	r2,-16(fp)
   28dd8:	1005d43a 	srai	r2,r2,16
   28ddc:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
   28de0:	e0bff617 	ldw	r2,-40(fp)
   28de4:	10c00104 	addi	r3,r2,4
   28de8:	e0fff615 	stw	r3,-40(fp)
   28dec:	e0fffc17 	ldw	r3,-16(fp)
   28df0:	1808943a 	slli	r4,r3,16
   28df4:	e0fffb17 	ldw	r3,-20(fp)
   28df8:	18ffffcc 	andi	r3,r3,65535
   28dfc:	20c6b03a 	or	r3,r4,r3
   28e00:	10c00015 	stw	r3,0(r2)
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
    }
  while (xb < xbe);
  while (xa < xae)
   28e04:	e0fff417 	ldw	r3,-48(fp)
   28e08:	e0bff817 	ldw	r2,-32(fp)
   28e0c:	18bfe036 	bltu	r3,r2,28d90 <__alt_data_end+0xfffe8d90>
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
   28e10:	00000306 	br	28e20 <__mdiff+0x268>
    wa--;
   28e14:	e0bff217 	ldw	r2,-56(fp)
   28e18:	10bfffc4 	addi	r2,r2,-1
   28e1c:	e0bff215 	stw	r2,-56(fp)
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
   28e20:	e0bff617 	ldw	r2,-40(fp)
   28e24:	10bfff04 	addi	r2,r2,-4
   28e28:	e0bff615 	stw	r2,-40(fp)
   28e2c:	e0bff617 	ldw	r2,-40(fp)
   28e30:	10800017 	ldw	r2,0(r2)
   28e34:	103ff726 	beq	r2,zero,28e14 <__alt_data_end+0xfffe8e14>
    wa--;
  c->_wds = wa;
   28e38:	e0bff717 	ldw	r2,-36(fp)
   28e3c:	e0fff217 	ldw	r3,-56(fp)
   28e40:	10c00415 	stw	r3,16(r2)
  return c;
   28e44:	e0bff717 	ldw	r2,-36(fp)
}
   28e48:	e037883a 	mov	sp,fp
   28e4c:	dfc00117 	ldw	ra,4(sp)
   28e50:	df000017 	ldw	fp,0(sp)
   28e54:	dec00204 	addi	sp,sp,8
   28e58:	f800283a 	ret

00028e5c <__ulp>:

double
_DEFUN (ulp, (_x), double _x)
{
   28e5c:	defff804 	addi	sp,sp,-32
   28e60:	df000715 	stw	fp,28(sp)
   28e64:	dc000615 	stw	r16,24(sp)
   28e68:	df000704 	addi	fp,sp,28
   28e6c:	e13ffd15 	stw	r4,-12(fp)
   28e70:	e17ffe15 	stw	r5,-8(fp)
  union double_union x, a;
  register __Long L;

  x.d = _x;
   28e74:	e0bffd17 	ldw	r2,-12(fp)
   28e78:	e0bff915 	stw	r2,-28(fp)
   28e7c:	e0bffe17 	ldw	r2,-8(fp)
   28e80:	e0bffa15 	stw	r2,-24(fp)

  L = (word0 (x) & Exp_mask) - (P - 1) * Exp_msk1;
   28e84:	e0bffa17 	ldw	r2,-24(fp)
   28e88:	10dffc2c 	andhi	r3,r2,32752
   28e8c:	00bf3034 	movhi	r2,64704
   28e90:	1885883a 	add	r2,r3,r2
   28e94:	1021883a 	mov	r16,r2
#ifndef Sudden_Underflow
  if (L > 0)
   28e98:	0400040e 	bge	zero,r16,28eac <__ulp+0x50>
    {
#endif
#ifdef IBM
      L |= Exp_msk1 >> 4;
#endif
      word0 (a) = L;
   28e9c:	8005883a 	mov	r2,r16
   28ea0:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
      word1 (a) = 0;
   28ea4:	e03ffb15 	stw	zero,-20(fp)
   28ea8:	00001406 	br	28efc <__ulp+0xa0>

#ifndef Sudden_Underflow
    }
  else
    {
      L = -L >> Exp_shift;
   28eac:	0405c83a 	sub	r2,zero,r16
   28eb0:	1021d53a 	srai	r16,r2,20
      if (L < Exp_shift)
   28eb4:	80800508 	cmpgei	r2,r16,20
   28eb8:	1000051e 	bne	r2,zero,28ed0 <__ulp+0x74>
	{
	  word0 (a) = 0x80000 >> L;
   28ebc:	00800234 	movhi	r2,8
   28ec0:	1405d83a 	sra	r2,r2,r16
   28ec4:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
	  word1 (a) = 0;
   28ec8:	e03ffb15 	stw	zero,-20(fp)
   28ecc:	00000b06 	br	28efc <__ulp+0xa0>
#endif
	}
      else
	{
	  word0 (a) = 0;
   28ed0:	e03ffc15 	stw	zero,-16(fp)
	  L -= Exp_shift;
   28ed4:	843ffb04 	addi	r16,r16,-20
#ifndef _DOUBLE_IS_32BITS
         word1 (a) = L >= 31 ? 1 : 1 << (31 - L);
   28ed8:	808007c8 	cmpgei	r2,r16,31
   28edc:	1000051e 	bne	r2,zero,28ef4 <__ulp+0x98>
   28ee0:	008007c4 	movi	r2,31
   28ee4:	1405c83a 	sub	r2,r2,r16
   28ee8:	00c00044 	movi	r3,1
   28eec:	1884983a 	sll	r2,r3,r2
   28ef0:	00000106 	br	28ef8 <__ulp+0x9c>
   28ef4:	00800044 	movi	r2,1
   28ef8:	e0bffb15 	stw	r2,-20(fp)
#endif
	}
    }
#endif
  return a.d;
   28efc:	e0bffb17 	ldw	r2,-20(fp)
   28f00:	e0fffc17 	ldw	r3,-16(fp)
   28f04:	1009883a 	mov	r4,r2
   28f08:	180b883a 	mov	r5,r3
}
   28f0c:	2005883a 	mov	r2,r4
   28f10:	2807883a 	mov	r3,r5
   28f14:	e6ffff04 	addi	sp,fp,-4
   28f18:	df000117 	ldw	fp,4(sp)
   28f1c:	dc000017 	ldw	r16,0(sp)
   28f20:	dec00204 	addi	sp,sp,8
   28f24:	f800283a 	ret

00028f28 <__b2d>:

double
_DEFUN (b2d, (a, e),
	_Bigint * a _AND int *e)
{
   28f28:	defff404 	addi	sp,sp,-48
   28f2c:	dfc00b15 	stw	ra,44(sp)
   28f30:	df000a15 	stw	fp,40(sp)
   28f34:	df000a04 	addi	fp,sp,40
   28f38:	e13ffe15 	stw	r4,-8(fp)
   28f3c:	e17fff15 	stw	r5,-4(fp)
#else
#define d0 word0(d)
#define d1 word1(d)
#endif

  xa0 = a->_x;
   28f40:	e0bffe17 	ldw	r2,-8(fp)
   28f44:	10800504 	addi	r2,r2,20
   28f48:	e0bff715 	stw	r2,-36(fp)
  xa = xa0 + a->_wds;
   28f4c:	e0bffe17 	ldw	r2,-8(fp)
   28f50:	10800417 	ldw	r2,16(r2)
   28f54:	1085883a 	add	r2,r2,r2
   28f58:	1085883a 	add	r2,r2,r2
   28f5c:	1007883a 	mov	r3,r2
   28f60:	e0bff717 	ldw	r2,-36(fp)
   28f64:	10c5883a 	add	r2,r2,r3
   28f68:	e0bff615 	stw	r2,-40(fp)
  y = *--xa;
   28f6c:	e0bff617 	ldw	r2,-40(fp)
   28f70:	10bfff04 	addi	r2,r2,-4
   28f74:	e0bff615 	stw	r2,-40(fp)
   28f78:	e0bff617 	ldw	r2,-40(fp)
   28f7c:	10800017 	ldw	r2,0(r2)
   28f80:	e0bff815 	stw	r2,-32(fp)
#ifdef DEBUG
  if (!y)
    Bug ("zero y in b2d");
#endif
  k = hi0bits (y);
   28f84:	e13ff817 	ldw	r4,-32(fp)
   28f88:	00281900 	call	28190 <__hi0bits>
   28f8c:	e0bff915 	stw	r2,-28(fp)
  *e = 32 - k;
   28f90:	00c00804 	movi	r3,32
   28f94:	e0bff917 	ldw	r2,-28(fp)
   28f98:	1887c83a 	sub	r3,r3,r2
   28f9c:	e0bfff17 	ldw	r2,-4(fp)
   28fa0:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
  if (k < Ebits)
   28fa4:	e0bff917 	ldw	r2,-28(fp)
   28fa8:	108002c8 	cmpgei	r2,r2,11
   28fac:	10001e1e 	bne	r2,zero,29028 <__b2d+0x100>
    {
      d0 = Exp_1 | y >> (Ebits - k);
   28fb0:	00c002c4 	movi	r3,11
   28fb4:	e0bff917 	ldw	r2,-28(fp)
   28fb8:	1885c83a 	sub	r2,r3,r2
   28fbc:	e0fff817 	ldw	r3,-32(fp)
   28fc0:	1884d83a 	srl	r2,r3,r2
   28fc4:	108ffc34 	orhi	r2,r2,16368
   28fc8:	e0bffd15 	stw	r2,-12(fp)
      w = xa > xa0 ? *--xa : 0;
   28fcc:	e0bff617 	ldw	r2,-40(fp)
   28fd0:	e0fff717 	ldw	r3,-36(fp)
   28fd4:	1880062e 	bgeu	r3,r2,28ff0 <__b2d+0xc8>
   28fd8:	e0bff617 	ldw	r2,-40(fp)
   28fdc:	10bfff04 	addi	r2,r2,-4
   28fe0:	e0bff615 	stw	r2,-40(fp)
   28fe4:	e0bff617 	ldw	r2,-40(fp)
   28fe8:	10800017 	ldw	r2,0(r2)
   28fec:	00000106 	br	28ff4 <__b2d+0xcc>
   28ff0:	0005883a 	mov	r2,zero
   28ff4:	e0bffa15 	stw	r2,-24(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
   28ff8:	e0bff917 	ldw	r2,-28(fp)
   28ffc:	10800544 	addi	r2,r2,21
   29000:	e0fff817 	ldw	r3,-32(fp)
   29004:	1886983a 	sll	r3,r3,r2
   29008:	010002c4 	movi	r4,11
   2900c:	e0bff917 	ldw	r2,-28(fp)
   29010:	2085c83a 	sub	r2,r4,r2
   29014:	e13ffa17 	ldw	r4,-24(fp)
   29018:	2084d83a 	srl	r2,r4,r2
   2901c:	1884b03a 	or	r2,r3,r2
   29020:	e0bffc15 	stw	r2,-16(fp)
#endif
      goto ret_d;
   29024:	00003606 	br	29100 <__b2d+0x1d8>
    }
  z = xa > xa0 ? *--xa : 0;
   29028:	e0bff617 	ldw	r2,-40(fp)
   2902c:	e0fff717 	ldw	r3,-36(fp)
   29030:	1880062e 	bgeu	r3,r2,2904c <__b2d+0x124>
   29034:	e0bff617 	ldw	r2,-40(fp)
   29038:	10bfff04 	addi	r2,r2,-4
   2903c:	e0bff615 	stw	r2,-40(fp)
   29040:	e0bff617 	ldw	r2,-40(fp)
   29044:	10800017 	ldw	r2,0(r2)
   29048:	00000106 	br	29050 <__b2d+0x128>
   2904c:	0005883a 	mov	r2,zero
   29050:	e0bffb15 	stw	r2,-20(fp)
  if (k -= Ebits)
   29054:	e0bff917 	ldw	r2,-28(fp)
   29058:	10bffd44 	addi	r2,r2,-11
   2905c:	e0bff915 	stw	r2,-28(fp)
   29060:	e0bff917 	ldw	r2,-28(fp)
   29064:	10002126 	beq	r2,zero,290ec <__b2d+0x1c4>
    {
      d0 = Exp_1 | y << k | z >> (32 - k);
   29068:	e0fff817 	ldw	r3,-32(fp)
   2906c:	e0bff917 	ldw	r2,-28(fp)
   29070:	1886983a 	sll	r3,r3,r2
   29074:	01000804 	movi	r4,32
   29078:	e0bff917 	ldw	r2,-28(fp)
   2907c:	2085c83a 	sub	r2,r4,r2
   29080:	e13ffb17 	ldw	r4,-20(fp)
   29084:	2084d83a 	srl	r2,r4,r2
   29088:	1884b03a 	or	r2,r3,r2
   2908c:	108ffc34 	orhi	r2,r2,16368
   29090:	e0bffd15 	stw	r2,-12(fp)
      y = xa > xa0 ? *--xa : 0;
   29094:	e0bff617 	ldw	r2,-40(fp)
   29098:	e0fff717 	ldw	r3,-36(fp)
   2909c:	1880062e 	bgeu	r3,r2,290b8 <__b2d+0x190>
   290a0:	e0bff617 	ldw	r2,-40(fp)
   290a4:	10bfff04 	addi	r2,r2,-4
   290a8:	e0bff615 	stw	r2,-40(fp)
   290ac:	e0bff617 	ldw	r2,-40(fp)
   290b0:	10800017 	ldw	r2,0(r2)
   290b4:	00000106 	br	290bc <__b2d+0x194>
   290b8:	0005883a 	mov	r2,zero
   290bc:	e0bff815 	stw	r2,-32(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z << k | y >> (32 - k);
   290c0:	e0fffb17 	ldw	r3,-20(fp)
   290c4:	e0bff917 	ldw	r2,-28(fp)
   290c8:	1886983a 	sll	r3,r3,r2
   290cc:	01000804 	movi	r4,32
   290d0:	e0bff917 	ldw	r2,-28(fp)
   290d4:	2085c83a 	sub	r2,r4,r2
   290d8:	e13ff817 	ldw	r4,-32(fp)
   290dc:	2084d83a 	srl	r2,r4,r2
   290e0:	1884b03a 	or	r2,r3,r2
   290e4:	e0bffc15 	stw	r2,-16(fp)
   290e8:	00000506 	br	29100 <__b2d+0x1d8>
#endif
    }
  else
    {
      d0 = Exp_1 | y;
   290ec:	e0bff817 	ldw	r2,-32(fp)
   290f0:	108ffc34 	orhi	r2,r2,16368
   290f4:	e0bffd15 	stw	r2,-12(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z;
   290f8:	e0bffb17 	ldw	r2,-20(fp)
   290fc:	e0bffc15 	stw	r2,-16(fp)
  word1 (d) = d1 >> 16 | d1 << 16;
#else
#undef d0
#undef d1
#endif
  return d.d;
   29100:	e0bffc17 	ldw	r2,-16(fp)
   29104:	e0fffd17 	ldw	r3,-12(fp)
   29108:	1009883a 	mov	r4,r2
   2910c:	180b883a 	mov	r5,r3
}
   29110:	2005883a 	mov	r2,r4
   29114:	2807883a 	mov	r3,r5
   29118:	e037883a 	mov	sp,fp
   2911c:	dfc00117 	ldw	ra,4(sp)
   29120:	df000017 	ldw	fp,0(sp)
   29124:	dec00204 	addi	sp,sp,8
   29128:	f800283a 	ret

0002912c <__d2b>:
	struct _reent * ptr _AND
	double _d _AND
	int *e _AND
	int *bits)

{
   2912c:	defff004 	addi	sp,sp,-64
   29130:	dfc00f15 	stw	ra,60(sp)
   29134:	df000e15 	stw	fp,56(sp)
   29138:	dc000d15 	stw	r16,52(sp)
   2913c:	df000e04 	addi	fp,sp,56
   29140:	e13ffb15 	stw	r4,-20(fp)
   29144:	e17ffc15 	stw	r5,-16(fp)
   29148:	e1bffd15 	stw	r6,-12(fp)
   2914c:	e1fffe15 	stw	r7,-8(fp)
  int de, i, k;
  __ULong *x, y, z;
#ifdef VAX
  __ULong d0, d1;
#endif
  d.d = _d;
   29150:	e0bffc17 	ldw	r2,-16(fp)
   29154:	e0bff715 	stw	r2,-36(fp)
   29158:	e0bffd17 	ldw	r2,-12(fp)
   2915c:	e0bff815 	stw	r2,-32(fp)
  d0 = word0 (d) >> 16 | word0 (d) << 16;
  d1 = word1 (d) >> 16 | word1 (d) << 16;
#else
#define d0 word0(d)
#define d1 word1(d)
  d.d = _d;
   29160:	e0bffc17 	ldw	r2,-16(fp)
   29164:	e0bff715 	stw	r2,-36(fp)
   29168:	e0bffd17 	ldw	r2,-12(fp)
   2916c:	e0bff815 	stw	r2,-32(fp)
#endif

#ifdef Pack_32
  b = Balloc (ptr, 1);
   29170:	01400044 	movi	r5,1
   29174:	e13ffb17 	ldw	r4,-20(fp)
   29178:	0027cc80 	call	27cc8 <_Balloc>
   2917c:	e0bff415 	stw	r2,-48(fp)
#else
  b = Balloc (ptr, 2);
#endif
  x = b->_x;
   29180:	e0bff417 	ldw	r2,-48(fp)
   29184:	10800504 	addi	r2,r2,20
   29188:	e0bff515 	stw	r2,-44(fp)

  z = d0 & Frac_mask;
   2918c:	e0fff817 	ldw	r3,-32(fp)
   29190:	00800434 	movhi	r2,16
   29194:	10bfffc4 	addi	r2,r2,-1
   29198:	1884703a 	and	r2,r3,r2
   2919c:	e0bffa15 	stw	r2,-24(fp)
  d0 &= 0x7fffffff;		/* clear sign bit, which we ignore */
   291a0:	e0fff817 	ldw	r3,-32(fp)
   291a4:	00a00034 	movhi	r2,32768
   291a8:	10bfffc4 	addi	r2,r2,-1
   291ac:	1884703a 	and	r2,r3,r2
   291b0:	e0bff815 	stw	r2,-32(fp)
  de = (int) (d0 >> Exp_shift);
#ifndef IBM
  z |= Exp_msk11;
#endif
#else
  if ((de = (int) (d0 >> Exp_shift)) != 0)
   291b4:	e0bff817 	ldw	r2,-32(fp)
   291b8:	1004d53a 	srli	r2,r2,20
   291bc:	e0bff615 	stw	r2,-40(fp)
   291c0:	e0bff617 	ldw	r2,-40(fp)
   291c4:	10000326 	beq	r2,zero,291d4 <__d2b+0xa8>
    z |= Exp_msk1;
   291c8:	e0bffa17 	ldw	r2,-24(fp)
   291cc:	10800434 	orhi	r2,r2,16
   291d0:	e0bffa15 	stw	r2,-24(fp)
#endif
#ifdef Pack_32
#ifndef _DOUBLE_IS_32BITS
  if (d1)
   291d4:	e0bff717 	ldw	r2,-36(fp)
   291d8:	10002826 	beq	r2,zero,2927c <__d2b+0x150>
    {
      y = d1;
   291dc:	e0bff717 	ldw	r2,-36(fp)
   291e0:	e0bff915 	stw	r2,-28(fp)
      k = lo0bits (&y);
   291e4:	e0bff904 	addi	r2,fp,-28
   291e8:	1009883a 	mov	r4,r2
   291ec:	00282200 	call	28220 <__lo0bits>
   291f0:	e0bff315 	stw	r2,-52(fp)
      if (k)
   291f4:	e0bff317 	ldw	r2,-52(fp)
   291f8:	10000e26 	beq	r2,zero,29234 <__d2b+0x108>
	{
         x[0] = y | z << (32 - k);
   291fc:	e0fffa17 	ldw	r3,-24(fp)
   29200:	01000804 	movi	r4,32
   29204:	e0bff317 	ldw	r2,-52(fp)
   29208:	2085c83a 	sub	r2,r4,r2
   2920c:	1886983a 	sll	r3,r3,r2
   29210:	e0bff917 	ldw	r2,-28(fp)
   29214:	1886b03a 	or	r3,r3,r2
   29218:	e0bff517 	ldw	r2,-44(fp)
   2921c:	10c00015 	stw	r3,0(r2)
	  z >>= k;
   29220:	e0fffa17 	ldw	r3,-24(fp)
   29224:	e0bff317 	ldw	r2,-52(fp)
   29228:	1884d83a 	srl	r2,r3,r2
   2922c:	e0bffa15 	stw	r2,-24(fp)
   29230:	00000306 	br	29240 <__d2b+0x114>
	}
      else
	x[0] = y;
   29234:	e0fff917 	ldw	r3,-28(fp)
   29238:	e0bff517 	ldw	r2,-44(fp)
   2923c:	10c00015 	stw	r3,0(r2)
      i = b->_wds = (x[1] = z) ? 2 : 1;
   29240:	e0bff517 	ldw	r2,-44(fp)
   29244:	10800104 	addi	r2,r2,4
   29248:	e0fffa17 	ldw	r3,-24(fp)
   2924c:	10c00015 	stw	r3,0(r2)
   29250:	10800017 	ldw	r2,0(r2)
   29254:	10000226 	beq	r2,zero,29260 <__d2b+0x134>
   29258:	00800084 	movi	r2,2
   2925c:	00000106 	br	29264 <__d2b+0x138>
   29260:	00800044 	movi	r2,1
   29264:	e0fff417 	ldw	r3,-48(fp)
   29268:	18800415 	stw	r2,16(r3)
   2926c:	e0bff417 	ldw	r2,-48(fp)
   29270:	10800417 	ldw	r2,16(r2)
   29274:	e0bff215 	stw	r2,-56(fp)
   29278:	00001006 	br	292bc <__d2b+0x190>
    {
#ifdef DEBUG
      if (!z)
	Bug ("Zero passed to d2b");
#endif
      k = lo0bits (&z);
   2927c:	e0bffa04 	addi	r2,fp,-24
   29280:	1009883a 	mov	r4,r2
   29284:	00282200 	call	28220 <__lo0bits>
   29288:	e0bff315 	stw	r2,-52(fp)
      x[0] = z;
   2928c:	e0fffa17 	ldw	r3,-24(fp)
   29290:	e0bff517 	ldw	r2,-44(fp)
   29294:	10c00015 	stw	r3,0(r2)
      i = b->_wds = 1;
   29298:	e0bff417 	ldw	r2,-48(fp)
   2929c:	00c00044 	movi	r3,1
   292a0:	10c00415 	stw	r3,16(r2)
   292a4:	e0bff417 	ldw	r2,-48(fp)
   292a8:	10800417 	ldw	r2,16(r2)
   292ac:	e0bff215 	stw	r2,-56(fp)
#ifndef _DOUBLE_IS_32BITS
      k += 32;
   292b0:	e0bff317 	ldw	r2,-52(fp)
   292b4:	10800804 	addi	r2,r2,32
   292b8:	e0bff315 	stw	r2,-52(fp)
  while (!x[i])
    --i;
  b->_wds = i + 1;
#endif
#ifndef Sudden_Underflow
  if (de)
   292bc:	e0bff617 	ldw	r2,-40(fp)
   292c0:	10000c26 	beq	r2,zero,292f4 <__d2b+0x1c8>
#endif
#ifdef IBM
      *e = (de - Bias - (P - 1) << 2) + k;
      *bits = 4 * P + 8 - k - hi0bits (word0 (d) & Frac_mask);
#else
      *e = de - Bias - (P - 1) + k;
   292c4:	e0bff617 	ldw	r2,-40(fp)
   292c8:	10fef344 	addi	r3,r2,-1075
   292cc:	e0bff317 	ldw	r2,-52(fp)
   292d0:	1887883a 	add	r3,r3,r2
   292d4:	e0bffe17 	ldw	r2,-8(fp)
   292d8:	10c00015 	stw	r3,0(r2)
      *bits = P - k;
   292dc:	00c00d44 	movi	r3,53
   292e0:	e0bff317 	ldw	r2,-52(fp)
   292e4:	1887c83a 	sub	r3,r3,r2
   292e8:	e0800217 	ldw	r2,8(fp)
   292ec:	10c00015 	stw	r3,0(r2)
   292f0:	00001706 	br	29350 <__d2b+0x224>
#endif
#ifndef Sudden_Underflow
    }
  else
    {
      *e = de - Bias - (P - 1) + 1 + k;
   292f4:	e0bff617 	ldw	r2,-40(fp)
   292f8:	10fef384 	addi	r3,r2,-1074
   292fc:	e0bff317 	ldw	r2,-52(fp)
   29300:	1887883a 	add	r3,r3,r2
   29304:	e0bffe17 	ldw	r2,-8(fp)
   29308:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
      *bits = 32 * i - hi0bits (x[i - 1]);
   2930c:	e0bff217 	ldw	r2,-56(fp)
   29310:	1020917a 	slli	r16,r2,5
   29314:	e0fff217 	ldw	r3,-56(fp)
   29318:	00900034 	movhi	r2,16384
   2931c:	10bfffc4 	addi	r2,r2,-1
   29320:	1885883a 	add	r2,r3,r2
   29324:	1085883a 	add	r2,r2,r2
   29328:	1085883a 	add	r2,r2,r2
   2932c:	1007883a 	mov	r3,r2
   29330:	e0bff517 	ldw	r2,-44(fp)
   29334:	10c5883a 	add	r2,r2,r3
   29338:	10800017 	ldw	r2,0(r2)
   2933c:	1009883a 	mov	r4,r2
   29340:	00281900 	call	28190 <__hi0bits>
   29344:	8087c83a 	sub	r3,r16,r2
   29348:	e0800217 	ldw	r2,8(fp)
   2934c:	10c00015 	stw	r3,0(r2)
#else
      *bits = (i + 2) * 16 - hi0bits (x[i]);
#endif
    }
#endif
  return b;
   29350:	e0bff417 	ldw	r2,-48(fp)
}
   29354:	e6ffff04 	addi	sp,fp,-4
   29358:	dfc00217 	ldw	ra,8(sp)
   2935c:	df000117 	ldw	fp,4(sp)
   29360:	dc000017 	ldw	r16,0(sp)
   29364:	dec00304 	addi	sp,sp,12
   29368:	f800283a 	ret

0002936c <__ratio>:
#undef d1

double
_DEFUN (ratio, (a, b), _Bigint * a _AND _Bigint * b)

{
   2936c:	defff504 	addi	sp,sp,-44
   29370:	dfc00a15 	stw	ra,40(sp)
   29374:	df000915 	stw	fp,36(sp)
   29378:	df000904 	addi	fp,sp,36
   2937c:	e13ffe15 	stw	r4,-8(fp)
   29380:	e17fff15 	stw	r5,-4(fp)
  union double_union da, db;
  int k, ka, kb;

  da.d = b2d (a, &ka);
   29384:	e0bffc04 	addi	r2,fp,-16
   29388:	100b883a 	mov	r5,r2
   2938c:	e13ffe17 	ldw	r4,-8(fp)
   29390:	0028f280 	call	28f28 <__b2d>
   29394:	1009883a 	mov	r4,r2
   29398:	180b883a 	mov	r5,r3
   2939c:	e13ff815 	stw	r4,-32(fp)
   293a0:	e17ff915 	stw	r5,-28(fp)
  db.d = b2d (b, &kb);
   293a4:	e0bffd04 	addi	r2,fp,-12
   293a8:	100b883a 	mov	r5,r2
   293ac:	e13fff17 	ldw	r4,-4(fp)
   293b0:	0028f280 	call	28f28 <__b2d>
   293b4:	1009883a 	mov	r4,r2
   293b8:	180b883a 	mov	r5,r3
   293bc:	e13ffa15 	stw	r4,-24(fp)
   293c0:	e17ffb15 	stw	r5,-20(fp)
#ifdef Pack_32
  k = ka - kb + 32 * (a->_wds - b->_wds);
   293c4:	e0fffc17 	ldw	r3,-16(fp)
   293c8:	e0bffd17 	ldw	r2,-12(fp)
   293cc:	1887c83a 	sub	r3,r3,r2
   293d0:	e0bffe17 	ldw	r2,-8(fp)
   293d4:	11000417 	ldw	r4,16(r2)
   293d8:	e0bfff17 	ldw	r2,-4(fp)
   293dc:	10800417 	ldw	r2,16(r2)
   293e0:	2085c83a 	sub	r2,r4,r2
   293e4:	1004917a 	slli	r2,r2,5
   293e8:	1885883a 	add	r2,r3,r2
   293ec:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += (k >> 2) * Exp_msk1;
      if (k &= 3)
	db.d *= 1 << k;
    }
#else
  if (k > 0)
   293f0:	e0bff717 	ldw	r2,-36(fp)
   293f4:	0080060e 	bge	zero,r2,29410 <__ratio+0xa4>
    word0 (da) += k * Exp_msk1;
   293f8:	e0fff917 	ldw	r3,-28(fp)
   293fc:	e0bff717 	ldw	r2,-36(fp)
   29400:	1004953a 	slli	r2,r2,20
   29404:	1885883a 	add	r2,r3,r2
   29408:	e0bff915 	stw	r2,-28(fp)
   2940c:	00000806 	br	29430 <__ratio+0xc4>
  else
    {
      k = -k;
   29410:	e0bff717 	ldw	r2,-36(fp)
   29414:	0085c83a 	sub	r2,zero,r2
   29418:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += k * Exp_msk1;
   2941c:	e0fffb17 	ldw	r3,-20(fp)
   29420:	e0bff717 	ldw	r2,-36(fp)
   29424:	1004953a 	slli	r2,r2,20
   29428:	1885883a 	add	r2,r3,r2
   2942c:	e0bffb15 	stw	r2,-20(fp)
    }
#endif
  return da.d / db.d;
   29430:	e0bff817 	ldw	r2,-32(fp)
   29434:	e0fff917 	ldw	r3,-28(fp)
   29438:	e13ffa17 	ldw	r4,-24(fp)
   2943c:	e17ffb17 	ldw	r5,-20(fp)
   29440:	200d883a 	mov	r6,r4
   29444:	280f883a 	mov	r7,r5
   29448:	1009883a 	mov	r4,r2
   2944c:	180b883a 	mov	r5,r3
   29450:	002dfdc0 	call	2dfdc <__divdf3>
   29454:	100f883a 	mov	r7,r2
   29458:	1811883a 	mov	r8,r3
   2945c:	380b883a 	mov	r5,r7
   29460:	400d883a 	mov	r6,r8
   29464:	2807883a 	mov	r3,r5
   29468:	3009883a 	mov	r4,r6
}
   2946c:	1805883a 	mov	r2,r3
   29470:	2007883a 	mov	r3,r4
   29474:	e037883a 	mov	sp,fp
   29478:	dfc00117 	ldw	ra,4(sp)
   2947c:	df000017 	ldw	fp,0(sp)
   29480:	dec00204 	addi	sp,sp,8
   29484:	f800283a 	ret

00029488 <_mprec_log10>:


double
_DEFUN (_mprec_log10, (dig),
	int dig)
{
   29488:	defffb04 	addi	sp,sp,-20
   2948c:	dfc00415 	stw	ra,16(sp)
   29490:	df000315 	stw	fp,12(sp)
   29494:	df000304 	addi	fp,sp,12
   29498:	e13fff15 	stw	r4,-4(fp)
  double v = 1.0;
   2949c:	e03ffd15 	stw	zero,-12(fp)
   294a0:	008ffc34 	movhi	r2,16368
   294a4:	e0bffe15 	stw	r2,-8(fp)
  if (dig < 24)
   294a8:	e0bfff17 	ldw	r2,-4(fp)
   294ac:	10800608 	cmpgei	r2,r2,24
   294b0:	1000141e 	bne	r2,zero,29504 <_mprec_log10+0x7c>
    return tens[dig];
   294b4:	008000f4 	movhi	r2,3
   294b8:	1087b604 	addi	r2,r2,7896
   294bc:	e0ffff17 	ldw	r3,-4(fp)
   294c0:	180690fa 	slli	r3,r3,3
   294c4:	10c9883a 	add	r4,r2,r3
   294c8:	20800017 	ldw	r2,0(r4)
   294cc:	20c00117 	ldw	r3,4(r4)
   294d0:	00001006 	br	29514 <_mprec_log10+0x8c>
  while (dig > 0)
    {
      v *= 10;
   294d4:	000d883a 	mov	r6,zero
   294d8:	01d00934 	movhi	r7,16420
   294dc:	e13ffd17 	ldw	r4,-12(fp)
   294e0:	e17ffe17 	ldw	r5,-8(fp)
   294e4:	002eb1c0 	call	2eb1c <__muldf3>
   294e8:	1009883a 	mov	r4,r2
   294ec:	180b883a 	mov	r5,r3
   294f0:	e13ffd15 	stw	r4,-12(fp)
   294f4:	e17ffe15 	stw	r5,-8(fp)
      dig--;
   294f8:	e0bfff17 	ldw	r2,-4(fp)
   294fc:	10bfffc4 	addi	r2,r2,-1
   29500:	e0bfff15 	stw	r2,-4(fp)
	int dig)
{
  double v = 1.0;
  if (dig < 24)
    return tens[dig];
  while (dig > 0)
   29504:	e0bfff17 	ldw	r2,-4(fp)
   29508:	00bff216 	blt	zero,r2,294d4 <__alt_data_end+0xfffe94d4>
    {
      v *= 10;
      dig--;
    }
  return v;
   2950c:	e0bffd17 	ldw	r2,-12(fp)
   29510:	e0fffe17 	ldw	r3,-8(fp)
   29514:	1009883a 	mov	r4,r2
   29518:	180b883a 	mov	r5,r3
}
   2951c:	2005883a 	mov	r2,r4
   29520:	2807883a 	mov	r3,r5
   29524:	e037883a 	mov	sp,fp
   29528:	dfc00117 	ldw	ra,4(sp)
   2952c:	df000017 	ldw	fp,0(sp)
   29530:	dec00204 	addi	sp,sp,8
   29534:	f800283a 	ret

00029538 <__copybits>:
void
_DEFUN (copybits, (c, n, b),
	__ULong *c _AND
	int n _AND
	_Bigint *b)
{
   29538:	defff904 	addi	sp,sp,-28
   2953c:	df000615 	stw	fp,24(sp)
   29540:	df000604 	addi	fp,sp,24
   29544:	e13ffd15 	stw	r4,-12(fp)
   29548:	e17ffe15 	stw	r5,-8(fp)
   2954c:	e1bfff15 	stw	r6,-4(fp)
	__ULong *ce, *x, *xe;
#ifdef Pack_16
	int nw, nw1;
#endif

	ce = c + ((n-1) >> kshift) + 1;
   29550:	e0bffe17 	ldw	r2,-8(fp)
   29554:	10bfffc4 	addi	r2,r2,-1
   29558:	1005d17a 	srai	r2,r2,5
   2955c:	10800044 	addi	r2,r2,1
   29560:	1085883a 	add	r2,r2,r2
   29564:	1085883a 	add	r2,r2,r2
   29568:	1007883a 	mov	r3,r2
   2956c:	e0bffd17 	ldw	r2,-12(fp)
   29570:	10c5883a 	add	r2,r2,r3
   29574:	e0bffb15 	stw	r2,-20(fp)
	x = b->_x;
   29578:	e0bfff17 	ldw	r2,-4(fp)
   2957c:	10800504 	addi	r2,r2,20
   29580:	e0bffa15 	stw	r2,-24(fp)
#ifdef Pack_32
	xe = x + b->_wds;
   29584:	e0bfff17 	ldw	r2,-4(fp)
   29588:	10800417 	ldw	r2,16(r2)
   2958c:	1085883a 	add	r2,r2,r2
   29590:	1085883a 	add	r2,r2,r2
   29594:	1007883a 	mov	r3,r2
   29598:	e0bffa17 	ldw	r2,-24(fp)
   2959c:	10c5883a 	add	r2,r2,r3
   295a0:	e0bffc15 	stw	r2,-16(fp)
	while(x < xe)
   295a4:	00000806 	br	295c8 <__copybits+0x90>
		*c++ = *x++;
   295a8:	e0bffd17 	ldw	r2,-12(fp)
   295ac:	10c00104 	addi	r3,r2,4
   295b0:	e0fffd15 	stw	r3,-12(fp)
   295b4:	e0fffa17 	ldw	r3,-24(fp)
   295b8:	19000104 	addi	r4,r3,4
   295bc:	e13ffa15 	stw	r4,-24(fp)
   295c0:	18c00017 	ldw	r3,0(r3)
   295c4:	10c00015 	stw	r3,0(r2)

	ce = c + ((n-1) >> kshift) + 1;
	x = b->_x;
#ifdef Pack_32
	xe = x + b->_wds;
	while(x < xe)
   295c8:	e0fffa17 	ldw	r3,-24(fp)
   295cc:	e0bffc17 	ldw	r2,-16(fp)
   295d0:	18bff536 	bltu	r3,r2,295a8 <__alt_data_end+0xfffe95a8>
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
   295d4:	00000406 	br	295e8 <__copybits+0xb0>
		*c++ = 0;
   295d8:	e0bffd17 	ldw	r2,-12(fp)
   295dc:	10c00104 	addi	r3,r2,4
   295e0:	e0fffd15 	stw	r3,-12(fp)
   295e4:	10000015 	stw	zero,0(r2)
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
   295e8:	e0fffd17 	ldw	r3,-12(fp)
   295ec:	e0bffb17 	ldw	r2,-20(fp)
   295f0:	18bff936 	bltu	r3,r2,295d8 <__alt_data_end+0xfffe95d8>
		*c++ = 0;
}
   295f4:	0001883a 	nop
   295f8:	e037883a 	mov	sp,fp
   295fc:	df000017 	ldw	fp,0(sp)
   29600:	dec00104 	addi	sp,sp,4
   29604:	f800283a 	ret

00029608 <__any_on>:

__ULong
_DEFUN (any_on, (b, k),
	_Bigint *b _AND
	int k)
{
   29608:	defff704 	addi	sp,sp,-36
   2960c:	df000815 	stw	fp,32(sp)
   29610:	df000804 	addi	fp,sp,32
   29614:	e13ffe15 	stw	r4,-8(fp)
   29618:	e17fff15 	stw	r5,-4(fp)
	int n, nwds;
	__ULong *x, *x0, x1, x2;

	x = b->_x;
   2961c:	e0bffe17 	ldw	r2,-8(fp)
   29620:	10800504 	addi	r2,r2,20
   29624:	e0bff915 	stw	r2,-28(fp)
	nwds = b->_wds;
   29628:	e0bffe17 	ldw	r2,-8(fp)
   2962c:	10800417 	ldw	r2,16(r2)
   29630:	e0bffa15 	stw	r2,-24(fp)
	n = k >> kshift;
   29634:	e0bfff17 	ldw	r2,-4(fp)
   29638:	1005d17a 	srai	r2,r2,5
   2963c:	e0bff815 	stw	r2,-32(fp)
	if (n > nwds)
   29640:	e0bff817 	ldw	r2,-32(fp)
   29644:	e0fffa17 	ldw	r3,-24(fp)
   29648:	1880030e 	bge	r3,r2,29658 <__any_on+0x50>
		n = nwds;
   2964c:	e0bffa17 	ldw	r2,-24(fp)
   29650:	e0bff815 	stw	r2,-32(fp)
   29654:	00001f06 	br	296d4 <__any_on+0xcc>
	else if (n < nwds && (k &= kmask)) {
   29658:	e0fff817 	ldw	r3,-32(fp)
   2965c:	e0bffa17 	ldw	r2,-24(fp)
   29660:	18801c0e 	bge	r3,r2,296d4 <__any_on+0xcc>
   29664:	e0bfff17 	ldw	r2,-4(fp)
   29668:	108007cc 	andi	r2,r2,31
   2966c:	e0bfff15 	stw	r2,-4(fp)
   29670:	e0bfff17 	ldw	r2,-4(fp)
   29674:	10001726 	beq	r2,zero,296d4 <__any_on+0xcc>
		x1 = x2 = x[n];
   29678:	e0bff817 	ldw	r2,-32(fp)
   2967c:	1085883a 	add	r2,r2,r2
   29680:	1085883a 	add	r2,r2,r2
   29684:	1007883a 	mov	r3,r2
   29688:	e0bff917 	ldw	r2,-28(fp)
   2968c:	10c5883a 	add	r2,r2,r3
   29690:	10800017 	ldw	r2,0(r2)
   29694:	e0bffb15 	stw	r2,-20(fp)
   29698:	e0bffb17 	ldw	r2,-20(fp)
   2969c:	e0bffc15 	stw	r2,-16(fp)
		x1 >>= k;
   296a0:	e0fffc17 	ldw	r3,-16(fp)
   296a4:	e0bfff17 	ldw	r2,-4(fp)
   296a8:	1884d83a 	srl	r2,r3,r2
   296ac:	e0bffc15 	stw	r2,-16(fp)
		x1 <<= k;
   296b0:	e0fffc17 	ldw	r3,-16(fp)
   296b4:	e0bfff17 	ldw	r2,-4(fp)
   296b8:	1884983a 	sll	r2,r3,r2
   296bc:	e0bffc15 	stw	r2,-16(fp)
		if (x1 != x2)
   296c0:	e0fffc17 	ldw	r3,-16(fp)
   296c4:	e0bffb17 	ldw	r2,-20(fp)
   296c8:	18800226 	beq	r3,r2,296d4 <__any_on+0xcc>
			return 1;
   296cc:	00800044 	movi	r2,1
   296d0:	00001606 	br	2972c <__any_on+0x124>
		}
	x0 = x;
   296d4:	e0bff917 	ldw	r2,-28(fp)
   296d8:	e0bffd15 	stw	r2,-12(fp)
	x += n;
   296dc:	e0bff817 	ldw	r2,-32(fp)
   296e0:	1085883a 	add	r2,r2,r2
   296e4:	1085883a 	add	r2,r2,r2
   296e8:	1007883a 	mov	r3,r2
   296ec:	e0bff917 	ldw	r2,-28(fp)
   296f0:	10c5883a 	add	r2,r2,r3
   296f4:	e0bff915 	stw	r2,-28(fp)
	while(x > x0)
   296f8:	00000806 	br	2971c <__any_on+0x114>
		if (*--x)
   296fc:	e0bff917 	ldw	r2,-28(fp)
   29700:	10bfff04 	addi	r2,r2,-4
   29704:	e0bff915 	stw	r2,-28(fp)
   29708:	e0bff917 	ldw	r2,-28(fp)
   2970c:	10800017 	ldw	r2,0(r2)
   29710:	10000226 	beq	r2,zero,2971c <__any_on+0x114>
			return 1;
   29714:	00800044 	movi	r2,1
   29718:	00000406 	br	2972c <__any_on+0x124>
		if (x1 != x2)
			return 1;
		}
	x0 = x;
	x += n;
	while(x > x0)
   2971c:	e0bff917 	ldw	r2,-28(fp)
   29720:	e0fffd17 	ldw	r3,-12(fp)
   29724:	18bff536 	bltu	r3,r2,296fc <__alt_data_end+0xfffe96fc>
		if (*--x)
			return 1;
	return 0;
   29728:	0005883a 	mov	r2,zero
}
   2972c:	e037883a 	mov	sp,fp
   29730:	df000017 	ldw	fp,0(sp)
   29734:	dec00104 	addi	sp,sp,4
   29738:	f800283a 	ret

0002973c <_realloc_r>:
#if __STD_C
Void_t* rEALLOc(RARG Void_t* oldmem, size_t bytes)
#else
Void_t* rEALLOc(RARG oldmem, bytes) RDECL Void_t* oldmem; size_t bytes;
#endif
{
   2973c:	deffe104 	addi	sp,sp,-124
   29740:	dfc01e15 	stw	ra,120(sp)
   29744:	df001d15 	stw	fp,116(sp)
   29748:	df001d04 	addi	fp,sp,116
   2974c:	e13ffd15 	stw	r4,-12(fp)
   29750:	e17ffe15 	stw	r5,-8(fp)
   29754:	e1bfff15 	stw	r6,-4(fp)
  if (bytes == 0) { fREe(RCALL oldmem); return 0; }
#endif


  /* realloc of null is supposed to be same as malloc */
  if (oldmem == 0) return mALLOc(RCALL bytes);
   29758:	e0bffe17 	ldw	r2,-8(fp)
   2975c:	1000041e 	bne	r2,zero,29770 <_realloc_r+0x34>
   29760:	e17fff17 	ldw	r5,-4(fp)
   29764:	e13ffd17 	ldw	r4,-12(fp)
   29768:	0026a3c0 	call	26a3c <_malloc_r>
   2976c:	0002ea06 	br	2a318 <_realloc_r+0xbdc>

  MALLOC_LOCK;
   29770:	e13ffd17 	ldw	r4,-12(fp)
   29774:	00301240 	call	30124 <__malloc_lock>

  newp    = oldp    = mem2chunk(oldmem);
   29778:	e0bffe17 	ldw	r2,-8(fp)
   2977c:	10bffe04 	addi	r2,r2,-8
   29780:	e0bfef15 	stw	r2,-68(fp)
   29784:	e0bfef17 	ldw	r2,-68(fp)
   29788:	e0bfe315 	stw	r2,-116(fp)
  newsize = oldsize = chunksize(oldp);
   2978c:	e0bfef17 	ldw	r2,-68(fp)
   29790:	10c00117 	ldw	r3,4(r2)
   29794:	00bfff04 	movi	r2,-4
   29798:	1884703a 	and	r2,r3,r2
   2979c:	e0bff015 	stw	r2,-64(fp)
   297a0:	e0bff017 	ldw	r2,-64(fp)
   297a4:	e0bfe415 	stw	r2,-112(fp)


  nb = request2size(bytes);
   297a8:	e0bfff17 	ldw	r2,-4(fp)
   297ac:	108002c4 	addi	r2,r2,11
   297b0:	108005f0 	cmpltui	r2,r2,23
   297b4:	1000051e 	bne	r2,zero,297cc <_realloc_r+0x90>
   297b8:	e0bfff17 	ldw	r2,-4(fp)
   297bc:	10c002c4 	addi	r3,r2,11
   297c0:	00bffe04 	movi	r2,-8
   297c4:	1884703a 	and	r2,r3,r2
   297c8:	00000106 	br	297d0 <_realloc_r+0x94>
   297cc:	00800404 	movi	r2,16
   297d0:	e0bff115 	stw	r2,-60(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
   297d4:	e0bff117 	ldw	r2,-60(fp)
   297d8:	10000316 	blt	r2,zero,297e8 <_realloc_r+0xac>
   297dc:	e0fff117 	ldw	r3,-60(fp)
   297e0:	e0bfff17 	ldw	r2,-4(fp)
   297e4:	1880052e 	bgeu	r3,r2,297fc <_realloc_r+0xc0>
  {
    RERRNO = ENOMEM;
   297e8:	e0bffd17 	ldw	r2,-12(fp)
   297ec:	00c00304 	movi	r3,12
   297f0:	10c00015 	stw	r3,0(r2)
    return 0;
   297f4:	0005883a 	mov	r2,zero
   297f8:	0002c706 	br	2a318 <_realloc_r+0xbdc>
  }
#endif

  check_inuse_chunk(oldp);

  if ((long)(oldsize) < (long)(nb))  
   297fc:	e0fff017 	ldw	r3,-64(fp)
   29800:	e0bff117 	ldw	r2,-60(fp)
   29804:	18828b0e 	bge	r3,r2,2a234 <_realloc_r+0xaf8>
  {

    /* Try expanding forward */

    next = chunk_at_offset(oldp, oldsize);
   29808:	e0ffef17 	ldw	r3,-68(fp)
   2980c:	e0bff017 	ldw	r2,-64(fp)
   29810:	1885883a 	add	r2,r3,r2
   29814:	e0bfe515 	stw	r2,-108(fp)
    if (next == top || !inuse(next)) 
   29818:	008000f4 	movhi	r2,3
   2981c:	10898b04 	addi	r2,r2,9772
   29820:	10c00217 	ldw	r3,8(r2)
   29824:	e0bfe517 	ldw	r2,-108(fp)
   29828:	18800926 	beq	r3,r2,29850 <_realloc_r+0x114>
   2982c:	e0bfe517 	ldw	r2,-108(fp)
   29830:	10c00117 	ldw	r3,4(r2)
   29834:	00bfff84 	movi	r2,-2
   29838:	1884703a 	and	r2,r3,r2
   2983c:	e0ffe517 	ldw	r3,-108(fp)
   29840:	1885883a 	add	r2,r3,r2
   29844:	10800117 	ldw	r2,4(r2)
   29848:	1080004c 	andi	r2,r2,1
   2984c:	1000461e 	bne	r2,zero,29968 <_realloc_r+0x22c>
    {
      nextsize = chunksize(next);
   29850:	e0bfe517 	ldw	r2,-108(fp)
   29854:	10c00117 	ldw	r3,4(r2)
   29858:	00bfff04 	movi	r2,-4
   2985c:	1884703a 	and	r2,r3,r2
   29860:	e0bfe615 	stw	r2,-104(fp)

      /* Forward into top only if a remainder */
      if (next == top)
   29864:	008000f4 	movhi	r2,3
   29868:	10898b04 	addi	r2,r2,9772
   2986c:	10c00217 	ldw	r3,8(r2)
   29870:	e0bfe517 	ldw	r2,-108(fp)
   29874:	1880251e 	bne	r3,r2,2990c <_realloc_r+0x1d0>
      {
        if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
   29878:	e0ffe617 	ldw	r3,-104(fp)
   2987c:	e0bfe417 	ldw	r2,-112(fp)
   29880:	1885883a 	add	r2,r3,r2
   29884:	1007883a 	mov	r3,r2
   29888:	e0bff117 	ldw	r2,-60(fp)
   2988c:	10800404 	addi	r2,r2,16
   29890:	18803816 	blt	r3,r2,29974 <_realloc_r+0x238>
        {
          newsize += nextsize;
   29894:	e0ffe417 	ldw	r3,-112(fp)
   29898:	e0bfe617 	ldw	r2,-104(fp)
   2989c:	1885883a 	add	r2,r3,r2
   298a0:	e0bfe415 	stw	r2,-112(fp)
          top = chunk_at_offset(oldp, nb);
   298a4:	008000f4 	movhi	r2,3
   298a8:	10898b04 	addi	r2,r2,9772
   298ac:	e13fef17 	ldw	r4,-68(fp)
   298b0:	e0fff117 	ldw	r3,-60(fp)
   298b4:	20c7883a 	add	r3,r4,r3
   298b8:	10c00215 	stw	r3,8(r2)
          set_head(top, (newsize - nb) | PREV_INUSE);
   298bc:	008000f4 	movhi	r2,3
   298c0:	10898b04 	addi	r2,r2,9772
   298c4:	10800217 	ldw	r2,8(r2)
   298c8:	e13fe417 	ldw	r4,-112(fp)
   298cc:	e0fff117 	ldw	r3,-60(fp)
   298d0:	20c7c83a 	sub	r3,r4,r3
   298d4:	18c00054 	ori	r3,r3,1
   298d8:	10c00115 	stw	r3,4(r2)
          set_head_size(oldp, nb);
   298dc:	e0bfef17 	ldw	r2,-68(fp)
   298e0:	10800117 	ldw	r2,4(r2)
   298e4:	10c0004c 	andi	r3,r2,1
   298e8:	e0bff117 	ldw	r2,-60(fp)
   298ec:	1886b03a 	or	r3,r3,r2
   298f0:	e0bfef17 	ldw	r2,-68(fp)
   298f4:	10c00115 	stw	r3,4(r2)
	  MALLOC_UNLOCK;
   298f8:	e13ffd17 	ldw	r4,-12(fp)
   298fc:	00301480 	call	30148 <__malloc_unlock>
          return chunk2mem(oldp);
   29900:	e0bfef17 	ldw	r2,-68(fp)
   29904:	10800204 	addi	r2,r2,8
   29908:	00028306 	br	2a318 <_realloc_r+0xbdc>
        }
      }

      /* Forward into next chunk */
      else if (((long)(nextsize + newsize) >= (long)(nb)))
   2990c:	e0ffe617 	ldw	r3,-104(fp)
   29910:	e0bfe417 	ldw	r2,-112(fp)
   29914:	1885883a 	add	r2,r3,r2
   29918:	1007883a 	mov	r3,r2
   2991c:	e0bff117 	ldw	r2,-60(fp)
   29920:	18801416 	blt	r3,r2,29974 <_realloc_r+0x238>
      { 
        unlink(next, bck, fwd);
   29924:	e0bfe517 	ldw	r2,-108(fp)
   29928:	10800317 	ldw	r2,12(r2)
   2992c:	e0bff215 	stw	r2,-56(fp)
   29930:	e0bfe517 	ldw	r2,-108(fp)
   29934:	10800217 	ldw	r2,8(r2)
   29938:	e0bff315 	stw	r2,-52(fp)
   2993c:	e0bff317 	ldw	r2,-52(fp)
   29940:	e0fff217 	ldw	r3,-56(fp)
   29944:	10c00315 	stw	r3,12(r2)
   29948:	e0bff217 	ldw	r2,-56(fp)
   2994c:	e0fff317 	ldw	r3,-52(fp)
   29950:	10c00215 	stw	r3,8(r2)
        newsize  += nextsize;
   29954:	e0ffe417 	ldw	r3,-112(fp)
   29958:	e0bfe617 	ldw	r2,-104(fp)
   2995c:	1885883a 	add	r2,r3,r2
   29960:	e0bfe415 	stw	r2,-112(fp)
        goto split;
   29964:	00023306 	br	2a234 <_realloc_r+0xaf8>
      }
    }
    else
    {
      next = 0;
   29968:	e03fe515 	stw	zero,-108(fp)
      nextsize = 0;
   2996c:	e03fe615 	stw	zero,-104(fp)
   29970:	00000106 	br	29978 <_realloc_r+0x23c>
    if (next == top || !inuse(next)) 
    {
      nextsize = chunksize(next);

      /* Forward into top only if a remainder */
      if (next == top)
   29974:	0001883a 	nop
      nextsize = 0;
    }

    /* Try shifting backwards. */

    if (!prev_inuse(oldp))
   29978:	e0bfef17 	ldw	r2,-68(fp)
   2997c:	10800117 	ldw	r2,4(r2)
   29980:	1080004c 	andi	r2,r2,1
   29984:	1001a91e 	bne	r2,zero,2a02c <_realloc_r+0x8f0>
    {
      prev = prev_chunk(oldp);
   29988:	e0bfef17 	ldw	r2,-68(fp)
   2998c:	10800017 	ldw	r2,0(r2)
   29990:	0085c83a 	sub	r2,zero,r2
   29994:	e0ffef17 	ldw	r3,-68(fp)
   29998:	1885883a 	add	r2,r3,r2
   2999c:	e0bff415 	stw	r2,-48(fp)
      prevsize = chunksize(prev);
   299a0:	e0bff417 	ldw	r2,-48(fp)
   299a4:	10c00117 	ldw	r3,4(r2)
   299a8:	00bfff04 	movi	r2,-4
   299ac:	1884703a 	and	r2,r3,r2
   299b0:	e0bff515 	stw	r2,-44(fp)

      /* try forward + backward first to save a later consolidation */

      if (next != 0)
   299b4:	e0bfe517 	ldw	r2,-108(fp)
   299b8:	10012226 	beq	r2,zero,29e44 <_realloc_r+0x708>
      {
        /* into top */
        if (next == top)
   299bc:	008000f4 	movhi	r2,3
   299c0:	10898b04 	addi	r2,r2,9772
   299c4:	10c00217 	ldw	r3,8(r2)
   299c8:	e0bfe517 	ldw	r2,-108(fp)
   299cc:	1880951e 	bne	r3,r2,29c24 <_realloc_r+0x4e8>
        {
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
   299d0:	e0ffe617 	ldw	r3,-104(fp)
   299d4:	e0bff517 	ldw	r2,-44(fp)
   299d8:	1887883a 	add	r3,r3,r2
   299dc:	e0bfe417 	ldw	r2,-112(fp)
   299e0:	1885883a 	add	r2,r3,r2
   299e4:	1007883a 	mov	r3,r2
   299e8:	e0bff117 	ldw	r2,-60(fp)
   299ec:	10800404 	addi	r2,r2,16
   299f0:	18811416 	blt	r3,r2,29e44 <_realloc_r+0x708>
          {
            unlink(prev, bck, fwd);
   299f4:	e0bff417 	ldw	r2,-48(fp)
   299f8:	10800317 	ldw	r2,12(r2)
   299fc:	e0bff215 	stw	r2,-56(fp)
   29a00:	e0bff417 	ldw	r2,-48(fp)
   29a04:	10800217 	ldw	r2,8(r2)
   29a08:	e0bff315 	stw	r2,-52(fp)
   29a0c:	e0bff317 	ldw	r2,-52(fp)
   29a10:	e0fff217 	ldw	r3,-56(fp)
   29a14:	10c00315 	stw	r3,12(r2)
   29a18:	e0bff217 	ldw	r2,-56(fp)
   29a1c:	e0fff317 	ldw	r3,-52(fp)
   29a20:	10c00215 	stw	r3,8(r2)
            newp = prev;
   29a24:	e0bff417 	ldw	r2,-48(fp)
   29a28:	e0bfe315 	stw	r2,-116(fp)
            newsize += prevsize + nextsize;
   29a2c:	e0fff517 	ldw	r3,-44(fp)
   29a30:	e0bfe617 	ldw	r2,-104(fp)
   29a34:	1885883a 	add	r2,r3,r2
   29a38:	e0ffe417 	ldw	r3,-112(fp)
   29a3c:	1885883a 	add	r2,r3,r2
   29a40:	e0bfe415 	stw	r2,-112(fp)
            newmem = chunk2mem(newp);
   29a44:	e0bfe317 	ldw	r2,-116(fp)
   29a48:	10800204 	addi	r2,r2,8
   29a4c:	e0bff615 	stw	r2,-40(fp)
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   29a50:	e0bff017 	ldw	r2,-64(fp)
   29a54:	10bfff04 	addi	r2,r2,-4
   29a58:	e0bff715 	stw	r2,-36(fp)
   29a5c:	e0bff717 	ldw	r2,-36(fp)
   29a60:	10800968 	cmpgeui	r2,r2,37
   29a64:	1000521e 	bne	r2,zero,29bb0 <_realloc_r+0x474>
   29a68:	e0bffe17 	ldw	r2,-8(fp)
   29a6c:	e0bfe715 	stw	r2,-100(fp)
   29a70:	e0bff617 	ldw	r2,-40(fp)
   29a74:	e0bfe815 	stw	r2,-96(fp)
   29a78:	e0bff717 	ldw	r2,-36(fp)
   29a7c:	10800530 	cmpltui	r2,r2,20
   29a80:	1000361e 	bne	r2,zero,29b5c <_realloc_r+0x420>
   29a84:	e0bfe817 	ldw	r2,-96(fp)
   29a88:	10c00104 	addi	r3,r2,4
   29a8c:	e0ffe815 	stw	r3,-96(fp)
   29a90:	e0ffe717 	ldw	r3,-100(fp)
   29a94:	19000104 	addi	r4,r3,4
   29a98:	e13fe715 	stw	r4,-100(fp)
   29a9c:	18c00017 	ldw	r3,0(r3)
   29aa0:	10c00015 	stw	r3,0(r2)
   29aa4:	e0bfe817 	ldw	r2,-96(fp)
   29aa8:	10c00104 	addi	r3,r2,4
   29aac:	e0ffe815 	stw	r3,-96(fp)
   29ab0:	e0ffe717 	ldw	r3,-100(fp)
   29ab4:	19000104 	addi	r4,r3,4
   29ab8:	e13fe715 	stw	r4,-100(fp)
   29abc:	18c00017 	ldw	r3,0(r3)
   29ac0:	10c00015 	stw	r3,0(r2)
   29ac4:	e0bff717 	ldw	r2,-36(fp)
   29ac8:	10800730 	cmpltui	r2,r2,28
   29acc:	1000231e 	bne	r2,zero,29b5c <_realloc_r+0x420>
   29ad0:	e0bfe817 	ldw	r2,-96(fp)
   29ad4:	10c00104 	addi	r3,r2,4
   29ad8:	e0ffe815 	stw	r3,-96(fp)
   29adc:	e0ffe717 	ldw	r3,-100(fp)
   29ae0:	19000104 	addi	r4,r3,4
   29ae4:	e13fe715 	stw	r4,-100(fp)
   29ae8:	18c00017 	ldw	r3,0(r3)
   29aec:	10c00015 	stw	r3,0(r2)
   29af0:	e0bfe817 	ldw	r2,-96(fp)
   29af4:	10c00104 	addi	r3,r2,4
   29af8:	e0ffe815 	stw	r3,-96(fp)
   29afc:	e0ffe717 	ldw	r3,-100(fp)
   29b00:	19000104 	addi	r4,r3,4
   29b04:	e13fe715 	stw	r4,-100(fp)
   29b08:	18c00017 	ldw	r3,0(r3)
   29b0c:	10c00015 	stw	r3,0(r2)
   29b10:	e0bff717 	ldw	r2,-36(fp)
   29b14:	10800930 	cmpltui	r2,r2,36
   29b18:	1000101e 	bne	r2,zero,29b5c <_realloc_r+0x420>
   29b1c:	e0bfe817 	ldw	r2,-96(fp)
   29b20:	10c00104 	addi	r3,r2,4
   29b24:	e0ffe815 	stw	r3,-96(fp)
   29b28:	e0ffe717 	ldw	r3,-100(fp)
   29b2c:	19000104 	addi	r4,r3,4
   29b30:	e13fe715 	stw	r4,-100(fp)
   29b34:	18c00017 	ldw	r3,0(r3)
   29b38:	10c00015 	stw	r3,0(r2)
   29b3c:	e0bfe817 	ldw	r2,-96(fp)
   29b40:	10c00104 	addi	r3,r2,4
   29b44:	e0ffe815 	stw	r3,-96(fp)
   29b48:	e0ffe717 	ldw	r3,-100(fp)
   29b4c:	19000104 	addi	r4,r3,4
   29b50:	e13fe715 	stw	r4,-100(fp)
   29b54:	18c00017 	ldw	r3,0(r3)
   29b58:	10c00015 	stw	r3,0(r2)
   29b5c:	e0bfe817 	ldw	r2,-96(fp)
   29b60:	10c00104 	addi	r3,r2,4
   29b64:	e0ffe815 	stw	r3,-96(fp)
   29b68:	e0ffe717 	ldw	r3,-100(fp)
   29b6c:	19000104 	addi	r4,r3,4
   29b70:	e13fe715 	stw	r4,-100(fp)
   29b74:	18c00017 	ldw	r3,0(r3)
   29b78:	10c00015 	stw	r3,0(r2)
   29b7c:	e0bfe817 	ldw	r2,-96(fp)
   29b80:	10c00104 	addi	r3,r2,4
   29b84:	e0ffe815 	stw	r3,-96(fp)
   29b88:	e0ffe717 	ldw	r3,-100(fp)
   29b8c:	19000104 	addi	r4,r3,4
   29b90:	e13fe715 	stw	r4,-100(fp)
   29b94:	18c00017 	ldw	r3,0(r3)
   29b98:	10c00015 	stw	r3,0(r2)
   29b9c:	e0bfe717 	ldw	r2,-100(fp)
   29ba0:	10c00017 	ldw	r3,0(r2)
   29ba4:	e0bfe817 	ldw	r2,-96(fp)
   29ba8:	10c00015 	stw	r3,0(r2)
   29bac:	00000406 	br	29bc0 <_realloc_r+0x484>
   29bb0:	e1bff717 	ldw	r6,-36(fp)
   29bb4:	e17ffe17 	ldw	r5,-8(fp)
   29bb8:	e13ff617 	ldw	r4,-40(fp)
   29bbc:	00278fc0 	call	278fc <memmove>
            top = chunk_at_offset(newp, nb);
   29bc0:	008000f4 	movhi	r2,3
   29bc4:	10898b04 	addi	r2,r2,9772
   29bc8:	e13fe317 	ldw	r4,-116(fp)
   29bcc:	e0fff117 	ldw	r3,-60(fp)
   29bd0:	20c7883a 	add	r3,r4,r3
   29bd4:	10c00215 	stw	r3,8(r2)
            set_head(top, (newsize - nb) | PREV_INUSE);
   29bd8:	008000f4 	movhi	r2,3
   29bdc:	10898b04 	addi	r2,r2,9772
   29be0:	10800217 	ldw	r2,8(r2)
   29be4:	e13fe417 	ldw	r4,-112(fp)
   29be8:	e0fff117 	ldw	r3,-60(fp)
   29bec:	20c7c83a 	sub	r3,r4,r3
   29bf0:	18c00054 	ori	r3,r3,1
   29bf4:	10c00115 	stw	r3,4(r2)
            set_head_size(newp, nb);
   29bf8:	e0bfe317 	ldw	r2,-116(fp)
   29bfc:	10800117 	ldw	r2,4(r2)
   29c00:	10c0004c 	andi	r3,r2,1
   29c04:	e0bff117 	ldw	r2,-60(fp)
   29c08:	1886b03a 	or	r3,r3,r2
   29c0c:	e0bfe317 	ldw	r2,-116(fp)
   29c10:	10c00115 	stw	r3,4(r2)
	    MALLOC_UNLOCK;
   29c14:	e13ffd17 	ldw	r4,-12(fp)
   29c18:	00301480 	call	30148 <__malloc_unlock>
            return newmem;
   29c1c:	e0bff617 	ldw	r2,-40(fp)
   29c20:	0001bd06 	br	2a318 <_realloc_r+0xbdc>
          }
        }

        /* into next chunk */
        else if (((long)(nextsize + prevsize + newsize) >= (long)(nb)))
   29c24:	e0ffe617 	ldw	r3,-104(fp)
   29c28:	e0bff517 	ldw	r2,-44(fp)
   29c2c:	1887883a 	add	r3,r3,r2
   29c30:	e0bfe417 	ldw	r2,-112(fp)
   29c34:	1885883a 	add	r2,r3,r2
   29c38:	1007883a 	mov	r3,r2
   29c3c:	e0bff117 	ldw	r2,-60(fp)
   29c40:	18808016 	blt	r3,r2,29e44 <_realloc_r+0x708>
        {
          unlink(next, bck, fwd);
   29c44:	e0bfe517 	ldw	r2,-108(fp)
   29c48:	10800317 	ldw	r2,12(r2)
   29c4c:	e0bff215 	stw	r2,-56(fp)
   29c50:	e0bfe517 	ldw	r2,-108(fp)
   29c54:	10800217 	ldw	r2,8(r2)
   29c58:	e0bff315 	stw	r2,-52(fp)
   29c5c:	e0bff317 	ldw	r2,-52(fp)
   29c60:	e0fff217 	ldw	r3,-56(fp)
   29c64:	10c00315 	stw	r3,12(r2)
   29c68:	e0bff217 	ldw	r2,-56(fp)
   29c6c:	e0fff317 	ldw	r3,-52(fp)
   29c70:	10c00215 	stw	r3,8(r2)
          unlink(prev, bck, fwd);
   29c74:	e0bff417 	ldw	r2,-48(fp)
   29c78:	10800317 	ldw	r2,12(r2)
   29c7c:	e0bff215 	stw	r2,-56(fp)
   29c80:	e0bff417 	ldw	r2,-48(fp)
   29c84:	10800217 	ldw	r2,8(r2)
   29c88:	e0bff315 	stw	r2,-52(fp)
   29c8c:	e0bff317 	ldw	r2,-52(fp)
   29c90:	e0fff217 	ldw	r3,-56(fp)
   29c94:	10c00315 	stw	r3,12(r2)
   29c98:	e0bff217 	ldw	r2,-56(fp)
   29c9c:	e0fff317 	ldw	r3,-52(fp)
   29ca0:	10c00215 	stw	r3,8(r2)
          newp = prev;
   29ca4:	e0bff417 	ldw	r2,-48(fp)
   29ca8:	e0bfe315 	stw	r2,-116(fp)
          newsize += nextsize + prevsize;
   29cac:	e0ffe617 	ldw	r3,-104(fp)
   29cb0:	e0bff517 	ldw	r2,-44(fp)
   29cb4:	1885883a 	add	r2,r3,r2
   29cb8:	e0ffe417 	ldw	r3,-112(fp)
   29cbc:	1885883a 	add	r2,r3,r2
   29cc0:	e0bfe415 	stw	r2,-112(fp)
          newmem = chunk2mem(newp);
   29cc4:	e0bfe317 	ldw	r2,-116(fp)
   29cc8:	10800204 	addi	r2,r2,8
   29ccc:	e0bff615 	stw	r2,-40(fp)
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   29cd0:	e0bff017 	ldw	r2,-64(fp)
   29cd4:	10bfff04 	addi	r2,r2,-4
   29cd8:	e0bff815 	stw	r2,-32(fp)
   29cdc:	e0bff817 	ldw	r2,-32(fp)
   29ce0:	10800968 	cmpgeui	r2,r2,37
   29ce4:	1000521e 	bne	r2,zero,29e30 <_realloc_r+0x6f4>
   29ce8:	e0bffe17 	ldw	r2,-8(fp)
   29cec:	e0bfe915 	stw	r2,-92(fp)
   29cf0:	e0bff617 	ldw	r2,-40(fp)
   29cf4:	e0bfea15 	stw	r2,-88(fp)
   29cf8:	e0bff817 	ldw	r2,-32(fp)
   29cfc:	10800530 	cmpltui	r2,r2,20
   29d00:	1000361e 	bne	r2,zero,29ddc <_realloc_r+0x6a0>
   29d04:	e0bfea17 	ldw	r2,-88(fp)
   29d08:	10c00104 	addi	r3,r2,4
   29d0c:	e0ffea15 	stw	r3,-88(fp)
   29d10:	e0ffe917 	ldw	r3,-92(fp)
   29d14:	19000104 	addi	r4,r3,4
   29d18:	e13fe915 	stw	r4,-92(fp)
   29d1c:	18c00017 	ldw	r3,0(r3)
   29d20:	10c00015 	stw	r3,0(r2)
   29d24:	e0bfea17 	ldw	r2,-88(fp)
   29d28:	10c00104 	addi	r3,r2,4
   29d2c:	e0ffea15 	stw	r3,-88(fp)
   29d30:	e0ffe917 	ldw	r3,-92(fp)
   29d34:	19000104 	addi	r4,r3,4
   29d38:	e13fe915 	stw	r4,-92(fp)
   29d3c:	18c00017 	ldw	r3,0(r3)
   29d40:	10c00015 	stw	r3,0(r2)
   29d44:	e0bff817 	ldw	r2,-32(fp)
   29d48:	10800730 	cmpltui	r2,r2,28
   29d4c:	1000231e 	bne	r2,zero,29ddc <_realloc_r+0x6a0>
   29d50:	e0bfea17 	ldw	r2,-88(fp)
   29d54:	10c00104 	addi	r3,r2,4
   29d58:	e0ffea15 	stw	r3,-88(fp)
   29d5c:	e0ffe917 	ldw	r3,-92(fp)
   29d60:	19000104 	addi	r4,r3,4
   29d64:	e13fe915 	stw	r4,-92(fp)
   29d68:	18c00017 	ldw	r3,0(r3)
   29d6c:	10c00015 	stw	r3,0(r2)
   29d70:	e0bfea17 	ldw	r2,-88(fp)
   29d74:	10c00104 	addi	r3,r2,4
   29d78:	e0ffea15 	stw	r3,-88(fp)
   29d7c:	e0ffe917 	ldw	r3,-92(fp)
   29d80:	19000104 	addi	r4,r3,4
   29d84:	e13fe915 	stw	r4,-92(fp)
   29d88:	18c00017 	ldw	r3,0(r3)
   29d8c:	10c00015 	stw	r3,0(r2)
   29d90:	e0bff817 	ldw	r2,-32(fp)
   29d94:	10800930 	cmpltui	r2,r2,36
   29d98:	1000101e 	bne	r2,zero,29ddc <_realloc_r+0x6a0>
   29d9c:	e0bfea17 	ldw	r2,-88(fp)
   29da0:	10c00104 	addi	r3,r2,4
   29da4:	e0ffea15 	stw	r3,-88(fp)
   29da8:	e0ffe917 	ldw	r3,-92(fp)
   29dac:	19000104 	addi	r4,r3,4
   29db0:	e13fe915 	stw	r4,-92(fp)
   29db4:	18c00017 	ldw	r3,0(r3)
   29db8:	10c00015 	stw	r3,0(r2)
   29dbc:	e0bfea17 	ldw	r2,-88(fp)
   29dc0:	10c00104 	addi	r3,r2,4
   29dc4:	e0ffea15 	stw	r3,-88(fp)
   29dc8:	e0ffe917 	ldw	r3,-92(fp)
   29dcc:	19000104 	addi	r4,r3,4
   29dd0:	e13fe915 	stw	r4,-92(fp)
   29dd4:	18c00017 	ldw	r3,0(r3)
   29dd8:	10c00015 	stw	r3,0(r2)
   29ddc:	e0bfea17 	ldw	r2,-88(fp)
   29de0:	10c00104 	addi	r3,r2,4
   29de4:	e0ffea15 	stw	r3,-88(fp)
   29de8:	e0ffe917 	ldw	r3,-92(fp)
   29dec:	19000104 	addi	r4,r3,4
   29df0:	e13fe915 	stw	r4,-92(fp)
   29df4:	18c00017 	ldw	r3,0(r3)
   29df8:	10c00015 	stw	r3,0(r2)
   29dfc:	e0bfea17 	ldw	r2,-88(fp)
   29e00:	10c00104 	addi	r3,r2,4
   29e04:	e0ffea15 	stw	r3,-88(fp)
   29e08:	e0ffe917 	ldw	r3,-92(fp)
   29e0c:	19000104 	addi	r4,r3,4
   29e10:	e13fe915 	stw	r4,-92(fp)
   29e14:	18c00017 	ldw	r3,0(r3)
   29e18:	10c00015 	stw	r3,0(r2)
   29e1c:	e0bfe917 	ldw	r2,-92(fp)
   29e20:	10c00017 	ldw	r3,0(r2)
   29e24:	e0bfea17 	ldw	r2,-88(fp)
   29e28:	10c00015 	stw	r3,0(r2)
          goto split;
   29e2c:	00010106 	br	2a234 <_realloc_r+0xaf8>
          unlink(next, bck, fwd);
          unlink(prev, bck, fwd);
          newp = prev;
          newsize += nextsize + prevsize;
          newmem = chunk2mem(newp);
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   29e30:	e1bff817 	ldw	r6,-32(fp)
   29e34:	e17ffe17 	ldw	r5,-8(fp)
   29e38:	e13ff617 	ldw	r4,-40(fp)
   29e3c:	00278fc0 	call	278fc <memmove>
          goto split;
   29e40:	0000fc06 	br	2a234 <_realloc_r+0xaf8>
        }
      }
      
      /* backward only */
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)  
   29e44:	e0bff417 	ldw	r2,-48(fp)
   29e48:	10007826 	beq	r2,zero,2a02c <_realloc_r+0x8f0>
   29e4c:	e0fff517 	ldw	r3,-44(fp)
   29e50:	e0bfe417 	ldw	r2,-112(fp)
   29e54:	1885883a 	add	r2,r3,r2
   29e58:	1007883a 	mov	r3,r2
   29e5c:	e0bff117 	ldw	r2,-60(fp)
   29e60:	18807216 	blt	r3,r2,2a02c <_realloc_r+0x8f0>
      {
        unlink(prev, bck, fwd);
   29e64:	e0bff417 	ldw	r2,-48(fp)
   29e68:	10800317 	ldw	r2,12(r2)
   29e6c:	e0bff215 	stw	r2,-56(fp)
   29e70:	e0bff417 	ldw	r2,-48(fp)
   29e74:	10800217 	ldw	r2,8(r2)
   29e78:	e0bff315 	stw	r2,-52(fp)
   29e7c:	e0bff317 	ldw	r2,-52(fp)
   29e80:	e0fff217 	ldw	r3,-56(fp)
   29e84:	10c00315 	stw	r3,12(r2)
   29e88:	e0bff217 	ldw	r2,-56(fp)
   29e8c:	e0fff317 	ldw	r3,-52(fp)
   29e90:	10c00215 	stw	r3,8(r2)
        newp = prev;
   29e94:	e0bff417 	ldw	r2,-48(fp)
   29e98:	e0bfe315 	stw	r2,-116(fp)
        newsize += prevsize;
   29e9c:	e0ffe417 	ldw	r3,-112(fp)
   29ea0:	e0bff517 	ldw	r2,-44(fp)
   29ea4:	1885883a 	add	r2,r3,r2
   29ea8:	e0bfe415 	stw	r2,-112(fp)
        newmem = chunk2mem(newp);
   29eac:	e0bfe317 	ldw	r2,-116(fp)
   29eb0:	10800204 	addi	r2,r2,8
   29eb4:	e0bff615 	stw	r2,-40(fp)
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   29eb8:	e0bff017 	ldw	r2,-64(fp)
   29ebc:	10bfff04 	addi	r2,r2,-4
   29ec0:	e0bff915 	stw	r2,-28(fp)
   29ec4:	e0bff917 	ldw	r2,-28(fp)
   29ec8:	10800968 	cmpgeui	r2,r2,37
   29ecc:	1000521e 	bne	r2,zero,2a018 <_realloc_r+0x8dc>
   29ed0:	e0bffe17 	ldw	r2,-8(fp)
   29ed4:	e0bfeb15 	stw	r2,-84(fp)
   29ed8:	e0bff617 	ldw	r2,-40(fp)
   29edc:	e0bfec15 	stw	r2,-80(fp)
   29ee0:	e0bff917 	ldw	r2,-28(fp)
   29ee4:	10800530 	cmpltui	r2,r2,20
   29ee8:	1000361e 	bne	r2,zero,29fc4 <_realloc_r+0x888>
   29eec:	e0bfec17 	ldw	r2,-80(fp)
   29ef0:	10c00104 	addi	r3,r2,4
   29ef4:	e0ffec15 	stw	r3,-80(fp)
   29ef8:	e0ffeb17 	ldw	r3,-84(fp)
   29efc:	19000104 	addi	r4,r3,4
   29f00:	e13feb15 	stw	r4,-84(fp)
   29f04:	18c00017 	ldw	r3,0(r3)
   29f08:	10c00015 	stw	r3,0(r2)
   29f0c:	e0bfec17 	ldw	r2,-80(fp)
   29f10:	10c00104 	addi	r3,r2,4
   29f14:	e0ffec15 	stw	r3,-80(fp)
   29f18:	e0ffeb17 	ldw	r3,-84(fp)
   29f1c:	19000104 	addi	r4,r3,4
   29f20:	e13feb15 	stw	r4,-84(fp)
   29f24:	18c00017 	ldw	r3,0(r3)
   29f28:	10c00015 	stw	r3,0(r2)
   29f2c:	e0bff917 	ldw	r2,-28(fp)
   29f30:	10800730 	cmpltui	r2,r2,28
   29f34:	1000231e 	bne	r2,zero,29fc4 <_realloc_r+0x888>
   29f38:	e0bfec17 	ldw	r2,-80(fp)
   29f3c:	10c00104 	addi	r3,r2,4
   29f40:	e0ffec15 	stw	r3,-80(fp)
   29f44:	e0ffeb17 	ldw	r3,-84(fp)
   29f48:	19000104 	addi	r4,r3,4
   29f4c:	e13feb15 	stw	r4,-84(fp)
   29f50:	18c00017 	ldw	r3,0(r3)
   29f54:	10c00015 	stw	r3,0(r2)
   29f58:	e0bfec17 	ldw	r2,-80(fp)
   29f5c:	10c00104 	addi	r3,r2,4
   29f60:	e0ffec15 	stw	r3,-80(fp)
   29f64:	e0ffeb17 	ldw	r3,-84(fp)
   29f68:	19000104 	addi	r4,r3,4
   29f6c:	e13feb15 	stw	r4,-84(fp)
   29f70:	18c00017 	ldw	r3,0(r3)
   29f74:	10c00015 	stw	r3,0(r2)
   29f78:	e0bff917 	ldw	r2,-28(fp)
   29f7c:	10800930 	cmpltui	r2,r2,36
   29f80:	1000101e 	bne	r2,zero,29fc4 <_realloc_r+0x888>
   29f84:	e0bfec17 	ldw	r2,-80(fp)
   29f88:	10c00104 	addi	r3,r2,4
   29f8c:	e0ffec15 	stw	r3,-80(fp)
   29f90:	e0ffeb17 	ldw	r3,-84(fp)
   29f94:	19000104 	addi	r4,r3,4
   29f98:	e13feb15 	stw	r4,-84(fp)
   29f9c:	18c00017 	ldw	r3,0(r3)
   29fa0:	10c00015 	stw	r3,0(r2)
   29fa4:	e0bfec17 	ldw	r2,-80(fp)
   29fa8:	10c00104 	addi	r3,r2,4
   29fac:	e0ffec15 	stw	r3,-80(fp)
   29fb0:	e0ffeb17 	ldw	r3,-84(fp)
   29fb4:	19000104 	addi	r4,r3,4
   29fb8:	e13feb15 	stw	r4,-84(fp)
   29fbc:	18c00017 	ldw	r3,0(r3)
   29fc0:	10c00015 	stw	r3,0(r2)
   29fc4:	e0bfec17 	ldw	r2,-80(fp)
   29fc8:	10c00104 	addi	r3,r2,4
   29fcc:	e0ffec15 	stw	r3,-80(fp)
   29fd0:	e0ffeb17 	ldw	r3,-84(fp)
   29fd4:	19000104 	addi	r4,r3,4
   29fd8:	e13feb15 	stw	r4,-84(fp)
   29fdc:	18c00017 	ldw	r3,0(r3)
   29fe0:	10c00015 	stw	r3,0(r2)
   29fe4:	e0bfec17 	ldw	r2,-80(fp)
   29fe8:	10c00104 	addi	r3,r2,4
   29fec:	e0ffec15 	stw	r3,-80(fp)
   29ff0:	e0ffeb17 	ldw	r3,-84(fp)
   29ff4:	19000104 	addi	r4,r3,4
   29ff8:	e13feb15 	stw	r4,-84(fp)
   29ffc:	18c00017 	ldw	r3,0(r3)
   2a000:	10c00015 	stw	r3,0(r2)
   2a004:	e0bfeb17 	ldw	r2,-84(fp)
   2a008:	10c00017 	ldw	r3,0(r2)
   2a00c:	e0bfec17 	ldw	r2,-80(fp)
   2a010:	10c00015 	stw	r3,0(r2)
        goto split;
   2a014:	00008706 	br	2a234 <_realloc_r+0xaf8>
      {
        unlink(prev, bck, fwd);
        newp = prev;
        newsize += prevsize;
        newmem = chunk2mem(newp);
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   2a018:	e1bff917 	ldw	r6,-28(fp)
   2a01c:	e17ffe17 	ldw	r5,-8(fp)
   2a020:	e13ff617 	ldw	r4,-40(fp)
   2a024:	00278fc0 	call	278fc <memmove>
        goto split;
   2a028:	00008206 	br	2a234 <_realloc_r+0xaf8>
      }
    }

    /* Must allocate */

    newmem = mALLOc (RCALL bytes);
   2a02c:	e17fff17 	ldw	r5,-4(fp)
   2a030:	e13ffd17 	ldw	r4,-12(fp)
   2a034:	0026a3c0 	call	26a3c <_malloc_r>
   2a038:	e0bff615 	stw	r2,-40(fp)

    if (newmem == 0)  /* propagate failure */
   2a03c:	e0bff617 	ldw	r2,-40(fp)
   2a040:	1000041e 	bne	r2,zero,2a054 <_realloc_r+0x918>
    {
      MALLOC_UNLOCK;
   2a044:	e13ffd17 	ldw	r4,-12(fp)
   2a048:	00301480 	call	30148 <__malloc_unlock>
      return 0;
   2a04c:	0005883a 	mov	r2,zero
   2a050:	0000b106 	br	2a318 <_realloc_r+0xbdc>
    }

    /* Avoid copy if newp is next chunk after oldp. */
    /* (This can only happen when new chunk is sbrk'ed.) */

    if ( (newp = mem2chunk(newmem)) == next_chunk(oldp)) 
   2a054:	e0bff617 	ldw	r2,-40(fp)
   2a058:	10bffe04 	addi	r2,r2,-8
   2a05c:	e0bfe315 	stw	r2,-116(fp)
   2a060:	e0bfef17 	ldw	r2,-68(fp)
   2a064:	10c00117 	ldw	r3,4(r2)
   2a068:	00bfff84 	movi	r2,-2
   2a06c:	1884703a 	and	r2,r3,r2
   2a070:	e0ffef17 	ldw	r3,-68(fp)
   2a074:	1885883a 	add	r2,r3,r2
   2a078:	e0ffe317 	ldw	r3,-116(fp)
   2a07c:	18800a1e 	bne	r3,r2,2a0a8 <_realloc_r+0x96c>
    {
      newsize += chunksize(newp);
   2a080:	e0bfe317 	ldw	r2,-116(fp)
   2a084:	10c00117 	ldw	r3,4(r2)
   2a088:	00bfff04 	movi	r2,-4
   2a08c:	1884703a 	and	r2,r3,r2
   2a090:	e0ffe417 	ldw	r3,-112(fp)
   2a094:	1885883a 	add	r2,r3,r2
   2a098:	e0bfe415 	stw	r2,-112(fp)
      newp = oldp;
   2a09c:	e0bfef17 	ldw	r2,-68(fp)
   2a0a0:	e0bfe315 	stw	r2,-116(fp)
      goto split;
   2a0a4:	00006306 	br	2a234 <_realloc_r+0xaf8>
    }

    /* Otherwise copy, free, and exit */
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
   2a0a8:	e0bff017 	ldw	r2,-64(fp)
   2a0ac:	10bfff04 	addi	r2,r2,-4
   2a0b0:	e0bffa15 	stw	r2,-24(fp)
   2a0b4:	e0bffa17 	ldw	r2,-24(fp)
   2a0b8:	10800968 	cmpgeui	r2,r2,37
   2a0bc:	1000521e 	bne	r2,zero,2a208 <_realloc_r+0xacc>
   2a0c0:	e0bffe17 	ldw	r2,-8(fp)
   2a0c4:	e0bfed15 	stw	r2,-76(fp)
   2a0c8:	e0bff617 	ldw	r2,-40(fp)
   2a0cc:	e0bfee15 	stw	r2,-72(fp)
   2a0d0:	e0bffa17 	ldw	r2,-24(fp)
   2a0d4:	10800530 	cmpltui	r2,r2,20
   2a0d8:	1000361e 	bne	r2,zero,2a1b4 <_realloc_r+0xa78>
   2a0dc:	e0bfee17 	ldw	r2,-72(fp)
   2a0e0:	10c00104 	addi	r3,r2,4
   2a0e4:	e0ffee15 	stw	r3,-72(fp)
   2a0e8:	e0ffed17 	ldw	r3,-76(fp)
   2a0ec:	19000104 	addi	r4,r3,4
   2a0f0:	e13fed15 	stw	r4,-76(fp)
   2a0f4:	18c00017 	ldw	r3,0(r3)
   2a0f8:	10c00015 	stw	r3,0(r2)
   2a0fc:	e0bfee17 	ldw	r2,-72(fp)
   2a100:	10c00104 	addi	r3,r2,4
   2a104:	e0ffee15 	stw	r3,-72(fp)
   2a108:	e0ffed17 	ldw	r3,-76(fp)
   2a10c:	19000104 	addi	r4,r3,4
   2a110:	e13fed15 	stw	r4,-76(fp)
   2a114:	18c00017 	ldw	r3,0(r3)
   2a118:	10c00015 	stw	r3,0(r2)
   2a11c:	e0bffa17 	ldw	r2,-24(fp)
   2a120:	10800730 	cmpltui	r2,r2,28
   2a124:	1000231e 	bne	r2,zero,2a1b4 <_realloc_r+0xa78>
   2a128:	e0bfee17 	ldw	r2,-72(fp)
   2a12c:	10c00104 	addi	r3,r2,4
   2a130:	e0ffee15 	stw	r3,-72(fp)
   2a134:	e0ffed17 	ldw	r3,-76(fp)
   2a138:	19000104 	addi	r4,r3,4
   2a13c:	e13fed15 	stw	r4,-76(fp)
   2a140:	18c00017 	ldw	r3,0(r3)
   2a144:	10c00015 	stw	r3,0(r2)
   2a148:	e0bfee17 	ldw	r2,-72(fp)
   2a14c:	10c00104 	addi	r3,r2,4
   2a150:	e0ffee15 	stw	r3,-72(fp)
   2a154:	e0ffed17 	ldw	r3,-76(fp)
   2a158:	19000104 	addi	r4,r3,4
   2a15c:	e13fed15 	stw	r4,-76(fp)
   2a160:	18c00017 	ldw	r3,0(r3)
   2a164:	10c00015 	stw	r3,0(r2)
   2a168:	e0bffa17 	ldw	r2,-24(fp)
   2a16c:	10800930 	cmpltui	r2,r2,36
   2a170:	1000101e 	bne	r2,zero,2a1b4 <_realloc_r+0xa78>
   2a174:	e0bfee17 	ldw	r2,-72(fp)
   2a178:	10c00104 	addi	r3,r2,4
   2a17c:	e0ffee15 	stw	r3,-72(fp)
   2a180:	e0ffed17 	ldw	r3,-76(fp)
   2a184:	19000104 	addi	r4,r3,4
   2a188:	e13fed15 	stw	r4,-76(fp)
   2a18c:	18c00017 	ldw	r3,0(r3)
   2a190:	10c00015 	stw	r3,0(r2)
   2a194:	e0bfee17 	ldw	r2,-72(fp)
   2a198:	10c00104 	addi	r3,r2,4
   2a19c:	e0ffee15 	stw	r3,-72(fp)
   2a1a0:	e0ffed17 	ldw	r3,-76(fp)
   2a1a4:	19000104 	addi	r4,r3,4
   2a1a8:	e13fed15 	stw	r4,-76(fp)
   2a1ac:	18c00017 	ldw	r3,0(r3)
   2a1b0:	10c00015 	stw	r3,0(r2)
   2a1b4:	e0bfee17 	ldw	r2,-72(fp)
   2a1b8:	10c00104 	addi	r3,r2,4
   2a1bc:	e0ffee15 	stw	r3,-72(fp)
   2a1c0:	e0ffed17 	ldw	r3,-76(fp)
   2a1c4:	19000104 	addi	r4,r3,4
   2a1c8:	e13fed15 	stw	r4,-76(fp)
   2a1cc:	18c00017 	ldw	r3,0(r3)
   2a1d0:	10c00015 	stw	r3,0(r2)
   2a1d4:	e0bfee17 	ldw	r2,-72(fp)
   2a1d8:	10c00104 	addi	r3,r2,4
   2a1dc:	e0ffee15 	stw	r3,-72(fp)
   2a1e0:	e0ffed17 	ldw	r3,-76(fp)
   2a1e4:	19000104 	addi	r4,r3,4
   2a1e8:	e13fed15 	stw	r4,-76(fp)
   2a1ec:	18c00017 	ldw	r3,0(r3)
   2a1f0:	10c00015 	stw	r3,0(r2)
   2a1f4:	e0bfed17 	ldw	r2,-76(fp)
   2a1f8:	10c00017 	ldw	r3,0(r2)
   2a1fc:	e0bfee17 	ldw	r2,-72(fp)
   2a200:	10c00015 	stw	r3,0(r2)
   2a204:	00000406 	br	2a218 <_realloc_r+0xadc>
   2a208:	e1bffa17 	ldw	r6,-24(fp)
   2a20c:	e17ffe17 	ldw	r5,-8(fp)
   2a210:	e13ff617 	ldw	r4,-40(fp)
   2a214:	00278fc0 	call	278fc <memmove>
    fREe(RCALL oldmem);
   2a218:	e17ffe17 	ldw	r5,-8(fp)
   2a21c:	e13ffd17 	ldw	r4,-12(fp)
   2a220:	002540c0 	call	2540c <_free_r>
    MALLOC_UNLOCK;
   2a224:	e13ffd17 	ldw	r4,-12(fp)
   2a228:	00301480 	call	30148 <__malloc_unlock>
    return newmem;
   2a22c:	e0bff617 	ldw	r2,-40(fp)
   2a230:	00003906 	br	2a318 <_realloc_r+0xbdc>
  }


 split:  /* split off extra room in old or expanded chunk */

  remainder_size = long_sub_size_t(newsize, nb);
   2a234:	e0ffe417 	ldw	r3,-112(fp)
   2a238:	e0bff117 	ldw	r2,-60(fp)
   2a23c:	1885c83a 	sub	r2,r3,r2
   2a240:	e0bffb15 	stw	r2,-20(fp)

  if (remainder_size >= (long)MINSIZE) /* split off remainder */
   2a244:	e0bffb17 	ldw	r2,-20(fp)
   2a248:	10800430 	cmpltui	r2,r2,16
   2a24c:	10001e1e 	bne	r2,zero,2a2c8 <_realloc_r+0xb8c>
  {
    remainder = chunk_at_offset(newp, nb);
   2a250:	e0ffe317 	ldw	r3,-116(fp)
   2a254:	e0bff117 	ldw	r2,-60(fp)
   2a258:	1885883a 	add	r2,r3,r2
   2a25c:	e0bffc15 	stw	r2,-16(fp)
    set_head_size(newp, nb);
   2a260:	e0bfe317 	ldw	r2,-116(fp)
   2a264:	10800117 	ldw	r2,4(r2)
   2a268:	10c0004c 	andi	r3,r2,1
   2a26c:	e0bff117 	ldw	r2,-60(fp)
   2a270:	1886b03a 	or	r3,r3,r2
   2a274:	e0bfe317 	ldw	r2,-116(fp)
   2a278:	10c00115 	stw	r3,4(r2)
    set_head(remainder, remainder_size | PREV_INUSE);
   2a27c:	e0bffb17 	ldw	r2,-20(fp)
   2a280:	10c00054 	ori	r3,r2,1
   2a284:	e0bffc17 	ldw	r2,-16(fp)
   2a288:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(remainder, remainder_size);
   2a28c:	e0fffc17 	ldw	r3,-16(fp)
   2a290:	e0bffb17 	ldw	r2,-20(fp)
   2a294:	1885883a 	add	r2,r3,r2
   2a298:	e13ffc17 	ldw	r4,-16(fp)
   2a29c:	e0fffb17 	ldw	r3,-20(fp)
   2a2a0:	20c7883a 	add	r3,r4,r3
   2a2a4:	18c00117 	ldw	r3,4(r3)
   2a2a8:	18c00054 	ori	r3,r3,1
   2a2ac:	10c00115 	stw	r3,4(r2)
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
   2a2b0:	e0bffc17 	ldw	r2,-16(fp)
   2a2b4:	10800204 	addi	r2,r2,8
   2a2b8:	100b883a 	mov	r5,r2
   2a2bc:	e13ffd17 	ldw	r4,-12(fp)
   2a2c0:	002540c0 	call	2540c <_free_r>
   2a2c4:	00001006 	br	2a308 <_realloc_r+0xbcc>
  }
  else
  {
    set_head_size(newp, newsize);
   2a2c8:	e0bfe317 	ldw	r2,-116(fp)
   2a2cc:	10800117 	ldw	r2,4(r2)
   2a2d0:	10c0004c 	andi	r3,r2,1
   2a2d4:	e0bfe417 	ldw	r2,-112(fp)
   2a2d8:	1886b03a 	or	r3,r3,r2
   2a2dc:	e0bfe317 	ldw	r2,-116(fp)
   2a2e0:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(newp, newsize);
   2a2e4:	e0ffe317 	ldw	r3,-116(fp)
   2a2e8:	e0bfe417 	ldw	r2,-112(fp)
   2a2ec:	1885883a 	add	r2,r3,r2
   2a2f0:	e13fe317 	ldw	r4,-116(fp)
   2a2f4:	e0ffe417 	ldw	r3,-112(fp)
   2a2f8:	20c7883a 	add	r3,r4,r3
   2a2fc:	18c00117 	ldw	r3,4(r3)
   2a300:	18c00054 	ori	r3,r3,1
   2a304:	10c00115 	stw	r3,4(r2)
  }

  check_inuse_chunk(newp);
  MALLOC_UNLOCK;
   2a308:	e13ffd17 	ldw	r4,-12(fp)
   2a30c:	00301480 	call	30148 <__malloc_unlock>
  return chunk2mem(newp);
   2a310:	e0bfe317 	ldw	r2,-116(fp)
   2a314:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
   2a318:	e037883a 	mov	sp,fp
   2a31c:	dfc00117 	ldw	ra,4(sp)
   2a320:	df000017 	ldw	fp,0(sp)
   2a324:	dec00204 	addi	sp,sp,8
   2a328:	f800283a 	ret

0002a32c <__fpclassifyd>:

#include "fdlibm.h"

int
__fpclassifyd (double x)
{
   2a32c:	defff904 	addi	sp,sp,-28
   2a330:	df000615 	stw	fp,24(sp)
   2a334:	df000604 	addi	fp,sp,24
   2a338:	e13ffe15 	stw	r4,-8(fp)
   2a33c:	e17fff15 	stw	r5,-4(fp)
  __uint32_t msw, lsw;

  EXTRACT_WORDS(msw,lsw,x);
   2a340:	e0bffe17 	ldw	r2,-8(fp)
   2a344:	e0bffc15 	stw	r2,-16(fp)
   2a348:	e0bfff17 	ldw	r2,-4(fp)
   2a34c:	e0bffd15 	stw	r2,-12(fp)
   2a350:	e0bffd17 	ldw	r2,-12(fp)
   2a354:	e0bffa15 	stw	r2,-24(fp)
   2a358:	e0bffc17 	ldw	r2,-16(fp)
   2a35c:	e0bffb15 	stw	r2,-20(fp)

  if ((msw == 0x00000000 && lsw == 0x00000000) ||
   2a360:	e0bffa17 	ldw	r2,-24(fp)
   2a364:	1000021e 	bne	r2,zero,2a370 <__fpclassifyd+0x44>
   2a368:	e0bffb17 	ldw	r2,-20(fp)
   2a36c:	10000526 	beq	r2,zero,2a384 <__fpclassifyd+0x58>
   2a370:	e0fffa17 	ldw	r3,-24(fp)
   2a374:	00a00034 	movhi	r2,32768
   2a378:	1880041e 	bne	r3,r2,2a38c <__fpclassifyd+0x60>
      (msw == 0x80000000 && lsw == 0x00000000))
   2a37c:	e0bffb17 	ldw	r2,-20(fp)
   2a380:	1000021e 	bne	r2,zero,2a38c <__fpclassifyd+0x60>
    return FP_ZERO;
   2a384:	00800084 	movi	r2,2
   2a388:	00002506 	br	2a420 <__fpclassifyd+0xf4>
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
   2a38c:	e0fffa17 	ldw	r3,-24(fp)
   2a390:	00800434 	movhi	r2,16
   2a394:	18800336 	bltu	r3,r2,2a3a4 <__fpclassifyd+0x78>
   2a398:	e0fffa17 	ldw	r3,-24(fp)
   2a39c:	009ffc34 	movhi	r2,32752
   2a3a0:	18800636 	bltu	r3,r2,2a3bc <__fpclassifyd+0x90>
   2a3a4:	e0fffa17 	ldw	r3,-24(fp)
   2a3a8:	00a00434 	movhi	r2,32784
   2a3ac:	18800536 	bltu	r3,r2,2a3c4 <__fpclassifyd+0x98>
           (msw >= 0x80100000 && msw <= 0xffefffff))
   2a3b0:	e0fffa17 	ldw	r3,-24(fp)
   2a3b4:	00bffc34 	movhi	r2,65520
   2a3b8:	1880022e 	bgeu	r3,r2,2a3c4 <__fpclassifyd+0x98>
    return FP_NORMAL;
   2a3bc:	00800104 	movi	r2,4
   2a3c0:	00001706 	br	2a420 <__fpclassifyd+0xf4>
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
   2a3c4:	e0fffa17 	ldw	r3,-24(fp)
   2a3c8:	00800434 	movhi	r2,16
   2a3cc:	18800536 	bltu	r3,r2,2a3e4 <__fpclassifyd+0xb8>
           (msw >= 0x80000000 && msw <= 0x800fffff))
   2a3d0:	e0bffa17 	ldw	r2,-24(fp)
      (msw == 0x80000000 && lsw == 0x00000000))
    return FP_ZERO;
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
           (msw >= 0x80100000 && msw <= 0xffefffff))
    return FP_NORMAL;
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
   2a3d4:	1000050e 	bge	r2,zero,2a3ec <__fpclassifyd+0xc0>
           (msw >= 0x80000000 && msw <= 0x800fffff))
   2a3d8:	e0fffa17 	ldw	r3,-24(fp)
   2a3dc:	00a00434 	movhi	r2,32784
   2a3e0:	1880022e 	bgeu	r3,r2,2a3ec <__fpclassifyd+0xc0>
    /* zero is already handled above */
    return FP_SUBNORMAL;
   2a3e4:	008000c4 	movi	r2,3
   2a3e8:	00000d06 	br	2a420 <__fpclassifyd+0xf4>
  else if ((msw == 0x7ff00000 && lsw == 0x00000000) ||
   2a3ec:	e0fffa17 	ldw	r3,-24(fp)
   2a3f0:	009ffc34 	movhi	r2,32752
   2a3f4:	1880021e 	bne	r3,r2,2a400 <__fpclassifyd+0xd4>
   2a3f8:	e0bffb17 	ldw	r2,-20(fp)
   2a3fc:	10000526 	beq	r2,zero,2a414 <__fpclassifyd+0xe8>
   2a400:	e0fffa17 	ldw	r3,-24(fp)
   2a404:	00bffc34 	movhi	r2,65520
   2a408:	1880041e 	bne	r3,r2,2a41c <__fpclassifyd+0xf0>
           (msw == 0xfff00000 && lsw == 0x00000000))
   2a40c:	e0bffb17 	ldw	r2,-20(fp)
   2a410:	1000021e 	bne	r2,zero,2a41c <__fpclassifyd+0xf0>
    return FP_INFINITE;
   2a414:	00800044 	movi	r2,1
   2a418:	00000106 	br	2a420 <__fpclassifyd+0xf4>
  else
    return FP_NAN;
   2a41c:	0005883a 	mov	r2,zero
}
   2a420:	e037883a 	mov	sp,fp
   2a424:	df000017 	ldw	fp,0(sp)
   2a428:	dec00104 	addi	sp,sp,4
   2a42c:	f800283a 	ret

0002a430 <_sbrk_r>:

void *
_DEFUN (_sbrk_r, (ptr, incr),
     struct _reent *ptr _AND
     ptrdiff_t incr)
{
   2a430:	defffb04 	addi	sp,sp,-20
   2a434:	dfc00415 	stw	ra,16(sp)
   2a438:	df000315 	stw	fp,12(sp)
   2a43c:	df000304 	addi	fp,sp,12
   2a440:	e13ffe15 	stw	r4,-8(fp)
   2a444:	e17fff15 	stw	r5,-4(fp)
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
   2a448:	d0270515 	stw	zero,-25580(gp)
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
   2a44c:	e13fff17 	ldw	r4,-4(fp)
   2a450:	00302580 	call	30258 <sbrk>
   2a454:	e0bffd15 	stw	r2,-12(fp)
   2a458:	e0bffd17 	ldw	r2,-12(fp)
   2a45c:	10bfffd8 	cmpnei	r2,r2,-1
   2a460:	1000051e 	bne	r2,zero,2a478 <_sbrk_r+0x48>
   2a464:	d0a70517 	ldw	r2,-25580(gp)
   2a468:	10000326 	beq	r2,zero,2a478 <_sbrk_r+0x48>
    ptr->_errno = errno;
   2a46c:	d0e70517 	ldw	r3,-25580(gp)
   2a470:	e0bffe17 	ldw	r2,-8(fp)
   2a474:	10c00015 	stw	r3,0(r2)
  return ret;
   2a478:	e0bffd17 	ldw	r2,-12(fp)
}
   2a47c:	e037883a 	mov	sp,fp
   2a480:	dfc00117 	ldw	ra,4(sp)
   2a484:	df000017 	ldw	fp,0(sp)
   2a488:	dec00204 	addi	sp,sp,8
   2a48c:	f800283a 	ret

0002a490 <__sread>:
_DEFUN(__sread, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
   2a490:	defff804 	addi	sp,sp,-32
   2a494:	dfc00715 	stw	ra,28(sp)
   2a498:	df000615 	stw	fp,24(sp)
   2a49c:	dc400515 	stw	r17,20(sp)
   2a4a0:	dc000415 	stw	r16,16(sp)
   2a4a4:	df000604 	addi	fp,sp,24
   2a4a8:	e13ffa15 	stw	r4,-24(fp)
   2a4ac:	e17ffb15 	stw	r5,-20(fp)
   2a4b0:	e1bffc15 	stw	r6,-16(fp)
   2a4b4:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
   2a4b8:	e43ffb17 	ldw	r16,-20(fp)
  int oldmode = 0;
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  ret = _read_r (ptr, fp->_file, buf, n);
   2a4bc:	8080038b 	ldhu	r2,14(r16)
   2a4c0:	10bfffcc 	andi	r2,r2,65535
   2a4c4:	10a0001c 	xori	r2,r2,32768
   2a4c8:	10a00004 	addi	r2,r2,-32768
   2a4cc:	e0fffd17 	ldw	r3,-12(fp)
   2a4d0:	180f883a 	mov	r7,r3
   2a4d4:	e1bffc17 	ldw	r6,-16(fp)
   2a4d8:	100b883a 	mov	r5,r2
   2a4dc:	e13ffa17 	ldw	r4,-24(fp)
   2a4e0:	002c62c0 	call	2c62c <_read_r>
   2a4e4:	1023883a 	mov	r17,r2
    setmode (fp->_file, oldmode);
#endif

  /* If the read succeeded, update the current offset.  */

  if (ret >= 0)
   2a4e8:	88000416 	blt	r17,zero,2a4fc <__sread+0x6c>
    fp->_offset += ret;
   2a4ec:	80801417 	ldw	r2,80(r16)
   2a4f0:	1445883a 	add	r2,r2,r17
   2a4f4:	80801415 	stw	r2,80(r16)
   2a4f8:	00000406 	br	2a50c <__sread+0x7c>
  else
    fp->_flags &= ~__SOFF;	/* paranoia */
   2a4fc:	80c0030b 	ldhu	r3,12(r16)
   2a500:	00bbffc4 	movi	r2,-4097
   2a504:	1884703a 	and	r2,r3,r2
   2a508:	8080030d 	sth	r2,12(r16)
  return ret;
   2a50c:	8805883a 	mov	r2,r17
}
   2a510:	e6fffe04 	addi	sp,fp,-8
   2a514:	dfc00317 	ldw	ra,12(sp)
   2a518:	df000217 	ldw	fp,8(sp)
   2a51c:	dc400117 	ldw	r17,4(sp)
   2a520:	dc000017 	ldw	r16,0(sp)
   2a524:	dec00404 	addi	sp,sp,16
   2a528:	f800283a 	ret

0002a52c <__seofread>:
_DEFUN(__seofread, (ptr, cookie, buf, len),
       struct _reent *_ptr _AND
       _PTR cookie _AND
       char *buf   _AND
       _READ_WRITE_BUFSIZE_TYPE len)
{
   2a52c:	defffb04 	addi	sp,sp,-20
   2a530:	df000415 	stw	fp,16(sp)
   2a534:	df000404 	addi	fp,sp,16
   2a538:	e13ffc15 	stw	r4,-16(fp)
   2a53c:	e17ffd15 	stw	r5,-12(fp)
   2a540:	e1bffe15 	stw	r6,-8(fp)
   2a544:	e1ffff15 	stw	r7,-4(fp)
  return 0;
   2a548:	0005883a 	mov	r2,zero
}
   2a54c:	e037883a 	mov	sp,fp
   2a550:	df000017 	ldw	fp,0(sp)
   2a554:	dec00104 	addi	sp,sp,4
   2a558:	f800283a 	ret

0002a55c <__swrite>:
_DEFUN(__swrite, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char const *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
   2a55c:	defff804 	addi	sp,sp,-32
   2a560:	dfc00715 	stw	ra,28(sp)
   2a564:	df000615 	stw	fp,24(sp)
   2a568:	dc000515 	stw	r16,20(sp)
   2a56c:	df000604 	addi	fp,sp,24
   2a570:	e13ffb15 	stw	r4,-20(fp)
   2a574:	e17ffc15 	stw	r5,-16(fp)
   2a578:	e1bffd15 	stw	r6,-12(fp)
   2a57c:	e1fffe15 	stw	r7,-8(fp)
  register FILE *fp = (FILE *) cookie;
   2a580:	e43ffc17 	ldw	r16,-16(fp)
  ssize_t w;
#ifdef __SCLE
  int oldmode=0;
#endif

  if (fp->_flags & __SAPP)
   2a584:	8080030b 	ldhu	r2,12(r16)
   2a588:	10bfffcc 	andi	r2,r2,65535
   2a58c:	1080400c 	andi	r2,r2,256
   2a590:	10000926 	beq	r2,zero,2a5b8 <__swrite+0x5c>
    _lseek_r (ptr, fp->_file, (_off_t) 0, SEEK_END);
   2a594:	8080038b 	ldhu	r2,14(r16)
   2a598:	10bfffcc 	andi	r2,r2,65535
   2a59c:	10a0001c 	xori	r2,r2,32768
   2a5a0:	10a00004 	addi	r2,r2,-32768
   2a5a4:	01c00084 	movi	r7,2
   2a5a8:	000d883a 	mov	r6,zero
   2a5ac:	100b883a 	mov	r5,r2
   2a5b0:	e13ffb17 	ldw	r4,-20(fp)
   2a5b4:	002c5bc0 	call	2c5bc <_lseek_r>
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
   2a5b8:	80c0030b 	ldhu	r3,12(r16)
   2a5bc:	00bbffc4 	movi	r2,-4097
   2a5c0:	1884703a 	and	r2,r3,r2
   2a5c4:	8080030d 	sth	r2,12(r16)
#ifdef __SCLE
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  w = _write_r (ptr, fp->_file, buf, n);
   2a5c8:	8080038b 	ldhu	r2,14(r16)
   2a5cc:	10bfffcc 	andi	r2,r2,65535
   2a5d0:	10a0001c 	xori	r2,r2,32768
   2a5d4:	10a00004 	addi	r2,r2,-32768
   2a5d8:	e0fffe17 	ldw	r3,-8(fp)
   2a5dc:	180f883a 	mov	r7,r3
   2a5e0:	e1bffd17 	ldw	r6,-12(fp)
   2a5e4:	100b883a 	mov	r5,r2
   2a5e8:	e13ffb17 	ldw	r4,-20(fp)
   2a5ec:	002be780 	call	2be78 <_write_r>
   2a5f0:	e0bffa15 	stw	r2,-24(fp)
#ifdef __SCLE
  if (oldmode)
    setmode (fp->_file, oldmode);
#endif

  return w;
   2a5f4:	e0bffa17 	ldw	r2,-24(fp)
}
   2a5f8:	e6ffff04 	addi	sp,fp,-4
   2a5fc:	dfc00217 	ldw	ra,8(sp)
   2a600:	df000117 	ldw	fp,4(sp)
   2a604:	dc000017 	ldw	r16,0(sp)
   2a608:	dec00304 	addi	sp,sp,12
   2a60c:	f800283a 	ret

0002a610 <__sseek>:
_DEFUN(__sseek, (ptr, cookie, offset, whence),
       struct _reent *ptr _AND
       void *cookie _AND
       _fpos_t offset _AND
       int whence)
{
   2a610:	defff804 	addi	sp,sp,-32
   2a614:	dfc00715 	stw	ra,28(sp)
   2a618:	df000615 	stw	fp,24(sp)
   2a61c:	dc400515 	stw	r17,20(sp)
   2a620:	dc000415 	stw	r16,16(sp)
   2a624:	df000604 	addi	fp,sp,24
   2a628:	e13ffa15 	stw	r4,-24(fp)
   2a62c:	e17ffb15 	stw	r5,-20(fp)
   2a630:	e1bffc15 	stw	r6,-16(fp)
   2a634:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
   2a638:	e43ffb17 	ldw	r16,-20(fp)
  register _off_t ret;

  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
   2a63c:	8080038b 	ldhu	r2,14(r16)
   2a640:	10bfffcc 	andi	r2,r2,65535
   2a644:	10a0001c 	xori	r2,r2,32768
   2a648:	10a00004 	addi	r2,r2,-32768
   2a64c:	e1fffd17 	ldw	r7,-12(fp)
   2a650:	e1bffc17 	ldw	r6,-16(fp)
   2a654:	100b883a 	mov	r5,r2
   2a658:	e13ffa17 	ldw	r4,-24(fp)
   2a65c:	002c5bc0 	call	2c5bc <_lseek_r>
   2a660:	1023883a 	mov	r17,r2
  if (ret == -1L)
   2a664:	88bfffd8 	cmpnei	r2,r17,-1
   2a668:	1000051e 	bne	r2,zero,2a680 <__sseek+0x70>
    fp->_flags &= ~__SOFF;
   2a66c:	80c0030b 	ldhu	r3,12(r16)
   2a670:	00bbffc4 	movi	r2,-4097
   2a674:	1884703a 	and	r2,r3,r2
   2a678:	8080030d 	sth	r2,12(r16)
   2a67c:	00000406 	br	2a690 <__sseek+0x80>
  else
    {
      fp->_flags |= __SOFF;
   2a680:	8080030b 	ldhu	r2,12(r16)
   2a684:	10840014 	ori	r2,r2,4096
   2a688:	8080030d 	sth	r2,12(r16)
      fp->_offset = ret;
   2a68c:	84401415 	stw	r17,80(r16)
    }
  return ret;
   2a690:	8805883a 	mov	r2,r17
}
   2a694:	e6fffe04 	addi	sp,fp,-8
   2a698:	dfc00317 	ldw	ra,12(sp)
   2a69c:	df000217 	ldw	fp,8(sp)
   2a6a0:	dc400117 	ldw	r17,4(sp)
   2a6a4:	dc000017 	ldw	r16,0(sp)
   2a6a8:	dec00404 	addi	sp,sp,16
   2a6ac:	f800283a 	ret

0002a6b0 <__sclose>:

int
_DEFUN(__sclose, (ptr, cookie),
       struct _reent *ptr _AND
       void *cookie)
{
   2a6b0:	defffb04 	addi	sp,sp,-20
   2a6b4:	dfc00415 	stw	ra,16(sp)
   2a6b8:	df000315 	stw	fp,12(sp)
   2a6bc:	df000304 	addi	fp,sp,12
   2a6c0:	e13ffe15 	stw	r4,-8(fp)
   2a6c4:	e17fff15 	stw	r5,-4(fp)
  FILE *fp = (FILE *) cookie;
   2a6c8:	e0bfff17 	ldw	r2,-4(fp)
   2a6cc:	e0bffd15 	stw	r2,-12(fp)

  return _close_r (ptr, fp->_file);
   2a6d0:	e0bffd17 	ldw	r2,-12(fp)
   2a6d4:	1080038b 	ldhu	r2,14(r2)
   2a6d8:	10bfffcc 	andi	r2,r2,65535
   2a6dc:	10a0001c 	xori	r2,r2,32768
   2a6e0:	10a00004 	addi	r2,r2,-32768
   2a6e4:	100b883a 	mov	r5,r2
   2a6e8:	e13ffe17 	ldw	r4,-8(fp)
   2a6ec:	002bee80 	call	2bee8 <_close_r>
}
   2a6f0:	e037883a 	mov	sp,fp
   2a6f4:	dfc00117 	ldw	ra,4(sp)
   2a6f8:	df000017 	ldw	fp,0(sp)
   2a6fc:	dec00204 	addi	sp,sp,8
   2a700:	f800283a 	ret

0002a704 <strcmp>:

int
_DEFUN (strcmp, (s1, s2),
	_CONST char *s1 _AND
	_CONST char *s2)
{ 
   2a704:	defffb04 	addi	sp,sp,-20
   2a708:	df000415 	stw	fp,16(sp)
   2a70c:	df000404 	addi	fp,sp,16
   2a710:	e13ffe15 	stw	r4,-8(fp)
   2a714:	e17fff15 	stw	r5,-4(fp)
#else
  unsigned long *a1;
  unsigned long *a2;

  /* If s1 or s2 are unaligned, then compare bytes. */
  if (!UNALIGNED (s1, s2))
   2a718:	e0fffe17 	ldw	r3,-8(fp)
   2a71c:	e0bfff17 	ldw	r2,-4(fp)
   2a720:	1884b03a 	or	r2,r3,r2
   2a724:	108000cc 	andi	r2,r2,3
   2a728:	10002a1e 	bne	r2,zero,2a7d4 <strcmp+0xd0>
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
   2a72c:	e0bffe17 	ldw	r2,-8(fp)
   2a730:	e0bffc15 	stw	r2,-16(fp)
      a2 = (unsigned long*)s2;
   2a734:	e0bfff17 	ldw	r2,-4(fp)
   2a738:	e0bffd15 	stw	r2,-12(fp)
      while (*a1 == *a2)
   2a73c:	00001506 	br	2a794 <strcmp+0x90>
        {
          /* To get here, *a1 == *a2, thus if we find a null in *a1,
	     then the strings must be equal, so return zero.  */
          if (DETECTNULL (*a1))
   2a740:	e0bffc17 	ldw	r2,-16(fp)
   2a744:	10c00017 	ldw	r3,0(r2)
   2a748:	00bfbff4 	movhi	r2,65279
   2a74c:	10bfbfc4 	addi	r2,r2,-257
   2a750:	1887883a 	add	r3,r3,r2
   2a754:	e0bffc17 	ldw	r2,-16(fp)
   2a758:	10800017 	ldw	r2,0(r2)
   2a75c:	0084303a 	nor	r2,zero,r2
   2a760:	1886703a 	and	r3,r3,r2
   2a764:	00a02074 	movhi	r2,32897
   2a768:	10a02004 	addi	r2,r2,-32640
   2a76c:	1884703a 	and	r2,r3,r2
   2a770:	10000226 	beq	r2,zero,2a77c <strcmp+0x78>
	    return 0;
   2a774:	0005883a 	mov	r2,zero
   2a778:	00002e06 	br	2a834 <strcmp+0x130>

          a1++;
   2a77c:	e0bffc17 	ldw	r2,-16(fp)
   2a780:	10800104 	addi	r2,r2,4
   2a784:	e0bffc15 	stw	r2,-16(fp)
          a2++;
   2a788:	e0bffd17 	ldw	r2,-12(fp)
   2a78c:	10800104 	addi	r2,r2,4
   2a790:	e0bffd15 	stw	r2,-12(fp)
  if (!UNALIGNED (s1, s2))
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
      a2 = (unsigned long*)s2;
      while (*a1 == *a2)
   2a794:	e0bffc17 	ldw	r2,-16(fp)
   2a798:	10c00017 	ldw	r3,0(r2)
   2a79c:	e0bffd17 	ldw	r2,-12(fp)
   2a7a0:	10800017 	ldw	r2,0(r2)
   2a7a4:	18bfe626 	beq	r3,r2,2a740 <__alt_data_end+0xfffea740>
          a1++;
          a2++;
        }

      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
   2a7a8:	e0bffc17 	ldw	r2,-16(fp)
   2a7ac:	e0bffe15 	stw	r2,-8(fp)
      s2 = (char*)a2;
   2a7b0:	e0bffd17 	ldw	r2,-12(fp)
   2a7b4:	e0bfff15 	stw	r2,-4(fp)
    }

  while (*s1 != '\0' && *s1 == *s2)
   2a7b8:	00000606 	br	2a7d4 <strcmp+0xd0>
    {
      s1++;
   2a7bc:	e0bffe17 	ldw	r2,-8(fp)
   2a7c0:	10800044 	addi	r2,r2,1
   2a7c4:	e0bffe15 	stw	r2,-8(fp)
      s2++;
   2a7c8:	e0bfff17 	ldw	r2,-4(fp)
   2a7cc:	10800044 	addi	r2,r2,1
   2a7d0:	e0bfff15 	stw	r2,-4(fp)
      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
      s2 = (char*)a2;
    }

  while (*s1 != '\0' && *s1 == *s2)
   2a7d4:	e0bffe17 	ldw	r2,-8(fp)
   2a7d8:	10800003 	ldbu	r2,0(r2)
   2a7dc:	10803fcc 	andi	r2,r2,255
   2a7e0:	1080201c 	xori	r2,r2,128
   2a7e4:	10bfe004 	addi	r2,r2,-128
   2a7e8:	10000b26 	beq	r2,zero,2a818 <strcmp+0x114>
   2a7ec:	e0bffe17 	ldw	r2,-8(fp)
   2a7f0:	10c00003 	ldbu	r3,0(r2)
   2a7f4:	e0bfff17 	ldw	r2,-4(fp)
   2a7f8:	10800003 	ldbu	r2,0(r2)
   2a7fc:	18c03fcc 	andi	r3,r3,255
   2a800:	18c0201c 	xori	r3,r3,128
   2a804:	18ffe004 	addi	r3,r3,-128
   2a808:	10803fcc 	andi	r2,r2,255
   2a80c:	1080201c 	xori	r2,r2,128
   2a810:	10bfe004 	addi	r2,r2,-128
   2a814:	18bfe926 	beq	r3,r2,2a7bc <__alt_data_end+0xfffea7bc>
    {
      s1++;
      s2++;
    }
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
   2a818:	e0bffe17 	ldw	r2,-8(fp)
   2a81c:	10800003 	ldbu	r2,0(r2)
   2a820:	10c03fcc 	andi	r3,r2,255
   2a824:	e0bfff17 	ldw	r2,-4(fp)
   2a828:	10800003 	ldbu	r2,0(r2)
   2a82c:	10803fcc 	andi	r2,r2,255
   2a830:	1885c83a 	sub	r2,r3,r2
#endif /* not PREFER_SIZE_OVER_SPEED */
}
   2a834:	e037883a 	mov	sp,fp
   2a838:	df000017 	ldw	fp,0(sp)
   2a83c:	dec00104 	addi	sp,sp,4
   2a840:	f800283a 	ret

0002a844 <strlen>:
#endif

size_t
_DEFUN (strlen, (str),
	_CONST char *str)
{
   2a844:	defffc04 	addi	sp,sp,-16
   2a848:	df000315 	stw	fp,12(sp)
   2a84c:	df000304 	addi	fp,sp,12
   2a850:	e13fff15 	stw	r4,-4(fp)
  _CONST char *start = str;
   2a854:	e0bfff17 	ldw	r2,-4(fp)
   2a858:	e0bffe15 	stw	r2,-8(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
   2a85c:	00000d06 	br	2a894 <strlen+0x50>
    {
      if (!*str)
   2a860:	e0bfff17 	ldw	r2,-4(fp)
   2a864:	10800003 	ldbu	r2,0(r2)
   2a868:	10803fcc 	andi	r2,r2,255
   2a86c:	1080201c 	xori	r2,r2,128
   2a870:	10bfe004 	addi	r2,r2,-128
   2a874:	1000041e 	bne	r2,zero,2a888 <strlen+0x44>
	return str - start;
   2a878:	e0ffff17 	ldw	r3,-4(fp)
   2a87c:	e0bffe17 	ldw	r2,-8(fp)
   2a880:	1885c83a 	sub	r2,r3,r2
   2a884:	00002806 	br	2a928 <strlen+0xe4>
      str++;
   2a888:	e0bfff17 	ldw	r2,-4(fp)
   2a88c:	10800044 	addi	r2,r2,1
   2a890:	e0bfff15 	stw	r2,-4(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
   2a894:	e0bfff17 	ldw	r2,-4(fp)
   2a898:	108000cc 	andi	r2,r2,3
   2a89c:	103ff01e 	bne	r2,zero,2a860 <__alt_data_end+0xfffea860>
      str++;
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
   2a8a0:	e0bfff17 	ldw	r2,-4(fp)
   2a8a4:	e0bffd15 	stw	r2,-12(fp)
  while (!DETECTNULL (*aligned_addr))
   2a8a8:	00000306 	br	2a8b8 <strlen+0x74>
    aligned_addr++;
   2a8ac:	e0bffd17 	ldw	r2,-12(fp)
   2a8b0:	10800104 	addi	r2,r2,4
   2a8b4:	e0bffd15 	stw	r2,-12(fp)
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
  while (!DETECTNULL (*aligned_addr))
   2a8b8:	e0bffd17 	ldw	r2,-12(fp)
   2a8bc:	10c00017 	ldw	r3,0(r2)
   2a8c0:	00bfbff4 	movhi	r2,65279
   2a8c4:	10bfbfc4 	addi	r2,r2,-257
   2a8c8:	1887883a 	add	r3,r3,r2
   2a8cc:	e0bffd17 	ldw	r2,-12(fp)
   2a8d0:	10800017 	ldw	r2,0(r2)
   2a8d4:	0084303a 	nor	r2,zero,r2
   2a8d8:	1886703a 	and	r3,r3,r2
   2a8dc:	00a02074 	movhi	r2,32897
   2a8e0:	10a02004 	addi	r2,r2,-32640
   2a8e4:	1884703a 	and	r2,r3,r2
   2a8e8:	103ff026 	beq	r2,zero,2a8ac <__alt_data_end+0xfffea8ac>
    aligned_addr++;

  /* Once a null is detected, we check each byte in that block for a
     precise position of the null.  */
  str = (char *) aligned_addr;
   2a8ec:	e0bffd17 	ldw	r2,-12(fp)
   2a8f0:	e0bfff15 	stw	r2,-4(fp)

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
   2a8f4:	00000306 	br	2a904 <strlen+0xc0>
    str++;
   2a8f8:	e0bfff17 	ldw	r2,-4(fp)
   2a8fc:	10800044 	addi	r2,r2,1
   2a900:	e0bfff15 	stw	r2,-4(fp)
     precise position of the null.  */
  str = (char *) aligned_addr;

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
   2a904:	e0bfff17 	ldw	r2,-4(fp)
   2a908:	10800003 	ldbu	r2,0(r2)
   2a90c:	10803fcc 	andi	r2,r2,255
   2a910:	1080201c 	xori	r2,r2,128
   2a914:	10bfe004 	addi	r2,r2,-128
   2a918:	103ff71e 	bne	r2,zero,2a8f8 <__alt_data_end+0xfffea8f8>
    str++;
  return str - start;
   2a91c:	e0ffff17 	ldw	r3,-4(fp)
   2a920:	e0bffe17 	ldw	r2,-8(fp)
   2a924:	1885c83a 	sub	r2,r3,r2
}
   2a928:	e037883a 	mov	sp,fp
   2a92c:	df000017 	ldw	fp,0(sp)
   2a930:	dec00104 	addi	sp,sp,4
   2a934:	f800283a 	ret

0002a938 <__sprint_r>:
int
_DEFUN(__sprint_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       FILE *fp _AND
       register struct __suio *uio)
{
   2a938:	defff604 	addi	sp,sp,-40
   2a93c:	dfc00915 	stw	ra,36(sp)
   2a940:	df000815 	stw	fp,32(sp)
   2a944:	dc400715 	stw	r17,28(sp)
   2a948:	dc000615 	stw	r16,24(sp)
   2a94c:	df000804 	addi	fp,sp,32
   2a950:	e13ffc15 	stw	r4,-16(fp)
   2a954:	e17ffd15 	stw	r5,-12(fp)
   2a958:	3021883a 	mov	r16,r6
	register int err = 0;
   2a95c:	0023883a 	mov	r17,zero

	if (uio->uio_resid == 0) {
   2a960:	80800217 	ldw	r2,8(r16)
   2a964:	1000031e 	bne	r2,zero,2a974 <__sprint_r+0x3c>
		uio->uio_iovcnt = 0;
   2a968:	80000115 	stw	zero,4(r16)
		return (0);
   2a96c:	0005883a 	mov	r2,zero
   2a970:	00003906 	br	2aa58 <__sprint_r+0x120>
	}
#ifdef _WIDE_ORIENT
	if (fp->_flags2 & __SWID) {
   2a974:	e0bffd17 	ldw	r2,-12(fp)
   2a978:	10801917 	ldw	r2,100(r2)
   2a97c:	1088000c 	andi	r2,r2,8192
   2a980:	10002d26 	beq	r2,zero,2aa38 <__sprint_r+0x100>
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
   2a984:	80800017 	ldw	r2,0(r16)
   2a988:	e0bff815 	stw	r2,-32(fp)
		for (; uio->uio_resid != 0;
   2a98c:	00002706 	br	2aa2c <__sprint_r+0xf4>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
   2a990:	e0bff817 	ldw	r2,-32(fp)
   2a994:	10800017 	ldw	r2,0(r2)
   2a998:	e0bffa15 	stw	r2,-24(fp)
			len = iov->iov_len / sizeof (wchar_t);
   2a99c:	e0bff817 	ldw	r2,-32(fp)
   2a9a0:	10800117 	ldw	r2,4(r2)
   2a9a4:	1004d0ba 	srli	r2,r2,2
   2a9a8:	e0bffb15 	stw	r2,-20(fp)
			for (i = 0; i < len; i++) {
   2a9ac:	e03ff915 	stw	zero,-28(fp)
   2a9b0:	00001206 	br	2a9fc <__sprint_r+0xc4>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
   2a9b4:	e0bff917 	ldw	r2,-28(fp)
   2a9b8:	1085883a 	add	r2,r2,r2
   2a9bc:	1085883a 	add	r2,r2,r2
   2a9c0:	1007883a 	mov	r3,r2
   2a9c4:	e0bffa17 	ldw	r2,-24(fp)
   2a9c8:	10c5883a 	add	r2,r2,r3
   2a9cc:	10800017 	ldw	r2,0(r2)
   2a9d0:	e1bffd17 	ldw	r6,-12(fp)
   2a9d4:	100b883a 	mov	r5,r2
   2a9d8:	e13ffc17 	ldw	r4,-16(fp)
   2a9dc:	002c4040 	call	2c404 <_fputwc_r>
   2a9e0:	10bfffd8 	cmpnei	r2,r2,-1
   2a9e4:	1000021e 	bne	r2,zero,2a9f0 <__sprint_r+0xb8>
					err = -1;
   2a9e8:	047fffc4 	movi	r17,-1
					goto out;
   2a9ec:	00001706 	br	2aa4c <__sprint_r+0x114>
		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
			len = iov->iov_len / sizeof (wchar_t);
			for (i = 0; i < len; i++) {
   2a9f0:	e0bff917 	ldw	r2,-28(fp)
   2a9f4:	10800044 	addi	r2,r2,1
   2a9f8:	e0bff915 	stw	r2,-28(fp)
   2a9fc:	e0fff917 	ldw	r3,-28(fp)
   2aa00:	e0bffb17 	ldw	r2,-20(fp)
   2aa04:	18bfeb16 	blt	r3,r2,2a9b4 <__alt_data_end+0xfffea9b4>
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
   2aa08:	80c00217 	ldw	r3,8(r16)
   2aa0c:	e0bffb17 	ldw	r2,-20(fp)
   2aa10:	1085883a 	add	r2,r2,r2
   2aa14:	1085883a 	add	r2,r2,r2
   2aa18:	1885c83a 	sub	r2,r3,r2
   2aa1c:	80800215 	stw	r2,8(r16)
   2aa20:	e0bff817 	ldw	r2,-32(fp)
   2aa24:	10800204 	addi	r2,r2,8
   2aa28:	e0bff815 	stw	r2,-32(fp)
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
   2aa2c:	80800217 	ldw	r2,8(r16)
   2aa30:	103fd71e 	bne	r2,zero,2a990 <__alt_data_end+0xfffea990>
   2aa34:	00000506 	br	2aa4c <__sprint_r+0x114>
				}
			}
		}
	} else
#endif
		err = __sfvwrite_r(ptr, fp, uio);
   2aa38:	800d883a 	mov	r6,r16
   2aa3c:	e17ffd17 	ldw	r5,-12(fp)
   2aa40:	e13ffc17 	ldw	r4,-16(fp)
   2aa44:	0025b340 	call	25b34 <__sfvwrite_r>
   2aa48:	1023883a 	mov	r17,r2
out:
	uio->uio_resid = 0;
   2aa4c:	80000215 	stw	zero,8(r16)
	uio->uio_iovcnt = 0;
   2aa50:	80000115 	stw	zero,4(r16)
	return (err);
   2aa54:	8805883a 	mov	r2,r17
}
   2aa58:	e6fffe04 	addi	sp,fp,-8
   2aa5c:	dfc00317 	ldw	ra,12(sp)
   2aa60:	df000217 	ldw	fp,8(sp)
   2aa64:	dc400117 	ldw	r17,4(sp)
   2aa68:	dc000017 	ldw	r16,0(sp)
   2aa6c:	dec00404 	addi	sp,sp,16
   2aa70:	f800283a 	ret

0002aa74 <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
   2aa74:	defedf04 	addi	sp,sp,-1156
   2aa78:	dfc12015 	stw	ra,1152(sp)
   2aa7c:	df011f15 	stw	fp,1148(sp)
   2aa80:	dc011e15 	stw	r16,1144(sp)
   2aa84:	df011f04 	addi	fp,sp,1148
   2aa88:	e13ffc15 	stw	r4,-16(fp)
   2aa8c:	2821883a 	mov	r16,r5
   2aa90:	e1bffd15 	stw	r6,-12(fp)
   2aa94:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
   2aa98:	80c0030b 	ldhu	r3,12(r16)
   2aa9c:	00bfff44 	movi	r2,-3
   2aaa0:	1884703a 	and	r2,r3,r2
   2aaa4:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
   2aaa8:	80801917 	ldw	r2,100(r16)
   2aaac:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
   2aab0:	8080038b 	ldhu	r2,14(r16)
   2aab4:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
   2aab8:	80800717 	ldw	r2,28(r16)
   2aabc:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
   2aac0:	80800917 	ldw	r2,36(r16)
   2aac4:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
   2aac8:	e0befc04 	addi	r2,fp,-1040
   2aacc:	e0bee215 	stw	r2,-1144(fp)
   2aad0:	e0bee217 	ldw	r2,-1144(fp)
   2aad4:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
   2aad8:	00810004 	movi	r2,1024
   2aadc:	e0bee415 	stw	r2,-1136(fp)
   2aae0:	e0bee417 	ldw	r2,-1136(fp)
   2aae4:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
   2aae8:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
   2aaec:	e0bee204 	addi	r2,fp,-1144
   2aaf0:	e1fffe17 	ldw	r7,-8(fp)
   2aaf4:	e1bffd17 	ldw	r6,-12(fp)
   2aaf8:	100b883a 	mov	r5,r2
   2aafc:	e13ffc17 	ldw	r4,-16(fp)
   2ab00:	002abb40 	call	2abb4 <___vfiprintf_internal_r>
   2ab04:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
   2ab08:	e0bee117 	ldw	r2,-1148(fp)
   2ab0c:	10000716 	blt	r2,zero,2ab2c <__sbprintf+0xb8>
   2ab10:	e0bee204 	addi	r2,fp,-1144
   2ab14:	100b883a 	mov	r5,r2
   2ab18:	e13ffc17 	ldw	r4,-16(fp)
   2ab1c:	0024d6c0 	call	24d6c <_fflush_r>
   2ab20:	10000226 	beq	r2,zero,2ab2c <__sbprintf+0xb8>
		ret = EOF;
   2ab24:	00bfffc4 	movi	r2,-1
   2ab28:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
   2ab2c:	e0bee50b 	ldhu	r2,-1132(fp)
   2ab30:	10bfffcc 	andi	r2,r2,65535
   2ab34:	1080100c 	andi	r2,r2,64
   2ab38:	10000326 	beq	r2,zero,2ab48 <__sbprintf+0xd4>
		fp->_flags |= __SERR;
   2ab3c:	8080030b 	ldhu	r2,12(r16)
   2ab40:	10801014 	ori	r2,r2,64
   2ab44:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
   2ab48:	e0bee117 	ldw	r2,-1148(fp)
}
   2ab4c:	e6ffff04 	addi	sp,fp,-4
   2ab50:	dfc00217 	ldw	ra,8(sp)
   2ab54:	df000117 	ldw	fp,4(sp)
   2ab58:	dc000017 	ldw	r16,0(sp)
   2ab5c:	dec00304 	addi	sp,sp,12
   2ab60:	f800283a 	ret

0002ab64 <__vfiprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
   2ab64:	defffa04 	addi	sp,sp,-24
   2ab68:	dfc00515 	stw	ra,20(sp)
   2ab6c:	df000415 	stw	fp,16(sp)
   2ab70:	df000404 	addi	fp,sp,16
   2ab74:	e13ffd15 	stw	r4,-12(fp)
   2ab78:	e17ffe15 	stw	r5,-8(fp)
   2ab7c:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
   2ab80:	d0a00017 	ldw	r2,-32768(gp)
   2ab84:	e1ffff17 	ldw	r7,-4(fp)
   2ab88:	e1bffe17 	ldw	r6,-8(fp)
   2ab8c:	e17ffd17 	ldw	r5,-12(fp)
   2ab90:	1009883a 	mov	r4,r2
   2ab94:	002abb40 	call	2abb4 <___vfiprintf_internal_r>
   2ab98:	e0bffc15 	stw	r2,-16(fp)
  return result;
   2ab9c:	e0bffc17 	ldw	r2,-16(fp)
}
   2aba0:	e037883a 	mov	sp,fp
   2aba4:	dfc00117 	ldw	ra,4(sp)
   2aba8:	df000017 	ldw	fp,0(sp)
   2abac:	dec00204 	addi	sp,sp,8
   2abb0:	f800283a 	ret

0002abb4 <___vfiprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
   2abb4:	deffb704 	addi	sp,sp,-292
   2abb8:	dfc04815 	stw	ra,288(sp)
   2abbc:	df004715 	stw	fp,284(sp)
   2abc0:	ddc04615 	stw	r23,280(sp)
   2abc4:	dd804515 	stw	r22,276(sp)
   2abc8:	dd404415 	stw	r21,272(sp)
   2abcc:	dd004315 	stw	r20,268(sp)
   2abd0:	dcc04215 	stw	r19,264(sp)
   2abd4:	dc804115 	stw	r18,260(sp)
   2abd8:	dc404015 	stw	r17,256(sp)
   2abdc:	dc003f15 	stw	r16,252(sp)
   2abe0:	df004704 	addi	fp,sp,284
   2abe4:	e13fe615 	stw	r4,-104(fp)
   2abe8:	e17fe715 	stw	r5,-100(fp)
   2abec:	e1bfe815 	stw	r6,-96(fp)
   2abf0:	e1ffe915 	stw	r7,-92(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
   2abf4:	e03fc215 	stw	zero,-248(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
   2abf8:	e03fc315 	stw	zero,-244(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
   2abfc:	e0bfe617 	ldw	r2,-104(fp)
   2ac00:	e0bfc415 	stw	r2,-240(fp)
   2ac04:	e0bfc417 	ldw	r2,-240(fp)
   2ac08:	10000526 	beq	r2,zero,2ac20 <___vfiprintf_internal_r+0x6c>
   2ac0c:	e0bfc417 	ldw	r2,-240(fp)
   2ac10:	10800e17 	ldw	r2,56(r2)
   2ac14:	1000021e 	bne	r2,zero,2ac20 <___vfiprintf_internal_r+0x6c>
   2ac18:	e13fc417 	ldw	r4,-240(fp)
   2ac1c:	00251ec0 	call	251ec <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
   2ac20:	e0bfe717 	ldw	r2,-100(fp)
   2ac24:	1080030b 	ldhu	r2,12(r2)
   2ac28:	10bfffcc 	andi	r2,r2,65535
   2ac2c:	1088000c 	andi	r2,r2,8192
   2ac30:	10000c1e 	bne	r2,zero,2ac64 <___vfiprintf_internal_r+0xb0>
   2ac34:	e0bfe717 	ldw	r2,-100(fp)
   2ac38:	1080030b 	ldhu	r2,12(r2)
   2ac3c:	10880014 	ori	r2,r2,8192
   2ac40:	1007883a 	mov	r3,r2
   2ac44:	e0bfe717 	ldw	r2,-100(fp)
   2ac48:	10c0030d 	sth	r3,12(r2)
   2ac4c:	e0bfe717 	ldw	r2,-100(fp)
   2ac50:	10c01917 	ldw	r3,100(r2)
   2ac54:	00b7ffc4 	movi	r2,-8193
   2ac58:	1886703a 	and	r3,r3,r2
   2ac5c:	e0bfe717 	ldw	r2,-100(fp)
   2ac60:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
   2ac64:	e0bfe717 	ldw	r2,-100(fp)
   2ac68:	1080030b 	ldhu	r2,12(r2)
   2ac6c:	10bfffcc 	andi	r2,r2,65535
   2ac70:	1080020c 	andi	r2,r2,8
   2ac74:	10000326 	beq	r2,zero,2ac84 <___vfiprintf_internal_r+0xd0>
   2ac78:	e0bfe717 	ldw	r2,-100(fp)
   2ac7c:	10800417 	ldw	r2,16(r2)
   2ac80:	1000061e 	bne	r2,zero,2ac9c <___vfiprintf_internal_r+0xe8>
   2ac84:	e17fe717 	ldw	r5,-100(fp)
   2ac88:	e13fe617 	ldw	r4,-104(fp)
   2ac8c:	00229a40 	call	229a4 <__swsetup_r>
   2ac90:	10000226 	beq	r2,zero,2ac9c <___vfiprintf_internal_r+0xe8>
		_newlib_flockfile_exit (fp);
		return (EOF);
   2ac94:	00bfffc4 	movi	r2,-1
   2ac98:	00046a06 	br	2be44 <___vfiprintf_internal_r+0x1290>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
   2ac9c:	e0bfe717 	ldw	r2,-100(fp)
   2aca0:	1080030b 	ldhu	r2,12(r2)
   2aca4:	10bfffcc 	andi	r2,r2,65535
   2aca8:	1080068c 	andi	r2,r2,26
   2acac:	10800298 	cmpnei	r2,r2,10
   2acb0:	10000c1e 	bne	r2,zero,2ace4 <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
   2acb4:	e0bfe717 	ldw	r2,-100(fp)
   2acb8:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
   2acbc:	10bfffcc 	andi	r2,r2,65535
   2acc0:	10a0001c 	xori	r2,r2,32768
   2acc4:	10a00004 	addi	r2,r2,-32768
   2acc8:	10000616 	blt	r2,zero,2ace4 <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
   2accc:	e1ffe917 	ldw	r7,-92(fp)
   2acd0:	e1bfe817 	ldw	r6,-96(fp)
   2acd4:	e17fe717 	ldw	r5,-100(fp)
   2acd8:	e13fe617 	ldw	r4,-104(fp)
   2acdc:	002aa740 	call	2aa74 <__sbprintf>
   2ace0:	00045806 	br	2be44 <___vfiprintf_internal_r+0x1290>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
   2ace4:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
   2ace8:	e4bfcb04 	addi	r18,fp,-212
   2acec:	e4bfc815 	stw	r18,-224(fp)
	uio.uio_resid = 0;
   2acf0:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
   2acf4:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
   2acf8:	e03fb915 	stw	zero,-284(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
   2acfc:	a829883a 	mov	r20,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
   2ad00:	00000106 	br	2ad08 <___vfiprintf_internal_r+0x154>
                    fmt += 1;
   2ad04:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
   2ad08:	a8800003 	ldbu	r2,0(r21)
   2ad0c:	10803fcc 	andi	r2,r2,255
   2ad10:	1080201c 	xori	r2,r2,128
   2ad14:	10bfe004 	addi	r2,r2,-128
   2ad18:	10000626 	beq	r2,zero,2ad34 <___vfiprintf_internal_r+0x180>
   2ad1c:	a8800003 	ldbu	r2,0(r21)
   2ad20:	10803fcc 	andi	r2,r2,255
   2ad24:	1080201c 	xori	r2,r2,128
   2ad28:	10bfe004 	addi	r2,r2,-128
   2ad2c:	10800958 	cmpnei	r2,r2,37
   2ad30:	103ff41e 	bne	r2,zero,2ad04 <__alt_data_end+0xfffead04>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
   2ad34:	a807883a 	mov	r3,r21
   2ad38:	a005883a 	mov	r2,r20
   2ad3c:	18a1c83a 	sub	r16,r3,r2
   2ad40:	80001826 	beq	r16,zero,2ada4 <___vfiprintf_internal_r+0x1f0>
			PRINT (cp, m);
   2ad44:	95000015 	stw	r20,0(r18)
   2ad48:	8005883a 	mov	r2,r16
   2ad4c:	90800115 	stw	r2,4(r18)
   2ad50:	e0bfca17 	ldw	r2,-216(fp)
   2ad54:	8007883a 	mov	r3,r16
   2ad58:	10c5883a 	add	r2,r2,r3
   2ad5c:	e0bfca15 	stw	r2,-216(fp)
   2ad60:	94800204 	addi	r18,r18,8
   2ad64:	e0bfc917 	ldw	r2,-220(fp)
   2ad68:	10800044 	addi	r2,r2,1
   2ad6c:	e0bfc915 	stw	r2,-220(fp)
   2ad70:	e0bfc917 	ldw	r2,-220(fp)
   2ad74:	10800210 	cmplti	r2,r2,8
   2ad78:	1000071e 	bne	r2,zero,2ad98 <___vfiprintf_internal_r+0x1e4>
   2ad7c:	e0bfc804 	addi	r2,fp,-224
   2ad80:	100d883a 	mov	r6,r2
   2ad84:	e17fe717 	ldw	r5,-100(fp)
   2ad88:	e13fe617 	ldw	r4,-104(fp)
   2ad8c:	002a9380 	call	2a938 <__sprint_r>
   2ad90:	1004031e 	bne	r2,zero,2bda0 <___vfiprintf_internal_r+0x11ec>
   2ad94:	e4bfcb04 	addi	r18,fp,-212
			ret += m;
   2ad98:	e0bfb917 	ldw	r2,-284(fp)
   2ad9c:	1405883a 	add	r2,r2,r16
   2ada0:	e0bfb915 	stw	r2,-284(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
   2ada4:	a8800003 	ldbu	r2,0(r21)
   2ada8:	10803fcc 	andi	r2,r2,255
   2adac:	1080201c 	xori	r2,r2,128
   2adb0:	10bfe004 	addi	r2,r2,-128
   2adb4:	1003ec26 	beq	r2,zero,2bd68 <___vfiprintf_internal_r+0x11b4>
                    goto done;
#endif
		fmt_anchor = fmt;
   2adb8:	e57fc515 	stw	r21,-236(fp)
		fmt++;		/* skip over '%' */
   2adbc:	ad400044 	addi	r21,r21,1

		flags = 0;
   2adc0:	0027883a 	mov	r19,zero
		dprec = 0;
   2adc4:	e03fbf15 	stw	zero,-260(fp)
		width = 0;
   2adc8:	e03fba15 	stw	zero,-280(fp)
		prec = -1;
   2adcc:	00bfffc4 	movi	r2,-1
   2add0:	e0bfbb15 	stw	r2,-276(fp)
		sign = '\0';
   2add4:	e03fc705 	stb	zero,-228(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
   2add8:	a805883a 	mov	r2,r21
   2addc:	15400044 	addi	r21,r2,1
   2ade0:	10800003 	ldbu	r2,0(r2)
   2ade4:	14403fcc 	andi	r17,r2,255
   2ade8:	8c40201c 	xori	r17,r17,128
   2adec:	8c7fe004 	addi	r17,r17,-128
reswitch:	switch (ch) {
   2adf0:	88bff804 	addi	r2,r17,-32
   2adf4:	10c01668 	cmpgeui	r3,r2,89
   2adf8:	1802881e 	bne	r3,zero,2b81c <___vfiprintf_internal_r+0xc68>
   2adfc:	100690ba 	slli	r3,r2,2
   2ae00:	008000f4 	movhi	r2,3
   2ae04:	10ab8504 	addi	r2,r2,-20972
   2ae08:	1885883a 	add	r2,r3,r2
   2ae0c:	10800017 	ldw	r2,0(r2)
   2ae10:	1000683a 	jmp	r2
   2ae14:	0002af78 	rdprs	zero,zero,2749
   2ae18:	0002b81c 	xori	zero,zero,2784
   2ae1c:	0002b81c 	xori	zero,zero,2784
   2ae20:	0002af98 	cmpnei	zero,zero,2750
   2ae24:	0002b81c 	xori	zero,zero,2784
   2ae28:	0002b81c 	xori	zero,zero,2784
   2ae2c:	0002b81c 	xori	zero,zero,2784
   2ae30:	0002b81c 	xori	zero,zero,2784
   2ae34:	0002b81c 	xori	zero,zero,2784
   2ae38:	0002b81c 	xori	zero,zero,2784
   2ae3c:	0002afa0 	cmpeqi	zero,zero,2750
   2ae40:	0002afd4 	movui	zero,2751
   2ae44:	0002b81c 	xori	zero,zero,2784
   2ae48:	0002afcc 	andi	zero,zero,2751
   2ae4c:	0002afe0 	cmpeqi	zero,zero,2751
   2ae50:	0002b81c 	xori	zero,zero,2784
   2ae54:	0002b074 	movhi	zero,2753
   2ae58:	0002b07c 	xorhi	zero,zero,2753
   2ae5c:	0002b07c 	xorhi	zero,zero,2753
   2ae60:	0002b07c 	xorhi	zero,zero,2753
   2ae64:	0002b07c 	xorhi	zero,zero,2753
   2ae68:	0002b07c 	xorhi	zero,zero,2753
   2ae6c:	0002b07c 	xorhi	zero,zero,2753
   2ae70:	0002b07c 	xorhi	zero,zero,2753
   2ae74:	0002b07c 	xorhi	zero,zero,2753
   2ae78:	0002b07c 	xorhi	zero,zero,2753
   2ae7c:	0002b81c 	xori	zero,zero,2784
   2ae80:	0002b81c 	xori	zero,zero,2784
   2ae84:	0002b81c 	xori	zero,zero,2784
   2ae88:	0002b81c 	xori	zero,zero,2784
   2ae8c:	0002b81c 	xori	zero,zero,2784
   2ae90:	0002b81c 	xori	zero,zero,2784
   2ae94:	0002b81c 	xori	zero,zero,2784
   2ae98:	0002b81c 	xori	zero,zero,2784
   2ae9c:	0002b81c 	xori	zero,zero,2784
   2aea0:	0002b81c 	xori	zero,zero,2784
   2aea4:	0002b11c 	xori	zero,zero,2756
   2aea8:	0002b81c 	xori	zero,zero,2784
   2aeac:	0002b81c 	xori	zero,zero,2784
   2aeb0:	0002b81c 	xori	zero,zero,2784
   2aeb4:	0002b81c 	xori	zero,zero,2784
   2aeb8:	0002b81c 	xori	zero,zero,2784
   2aebc:	0002b81c 	xori	zero,zero,2784
   2aec0:	0002b81c 	xori	zero,zero,2784
   2aec4:	0002b81c 	xori	zero,zero,2784
   2aec8:	0002b81c 	xori	zero,zero,2784
   2aecc:	0002b81c 	xori	zero,zero,2784
   2aed0:	0002b2bc 	xorhi	zero,zero,2762
   2aed4:	0002b81c 	xori	zero,zero,2784
   2aed8:	0002b81c 	xori	zero,zero,2784
   2aedc:	0002b81c 	xori	zero,zero,2784
   2aee0:	0002b81c 	xori	zero,zero,2784
   2aee4:	0002b81c 	xori	zero,zero,2784
   2aee8:	0002b438 	rdprs	zero,zero,2768
   2aeec:	0002b81c 	xori	zero,zero,2784
   2aef0:	0002b81c 	xori	zero,zero,2784
   2aef4:	0002b4f8 	rdprs	zero,zero,2771
   2aef8:	0002b81c 	xori	zero,zero,2784
   2aefc:	0002b81c 	xori	zero,zero,2784
   2af00:	0002b81c 	xori	zero,zero,2784
   2af04:	0002b81c 	xori	zero,zero,2784
   2af08:	0002b81c 	xori	zero,zero,2784
   2af0c:	0002b81c 	xori	zero,zero,2784
   2af10:	0002b81c 	xori	zero,zero,2784
   2af14:	0002b81c 	xori	zero,zero,2784
   2af18:	0002b81c 	xori	zero,zero,2784
   2af1c:	0002b81c 	xori	zero,zero,2784
   2af20:	0002b0f4 	movhi	zero,2755
   2af24:	0002b120 	cmpeqi	zero,zero,2756
   2af28:	0002b81c 	xori	zero,zero,2784
   2af2c:	0002b81c 	xori	zero,zero,2784
   2af30:	0002b81c 	xori	zero,zero,2784
   2af34:	0002b0b8 	rdprs	zero,zero,2754
   2af38:	0002b120 	cmpeqi	zero,zero,2756
   2af3c:	0002b81c 	xori	zero,zero,2784
   2af40:	0002b81c 	xori	zero,zero,2784
   2af44:	0002b0c0 	call	2b0c <__alt_mem_onchip_memory2_0-0x1d4f4>
   2af48:	0002b81c 	xori	zero,zero,2784
   2af4c:	0002b21c 	xori	zero,zero,2760
   2af50:	0002b2c0 	call	2b2c <__alt_mem_onchip_memory2_0-0x1d4d4>
   2af54:	0002b360 	cmpeqi	zero,zero,2765
   2af58:	0002b0ec 	andhi	zero,zero,2755
   2af5c:	0002b81c 	xori	zero,zero,2784
   2af60:	0002b3a8 	cmpgeui	zero,zero,2766
   2af64:	0002b81c 	xori	zero,zero,2784
   2af68:	0002b43c 	xorhi	zero,zero,2768
   2af6c:	0002b81c 	xori	zero,zero,2784
   2af70:	0002b81c 	xori	zero,zero,2784
   2af74:	0002b508 	cmpgei	zero,zero,2772
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
   2af78:	e0bfc703 	ldbu	r2,-228(fp)
   2af7c:	10803fcc 	andi	r2,r2,255
   2af80:	1080201c 	xori	r2,r2,128
   2af84:	10bfe004 	addi	r2,r2,-128
   2af88:	103f931e 	bne	r2,zero,2add8 <__alt_data_end+0xfffeadd8>
				sign = ' ';
   2af8c:	00800804 	movi	r2,32
   2af90:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
   2af94:	003f9006 	br	2add8 <__alt_data_end+0xfffeadd8>
		case '#':
			flags |= ALT;
   2af98:	9cc00054 	ori	r19,r19,1
			goto rflag;
   2af9c:	003f8e06 	br	2add8 <__alt_data_end+0xfffeadd8>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
   2afa0:	e0bfe917 	ldw	r2,-92(fp)
   2afa4:	10c00104 	addi	r3,r2,4
   2afa8:	e0ffe915 	stw	r3,-92(fp)
   2afac:	10800017 	ldw	r2,0(r2)
   2afb0:	e0bfba15 	stw	r2,-280(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
   2afb4:	e0bfba17 	ldw	r2,-280(fp)
   2afb8:	10000116 	blt	r2,zero,2afc0 <___vfiprintf_internal_r+0x40c>
				goto rflag;
   2afbc:	003f8606 	br	2add8 <__alt_data_end+0xfffeadd8>
			width = -width;
   2afc0:	e0bfba17 	ldw	r2,-280(fp)
   2afc4:	0085c83a 	sub	r2,zero,r2
   2afc8:	e0bfba15 	stw	r2,-280(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
   2afcc:	9cc00114 	ori	r19,r19,4
			goto rflag;
   2afd0:	003f8106 	br	2add8 <__alt_data_end+0xfffeadd8>
		case '+':
			sign = '+';
   2afd4:	00800ac4 	movi	r2,43
   2afd8:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
   2afdc:	003f7e06 	br	2add8 <__alt_data_end+0xfffeadd8>
		case '.':
			if ((ch = *fmt++) == '*') {
   2afe0:	a805883a 	mov	r2,r21
   2afe4:	15400044 	addi	r21,r2,1
   2afe8:	10800003 	ldbu	r2,0(r2)
   2afec:	14403fcc 	andi	r17,r2,255
   2aff0:	8c40201c 	xori	r17,r17,128
   2aff4:	8c7fe004 	addi	r17,r17,-128
   2aff8:	88800a98 	cmpnei	r2,r17,42
   2affc:	10000a1e 	bne	r2,zero,2b028 <___vfiprintf_internal_r+0x474>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
   2b000:	e0bfe917 	ldw	r2,-92(fp)
   2b004:	10c00104 	addi	r3,r2,4
   2b008:	e0ffe915 	stw	r3,-92(fp)
   2b00c:	10800017 	ldw	r2,0(r2)
   2b010:	e0bfbb15 	stw	r2,-276(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
   2b014:	e0bfbb17 	ldw	r2,-276(fp)
   2b018:	103f6f0e 	bge	r2,zero,2add8 <__alt_data_end+0xfffeadd8>
					prec = -1;
   2b01c:	00bfffc4 	movi	r2,-1
   2b020:	e0bfbb15 	stw	r2,-276(fp)
				goto rflag;
   2b024:	003f6c06 	br	2add8 <__alt_data_end+0xfffeadd8>
			}
			n = 0;
   2b028:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
   2b02c:	00000906 	br	2b054 <___vfiprintf_internal_r+0x4a0>
				n = 10 * n + to_digit (ch);
   2b030:	80c002a4 	muli	r3,r16,10
   2b034:	88bff404 	addi	r2,r17,-48
   2b038:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
   2b03c:	a805883a 	mov	r2,r21
   2b040:	15400044 	addi	r21,r2,1
   2b044:	10800003 	ldbu	r2,0(r2)
   2b048:	14403fcc 	andi	r17,r2,255
   2b04c:	8c40201c 	xori	r17,r17,128
   2b050:	8c7fe004 	addi	r17,r17,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
   2b054:	88bff404 	addi	r2,r17,-48
   2b058:	108002b0 	cmpltui	r2,r2,10
   2b05c:	103ff41e 	bne	r2,zero,2b030 <__alt_data_end+0xfffeb030>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
   2b060:	8005883a 	mov	r2,r16
   2b064:	1000010e 	bge	r2,zero,2b06c <___vfiprintf_internal_r+0x4b8>
   2b068:	00bfffc4 	movi	r2,-1
   2b06c:	e0bfbb15 	stw	r2,-276(fp)
			goto reswitch;
   2b070:	003f5f06 	br	2adf0 <__alt_data_end+0xfffeadf0>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
   2b074:	9cc02014 	ori	r19,r19,128
			goto rflag;
   2b078:	003f5706 	br	2add8 <__alt_data_end+0xfffeadd8>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
   2b07c:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
   2b080:	80c002a4 	muli	r3,r16,10
   2b084:	88bff404 	addi	r2,r17,-48
   2b088:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
   2b08c:	a805883a 	mov	r2,r21
   2b090:	15400044 	addi	r21,r2,1
   2b094:	10800003 	ldbu	r2,0(r2)
   2b098:	14403fcc 	andi	r17,r2,255
   2b09c:	8c40201c 	xori	r17,r17,128
   2b0a0:	8c7fe004 	addi	r17,r17,-128
			} while (is_digit (ch));
   2b0a4:	88bff404 	addi	r2,r17,-48
   2b0a8:	108002b0 	cmpltui	r2,r2,10
   2b0ac:	103ff41e 	bne	r2,zero,2b080 <__alt_data_end+0xfffeb080>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
   2b0b0:	e43fba15 	stw	r16,-280(fp)
			goto reswitch;
   2b0b4:	003f4e06 	br	2adf0 <__alt_data_end+0xfffeadf0>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
   2b0b8:	9cc01014 	ori	r19,r19,64
			goto rflag;
   2b0bc:	003f4606 	br	2add8 <__alt_data_end+0xfffeadd8>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
   2b0c0:	a8800003 	ldbu	r2,0(r21)
   2b0c4:	10803fcc 	andi	r2,r2,255
   2b0c8:	1080201c 	xori	r2,r2,128
   2b0cc:	10bfe004 	addi	r2,r2,-128
   2b0d0:	10801b18 	cmpnei	r2,r2,108
   2b0d4:	1000031e 	bne	r2,zero,2b0e4 <___vfiprintf_internal_r+0x530>
				fmt++;
   2b0d8:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
   2b0dc:	9cc00814 	ori	r19,r19,32
   2b0e0:	003f3d06 	br	2add8 <__alt_data_end+0xfffeadd8>
			} else
#endif
				flags |= LONGINT;
   2b0e4:	9cc00414 	ori	r19,r19,16
			goto rflag;
   2b0e8:	003f3b06 	br	2add8 <__alt_data_end+0xfffeadd8>
		case 'q': /* extension */
			flags |= QUADINT;
   2b0ec:	9cc00814 	ori	r19,r19,32
			goto rflag;
   2b0f0:	003f3906 	br	2add8 <__alt_data_end+0xfffeadd8>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
   2b0f4:	e53fdb04 	addi	r20,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
   2b0f8:	e0bfe917 	ldw	r2,-92(fp)
   2b0fc:	10c00104 	addi	r3,r2,4
   2b100:	e0ffe915 	stw	r3,-92(fp)
   2b104:	10800017 	ldw	r2,0(r2)
   2b108:	a0800005 	stb	r2,0(r20)
				size = 1;
   2b10c:	00800044 	movi	r2,1
   2b110:	e0bfc115 	stw	r2,-252(fp)
			}
			sign = '\0';
   2b114:	e03fc705 	stb	zero,-228(fp)
			break;
   2b118:	0001c806 	br	2b83c <___vfiprintf_internal_r+0xc88>
		case 'D':  /* extension */
			flags |= LONGINT;
   2b11c:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
   2b120:	9880080c 	andi	r2,r19,32
   2b124:	10000826 	beq	r2,zero,2b148 <___vfiprintf_internal_r+0x594>
   2b128:	e13fe917 	ldw	r4,-92(fp)
   2b12c:	20800204 	addi	r2,r4,8
   2b130:	e0bfe915 	stw	r2,-92(fp)
   2b134:	20800017 	ldw	r2,0(r4)
   2b138:	20c00117 	ldw	r3,4(r4)
   2b13c:	e0bfea15 	stw	r2,-88(fp)
   2b140:	e0ffeb15 	stw	r3,-84(fp)
   2b144:	00001e06 	br	2b1c0 <___vfiprintf_internal_r+0x60c>
   2b148:	9880040c 	andi	r2,r19,16
   2b14c:	10000826 	beq	r2,zero,2b170 <___vfiprintf_internal_r+0x5bc>
   2b150:	e0bfe917 	ldw	r2,-92(fp)
   2b154:	10c00104 	addi	r3,r2,4
   2b158:	e0ffe915 	stw	r3,-92(fp)
   2b15c:	10800017 	ldw	r2,0(r2)
   2b160:	e0bfea15 	stw	r2,-88(fp)
   2b164:	1005d7fa 	srai	r2,r2,31
   2b168:	e0bfeb15 	stw	r2,-84(fp)
   2b16c:	00001406 	br	2b1c0 <___vfiprintf_internal_r+0x60c>
   2b170:	9880100c 	andi	r2,r19,64
   2b174:	10000b26 	beq	r2,zero,2b1a4 <___vfiprintf_internal_r+0x5f0>
   2b178:	e0bfe917 	ldw	r2,-92(fp)
   2b17c:	10c00104 	addi	r3,r2,4
   2b180:	e0ffe915 	stw	r3,-92(fp)
   2b184:	10800017 	ldw	r2,0(r2)
   2b188:	10bfffcc 	andi	r2,r2,65535
   2b18c:	10a0001c 	xori	r2,r2,32768
   2b190:	10a00004 	addi	r2,r2,-32768
   2b194:	e0bfea15 	stw	r2,-88(fp)
   2b198:	1005d7fa 	srai	r2,r2,31
   2b19c:	e0bfeb15 	stw	r2,-84(fp)
   2b1a0:	00000706 	br	2b1c0 <___vfiprintf_internal_r+0x60c>
   2b1a4:	e0bfe917 	ldw	r2,-92(fp)
   2b1a8:	10c00104 	addi	r3,r2,4
   2b1ac:	e0ffe915 	stw	r3,-92(fp)
   2b1b0:	10800017 	ldw	r2,0(r2)
   2b1b4:	e0bfea15 	stw	r2,-88(fp)
   2b1b8:	1005d7fa 	srai	r2,r2,31
   2b1bc:	e0bfeb15 	stw	r2,-84(fp)
   2b1c0:	e0bfea17 	ldw	r2,-88(fp)
   2b1c4:	e0bfbc15 	stw	r2,-272(fp)
   2b1c8:	e0ffeb17 	ldw	r3,-84(fp)
   2b1cc:	e0ffbd15 	stw	r3,-268(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
   2b1d0:	e0bfbc17 	ldw	r2,-272(fp)
   2b1d4:	e0ffbd17 	ldw	r3,-268(fp)
   2b1d8:	18000d0e 	bge	r3,zero,2b210 <___vfiprintf_internal_r+0x65c>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
   2b1dc:	000d883a 	mov	r6,zero
   2b1e0:	000f883a 	mov	r7,zero
   2b1e4:	e13fbc17 	ldw	r4,-272(fp)
   2b1e8:	e17fbd17 	ldw	r5,-268(fp)
   2b1ec:	3105c83a 	sub	r2,r6,r4
   2b1f0:	3091803a 	cmpltu	r8,r6,r2
   2b1f4:	3947c83a 	sub	r3,r7,r5
   2b1f8:	1a09c83a 	sub	r4,r3,r8
   2b1fc:	2007883a 	mov	r3,r4
   2b200:	e0bfbc15 	stw	r2,-272(fp)
   2b204:	e0ffbd15 	stw	r3,-268(fp)
				sign = '-';
   2b208:	00800b44 	movi	r2,45
   2b20c:	e0bfc705 	stb	r2,-228(fp)
			}
			base = DEC;
   2b210:	00800044 	movi	r2,1
   2b214:	e0bfbe05 	stb	r2,-264(fp)
			goto number;
   2b218:	0000f806 	br	2b5fc <___vfiprintf_internal_r+0xa48>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
   2b21c:	9880080c 	andi	r2,r19,32
   2b220:	10000d26 	beq	r2,zero,2b258 <___vfiprintf_internal_r+0x6a4>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
   2b224:	e0bfe917 	ldw	r2,-92(fp)
   2b228:	10c00104 	addi	r3,r2,4
   2b22c:	e0ffe915 	stw	r3,-92(fp)
   2b230:	10800017 	ldw	r2,0(r2)
   2b234:	e0ffb917 	ldw	r3,-284(fp)
   2b238:	e0fff015 	stw	r3,-64(fp)
   2b23c:	1807d7fa 	srai	r3,r3,31
   2b240:	e0fff115 	stw	r3,-60(fp)
   2b244:	e0fff017 	ldw	r3,-64(fp)
   2b248:	10c00015 	stw	r3,0(r2)
   2b24c:	e0fff117 	ldw	r3,-60(fp)
   2b250:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
   2b254:	0002c306 	br	2bd64 <___vfiprintf_internal_r+0x11b0>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
   2b258:	9880040c 	andi	r2,r19,16
   2b25c:	10000726 	beq	r2,zero,2b27c <___vfiprintf_internal_r+0x6c8>
				*GET_ARG (N, ap, long_ptr_t) = ret;
   2b260:	e0bfe917 	ldw	r2,-92(fp)
   2b264:	10c00104 	addi	r3,r2,4
   2b268:	e0ffe915 	stw	r3,-92(fp)
   2b26c:	10800017 	ldw	r2,0(r2)
   2b270:	e0ffb917 	ldw	r3,-284(fp)
   2b274:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
   2b278:	0002ba06 	br	2bd64 <___vfiprintf_internal_r+0x11b0>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
   2b27c:	9880100c 	andi	r2,r19,64
   2b280:	10000726 	beq	r2,zero,2b2a0 <___vfiprintf_internal_r+0x6ec>
				*GET_ARG (N, ap, short_ptr_t) = ret;
   2b284:	e0bfe917 	ldw	r2,-92(fp)
   2b288:	10c00104 	addi	r3,r2,4
   2b28c:	e0ffe915 	stw	r3,-92(fp)
   2b290:	10800017 	ldw	r2,0(r2)
   2b294:	e0ffb917 	ldw	r3,-284(fp)
   2b298:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
   2b29c:	0002b106 	br	2bd64 <___vfiprintf_internal_r+0x11b0>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
   2b2a0:	e0bfe917 	ldw	r2,-92(fp)
   2b2a4:	10c00104 	addi	r3,r2,4
   2b2a8:	e0ffe915 	stw	r3,-92(fp)
   2b2ac:	10800017 	ldw	r2,0(r2)
   2b2b0:	e0ffb917 	ldw	r3,-284(fp)
   2b2b4:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
   2b2b8:	0002aa06 	br	2bd64 <___vfiprintf_internal_r+0x11b0>
		case 'O': /* extension */
			flags |= LONGINT;
   2b2bc:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
   2b2c0:	9880080c 	andi	r2,r19,32
   2b2c4:	10000626 	beq	r2,zero,2b2e0 <___vfiprintf_internal_r+0x72c>
   2b2c8:	e0bfe917 	ldw	r2,-92(fp)
   2b2cc:	10c00204 	addi	r3,r2,8
   2b2d0:	e0ffe915 	stw	r3,-92(fp)
   2b2d4:	15800017 	ldw	r22,0(r2)
   2b2d8:	15c00117 	ldw	r23,4(r2)
   2b2dc:	00001c06 	br	2b350 <___vfiprintf_internal_r+0x79c>
   2b2e0:	9880040c 	andi	r2,r19,16
   2b2e4:	10000726 	beq	r2,zero,2b304 <___vfiprintf_internal_r+0x750>
   2b2e8:	e0bfe917 	ldw	r2,-92(fp)
   2b2ec:	10c00104 	addi	r3,r2,4
   2b2f0:	e0ffe915 	stw	r3,-92(fp)
   2b2f4:	10800017 	ldw	r2,0(r2)
   2b2f8:	102d883a 	mov	r22,r2
   2b2fc:	002f883a 	mov	r23,zero
   2b300:	00001306 	br	2b350 <___vfiprintf_internal_r+0x79c>
   2b304:	9880100c 	andi	r2,r19,64
   2b308:	10000b26 	beq	r2,zero,2b338 <___vfiprintf_internal_r+0x784>
   2b30c:	e0bfe917 	ldw	r2,-92(fp)
   2b310:	10c00104 	addi	r3,r2,4
   2b314:	e0ffe915 	stw	r3,-92(fp)
   2b318:	10800017 	ldw	r2,0(r2)
   2b31c:	e0bff215 	stw	r2,-56(fp)
   2b320:	e03ff315 	stw	zero,-52(fp)
   2b324:	e0bff217 	ldw	r2,-56(fp)
   2b328:	15bfffcc 	andi	r22,r2,65535
   2b32c:	e0fff317 	ldw	r3,-52(fp)
   2b330:	182e703a 	and	r23,r3,zero
   2b334:	00000606 	br	2b350 <___vfiprintf_internal_r+0x79c>
   2b338:	e0bfe917 	ldw	r2,-92(fp)
   2b33c:	10c00104 	addi	r3,r2,4
   2b340:	e0ffe915 	stw	r3,-92(fp)
   2b344:	10800017 	ldw	r2,0(r2)
   2b348:	102d883a 	mov	r22,r2
   2b34c:	002f883a 	mov	r23,zero
   2b350:	e5bfbc15 	stw	r22,-272(fp)
   2b354:	e5ffbd15 	stw	r23,-268(fp)
			base = OCT;
   2b358:	e03fbe05 	stb	zero,-264(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
   2b35c:	0000a606 	br	2b5f8 <___vfiprintf_internal_r+0xa44>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
   2b360:	e0bfe917 	ldw	r2,-92(fp)
   2b364:	10c00104 	addi	r3,r2,4
   2b368:	e0ffe915 	stw	r3,-92(fp)
   2b36c:	10800017 	ldw	r2,0(r2)
   2b370:	e0bfbc15 	stw	r2,-272(fp)
   2b374:	e03fbd15 	stw	zero,-268(fp)
			base = HEX;
   2b378:	00800084 	movi	r2,2
   2b37c:	e0bfbe05 	stb	r2,-264(fp)
			xdigs = "0123456789abcdef";
   2b380:	008000f4 	movhi	r2,3
   2b384:	1087ff04 	addi	r2,r2,8188
   2b388:	e0bfc215 	stw	r2,-248(fp)
			flags |= HEXPREFIX;
   2b38c:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
   2b390:	00800c04 	movi	r2,48
   2b394:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
   2b398:	04401e04 	movi	r17,120
   2b39c:	00801e04 	movi	r2,120
   2b3a0:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
   2b3a4:	00009406 	br	2b5f8 <___vfiprintf_internal_r+0xa44>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
   2b3a8:	e0bfe917 	ldw	r2,-92(fp)
   2b3ac:	10c00104 	addi	r3,r2,4
   2b3b0:	e0ffe915 	stw	r3,-92(fp)
   2b3b4:	15000017 	ldw	r20,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
   2b3b8:	e03fc705 	stb	zero,-228(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
   2b3bc:	a000081e 	bne	r20,zero,2b3e0 <___vfiprintf_internal_r+0x82c>
				cp = "(null)";
   2b3c0:	050000f4 	movhi	r20,3
   2b3c4:	a5080404 	addi	r20,r20,8208
				size = ((unsigned) prec > 6U) ? 6 : prec;
   2b3c8:	e0bfbb17 	ldw	r2,-276(fp)
   2b3cc:	10c001f0 	cmpltui	r3,r2,7
   2b3d0:	1800011e 	bne	r3,zero,2b3d8 <___vfiprintf_internal_r+0x824>
   2b3d4:	00800184 	movi	r2,6
   2b3d8:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
   2b3dc:	00011706 	br	2b83c <___vfiprintf_internal_r+0xc88>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
   2b3e0:	e0bfbb17 	ldw	r2,-276(fp)
   2b3e4:	10001016 	blt	r2,zero,2b428 <___vfiprintf_internal_r+0x874>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
   2b3e8:	e0bfbb17 	ldw	r2,-276(fp)
   2b3ec:	100d883a 	mov	r6,r2
   2b3f0:	000b883a 	mov	r5,zero
   2b3f4:	a009883a 	mov	r4,r20
   2b3f8:	00275b80 	call	275b8 <memchr>
   2b3fc:	e0bfc615 	stw	r2,-232(fp)

				if (p != NULL)
   2b400:	e0bfc617 	ldw	r2,-232(fp)
   2b404:	10000526 	beq	r2,zero,2b41c <___vfiprintf_internal_r+0x868>
					size = p - cp;
   2b408:	e0bfc617 	ldw	r2,-232(fp)
   2b40c:	a007883a 	mov	r3,r20
   2b410:	10c5c83a 	sub	r2,r2,r3
   2b414:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
   2b418:	00010806 	br	2b83c <___vfiprintf_internal_r+0xc88>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
   2b41c:	e0bfbb17 	ldw	r2,-276(fp)
   2b420:	e0bfc115 	stw	r2,-252(fp)
			} else
				size = strlen (cp);

			break;
   2b424:	00010506 	br	2b83c <___vfiprintf_internal_r+0xc88>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
   2b428:	a009883a 	mov	r4,r20
   2b42c:	002a8440 	call	2a844 <strlen>
   2b430:	e0bfc115 	stw	r2,-252(fp)

			break;
   2b434:	00010106 	br	2b83c <___vfiprintf_internal_r+0xc88>
		case 'U': /* extension */
			flags |= LONGINT;
   2b438:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
   2b43c:	9880080c 	andi	r2,r19,32
   2b440:	10000826 	beq	r2,zero,2b464 <___vfiprintf_internal_r+0x8b0>
   2b444:	e0bfe917 	ldw	r2,-92(fp)
   2b448:	10c00204 	addi	r3,r2,8
   2b44c:	e0ffe915 	stw	r3,-92(fp)
   2b450:	10c00017 	ldw	r3,0(r2)
   2b454:	e0ffec15 	stw	r3,-80(fp)
   2b458:	10c00117 	ldw	r3,4(r2)
   2b45c:	e0ffed15 	stw	r3,-76(fp)
   2b460:	00001e06 	br	2b4dc <___vfiprintf_internal_r+0x928>
   2b464:	9880040c 	andi	r2,r19,16
   2b468:	10000726 	beq	r2,zero,2b488 <___vfiprintf_internal_r+0x8d4>
   2b46c:	e0bfe917 	ldw	r2,-92(fp)
   2b470:	10c00104 	addi	r3,r2,4
   2b474:	e0ffe915 	stw	r3,-92(fp)
   2b478:	10800017 	ldw	r2,0(r2)
   2b47c:	e0bfec15 	stw	r2,-80(fp)
   2b480:	e03fed15 	stw	zero,-76(fp)
   2b484:	00001506 	br	2b4dc <___vfiprintf_internal_r+0x928>
   2b488:	9880100c 	andi	r2,r19,64
   2b48c:	10000d26 	beq	r2,zero,2b4c4 <___vfiprintf_internal_r+0x910>
   2b490:	e0bfe917 	ldw	r2,-92(fp)
   2b494:	10c00104 	addi	r3,r2,4
   2b498:	e0ffe915 	stw	r3,-92(fp)
   2b49c:	10800017 	ldw	r2,0(r2)
   2b4a0:	e0bff415 	stw	r2,-48(fp)
   2b4a4:	e03ff515 	stw	zero,-44(fp)
   2b4a8:	e0bff417 	ldw	r2,-48(fp)
   2b4ac:	10bfffcc 	andi	r2,r2,65535
   2b4b0:	e0bfec15 	stw	r2,-80(fp)
   2b4b4:	e0fff517 	ldw	r3,-44(fp)
   2b4b8:	1806703a 	and	r3,r3,zero
   2b4bc:	e0ffed15 	stw	r3,-76(fp)
   2b4c0:	00000606 	br	2b4dc <___vfiprintf_internal_r+0x928>
   2b4c4:	e0bfe917 	ldw	r2,-92(fp)
   2b4c8:	10c00104 	addi	r3,r2,4
   2b4cc:	e0ffe915 	stw	r3,-92(fp)
   2b4d0:	10800017 	ldw	r2,0(r2)
   2b4d4:	e0bfec15 	stw	r2,-80(fp)
   2b4d8:	e03fed15 	stw	zero,-76(fp)
   2b4dc:	e0bfec17 	ldw	r2,-80(fp)
   2b4e0:	e0bfbc15 	stw	r2,-272(fp)
   2b4e4:	e0ffed17 	ldw	r3,-76(fp)
   2b4e8:	e0ffbd15 	stw	r3,-268(fp)
			base = DEC;
   2b4ec:	00800044 	movi	r2,1
   2b4f0:	e0bfbe05 	stb	r2,-264(fp)
			goto nosign;
   2b4f4:	00004006 	br	2b5f8 <___vfiprintf_internal_r+0xa44>
		case 'X':
			xdigs = "0123456789ABCDEF";
   2b4f8:	008000f4 	movhi	r2,3
   2b4fc:	10880604 	addi	r2,r2,8216
   2b500:	e0bfc215 	stw	r2,-248(fp)
			goto hex;
   2b504:	00000306 	br	2b514 <___vfiprintf_internal_r+0x960>
		case 'x':
			xdigs = "0123456789abcdef";
   2b508:	008000f4 	movhi	r2,3
   2b50c:	1087ff04 	addi	r2,r2,8188
   2b510:	e0bfc215 	stw	r2,-248(fp)
hex:			_uquad = UARG ();
   2b514:	9880080c 	andi	r2,r19,32
   2b518:	10000826 	beq	r2,zero,2b53c <___vfiprintf_internal_r+0x988>
   2b51c:	e0bfe917 	ldw	r2,-92(fp)
   2b520:	10c00204 	addi	r3,r2,8
   2b524:	e0ffe915 	stw	r3,-92(fp)
   2b528:	10c00017 	ldw	r3,0(r2)
   2b52c:	e0ffee15 	stw	r3,-72(fp)
   2b530:	10c00117 	ldw	r3,4(r2)
   2b534:	e0ffef15 	stw	r3,-68(fp)
   2b538:	00001e06 	br	2b5b4 <___vfiprintf_internal_r+0xa00>
   2b53c:	9880040c 	andi	r2,r19,16
   2b540:	10000726 	beq	r2,zero,2b560 <___vfiprintf_internal_r+0x9ac>
   2b544:	e0bfe917 	ldw	r2,-92(fp)
   2b548:	10c00104 	addi	r3,r2,4
   2b54c:	e0ffe915 	stw	r3,-92(fp)
   2b550:	10800017 	ldw	r2,0(r2)
   2b554:	e0bfee15 	stw	r2,-72(fp)
   2b558:	e03fef15 	stw	zero,-68(fp)
   2b55c:	00001506 	br	2b5b4 <___vfiprintf_internal_r+0xa00>
   2b560:	9880100c 	andi	r2,r19,64
   2b564:	10000d26 	beq	r2,zero,2b59c <___vfiprintf_internal_r+0x9e8>
   2b568:	e0bfe917 	ldw	r2,-92(fp)
   2b56c:	10c00104 	addi	r3,r2,4
   2b570:	e0ffe915 	stw	r3,-92(fp)
   2b574:	10800017 	ldw	r2,0(r2)
   2b578:	e0bff615 	stw	r2,-40(fp)
   2b57c:	e03ff715 	stw	zero,-36(fp)
   2b580:	e0bff617 	ldw	r2,-40(fp)
   2b584:	10bfffcc 	andi	r2,r2,65535
   2b588:	e0bfee15 	stw	r2,-72(fp)
   2b58c:	e0fff717 	ldw	r3,-36(fp)
   2b590:	1806703a 	and	r3,r3,zero
   2b594:	e0ffef15 	stw	r3,-68(fp)
   2b598:	00000606 	br	2b5b4 <___vfiprintf_internal_r+0xa00>
   2b59c:	e0bfe917 	ldw	r2,-92(fp)
   2b5a0:	10c00104 	addi	r3,r2,4
   2b5a4:	e0ffe915 	stw	r3,-92(fp)
   2b5a8:	10800017 	ldw	r2,0(r2)
   2b5ac:	e0bfee15 	stw	r2,-72(fp)
   2b5b0:	e03fef15 	stw	zero,-68(fp)
   2b5b4:	e0bfee17 	ldw	r2,-72(fp)
   2b5b8:	e0bfbc15 	stw	r2,-272(fp)
   2b5bc:	e0ffef17 	ldw	r3,-68(fp)
   2b5c0:	e0ffbd15 	stw	r3,-268(fp)
			base = HEX;
   2b5c4:	00800084 	movi	r2,2
   2b5c8:	e0bfbe05 	stb	r2,-264(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
   2b5cc:	9880004c 	andi	r2,r19,1
   2b5d0:	10000926 	beq	r2,zero,2b5f8 <___vfiprintf_internal_r+0xa44>
   2b5d4:	e0bfbc17 	ldw	r2,-272(fp)
   2b5d8:	e0ffbd17 	ldw	r3,-268(fp)
   2b5dc:	10c4b03a 	or	r2,r2,r3
   2b5e0:	10000526 	beq	r2,zero,2b5f8 <___vfiprintf_internal_r+0xa44>
				ox[0] = '0';
   2b5e4:	00800c04 	movi	r2,48
   2b5e8:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
   2b5ec:	8805883a 	mov	r2,r17
   2b5f0:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
   2b5f4:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
   2b5f8:	e03fc705 	stb	zero,-228(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
   2b5fc:	e0bfbb17 	ldw	r2,-276(fp)
   2b600:	e0bfbf15 	stw	r2,-260(fp)
   2b604:	e0bfbf17 	ldw	r2,-260(fp)
   2b608:	10000216 	blt	r2,zero,2b614 <___vfiprintf_internal_r+0xa60>
				flags &= ~ZEROPAD;
   2b60c:	00bfdfc4 	movi	r2,-129
   2b610:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
   2b614:	e53fdb04 	addi	r20,fp,-148
   2b618:	a5000a04 	addi	r20,r20,40
			if (_uquad != 0 || prec != 0) {
   2b61c:	e0bfbc17 	ldw	r2,-272(fp)
   2b620:	e0ffbd17 	ldw	r3,-268(fp)
   2b624:	10c4b03a 	or	r2,r2,r3
   2b628:	1000021e 	bne	r2,zero,2b634 <___vfiprintf_internal_r+0xa80>
   2b62c:	e0bfbb17 	ldw	r2,-276(fp)
   2b630:	10006c26 	beq	r2,zero,2b7e4 <___vfiprintf_internal_r+0xc30>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
   2b634:	e0bfbe03 	ldbu	r2,-264(fp)
   2b638:	10c00060 	cmpeqi	r3,r2,1
   2b63c:	1800211e 	bne	r3,zero,2b6c4 <___vfiprintf_internal_r+0xb10>
   2b640:	10c000a0 	cmpeqi	r3,r2,2
   2b644:	1800491e 	bne	r3,zero,2b76c <___vfiprintf_internal_r+0xbb8>
   2b648:	10005d1e 	bne	r2,zero,2b7c0 <___vfiprintf_internal_r+0xc0c>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
   2b64c:	a53fffc4 	addi	r20,r20,-1
   2b650:	e0bfbc17 	ldw	r2,-272(fp)
   2b654:	108001cc 	andi	r2,r2,7
   2b658:	10800c04 	addi	r2,r2,48
   2b65c:	a0800005 	stb	r2,0(r20)
						_uquad >>= 3;
   2b660:	e0bfbd17 	ldw	r2,-268(fp)
   2b664:	1004977a 	slli	r2,r2,29
   2b668:	e0ffbc17 	ldw	r3,-272(fp)
   2b66c:	1806d0fa 	srli	r3,r3,3
   2b670:	1884b03a 	or	r2,r3,r2
   2b674:	e0bfbc15 	stw	r2,-272(fp)
   2b678:	e0bfbd17 	ldw	r2,-268(fp)
   2b67c:	1004d0fa 	srli	r2,r2,3
   2b680:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
   2b684:	e0bfbc17 	ldw	r2,-272(fp)
   2b688:	e0ffbd17 	ldw	r3,-268(fp)
   2b68c:	10c4b03a 	or	r2,r2,r3
   2b690:	103fee1e 	bne	r2,zero,2b64c <__alt_data_end+0xfffeb64c>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
   2b694:	9880004c 	andi	r2,r19,1
   2b698:	10005026 	beq	r2,zero,2b7dc <___vfiprintf_internal_r+0xc28>
   2b69c:	a0800003 	ldbu	r2,0(r20)
   2b6a0:	10803fcc 	andi	r2,r2,255
   2b6a4:	1080201c 	xori	r2,r2,128
   2b6a8:	10bfe004 	addi	r2,r2,-128
   2b6ac:	10800c20 	cmpeqi	r2,r2,48
   2b6b0:	10004a1e 	bne	r2,zero,2b7dc <___vfiprintf_internal_r+0xc28>
						*--cp = '0';
   2b6b4:	a53fffc4 	addi	r20,r20,-1
   2b6b8:	00800c04 	movi	r2,48
   2b6bc:	a0800005 	stb	r2,0(r20)
					break;
   2b6c0:	00004606 	br	2b7dc <___vfiprintf_internal_r+0xc28>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
   2b6c4:	e0bfbd17 	ldw	r2,-268(fp)
   2b6c8:	10000a1e 	bne	r2,zero,2b6f4 <___vfiprintf_internal_r+0xb40>
   2b6cc:	e0bfbd17 	ldw	r2,-268(fp)
   2b6d0:	1000031e 	bne	r2,zero,2b6e0 <___vfiprintf_internal_r+0xb2c>
   2b6d4:	e0bfbc17 	ldw	r2,-272(fp)
   2b6d8:	108002a8 	cmpgeui	r2,r2,10
   2b6dc:	1000051e 	bne	r2,zero,2b6f4 <___vfiprintf_internal_r+0xb40>
						*--cp = to_char(_uquad);
   2b6e0:	a53fffc4 	addi	r20,r20,-1
   2b6e4:	e0bfbc17 	ldw	r2,-272(fp)
   2b6e8:	10800c04 	addi	r2,r2,48
   2b6ec:	a0800005 	stb	r2,0(r20)
						break;
   2b6f0:	00003b06 	br	2b7e0 <___vfiprintf_internal_r+0xc2c>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
   2b6f4:	a53fffc4 	addi	r20,r20,-1
   2b6f8:	e0bfbc17 	ldw	r2,-272(fp)
   2b6fc:	e0ffbd17 	ldw	r3,-268(fp)
   2b700:	01800284 	movi	r6,10
   2b704:	000f883a 	mov	r7,zero
   2b708:	1009883a 	mov	r4,r2
   2b70c:	180b883a 	mov	r5,r3
   2b710:	002d0440 	call	2d044 <__umoddi3>
   2b714:	1009883a 	mov	r4,r2
   2b718:	180b883a 	mov	r5,r3
   2b71c:	2005883a 	mov	r2,r4
   2b720:	2807883a 	mov	r3,r5
   2b724:	10800c04 	addi	r2,r2,48
   2b728:	a0800005 	stb	r2,0(r20)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
   2b72c:	e0bfbc17 	ldw	r2,-272(fp)
   2b730:	e0ffbd17 	ldw	r3,-268(fp)
   2b734:	01800284 	movi	r6,10
   2b738:	000f883a 	mov	r7,zero
   2b73c:	1009883a 	mov	r4,r2
   2b740:	180b883a 	mov	r5,r3
   2b744:	002cacc0 	call	2cacc <__udivdi3>
   2b748:	1009883a 	mov	r4,r2
   2b74c:	180b883a 	mov	r5,r3
   2b750:	e13fbc15 	stw	r4,-272(fp)
   2b754:	e17fbd15 	stw	r5,-268(fp)
					} while (_uquad != 0);
   2b758:	e0bfbc17 	ldw	r2,-272(fp)
   2b75c:	e0ffbd17 	ldw	r3,-268(fp)
   2b760:	10c4b03a 	or	r2,r2,r3
   2b764:	103fe31e 	bne	r2,zero,2b6f4 <__alt_data_end+0xfffeb6f4>
					break;
   2b768:	00001d06 	br	2b7e0 <___vfiprintf_internal_r+0xc2c>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
   2b76c:	a53fffc4 	addi	r20,r20,-1
   2b770:	e0bfbc17 	ldw	r2,-272(fp)
   2b774:	108003cc 	andi	r2,r2,15
   2b778:	e0ffc217 	ldw	r3,-248(fp)
   2b77c:	1885883a 	add	r2,r3,r2
   2b780:	10800003 	ldbu	r2,0(r2)
   2b784:	a0800005 	stb	r2,0(r20)
						_uquad >>= 4;
   2b788:	e0bfbd17 	ldw	r2,-268(fp)
   2b78c:	1004973a 	slli	r2,r2,28
   2b790:	e0ffbc17 	ldw	r3,-272(fp)
   2b794:	1806d13a 	srli	r3,r3,4
   2b798:	1884b03a 	or	r2,r3,r2
   2b79c:	e0bfbc15 	stw	r2,-272(fp)
   2b7a0:	e0bfbd17 	ldw	r2,-268(fp)
   2b7a4:	1004d13a 	srli	r2,r2,4
   2b7a8:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
   2b7ac:	e0bfbc17 	ldw	r2,-272(fp)
   2b7b0:	e0ffbd17 	ldw	r3,-268(fp)
   2b7b4:	10c4b03a 	or	r2,r2,r3
   2b7b8:	103fec1e 	bne	r2,zero,2b76c <__alt_data_end+0xfffeb76c>
					break;
   2b7bc:	00000806 	br	2b7e0 <___vfiprintf_internal_r+0xc2c>

				default:
					cp = "bug in vfprintf: bad base";
   2b7c0:	050000f4 	movhi	r20,3
   2b7c4:	a5080b04 	addi	r20,r20,8236
					size = strlen (cp);
   2b7c8:	a009883a 	mov	r4,r20
   2b7cc:	002a8440 	call	2a844 <strlen>
   2b7d0:	e0bfc115 	stw	r2,-252(fp)
					goto skipsize;
   2b7d4:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
   2b7d8:	00001806 	br	2b83c <___vfiprintf_internal_r+0xc88>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
   2b7dc:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
   2b7e0:	00000706 	br	2b800 <___vfiprintf_internal_r+0xc4c>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
   2b7e4:	e0bfbe03 	ldbu	r2,-264(fp)
   2b7e8:	1000051e 	bne	r2,zero,2b800 <___vfiprintf_internal_r+0xc4c>
   2b7ec:	9880004c 	andi	r2,r19,1
   2b7f0:	10000326 	beq	r2,zero,2b800 <___vfiprintf_internal_r+0xc4c>
                         *--cp = '0';
   2b7f4:	a53fffc4 	addi	r20,r20,-1
   2b7f8:	00800c04 	movi	r2,48
   2b7fc:	a0800005 	stb	r2,0(r20)

			size = buf + BUF - cp;
   2b800:	e0bfdb04 	addi	r2,fp,-148
   2b804:	10800a04 	addi	r2,r2,40
   2b808:	1007883a 	mov	r3,r2
   2b80c:	a005883a 	mov	r2,r20
   2b810:	1885c83a 	sub	r2,r3,r2
   2b814:	e0bfc115 	stw	r2,-252(fp)
		skipsize:
			break;
   2b818:	00000806 	br	2b83c <___vfiprintf_internal_r+0xc88>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
   2b81c:	88015426 	beq	r17,zero,2bd70 <___vfiprintf_internal_r+0x11bc>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
   2b820:	e53fdb04 	addi	r20,fp,-148
			*cp = ch;
   2b824:	8805883a 	mov	r2,r17
   2b828:	a0800005 	stb	r2,0(r20)
			size = 1;
   2b82c:	00800044 	movi	r2,1
   2b830:	e0bfc115 	stw	r2,-252(fp)
			sign = '\0';
   2b834:	e03fc705 	stb	zero,-228(fp)
			break;
   2b838:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
   2b83c:	e0ffbf17 	ldw	r3,-260(fp)
   2b840:	e0bfc117 	ldw	r2,-252(fp)
   2b844:	10c0010e 	bge	r2,r3,2b84c <___vfiprintf_internal_r+0xc98>
   2b848:	1805883a 	mov	r2,r3
   2b84c:	e0bfc015 	stw	r2,-256(fp)
		if (sign)
   2b850:	e0bfc703 	ldbu	r2,-228(fp)
   2b854:	10803fcc 	andi	r2,r2,255
   2b858:	1080201c 	xori	r2,r2,128
   2b85c:	10bfe004 	addi	r2,r2,-128
   2b860:	10000326 	beq	r2,zero,2b870 <___vfiprintf_internal_r+0xcbc>
			realsz++;
   2b864:	e0bfc017 	ldw	r2,-256(fp)
   2b868:	10800044 	addi	r2,r2,1
   2b86c:	e0bfc015 	stw	r2,-256(fp)
		if (flags & HEXPREFIX)
   2b870:	9880008c 	andi	r2,r19,2
   2b874:	10000326 	beq	r2,zero,2b884 <___vfiprintf_internal_r+0xcd0>
			realsz+= 2;
   2b878:	e0bfc017 	ldw	r2,-256(fp)
   2b87c:	10800084 	addi	r2,r2,2
   2b880:	e0bfc015 	stw	r2,-256(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
   2b884:	9880210c 	andi	r2,r19,132
   2b888:	1000351e 	bne	r2,zero,2b960 <___vfiprintf_internal_r+0xdac>
			PAD (width - realsz, blanks);
   2b88c:	e0ffba17 	ldw	r3,-280(fp)
   2b890:	e0bfc017 	ldw	r2,-256(fp)
   2b894:	18a1c83a 	sub	r16,r3,r2
   2b898:	0400310e 	bge	zero,r16,2b960 <___vfiprintf_internal_r+0xdac>
   2b89c:	00001706 	br	2b8fc <___vfiprintf_internal_r+0xd48>
   2b8a0:	008000f4 	movhi	r2,3
   2b8a4:	10881184 	addi	r2,r2,8262
   2b8a8:	90800015 	stw	r2,0(r18)
   2b8ac:	00800404 	movi	r2,16
   2b8b0:	90800115 	stw	r2,4(r18)
   2b8b4:	e0bfca17 	ldw	r2,-216(fp)
   2b8b8:	10800404 	addi	r2,r2,16
   2b8bc:	e0bfca15 	stw	r2,-216(fp)
   2b8c0:	94800204 	addi	r18,r18,8
   2b8c4:	e0bfc917 	ldw	r2,-220(fp)
   2b8c8:	10800044 	addi	r2,r2,1
   2b8cc:	e0bfc915 	stw	r2,-220(fp)
   2b8d0:	e0bfc917 	ldw	r2,-220(fp)
   2b8d4:	10800210 	cmplti	r2,r2,8
   2b8d8:	1000071e 	bne	r2,zero,2b8f8 <___vfiprintf_internal_r+0xd44>
   2b8dc:	e0bfc804 	addi	r2,fp,-224
   2b8e0:	100d883a 	mov	r6,r2
   2b8e4:	e17fe717 	ldw	r5,-100(fp)
   2b8e8:	e13fe617 	ldw	r4,-104(fp)
   2b8ec:	002a9380 	call	2a938 <__sprint_r>
   2b8f0:	10012d1e 	bne	r2,zero,2bda8 <___vfiprintf_internal_r+0x11f4>
   2b8f4:	e4bfcb04 	addi	r18,fp,-212
   2b8f8:	843ffc04 	addi	r16,r16,-16
   2b8fc:	80800448 	cmpgei	r2,r16,17
   2b900:	103fe71e 	bne	r2,zero,2b8a0 <__alt_data_end+0xfffeb8a0>
   2b904:	008000f4 	movhi	r2,3
   2b908:	10881184 	addi	r2,r2,8262
   2b90c:	90800015 	stw	r2,0(r18)
   2b910:	8005883a 	mov	r2,r16
   2b914:	90800115 	stw	r2,4(r18)
   2b918:	e0bfca17 	ldw	r2,-216(fp)
   2b91c:	8007883a 	mov	r3,r16
   2b920:	10c5883a 	add	r2,r2,r3
   2b924:	e0bfca15 	stw	r2,-216(fp)
   2b928:	94800204 	addi	r18,r18,8
   2b92c:	e0bfc917 	ldw	r2,-220(fp)
   2b930:	10800044 	addi	r2,r2,1
   2b934:	e0bfc915 	stw	r2,-220(fp)
   2b938:	e0bfc917 	ldw	r2,-220(fp)
   2b93c:	10800210 	cmplti	r2,r2,8
   2b940:	1000071e 	bne	r2,zero,2b960 <___vfiprintf_internal_r+0xdac>
   2b944:	e0bfc804 	addi	r2,fp,-224
   2b948:	100d883a 	mov	r6,r2
   2b94c:	e17fe717 	ldw	r5,-100(fp)
   2b950:	e13fe617 	ldw	r4,-104(fp)
   2b954:	002a9380 	call	2a938 <__sprint_r>
   2b958:	1001151e 	bne	r2,zero,2bdb0 <___vfiprintf_internal_r+0x11fc>
   2b95c:	e4bfcb04 	addi	r18,fp,-212

		/* prefix */
		if (sign)
   2b960:	e0bfc703 	ldbu	r2,-228(fp)
   2b964:	10803fcc 	andi	r2,r2,255
   2b968:	1080201c 	xori	r2,r2,128
   2b96c:	10bfe004 	addi	r2,r2,-128
   2b970:	10001526 	beq	r2,zero,2b9c8 <___vfiprintf_internal_r+0xe14>
			PRINT (&sign, 1);
   2b974:	e0bfc704 	addi	r2,fp,-228
   2b978:	90800015 	stw	r2,0(r18)
   2b97c:	00800044 	movi	r2,1
   2b980:	90800115 	stw	r2,4(r18)
   2b984:	e0bfca17 	ldw	r2,-216(fp)
   2b988:	10800044 	addi	r2,r2,1
   2b98c:	e0bfca15 	stw	r2,-216(fp)
   2b990:	94800204 	addi	r18,r18,8
   2b994:	e0bfc917 	ldw	r2,-220(fp)
   2b998:	10800044 	addi	r2,r2,1
   2b99c:	e0bfc915 	stw	r2,-220(fp)
   2b9a0:	e0bfc917 	ldw	r2,-220(fp)
   2b9a4:	10800210 	cmplti	r2,r2,8
   2b9a8:	1000071e 	bne	r2,zero,2b9c8 <___vfiprintf_internal_r+0xe14>
   2b9ac:	e0bfc804 	addi	r2,fp,-224
   2b9b0:	100d883a 	mov	r6,r2
   2b9b4:	e17fe717 	ldw	r5,-100(fp)
   2b9b8:	e13fe617 	ldw	r4,-104(fp)
   2b9bc:	002a9380 	call	2a938 <__sprint_r>
   2b9c0:	1000fd1e 	bne	r2,zero,2bdb8 <___vfiprintf_internal_r+0x1204>
   2b9c4:	e4bfcb04 	addi	r18,fp,-212
		if (flags & HEXPREFIX)
   2b9c8:	9880008c 	andi	r2,r19,2
   2b9cc:	10001526 	beq	r2,zero,2ba24 <___vfiprintf_internal_r+0xe70>
			PRINT (ox, 2);
   2b9d0:	e0bfe504 	addi	r2,fp,-108
   2b9d4:	90800015 	stw	r2,0(r18)
   2b9d8:	00800084 	movi	r2,2
   2b9dc:	90800115 	stw	r2,4(r18)
   2b9e0:	e0bfca17 	ldw	r2,-216(fp)
   2b9e4:	10800084 	addi	r2,r2,2
   2b9e8:	e0bfca15 	stw	r2,-216(fp)
   2b9ec:	94800204 	addi	r18,r18,8
   2b9f0:	e0bfc917 	ldw	r2,-220(fp)
   2b9f4:	10800044 	addi	r2,r2,1
   2b9f8:	e0bfc915 	stw	r2,-220(fp)
   2b9fc:	e0bfc917 	ldw	r2,-220(fp)
   2ba00:	10800210 	cmplti	r2,r2,8
   2ba04:	1000071e 	bne	r2,zero,2ba24 <___vfiprintf_internal_r+0xe70>
   2ba08:	e0bfc804 	addi	r2,fp,-224
   2ba0c:	100d883a 	mov	r6,r2
   2ba10:	e17fe717 	ldw	r5,-100(fp)
   2ba14:	e13fe617 	ldw	r4,-104(fp)
   2ba18:	002a9380 	call	2a938 <__sprint_r>
   2ba1c:	1000e81e 	bne	r2,zero,2bdc0 <___vfiprintf_internal_r+0x120c>
   2ba20:	e4bfcb04 	addi	r18,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
   2ba24:	9880210c 	andi	r2,r19,132
   2ba28:	10802018 	cmpnei	r2,r2,128
   2ba2c:	1000351e 	bne	r2,zero,2bb04 <___vfiprintf_internal_r+0xf50>
			PAD (width - realsz, zeroes);
   2ba30:	e0ffba17 	ldw	r3,-280(fp)
   2ba34:	e0bfc017 	ldw	r2,-256(fp)
   2ba38:	18a1c83a 	sub	r16,r3,r2
   2ba3c:	0400310e 	bge	zero,r16,2bb04 <___vfiprintf_internal_r+0xf50>
   2ba40:	00001706 	br	2baa0 <___vfiprintf_internal_r+0xeec>
   2ba44:	008000f4 	movhi	r2,3
   2ba48:	10881584 	addi	r2,r2,8278
   2ba4c:	90800015 	stw	r2,0(r18)
   2ba50:	00800404 	movi	r2,16
   2ba54:	90800115 	stw	r2,4(r18)
   2ba58:	e0bfca17 	ldw	r2,-216(fp)
   2ba5c:	10800404 	addi	r2,r2,16
   2ba60:	e0bfca15 	stw	r2,-216(fp)
   2ba64:	94800204 	addi	r18,r18,8
   2ba68:	e0bfc917 	ldw	r2,-220(fp)
   2ba6c:	10800044 	addi	r2,r2,1
   2ba70:	e0bfc915 	stw	r2,-220(fp)
   2ba74:	e0bfc917 	ldw	r2,-220(fp)
   2ba78:	10800210 	cmplti	r2,r2,8
   2ba7c:	1000071e 	bne	r2,zero,2ba9c <___vfiprintf_internal_r+0xee8>
   2ba80:	e0bfc804 	addi	r2,fp,-224
   2ba84:	100d883a 	mov	r6,r2
   2ba88:	e17fe717 	ldw	r5,-100(fp)
   2ba8c:	e13fe617 	ldw	r4,-104(fp)
   2ba90:	002a9380 	call	2a938 <__sprint_r>
   2ba94:	1000cc1e 	bne	r2,zero,2bdc8 <___vfiprintf_internal_r+0x1214>
   2ba98:	e4bfcb04 	addi	r18,fp,-212
   2ba9c:	843ffc04 	addi	r16,r16,-16
   2baa0:	80800448 	cmpgei	r2,r16,17
   2baa4:	103fe71e 	bne	r2,zero,2ba44 <__alt_data_end+0xfffeba44>
   2baa8:	008000f4 	movhi	r2,3
   2baac:	10881584 	addi	r2,r2,8278
   2bab0:	90800015 	stw	r2,0(r18)
   2bab4:	8005883a 	mov	r2,r16
   2bab8:	90800115 	stw	r2,4(r18)
   2babc:	e0bfca17 	ldw	r2,-216(fp)
   2bac0:	8007883a 	mov	r3,r16
   2bac4:	10c5883a 	add	r2,r2,r3
   2bac8:	e0bfca15 	stw	r2,-216(fp)
   2bacc:	94800204 	addi	r18,r18,8
   2bad0:	e0bfc917 	ldw	r2,-220(fp)
   2bad4:	10800044 	addi	r2,r2,1
   2bad8:	e0bfc915 	stw	r2,-220(fp)
   2badc:	e0bfc917 	ldw	r2,-220(fp)
   2bae0:	10800210 	cmplti	r2,r2,8
   2bae4:	1000071e 	bne	r2,zero,2bb04 <___vfiprintf_internal_r+0xf50>
   2bae8:	e0bfc804 	addi	r2,fp,-224
   2baec:	100d883a 	mov	r6,r2
   2baf0:	e17fe717 	ldw	r5,-100(fp)
   2baf4:	e13fe617 	ldw	r4,-104(fp)
   2baf8:	002a9380 	call	2a938 <__sprint_r>
   2bafc:	1000b41e 	bne	r2,zero,2bdd0 <___vfiprintf_internal_r+0x121c>
   2bb00:	e4bfcb04 	addi	r18,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
   2bb04:	e0ffbf17 	ldw	r3,-260(fp)
   2bb08:	e0bfc117 	ldw	r2,-252(fp)
   2bb0c:	18a1c83a 	sub	r16,r3,r2
   2bb10:	0400310e 	bge	zero,r16,2bbd8 <___vfiprintf_internal_r+0x1024>
   2bb14:	00001706 	br	2bb74 <___vfiprintf_internal_r+0xfc0>
   2bb18:	008000f4 	movhi	r2,3
   2bb1c:	10881584 	addi	r2,r2,8278
   2bb20:	90800015 	stw	r2,0(r18)
   2bb24:	00800404 	movi	r2,16
   2bb28:	90800115 	stw	r2,4(r18)
   2bb2c:	e0bfca17 	ldw	r2,-216(fp)
   2bb30:	10800404 	addi	r2,r2,16
   2bb34:	e0bfca15 	stw	r2,-216(fp)
   2bb38:	94800204 	addi	r18,r18,8
   2bb3c:	e0bfc917 	ldw	r2,-220(fp)
   2bb40:	10800044 	addi	r2,r2,1
   2bb44:	e0bfc915 	stw	r2,-220(fp)
   2bb48:	e0bfc917 	ldw	r2,-220(fp)
   2bb4c:	10800210 	cmplti	r2,r2,8
   2bb50:	1000071e 	bne	r2,zero,2bb70 <___vfiprintf_internal_r+0xfbc>
   2bb54:	e0bfc804 	addi	r2,fp,-224
   2bb58:	100d883a 	mov	r6,r2
   2bb5c:	e17fe717 	ldw	r5,-100(fp)
   2bb60:	e13fe617 	ldw	r4,-104(fp)
   2bb64:	002a9380 	call	2a938 <__sprint_r>
   2bb68:	10009b1e 	bne	r2,zero,2bdd8 <___vfiprintf_internal_r+0x1224>
   2bb6c:	e4bfcb04 	addi	r18,fp,-212
   2bb70:	843ffc04 	addi	r16,r16,-16
   2bb74:	80800448 	cmpgei	r2,r16,17
   2bb78:	103fe71e 	bne	r2,zero,2bb18 <__alt_data_end+0xfffebb18>
   2bb7c:	008000f4 	movhi	r2,3
   2bb80:	10881584 	addi	r2,r2,8278
   2bb84:	90800015 	stw	r2,0(r18)
   2bb88:	8005883a 	mov	r2,r16
   2bb8c:	90800115 	stw	r2,4(r18)
   2bb90:	e0bfca17 	ldw	r2,-216(fp)
   2bb94:	8007883a 	mov	r3,r16
   2bb98:	10c5883a 	add	r2,r2,r3
   2bb9c:	e0bfca15 	stw	r2,-216(fp)
   2bba0:	94800204 	addi	r18,r18,8
   2bba4:	e0bfc917 	ldw	r2,-220(fp)
   2bba8:	10800044 	addi	r2,r2,1
   2bbac:	e0bfc915 	stw	r2,-220(fp)
   2bbb0:	e0bfc917 	ldw	r2,-220(fp)
   2bbb4:	10800210 	cmplti	r2,r2,8
   2bbb8:	1000071e 	bne	r2,zero,2bbd8 <___vfiprintf_internal_r+0x1024>
   2bbbc:	e0bfc804 	addi	r2,fp,-224
   2bbc0:	100d883a 	mov	r6,r2
   2bbc4:	e17fe717 	ldw	r5,-100(fp)
   2bbc8:	e13fe617 	ldw	r4,-104(fp)
   2bbcc:	002a9380 	call	2a938 <__sprint_r>
   2bbd0:	1000831e 	bne	r2,zero,2bde0 <___vfiprintf_internal_r+0x122c>
   2bbd4:	e4bfcb04 	addi	r18,fp,-212
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
   2bbd8:	95000015 	stw	r20,0(r18)
   2bbdc:	e0bfc117 	ldw	r2,-252(fp)
   2bbe0:	90800115 	stw	r2,4(r18)
   2bbe4:	e0ffca17 	ldw	r3,-216(fp)
   2bbe8:	e0bfc117 	ldw	r2,-252(fp)
   2bbec:	1885883a 	add	r2,r3,r2
   2bbf0:	e0bfca15 	stw	r2,-216(fp)
   2bbf4:	94800204 	addi	r18,r18,8
   2bbf8:	e0bfc917 	ldw	r2,-220(fp)
   2bbfc:	10800044 	addi	r2,r2,1
   2bc00:	e0bfc915 	stw	r2,-220(fp)
   2bc04:	e0bfc917 	ldw	r2,-220(fp)
   2bc08:	10800210 	cmplti	r2,r2,8
   2bc0c:	1000071e 	bne	r2,zero,2bc2c <___vfiprintf_internal_r+0x1078>
   2bc10:	e0bfc804 	addi	r2,fp,-224
   2bc14:	100d883a 	mov	r6,r2
   2bc18:	e17fe717 	ldw	r5,-100(fp)
   2bc1c:	e13fe617 	ldw	r4,-104(fp)
   2bc20:	002a9380 	call	2a938 <__sprint_r>
   2bc24:	1000701e 	bne	r2,zero,2bde8 <___vfiprintf_internal_r+0x1234>
   2bc28:	e4bfcb04 	addi	r18,fp,-212
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
   2bc2c:	9880010c 	andi	r2,r19,4
   2bc30:	10003526 	beq	r2,zero,2bd08 <___vfiprintf_internal_r+0x1154>
			PAD (width - realsz, blanks);
   2bc34:	e0ffba17 	ldw	r3,-280(fp)
   2bc38:	e0bfc017 	ldw	r2,-256(fp)
   2bc3c:	18a1c83a 	sub	r16,r3,r2
   2bc40:	0400310e 	bge	zero,r16,2bd08 <___vfiprintf_internal_r+0x1154>
   2bc44:	00001706 	br	2bca4 <___vfiprintf_internal_r+0x10f0>
   2bc48:	008000f4 	movhi	r2,3
   2bc4c:	10881184 	addi	r2,r2,8262
   2bc50:	90800015 	stw	r2,0(r18)
   2bc54:	00800404 	movi	r2,16
   2bc58:	90800115 	stw	r2,4(r18)
   2bc5c:	e0bfca17 	ldw	r2,-216(fp)
   2bc60:	10800404 	addi	r2,r2,16
   2bc64:	e0bfca15 	stw	r2,-216(fp)
   2bc68:	94800204 	addi	r18,r18,8
   2bc6c:	e0bfc917 	ldw	r2,-220(fp)
   2bc70:	10800044 	addi	r2,r2,1
   2bc74:	e0bfc915 	stw	r2,-220(fp)
   2bc78:	e0bfc917 	ldw	r2,-220(fp)
   2bc7c:	10800210 	cmplti	r2,r2,8
   2bc80:	1000071e 	bne	r2,zero,2bca0 <___vfiprintf_internal_r+0x10ec>
   2bc84:	e0bfc804 	addi	r2,fp,-224
   2bc88:	100d883a 	mov	r6,r2
   2bc8c:	e17fe717 	ldw	r5,-100(fp)
   2bc90:	e13fe617 	ldw	r4,-104(fp)
   2bc94:	002a9380 	call	2a938 <__sprint_r>
   2bc98:	1000551e 	bne	r2,zero,2bdf0 <___vfiprintf_internal_r+0x123c>
   2bc9c:	e4bfcb04 	addi	r18,fp,-212
   2bca0:	843ffc04 	addi	r16,r16,-16
   2bca4:	80800448 	cmpgei	r2,r16,17
   2bca8:	103fe71e 	bne	r2,zero,2bc48 <__alt_data_end+0xfffebc48>
   2bcac:	008000f4 	movhi	r2,3
   2bcb0:	10881184 	addi	r2,r2,8262
   2bcb4:	90800015 	stw	r2,0(r18)
   2bcb8:	8005883a 	mov	r2,r16
   2bcbc:	90800115 	stw	r2,4(r18)
   2bcc0:	e0bfca17 	ldw	r2,-216(fp)
   2bcc4:	8007883a 	mov	r3,r16
   2bcc8:	10c5883a 	add	r2,r2,r3
   2bccc:	e0bfca15 	stw	r2,-216(fp)
   2bcd0:	94800204 	addi	r18,r18,8
   2bcd4:	e0bfc917 	ldw	r2,-220(fp)
   2bcd8:	10800044 	addi	r2,r2,1
   2bcdc:	e0bfc915 	stw	r2,-220(fp)
   2bce0:	e0bfc917 	ldw	r2,-220(fp)
   2bce4:	10800210 	cmplti	r2,r2,8
   2bce8:	1000071e 	bne	r2,zero,2bd08 <___vfiprintf_internal_r+0x1154>
   2bcec:	e0bfc804 	addi	r2,fp,-224
   2bcf0:	100d883a 	mov	r6,r2
   2bcf4:	e17fe717 	ldw	r5,-100(fp)
   2bcf8:	e13fe617 	ldw	r4,-104(fp)
   2bcfc:	002a9380 	call	2a938 <__sprint_r>
   2bd00:	10003d1e 	bne	r2,zero,2bdf8 <___vfiprintf_internal_r+0x1244>
   2bd04:	e4bfcb04 	addi	r18,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
   2bd08:	e0ffba17 	ldw	r3,-280(fp)
   2bd0c:	e0bfc017 	ldw	r2,-256(fp)
   2bd10:	10c0010e 	bge	r2,r3,2bd18 <___vfiprintf_internal_r+0x1164>
   2bd14:	1805883a 	mov	r2,r3
   2bd18:	e0ffb917 	ldw	r3,-284(fp)
   2bd1c:	1885883a 	add	r2,r3,r2
   2bd20:	e0bfb915 	stw	r2,-284(fp)

		FLUSH ();	/* copy out the I/O vectors */
   2bd24:	e0bfca17 	ldw	r2,-216(fp)
   2bd28:	10000626 	beq	r2,zero,2bd44 <___vfiprintf_internal_r+0x1190>
   2bd2c:	e0bfc804 	addi	r2,fp,-224
   2bd30:	100d883a 	mov	r6,r2
   2bd34:	e17fe717 	ldw	r5,-100(fp)
   2bd38:	e13fe617 	ldw	r4,-104(fp)
   2bd3c:	002a9380 	call	2a938 <__sprint_r>
   2bd40:	10002f1e 	bne	r2,zero,2be00 <___vfiprintf_internal_r+0x124c>
   2bd44:	e03fc915 	stw	zero,-220(fp)
   2bd48:	e4bfcb04 	addi	r18,fp,-212

                if (malloc_buf != NULL) {
   2bd4c:	e0bfc317 	ldw	r2,-244(fp)
   2bd50:	103bea26 	beq	r2,zero,2acfc <__alt_data_end+0xfffeacfc>
			_free_r (data, malloc_buf);
   2bd54:	e17fc317 	ldw	r5,-244(fp)
   2bd58:	e13fe617 	ldw	r4,-104(fp)
   2bd5c:	002540c0 	call	2540c <_free_r>
			malloc_buf = NULL;
   2bd60:	e03fc315 	stw	zero,-244(fp)
		}
	}
   2bd64:	003be506 	br	2acfc <__alt_data_end+0xfffeacfc>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
   2bd68:	0001883a 	nop
   2bd6c:	00000106 	br	2bd74 <___vfiprintf_internal_r+0x11c0>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
   2bd70:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
   2bd74:	e0bfca17 	ldw	r2,-216(fp)
   2bd78:	10000626 	beq	r2,zero,2bd94 <___vfiprintf_internal_r+0x11e0>
   2bd7c:	e0bfc804 	addi	r2,fp,-224
   2bd80:	100d883a 	mov	r6,r2
   2bd84:	e17fe717 	ldw	r5,-100(fp)
   2bd88:	e13fe617 	ldw	r4,-104(fp)
   2bd8c:	002a9380 	call	2a938 <__sprint_r>
   2bd90:	10001d1e 	bne	r2,zero,2be08 <___vfiprintf_internal_r+0x1254>
   2bd94:	e03fc915 	stw	zero,-220(fp)
   2bd98:	e4bfcb04 	addi	r18,fp,-212
   2bd9c:	00001b06 	br	2be0c <___vfiprintf_internal_r+0x1258>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
   2bda0:	0001883a 	nop
   2bda4:	00001906 	br	2be0c <___vfiprintf_internal_r+0x1258>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
   2bda8:	0001883a 	nop
   2bdac:	00001706 	br	2be0c <___vfiprintf_internal_r+0x1258>
   2bdb0:	0001883a 	nop
   2bdb4:	00001506 	br	2be0c <___vfiprintf_internal_r+0x1258>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
   2bdb8:	0001883a 	nop
   2bdbc:	00001306 	br	2be0c <___vfiprintf_internal_r+0x1258>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
   2bdc0:	0001883a 	nop
   2bdc4:	00001106 	br	2be0c <___vfiprintf_internal_r+0x1258>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
   2bdc8:	0001883a 	nop
   2bdcc:	00000f06 	br	2be0c <___vfiprintf_internal_r+0x1258>
   2bdd0:	0001883a 	nop
   2bdd4:	00000d06 	br	2be0c <___vfiprintf_internal_r+0x1258>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
   2bdd8:	0001883a 	nop
   2bddc:	00000b06 	br	2be0c <___vfiprintf_internal_r+0x1258>
   2bde0:	0001883a 	nop
   2bde4:	00000906 	br	2be0c <___vfiprintf_internal_r+0x1258>
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
   2bde8:	0001883a 	nop
   2bdec:	00000706 	br	2be0c <___vfiprintf_internal_r+0x1258>
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
   2bdf0:	0001883a 	nop
   2bdf4:	00000506 	br	2be0c <___vfiprintf_internal_r+0x1258>
   2bdf8:	0001883a 	nop
   2bdfc:	00000306 	br	2be0c <___vfiprintf_internal_r+0x1258>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
   2be00:	0001883a 	nop
   2be04:	00000106 	br	2be0c <___vfiprintf_internal_r+0x1258>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
   2be08:	0001883a 	nop
error:
	if (malloc_buf != NULL)
   2be0c:	e0bfc317 	ldw	r2,-244(fp)
   2be10:	10000326 	beq	r2,zero,2be20 <___vfiprintf_internal_r+0x126c>
		_free_r (data, malloc_buf);
   2be14:	e17fc317 	ldw	r5,-244(fp)
   2be18:	e13fe617 	ldw	r4,-104(fp)
   2be1c:	002540c0 	call	2540c <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
   2be20:	e0bfe717 	ldw	r2,-100(fp)
   2be24:	1080030b 	ldhu	r2,12(r2)
   2be28:	10bfffcc 	andi	r2,r2,65535
   2be2c:	1080100c 	andi	r2,r2,64
   2be30:	1000021e 	bne	r2,zero,2be3c <___vfiprintf_internal_r+0x1288>
   2be34:	e0bfb917 	ldw	r2,-284(fp)
   2be38:	00000206 	br	2be44 <___vfiprintf_internal_r+0x1290>
   2be3c:	00bfffc4 	movi	r2,-1
   2be40:	0001883a 	nop
	/* NOTREACHED */
}
   2be44:	e6fff804 	addi	sp,fp,-32
   2be48:	dfc00917 	ldw	ra,36(sp)
   2be4c:	df000817 	ldw	fp,32(sp)
   2be50:	ddc00717 	ldw	r23,28(sp)
   2be54:	dd800617 	ldw	r22,24(sp)
   2be58:	dd400517 	ldw	r21,20(sp)
   2be5c:	dd000417 	ldw	r20,16(sp)
   2be60:	dcc00317 	ldw	r19,12(sp)
   2be64:	dc800217 	ldw	r18,8(sp)
   2be68:	dc400117 	ldw	r17,4(sp)
   2be6c:	dc000017 	ldw	r16,0(sp)
   2be70:	dec00a04 	addi	sp,sp,40
   2be74:	f800283a 	ret

0002be78 <_write_r>:
_DEFUN (_write_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _CONST _PTR buf _AND
     size_t cnt)
{
   2be78:	defff904 	addi	sp,sp,-28
   2be7c:	dfc00615 	stw	ra,24(sp)
   2be80:	df000515 	stw	fp,20(sp)
   2be84:	df000504 	addi	fp,sp,20
   2be88:	e13ffc15 	stw	r4,-16(fp)
   2be8c:	e17ffd15 	stw	r5,-12(fp)
   2be90:	e1bffe15 	stw	r6,-8(fp)
   2be94:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
   2be98:	d0270515 	stw	zero,-25580(gp)
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
   2be9c:	e1bfff17 	ldw	r6,-4(fp)
   2bea0:	e17ffe17 	ldw	r5,-8(fp)
   2bea4:	e13ffd17 	ldw	r4,-12(fp)
   2bea8:	00302d40 	call	302d4 <write>
   2beac:	e0bffb15 	stw	r2,-20(fp)
   2beb0:	e0bffb17 	ldw	r2,-20(fp)
   2beb4:	10bfffd8 	cmpnei	r2,r2,-1
   2beb8:	1000051e 	bne	r2,zero,2bed0 <_write_r+0x58>
   2bebc:	d0a70517 	ldw	r2,-25580(gp)
   2bec0:	10000326 	beq	r2,zero,2bed0 <_write_r+0x58>
    ptr->_errno = errno;
   2bec4:	d0e70517 	ldw	r3,-25580(gp)
   2bec8:	e0bffc17 	ldw	r2,-16(fp)
   2becc:	10c00015 	stw	r3,0(r2)
  return ret;
   2bed0:	e0bffb17 	ldw	r2,-20(fp)
}
   2bed4:	e037883a 	mov	sp,fp
   2bed8:	dfc00117 	ldw	ra,4(sp)
   2bedc:	df000017 	ldw	fp,0(sp)
   2bee0:	dec00204 	addi	sp,sp,8
   2bee4:	f800283a 	ret

0002bee8 <_close_r>:

int
_close_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
   2bee8:	defffb04 	addi	sp,sp,-20
   2beec:	dfc00415 	stw	ra,16(sp)
   2bef0:	df000315 	stw	fp,12(sp)
   2bef4:	df000304 	addi	fp,sp,12
   2bef8:	e13ffe15 	stw	r4,-8(fp)
   2befc:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
   2bf00:	d0270515 	stw	zero,-25580(gp)
  if ((ret = _close (fd)) == -1 && errno != 0)
   2bf04:	e13fff17 	ldw	r4,-4(fp)
   2bf08:	002fd980 	call	2fd98 <close>
   2bf0c:	e0bffd15 	stw	r2,-12(fp)
   2bf10:	e0bffd17 	ldw	r2,-12(fp)
   2bf14:	10bfffd8 	cmpnei	r2,r2,-1
   2bf18:	1000051e 	bne	r2,zero,2bf30 <_close_r+0x48>
   2bf1c:	d0a70517 	ldw	r2,-25580(gp)
   2bf20:	10000326 	beq	r2,zero,2bf30 <_close_r+0x48>
    ptr->_errno = errno;
   2bf24:	d0e70517 	ldw	r3,-25580(gp)
   2bf28:	e0bffe17 	ldw	r2,-8(fp)
   2bf2c:	10c00015 	stw	r3,0(r2)
  return ret;
   2bf30:	e0bffd17 	ldw	r2,-12(fp)
}
   2bf34:	e037883a 	mov	sp,fp
   2bf38:	dfc00117 	ldw	ra,4(sp)
   2bf3c:	df000017 	ldw	fp,0(sp)
   2bf40:	dec00204 	addi	sp,sp,8
   2bf44:	f800283a 	ret

0002bf48 <_calloc_r>:
#if __STD_C
Void_t* cALLOc(RARG size_t n, size_t elem_size)
#else
Void_t* cALLOc(RARG n, elem_size) RDECL size_t n; size_t elem_size;
#endif
{
   2bf48:	defff504 	addi	sp,sp,-44
   2bf4c:	dfc00a15 	stw	ra,40(sp)
   2bf50:	df000915 	stw	fp,36(sp)
   2bf54:	df000904 	addi	fp,sp,36
   2bf58:	e13ffd15 	stw	r4,-12(fp)
   2bf5c:	e17ffe15 	stw	r5,-8(fp)
   2bf60:	e1bfff15 	stw	r6,-4(fp)
  mchunkptr p;
  INTERNAL_SIZE_T csz;

  INTERNAL_SIZE_T sz = n * elem_size;
   2bf64:	e0fffe17 	ldw	r3,-8(fp)
   2bf68:	e0bfff17 	ldw	r2,-4(fp)
   2bf6c:	1885383a 	mul	r2,r3,r2
   2bf70:	e0bff815 	stw	r2,-32(fp)
  MALLOC_LOCK;
  oldtop = top;
  oldtopsize = chunksize(top);
#endif

  mem = mALLOc (RCALL sz);
   2bf74:	e17ff817 	ldw	r5,-32(fp)
   2bf78:	e13ffd17 	ldw	r4,-12(fp)
   2bf7c:	0026a3c0 	call	26a3c <_malloc_r>
   2bf80:	e0bff915 	stw	r2,-28(fp)

  if (mem == 0) 
   2bf84:	e0bff917 	ldw	r2,-28(fp)
   2bf88:	1000021e 	bne	r2,zero,2bf94 <_calloc_r+0x4c>
  {
#if MORECORE_CLEARS
    MALLOC_UNLOCK;
#endif
    return 0;
   2bf8c:	0005883a 	mov	r2,zero
   2bf90:	00004106 	br	2c098 <_calloc_r+0x150>
  }
  else
  {
    p = mem2chunk(mem);
   2bf94:	e0bff917 	ldw	r2,-28(fp)
   2bf98:	10bffe04 	addi	r2,r2,-8
   2bf9c:	e0bffa15 	stw	r2,-24(fp)
#endif
      return mem;
    }
#endif

    csz = chunksize(p);
   2bfa0:	e0bffa17 	ldw	r2,-24(fp)
   2bfa4:	10c00117 	ldw	r3,4(r2)
   2bfa8:	00bfff04 	movi	r2,-4
   2bfac:	1884703a 	and	r2,r3,r2
   2bfb0:	e0bffb15 	stw	r2,-20(fp)
      csz = oldtopsize;
    }
    MALLOC_UNLOCK;
#endif

    MALLOC_ZERO(mem, csz - SIZE_SZ);
   2bfb4:	e0bffb17 	ldw	r2,-20(fp)
   2bfb8:	10bfff04 	addi	r2,r2,-4
   2bfbc:	e0bffc15 	stw	r2,-16(fp)
   2bfc0:	e0bffc17 	ldw	r2,-16(fp)
   2bfc4:	10800968 	cmpgeui	r2,r2,37
   2bfc8:	10002e1e 	bne	r2,zero,2c084 <_calloc_r+0x13c>
   2bfcc:	e0bff917 	ldw	r2,-28(fp)
   2bfd0:	e0bff715 	stw	r2,-36(fp)
   2bfd4:	e0bffc17 	ldw	r2,-16(fp)
   2bfd8:	10800530 	cmpltui	r2,r2,20
   2bfdc:	10001e1e 	bne	r2,zero,2c058 <_calloc_r+0x110>
   2bfe0:	e0bff717 	ldw	r2,-36(fp)
   2bfe4:	10c00104 	addi	r3,r2,4
   2bfe8:	e0fff715 	stw	r3,-36(fp)
   2bfec:	10000015 	stw	zero,0(r2)
   2bff0:	e0bff717 	ldw	r2,-36(fp)
   2bff4:	10c00104 	addi	r3,r2,4
   2bff8:	e0fff715 	stw	r3,-36(fp)
   2bffc:	10000015 	stw	zero,0(r2)
   2c000:	e0bffc17 	ldw	r2,-16(fp)
   2c004:	10800730 	cmpltui	r2,r2,28
   2c008:	1000131e 	bne	r2,zero,2c058 <_calloc_r+0x110>
   2c00c:	e0bff717 	ldw	r2,-36(fp)
   2c010:	10c00104 	addi	r3,r2,4
   2c014:	e0fff715 	stw	r3,-36(fp)
   2c018:	10000015 	stw	zero,0(r2)
   2c01c:	e0bff717 	ldw	r2,-36(fp)
   2c020:	10c00104 	addi	r3,r2,4
   2c024:	e0fff715 	stw	r3,-36(fp)
   2c028:	10000015 	stw	zero,0(r2)
   2c02c:	e0bffc17 	ldw	r2,-16(fp)
   2c030:	10800930 	cmpltui	r2,r2,36
   2c034:	1000081e 	bne	r2,zero,2c058 <_calloc_r+0x110>
   2c038:	e0bff717 	ldw	r2,-36(fp)
   2c03c:	10c00104 	addi	r3,r2,4
   2c040:	e0fff715 	stw	r3,-36(fp)
   2c044:	10000015 	stw	zero,0(r2)
   2c048:	e0bff717 	ldw	r2,-36(fp)
   2c04c:	10c00104 	addi	r3,r2,4
   2c050:	e0fff715 	stw	r3,-36(fp)
   2c054:	10000015 	stw	zero,0(r2)
   2c058:	e0bff717 	ldw	r2,-36(fp)
   2c05c:	10c00104 	addi	r3,r2,4
   2c060:	e0fff715 	stw	r3,-36(fp)
   2c064:	10000015 	stw	zero,0(r2)
   2c068:	e0bff717 	ldw	r2,-36(fp)
   2c06c:	10c00104 	addi	r3,r2,4
   2c070:	e0fff715 	stw	r3,-36(fp)
   2c074:	10000015 	stw	zero,0(r2)
   2c078:	e0bff717 	ldw	r2,-36(fp)
   2c07c:	10000015 	stw	zero,0(r2)
   2c080:	00000406 	br	2c094 <_calloc_r+0x14c>
   2c084:	e1bffc17 	ldw	r6,-16(fp)
   2c088:	000b883a 	mov	r5,zero
   2c08c:	e13ff917 	ldw	r4,-28(fp)
   2c090:	0027b040 	call	27b04 <memset>
    return mem;
   2c094:	e0bff917 	ldw	r2,-28(fp)
  }
}
   2c098:	e037883a 	mov	sp,fp
   2c09c:	dfc00117 	ldw	ra,4(sp)
   2c0a0:	df000017 	ldw	fp,0(sp)
   2c0a4:	dec00204 	addi	sp,sp,8
   2c0a8:	f800283a 	ret

0002c0ac <_fclose_r>:

int
_DEFUN(_fclose_r, (rptr, fp),
      struct _reent *rptr _AND
      register FILE * fp)
{
   2c0ac:	defffa04 	addi	sp,sp,-24
   2c0b0:	dfc00515 	stw	ra,20(sp)
   2c0b4:	df000415 	stw	fp,16(sp)
   2c0b8:	dc000315 	stw	r16,12(sp)
   2c0bc:	df000404 	addi	fp,sp,16
   2c0c0:	e13ffe15 	stw	r4,-8(fp)
   2c0c4:	2821883a 	mov	r16,r5
  int r;

  if (fp == NULL)
   2c0c8:	8000021e 	bne	r16,zero,2c0d4 <_fclose_r+0x28>
    return (0);			/* on NULL */
   2c0cc:	0005883a 	mov	r2,zero
   2c0d0:	00003b06 	br	2c1c0 <_fclose_r+0x114>

  CHECK_INIT (rptr, fp);
   2c0d4:	e0bffe17 	ldw	r2,-8(fp)
   2c0d8:	e0bffd15 	stw	r2,-12(fp)
   2c0dc:	e0bffd17 	ldw	r2,-12(fp)
   2c0e0:	10000526 	beq	r2,zero,2c0f8 <_fclose_r+0x4c>
   2c0e4:	e0bffd17 	ldw	r2,-12(fp)
   2c0e8:	10800e17 	ldw	r2,56(r2)
   2c0ec:	1000021e 	bne	r2,zero,2c0f8 <_fclose_r+0x4c>
   2c0f0:	e13ffd17 	ldw	r4,-12(fp)
   2c0f4:	00251ec0 	call	251ec <__sinit>
  int __oldcancel;
  pthread_setcancelstate (PTHREAD_CANCEL_DISABLE, &__oldcancel);
#endif
  _flockfile (fp);

  if (fp->_flags == 0)		/* not open! */
   2c0f8:	8080030b 	ldhu	r2,12(r16)
   2c0fc:	10bfffcc 	andi	r2,r2,65535
   2c100:	10a0001c 	xori	r2,r2,32768
   2c104:	10a00004 	addi	r2,r2,-32768
   2c108:	1000021e 	bne	r2,zero,2c114 <_fclose_r+0x68>
    {
      _funlockfile (fp);
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
      pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif
      return (0);
   2c10c:	0005883a 	mov	r2,zero
   2c110:	00002b06 	br	2c1c0 <_fclose_r+0x114>
  r = (fp->_flags & __SWR) ? __sflush_r (rptr, fp) : 0;
#else
  /* Follow POSIX semantics exactly.  Unconditionally flush to allow
     special handling for seekable read files to reposition file to last
     byte processed as opposed to last byte read ahead into the buffer. */
  r = __sflush_r (rptr, fp);
   2c114:	800b883a 	mov	r5,r16
   2c118:	e13ffe17 	ldw	r4,-8(fp)
   2c11c:	0024a680 	call	24a68 <__sflush_r>
   2c120:	e0bffc15 	stw	r2,-16(fp)
#endif
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
   2c124:	80800b17 	ldw	r2,44(r16)
   2c128:	10000826 	beq	r2,zero,2c14c <_fclose_r+0xa0>
   2c12c:	80800b17 	ldw	r2,44(r16)
   2c130:	80c00717 	ldw	r3,28(r16)
   2c134:	180b883a 	mov	r5,r3
   2c138:	e13ffe17 	ldw	r4,-8(fp)
   2c13c:	103ee83a 	callr	r2
   2c140:	1000020e 	bge	r2,zero,2c14c <_fclose_r+0xa0>
    r = EOF;
   2c144:	00bfffc4 	movi	r2,-1
   2c148:	e0bffc15 	stw	r2,-16(fp)
  if (fp->_flags & __SMBF)
   2c14c:	8080030b 	ldhu	r2,12(r16)
   2c150:	10bfffcc 	andi	r2,r2,65535
   2c154:	1080200c 	andi	r2,r2,128
   2c158:	10000426 	beq	r2,zero,2c16c <_fclose_r+0xc0>
    _free_r (rptr, (char *) fp->_bf._base);
   2c15c:	80800417 	ldw	r2,16(r16)
   2c160:	100b883a 	mov	r5,r2
   2c164:	e13ffe17 	ldw	r4,-8(fp)
   2c168:	002540c0 	call	2540c <_free_r>
  if (HASUB (fp))
   2c16c:	80800c17 	ldw	r2,48(r16)
   2c170:	10000826 	beq	r2,zero,2c194 <_fclose_r+0xe8>
    FREEUB (rptr, fp);
   2c174:	80c00c17 	ldw	r3,48(r16)
   2c178:	80801004 	addi	r2,r16,64
   2c17c:	18800426 	beq	r3,r2,2c190 <_fclose_r+0xe4>
   2c180:	80800c17 	ldw	r2,48(r16)
   2c184:	100b883a 	mov	r5,r2
   2c188:	e13ffe17 	ldw	r4,-8(fp)
   2c18c:	002540c0 	call	2540c <_free_r>
   2c190:	80000c15 	stw	zero,48(r16)
  if (HASLB (fp))
   2c194:	80801117 	ldw	r2,68(r16)
   2c198:	10000526 	beq	r2,zero,2c1b0 <_fclose_r+0x104>
    FREELB (rptr, fp);
   2c19c:	80801117 	ldw	r2,68(r16)
   2c1a0:	100b883a 	mov	r5,r2
   2c1a4:	e13ffe17 	ldw	r4,-8(fp)
   2c1a8:	002540c0 	call	2540c <_free_r>
   2c1ac:	80001115 	stw	zero,68(r16)
  __sfp_lock_acquire ();
   2c1b0:	00252c40 	call	252c4 <__sfp_lock_acquire>
  fp->_flags = 0;		/* release this FILE for reuse */
   2c1b4:	8000030d 	sth	zero,12(r16)
  _funlockfile (fp);
#ifndef __SINGLE_THREAD__
  __lock_close_recursive (fp->_lock);
#endif

  __sfp_lock_release ();
   2c1b8:	00252e40 	call	252e4 <__sfp_lock_release>
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
  pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif

  return (r);
   2c1bc:	e0bffc17 	ldw	r2,-16(fp)
}
   2c1c0:	e6ffff04 	addi	sp,fp,-4
   2c1c4:	dfc00217 	ldw	ra,8(sp)
   2c1c8:	df000117 	ldw	fp,4(sp)
   2c1cc:	dc000017 	ldw	r16,0(sp)
   2c1d0:	dec00304 	addi	sp,sp,12
   2c1d4:	f800283a 	ret

0002c1d8 <fclose>:
#ifndef _REENT_ONLY

int
_DEFUN(fclose, (fp),
       register FILE * fp)
{
   2c1d8:	defffe04 	addi	sp,sp,-8
   2c1dc:	dfc00115 	stw	ra,4(sp)
   2c1e0:	df000015 	stw	fp,0(sp)
   2c1e4:	d839883a 	mov	fp,sp
   2c1e8:	2007883a 	mov	r3,r4
  return _fclose_r(_REENT, fp);
   2c1ec:	d0a00017 	ldw	r2,-32768(gp)
   2c1f0:	180b883a 	mov	r5,r3
   2c1f4:	1009883a 	mov	r4,r2
   2c1f8:	002c0ac0 	call	2c0ac <_fclose_r>
}
   2c1fc:	e037883a 	mov	sp,fp
   2c200:	dfc00117 	ldw	ra,4(sp)
   2c204:	df000017 	ldw	fp,0(sp)
   2c208:	dec00204 	addi	sp,sp,8
   2c20c:	f800283a 	ret

0002c210 <__fputwc>:
wint_t
_DEFUN(__fputwc, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
   2c210:	defff804 	addi	sp,sp,-32
   2c214:	dfc00715 	stw	ra,28(sp)
   2c218:	df000615 	stw	fp,24(sp)
   2c21c:	df000604 	addi	fp,sp,24
   2c220:	e13ffd15 	stw	r4,-12(fp)
   2c224:	e17ffe15 	stw	r5,-8(fp)
   2c228:	e1bfff15 	stw	r6,-4(fp)
  char buf[MB_LEN_MAX];
  size_t i, len;

  if (MB_CUR_MAX == 1 && wc > 0 && wc <= UCHAR_MAX)
   2c22c:	00263600 	call	26360 <__locale_mb_cur_max>
   2c230:	10800058 	cmpnei	r2,r2,1
   2c234:	10000a1e 	bne	r2,zero,2c260 <__fputwc+0x50>
   2c238:	e0bffe17 	ldw	r2,-8(fp)
   2c23c:	0080080e 	bge	zero,r2,2c260 <__fputwc+0x50>
   2c240:	e0bffe17 	ldw	r2,-8(fp)
   2c244:	10804008 	cmpgei	r2,r2,256
   2c248:	1000051e 	bne	r2,zero,2c260 <__fputwc+0x50>
      /*
       * Assume single-byte locale with no special encoding.
       * A more careful test would be to check
       * _CurrentRuneLocale->encoding.
       */
      *buf = (unsigned char)wc;
   2c24c:	e0bffe17 	ldw	r2,-8(fp)
   2c250:	e0bffc05 	stb	r2,-16(fp)
      len = 1;
   2c254:	00800044 	movi	r2,1
   2c258:	e0bffb15 	stw	r2,-20(fp)
   2c25c:	00001406 	br	2c2b0 <__fputwc+0xa0>
    }
  else
    {
      if ((len = _wcrtomb_r (ptr, buf, wc, &fp->_mbstate)) == (size_t) -1)
   2c260:	e0bfff17 	ldw	r2,-4(fp)
   2c264:	10c01704 	addi	r3,r2,92
   2c268:	e0bffc04 	addi	r2,fp,-16
   2c26c:	180f883a 	mov	r7,r3
   2c270:	e1bffe17 	ldw	r6,-8(fp)
   2c274:	100b883a 	mov	r5,r2
   2c278:	e13ffd17 	ldw	r4,-12(fp)
   2c27c:	002c8440 	call	2c844 <_wcrtomb_r>
   2c280:	e0bffb15 	stw	r2,-20(fp)
   2c284:	e0bffb17 	ldw	r2,-20(fp)
   2c288:	10bfffd8 	cmpnei	r2,r2,-1
   2c28c:	1000081e 	bne	r2,zero,2c2b0 <__fputwc+0xa0>
	{
	  fp->_flags |= __SERR;
   2c290:	e0bfff17 	ldw	r2,-4(fp)
   2c294:	1080030b 	ldhu	r2,12(r2)
   2c298:	10801014 	ori	r2,r2,64
   2c29c:	1007883a 	mov	r3,r2
   2c2a0:	e0bfff17 	ldw	r2,-4(fp)
   2c2a4:	10c0030d 	sth	r3,12(r2)
	  return WEOF;
   2c2a8:	00bfffc4 	movi	r2,-1
   2c2ac:	00005006 	br	2c3f0 <__fputwc+0x1e0>
	}
    }

  for (i = 0; i < len; i++)
   2c2b0:	e03ffa15 	stw	zero,-24(fp)
   2c2b4:	00004a06 	br	2c3e0 <__fputwc+0x1d0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
   2c2b8:	e0bfff17 	ldw	r2,-4(fp)
   2c2bc:	10800217 	ldw	r2,8(r2)
   2c2c0:	10ffffc4 	addi	r3,r2,-1
   2c2c4:	e0bfff17 	ldw	r2,-4(fp)
   2c2c8:	10c00215 	stw	r3,8(r2)
   2c2cc:	e0bfff17 	ldw	r2,-4(fp)
   2c2d0:	10800217 	ldw	r2,8(r2)
   2c2d4:	10002c0e 	bge	r2,zero,2c388 <__fputwc+0x178>
   2c2d8:	e0bfff17 	ldw	r2,-4(fp)
   2c2dc:	10c00217 	ldw	r3,8(r2)
   2c2e0:	e0bfff17 	ldw	r2,-4(fp)
   2c2e4:	10800617 	ldw	r2,24(r2)
   2c2e8:	18801c16 	blt	r3,r2,2c35c <__fputwc+0x14c>
   2c2ec:	e0bfff17 	ldw	r2,-4(fp)
   2c2f0:	10800017 	ldw	r2,0(r2)
   2c2f4:	e13ffc04 	addi	r4,fp,-16
   2c2f8:	e0fffa17 	ldw	r3,-24(fp)
   2c2fc:	20c7883a 	add	r3,r4,r3
   2c300:	18c00003 	ldbu	r3,0(r3)
   2c304:	10c00005 	stb	r3,0(r2)
   2c308:	e0bfff17 	ldw	r2,-4(fp)
   2c30c:	10800017 	ldw	r2,0(r2)
   2c310:	10800003 	ldbu	r2,0(r2)
   2c314:	10803fcc 	andi	r2,r2,255
   2c318:	108002a0 	cmpeqi	r2,r2,10
   2c31c:	1000091e 	bne	r2,zero,2c344 <__fputwc+0x134>
   2c320:	e0bfff17 	ldw	r2,-4(fp)
   2c324:	10800017 	ldw	r2,0(r2)
   2c328:	11000044 	addi	r4,r2,1
   2c32c:	e0ffff17 	ldw	r3,-4(fp)
   2c330:	19000015 	stw	r4,0(r3)
   2c334:	10800003 	ldbu	r2,0(r2)
   2c338:	10803fcc 	andi	r2,r2,255
   2c33c:	10bfffe0 	cmpeqi	r2,r2,-1
   2c340:	00002006 	br	2c3c4 <__fputwc+0x1b4>
   2c344:	e1bfff17 	ldw	r6,-4(fp)
   2c348:	01400284 	movi	r5,10
   2c34c:	e13ffd17 	ldw	r4,-12(fp)
   2c350:	002c69c0 	call	2c69c <__swbuf_r>
   2c354:	10bfffe0 	cmpeqi	r2,r2,-1
   2c358:	00001a06 	br	2c3c4 <__fputwc+0x1b4>
   2c35c:	e0fffc04 	addi	r3,fp,-16
   2c360:	e0bffa17 	ldw	r2,-24(fp)
   2c364:	1885883a 	add	r2,r3,r2
   2c368:	10800003 	ldbu	r2,0(r2)
   2c36c:	10803fcc 	andi	r2,r2,255
   2c370:	e1bfff17 	ldw	r6,-4(fp)
   2c374:	100b883a 	mov	r5,r2
   2c378:	e13ffd17 	ldw	r4,-12(fp)
   2c37c:	002c69c0 	call	2c69c <__swbuf_r>
   2c380:	10bfffe0 	cmpeqi	r2,r2,-1
   2c384:	00000f06 	br	2c3c4 <__fputwc+0x1b4>
   2c388:	e0bfff17 	ldw	r2,-4(fp)
   2c38c:	10800017 	ldw	r2,0(r2)
   2c390:	e13ffc04 	addi	r4,fp,-16
   2c394:	e0fffa17 	ldw	r3,-24(fp)
   2c398:	20c7883a 	add	r3,r4,r3
   2c39c:	18c00003 	ldbu	r3,0(r3)
   2c3a0:	10c00005 	stb	r3,0(r2)
   2c3a4:	e0bfff17 	ldw	r2,-4(fp)
   2c3a8:	10800017 	ldw	r2,0(r2)
   2c3ac:	11000044 	addi	r4,r2,1
   2c3b0:	e0ffff17 	ldw	r3,-4(fp)
   2c3b4:	19000015 	stw	r4,0(r3)
   2c3b8:	10800003 	ldbu	r2,0(r2)
   2c3bc:	10803fcc 	andi	r2,r2,255
   2c3c0:	10bfffe0 	cmpeqi	r2,r2,-1
   2c3c4:	10803fcc 	andi	r2,r2,255
   2c3c8:	10000226 	beq	r2,zero,2c3d4 <__fputwc+0x1c4>
      return WEOF;
   2c3cc:	00bfffc4 	movi	r2,-1
   2c3d0:	00000706 	br	2c3f0 <__fputwc+0x1e0>
	  fp->_flags |= __SERR;
	  return WEOF;
	}
    }

  for (i = 0; i < len; i++)
   2c3d4:	e0bffa17 	ldw	r2,-24(fp)
   2c3d8:	10800044 	addi	r2,r2,1
   2c3dc:	e0bffa15 	stw	r2,-24(fp)
   2c3e0:	e0fffa17 	ldw	r3,-24(fp)
   2c3e4:	e0bffb17 	ldw	r2,-20(fp)
   2c3e8:	18bfb336 	bltu	r3,r2,2c2b8 <__alt_data_end+0xfffec2b8>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
      return WEOF;

  return (wint_t) wc;
   2c3ec:	e0bffe17 	ldw	r2,-8(fp)
}
   2c3f0:	e037883a 	mov	sp,fp
   2c3f4:	dfc00117 	ldw	ra,4(sp)
   2c3f8:	df000017 	ldw	fp,0(sp)
   2c3fc:	dec00204 	addi	sp,sp,8
   2c400:	f800283a 	ret

0002c404 <_fputwc_r>:
wint_t
_DEFUN(_fputwc_r, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
   2c404:	defffa04 	addi	sp,sp,-24
   2c408:	dfc00515 	stw	ra,20(sp)
   2c40c:	df000415 	stw	fp,16(sp)
   2c410:	df000404 	addi	fp,sp,16
   2c414:	e13ffd15 	stw	r4,-12(fp)
   2c418:	e17ffe15 	stw	r5,-8(fp)
   2c41c:	e1bfff15 	stw	r6,-4(fp)
  wint_t r;

  _newlib_flockfile_start (fp);
  ORIENT(fp, 1);
   2c420:	e0bfff17 	ldw	r2,-4(fp)
   2c424:	1080030b 	ldhu	r2,12(r2)
   2c428:	10bfffcc 	andi	r2,r2,65535
   2c42c:	1088000c 	andi	r2,r2,8192
   2c430:	10000b1e 	bne	r2,zero,2c460 <_fputwc_r+0x5c>
   2c434:	e0bfff17 	ldw	r2,-4(fp)
   2c438:	1080030b 	ldhu	r2,12(r2)
   2c43c:	10880014 	ori	r2,r2,8192
   2c440:	1007883a 	mov	r3,r2
   2c444:	e0bfff17 	ldw	r2,-4(fp)
   2c448:	10c0030d 	sth	r3,12(r2)
   2c44c:	e0bfff17 	ldw	r2,-4(fp)
   2c450:	10801917 	ldw	r2,100(r2)
   2c454:	10c80014 	ori	r3,r2,8192
   2c458:	e0bfff17 	ldw	r2,-4(fp)
   2c45c:	10c01915 	stw	r3,100(r2)
  r = __fputwc(ptr, wc, fp);
   2c460:	e1bfff17 	ldw	r6,-4(fp)
   2c464:	e17ffe17 	ldw	r5,-8(fp)
   2c468:	e13ffd17 	ldw	r4,-12(fp)
   2c46c:	002c2100 	call	2c210 <__fputwc>
   2c470:	e0bffc15 	stw	r2,-16(fp)
  _newlib_flockfile_end (fp);
  return r;
   2c474:	e0bffc17 	ldw	r2,-16(fp)
}
   2c478:	e037883a 	mov	sp,fp
   2c47c:	dfc00117 	ldw	ra,4(sp)
   2c480:	df000017 	ldw	fp,0(sp)
   2c484:	dec00204 	addi	sp,sp,8
   2c488:	f800283a 	ret

0002c48c <fputwc>:

wint_t
_DEFUN(fputwc, (wc, fp),
	wchar_t wc _AND
	FILE *fp)
{
   2c48c:	defffa04 	addi	sp,sp,-24
   2c490:	dfc00515 	stw	ra,20(sp)
   2c494:	df000415 	stw	fp,16(sp)
   2c498:	df000404 	addi	fp,sp,16
   2c49c:	e13ffe15 	stw	r4,-8(fp)
   2c4a0:	e17fff15 	stw	r5,-4(fp)
  struct _reent *reent = _REENT;
   2c4a4:	d0a00017 	ldw	r2,-32768(gp)
   2c4a8:	e0bffc15 	stw	r2,-16(fp)

  CHECK_INIT(reent, fp);
   2c4ac:	e0bffc17 	ldw	r2,-16(fp)
   2c4b0:	e0bffd15 	stw	r2,-12(fp)
   2c4b4:	e0bffd17 	ldw	r2,-12(fp)
   2c4b8:	10000526 	beq	r2,zero,2c4d0 <fputwc+0x44>
   2c4bc:	e0bffd17 	ldw	r2,-12(fp)
   2c4c0:	10800e17 	ldw	r2,56(r2)
   2c4c4:	1000021e 	bne	r2,zero,2c4d0 <fputwc+0x44>
   2c4c8:	e13ffd17 	ldw	r4,-12(fp)
   2c4cc:	00251ec0 	call	251ec <__sinit>
  return _fputwc_r (reent, wc, fp);
   2c4d0:	e1bfff17 	ldw	r6,-4(fp)
   2c4d4:	e17ffe17 	ldw	r5,-8(fp)
   2c4d8:	e13ffc17 	ldw	r4,-16(fp)
   2c4dc:	002c4040 	call	2c404 <_fputwc_r>
}
   2c4e0:	e037883a 	mov	sp,fp
   2c4e4:	dfc00117 	ldw	ra,4(sp)
   2c4e8:	df000017 	ldw	fp,0(sp)
   2c4ec:	dec00204 	addi	sp,sp,8
   2c4f0:	f800283a 	ret

0002c4f4 <_fstat_r>:
int
_fstat_r (ptr, fd, pstat)
     struct _reent *ptr;
     int fd;
     struct stat *pstat;
{
   2c4f4:	defffa04 	addi	sp,sp,-24
   2c4f8:	dfc00515 	stw	ra,20(sp)
   2c4fc:	df000415 	stw	fp,16(sp)
   2c500:	df000404 	addi	fp,sp,16
   2c504:	e13ffd15 	stw	r4,-12(fp)
   2c508:	e17ffe15 	stw	r5,-8(fp)
   2c50c:	e1bfff15 	stw	r6,-4(fp)
  int ret;

  errno = 0;
   2c510:	d0270515 	stw	zero,-25580(gp)
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
   2c514:	e17fff17 	ldw	r5,-4(fp)
   2c518:	e13ffe17 	ldw	r4,-8(fp)
   2c51c:	002fe5c0 	call	2fe5c <fstat>
   2c520:	e0bffc15 	stw	r2,-16(fp)
   2c524:	e0bffc17 	ldw	r2,-16(fp)
   2c528:	10bfffd8 	cmpnei	r2,r2,-1
   2c52c:	1000051e 	bne	r2,zero,2c544 <_fstat_r+0x50>
   2c530:	d0a70517 	ldw	r2,-25580(gp)
   2c534:	10000326 	beq	r2,zero,2c544 <_fstat_r+0x50>
    ptr->_errno = errno;
   2c538:	d0e70517 	ldw	r3,-25580(gp)
   2c53c:	e0bffd17 	ldw	r2,-12(fp)
   2c540:	10c00015 	stw	r3,0(r2)
  return ret;
   2c544:	e0bffc17 	ldw	r2,-16(fp)
}
   2c548:	e037883a 	mov	sp,fp
   2c54c:	dfc00117 	ldw	ra,4(sp)
   2c550:	df000017 	ldw	fp,0(sp)
   2c554:	dec00204 	addi	sp,sp,8
   2c558:	f800283a 	ret

0002c55c <_isatty_r>:

int
_isatty_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
   2c55c:	defffb04 	addi	sp,sp,-20
   2c560:	dfc00415 	stw	ra,16(sp)
   2c564:	df000315 	stw	fp,12(sp)
   2c568:	df000304 	addi	fp,sp,12
   2c56c:	e13ffe15 	stw	r4,-8(fp)
   2c570:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
   2c574:	d0270515 	stw	zero,-25580(gp)
  if ((ret = _isatty (fd)) == -1 && errno != 0)
   2c578:	e13fff17 	ldw	r4,-4(fp)
   2c57c:	002fed40 	call	2fed4 <isatty>
   2c580:	e0bffd15 	stw	r2,-12(fp)
   2c584:	e0bffd17 	ldw	r2,-12(fp)
   2c588:	10bfffd8 	cmpnei	r2,r2,-1
   2c58c:	1000051e 	bne	r2,zero,2c5a4 <_isatty_r+0x48>
   2c590:	d0a70517 	ldw	r2,-25580(gp)
   2c594:	10000326 	beq	r2,zero,2c5a4 <_isatty_r+0x48>
    ptr->_errno = errno;
   2c598:	d0e70517 	ldw	r3,-25580(gp)
   2c59c:	e0bffe17 	ldw	r2,-8(fp)
   2c5a0:	10c00015 	stw	r3,0(r2)
  return ret;
   2c5a4:	e0bffd17 	ldw	r2,-12(fp)
}
   2c5a8:	e037883a 	mov	sp,fp
   2c5ac:	dfc00117 	ldw	ra,4(sp)
   2c5b0:	df000017 	ldw	fp,0(sp)
   2c5b4:	dec00204 	addi	sp,sp,8
   2c5b8:	f800283a 	ret

0002c5bc <_lseek_r>:
_DEFUN (_lseek_r, (ptr, fd, pos, whence),
     struct _reent *ptr _AND
     int fd _AND
     _off_t pos _AND
     int whence)
{
   2c5bc:	defff904 	addi	sp,sp,-28
   2c5c0:	dfc00615 	stw	ra,24(sp)
   2c5c4:	df000515 	stw	fp,20(sp)
   2c5c8:	df000504 	addi	fp,sp,20
   2c5cc:	e13ffc15 	stw	r4,-16(fp)
   2c5d0:	e17ffd15 	stw	r5,-12(fp)
   2c5d4:	e1bffe15 	stw	r6,-8(fp)
   2c5d8:	e1ffff15 	stw	r7,-4(fp)
  _off_t ret;

  errno = 0;
   2c5dc:	d0270515 	stw	zero,-25580(gp)
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
   2c5e0:	e1bfff17 	ldw	r6,-4(fp)
   2c5e4:	e17ffe17 	ldw	r5,-8(fp)
   2c5e8:	e13ffd17 	ldw	r4,-12(fp)
   2c5ec:	00300440 	call	30044 <lseek>
   2c5f0:	e0bffb15 	stw	r2,-20(fp)
   2c5f4:	e0bffb17 	ldw	r2,-20(fp)
   2c5f8:	10bfffd8 	cmpnei	r2,r2,-1
   2c5fc:	1000051e 	bne	r2,zero,2c614 <_lseek_r+0x58>
   2c600:	d0a70517 	ldw	r2,-25580(gp)
   2c604:	10000326 	beq	r2,zero,2c614 <_lseek_r+0x58>
    ptr->_errno = errno;
   2c608:	d0e70517 	ldw	r3,-25580(gp)
   2c60c:	e0bffc17 	ldw	r2,-16(fp)
   2c610:	10c00015 	stw	r3,0(r2)
  return ret;
   2c614:	e0bffb17 	ldw	r2,-20(fp)
}
   2c618:	e037883a 	mov	sp,fp
   2c61c:	dfc00117 	ldw	ra,4(sp)
   2c620:	df000017 	ldw	fp,0(sp)
   2c624:	dec00204 	addi	sp,sp,8
   2c628:	f800283a 	ret

0002c62c <_read_r>:
_DEFUN (_read_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _PTR buf _AND
     size_t cnt)
{
   2c62c:	defff904 	addi	sp,sp,-28
   2c630:	dfc00615 	stw	ra,24(sp)
   2c634:	df000515 	stw	fp,20(sp)
   2c638:	df000504 	addi	fp,sp,20
   2c63c:	e13ffc15 	stw	r4,-16(fp)
   2c640:	e17ffd15 	stw	r5,-12(fp)
   2c644:	e1bffe15 	stw	r6,-8(fp)
   2c648:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
   2c64c:	d0270515 	stw	zero,-25580(gp)
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
   2c650:	e1bfff17 	ldw	r6,-4(fp)
   2c654:	e17ffe17 	ldw	r5,-8(fp)
   2c658:	e13ffd17 	ldw	r4,-12(fp)
   2c65c:	003016c0 	call	3016c <read>
   2c660:	e0bffb15 	stw	r2,-20(fp)
   2c664:	e0bffb17 	ldw	r2,-20(fp)
   2c668:	10bfffd8 	cmpnei	r2,r2,-1
   2c66c:	1000051e 	bne	r2,zero,2c684 <_read_r+0x58>
   2c670:	d0a70517 	ldw	r2,-25580(gp)
   2c674:	10000326 	beq	r2,zero,2c684 <_read_r+0x58>
    ptr->_errno = errno;
   2c678:	d0e70517 	ldw	r3,-25580(gp)
   2c67c:	e0bffc17 	ldw	r2,-16(fp)
   2c680:	10c00015 	stw	r3,0(r2)
  return ret;
   2c684:	e0bffb17 	ldw	r2,-20(fp)
}
   2c688:	e037883a 	mov	sp,fp
   2c68c:	dfc00117 	ldw	ra,4(sp)
   2c690:	df000017 	ldw	fp,0(sp)
   2c694:	dec00204 	addi	sp,sp,8
   2c698:	f800283a 	ret

0002c69c <__swbuf_r>:
int
_DEFUN(__swbuf_r, (ptr, c, fp),
       struct _reent *ptr _AND
       register int c _AND
       register FILE *fp)
{
   2c69c:	defff904 	addi	sp,sp,-28
   2c6a0:	dfc00615 	stw	ra,24(sp)
   2c6a4:	df000515 	stw	fp,20(sp)
   2c6a8:	dc800415 	stw	r18,16(sp)
   2c6ac:	dc400315 	stw	r17,12(sp)
   2c6b0:	dc000215 	stw	r16,8(sp)
   2c6b4:	df000504 	addi	fp,sp,20
   2c6b8:	e13ffc15 	stw	r4,-16(fp)
   2c6bc:	2825883a 	mov	r18,r5
   2c6c0:	3021883a 	mov	r16,r6
  register int n;

  /* Ensure stdio has been initialized.  */

  CHECK_INIT (ptr, fp);
   2c6c4:	e0bffc17 	ldw	r2,-16(fp)
   2c6c8:	e0bffb15 	stw	r2,-20(fp)
   2c6cc:	e0bffb17 	ldw	r2,-20(fp)
   2c6d0:	10000526 	beq	r2,zero,2c6e8 <__swbuf_r+0x4c>
   2c6d4:	e0bffb17 	ldw	r2,-20(fp)
   2c6d8:	10800e17 	ldw	r2,56(r2)
   2c6dc:	1000021e 	bne	r2,zero,2c6e8 <__swbuf_r+0x4c>
   2c6e0:	e13ffb17 	ldw	r4,-20(fp)
   2c6e4:	00251ec0 	call	251ec <__sinit>
   * (if line buffered) so that we will get called again.
   * If we did not do this, a sufficient number of putc()
   * calls might wrap _w from negative to positive.
   */

  fp->_w = fp->_lbfsize;
   2c6e8:	80800617 	ldw	r2,24(r16)
   2c6ec:	80800215 	stw	r2,8(r16)
  if (cantwrite (ptr, fp))
   2c6f0:	8080030b 	ldhu	r2,12(r16)
   2c6f4:	10bfffcc 	andi	r2,r2,65535
   2c6f8:	1080020c 	andi	r2,r2,8
   2c6fc:	10000226 	beq	r2,zero,2c708 <__swbuf_r+0x6c>
   2c700:	80800417 	ldw	r2,16(r16)
   2c704:	1000061e 	bne	r2,zero,2c720 <__swbuf_r+0x84>
   2c708:	800b883a 	mov	r5,r16
   2c70c:	e13ffc17 	ldw	r4,-16(fp)
   2c710:	00229a40 	call	229a4 <__swsetup_r>
   2c714:	10000226 	beq	r2,zero,2c720 <__swbuf_r+0x84>
    return EOF;
   2c718:	00bfffc4 	movi	r2,-1
   2c71c:	00003106 	br	2c7e4 <__swbuf_r+0x148>
  c = (unsigned char) c;
   2c720:	94803fcc 	andi	r18,r18,255

  ORIENT (fp, -1);
   2c724:	8080030b 	ldhu	r2,12(r16)
   2c728:	10bfffcc 	andi	r2,r2,65535
   2c72c:	1088000c 	andi	r2,r2,8192
   2c730:	1000071e 	bne	r2,zero,2c750 <__swbuf_r+0xb4>
   2c734:	8080030b 	ldhu	r2,12(r16)
   2c738:	10880014 	ori	r2,r2,8192
   2c73c:	8080030d 	sth	r2,12(r16)
   2c740:	80c01917 	ldw	r3,100(r16)
   2c744:	00b7ffc4 	movi	r2,-8193
   2c748:	1884703a 	and	r2,r3,r2
   2c74c:	80801915 	stw	r2,100(r16)
   * happen on unbuffered streams, where _bf._size==1; fflush()
   * guarantees that putc() will always call wbuf() by setting _w
   * to 0, so we need not do anything else.
   */

  n = fp->_p - fp->_bf._base;
   2c750:	80800017 	ldw	r2,0(r16)
   2c754:	1007883a 	mov	r3,r2
   2c758:	80800417 	ldw	r2,16(r16)
   2c75c:	18a3c83a 	sub	r17,r3,r2
  if (n >= fp->_bf._size)
   2c760:	80800517 	ldw	r2,20(r16)
   2c764:	88800716 	blt	r17,r2,2c784 <__swbuf_r+0xe8>
    {
      if (_fflush_r (ptr, fp))
   2c768:	800b883a 	mov	r5,r16
   2c76c:	e13ffc17 	ldw	r4,-16(fp)
   2c770:	0024d6c0 	call	24d6c <_fflush_r>
   2c774:	10000226 	beq	r2,zero,2c780 <__swbuf_r+0xe4>
	return EOF;
   2c778:	00bfffc4 	movi	r2,-1
   2c77c:	00001906 	br	2c7e4 <__swbuf_r+0x148>
      n = 0;
   2c780:	0023883a 	mov	r17,zero
    }
  fp->_w--;
   2c784:	80800217 	ldw	r2,8(r16)
   2c788:	10bfffc4 	addi	r2,r2,-1
   2c78c:	80800215 	stw	r2,8(r16)
  *fp->_p++ = c;
   2c790:	80800017 	ldw	r2,0(r16)
   2c794:	10c00044 	addi	r3,r2,1
   2c798:	80c00015 	stw	r3,0(r16)
   2c79c:	9007883a 	mov	r3,r18
   2c7a0:	10c00005 	stb	r3,0(r2)
  if (++n == fp->_bf._size || (fp->_flags & __SLBF && c == '\n'))
   2c7a4:	8c400044 	addi	r17,r17,1
   2c7a8:	80800517 	ldw	r2,20(r16)
   2c7ac:	88800626 	beq	r17,r2,2c7c8 <__swbuf_r+0x12c>
   2c7b0:	8080030b 	ldhu	r2,12(r16)
   2c7b4:	10bfffcc 	andi	r2,r2,65535
   2c7b8:	1080004c 	andi	r2,r2,1
   2c7bc:	10000826 	beq	r2,zero,2c7e0 <__swbuf_r+0x144>
   2c7c0:	90800298 	cmpnei	r2,r18,10
   2c7c4:	1000061e 	bne	r2,zero,2c7e0 <__swbuf_r+0x144>
    if (_fflush_r (ptr, fp))
   2c7c8:	800b883a 	mov	r5,r16
   2c7cc:	e13ffc17 	ldw	r4,-16(fp)
   2c7d0:	0024d6c0 	call	24d6c <_fflush_r>
   2c7d4:	10000226 	beq	r2,zero,2c7e0 <__swbuf_r+0x144>
      return EOF;
   2c7d8:	00bfffc4 	movi	r2,-1
   2c7dc:	00000106 	br	2c7e4 <__swbuf_r+0x148>
  return c;
   2c7e0:	9005883a 	mov	r2,r18
}
   2c7e4:	e6fffd04 	addi	sp,fp,-12
   2c7e8:	dfc00417 	ldw	ra,16(sp)
   2c7ec:	df000317 	ldw	fp,12(sp)
   2c7f0:	dc800217 	ldw	r18,8(sp)
   2c7f4:	dc400117 	ldw	r17,4(sp)
   2c7f8:	dc000017 	ldw	r16,0(sp)
   2c7fc:	dec00504 	addi	sp,sp,20
   2c800:	f800283a 	ret

0002c804 <__swbuf>:
   earlier dynamically built newlib libraries. */
int
_DEFUN(__swbuf, (c, fp),
       register int c _AND
       register FILE *fp)
{
   2c804:	defffe04 	addi	sp,sp,-8
   2c808:	dfc00115 	stw	ra,4(sp)
   2c80c:	df000015 	stw	fp,0(sp)
   2c810:	d839883a 	mov	fp,sp
   2c814:	2007883a 	mov	r3,r4
   2c818:	2809883a 	mov	r4,r5
  return __swbuf_r (_REENT, c, fp);
   2c81c:	d0a00017 	ldw	r2,-32768(gp)
   2c820:	200d883a 	mov	r6,r4
   2c824:	180b883a 	mov	r5,r3
   2c828:	1009883a 	mov	r4,r2
   2c82c:	002c69c0 	call	2c69c <__swbuf_r>
}
   2c830:	e037883a 	mov	sp,fp
   2c834:	dfc00117 	ldw	ra,4(sp)
   2c838:	df000017 	ldw	fp,0(sp)
   2c83c:	dec00204 	addi	sp,sp,8
   2c840:	f800283a 	ret

0002c844 <_wcrtomb_r>:
_DEFUN (_wcrtomb_r, (ptr, s, wc, ps),
	struct _reent *ptr _AND
	char *s _AND
	wchar_t wc _AND
	mbstate_t *ps)
{
   2c844:	defff404 	addi	sp,sp,-48
   2c848:	dfc00b15 	stw	ra,44(sp)
   2c84c:	df000a15 	stw	fp,40(sp)
   2c850:	dc000915 	stw	r16,36(sp)
   2c854:	df000a04 	addi	fp,sp,40
   2c858:	e13ffb15 	stw	r4,-20(fp)
   2c85c:	e17ffc15 	stw	r5,-16(fp)
   2c860:	e1bffd15 	stw	r6,-12(fp)
   2c864:	e1fffe15 	stw	r7,-8(fp)
  int retval = 0;
   2c868:	e03ff715 	stw	zero,-36(fp)
      _REENT_CHECK_MISC(ptr);
      ps = &(_REENT_WCRTOMB_STATE(ptr));
    }
#endif

  if (s == NULL)
   2c86c:	e0bffc17 	ldw	r2,-16(fp)
   2c870:	10000d1e 	bne	r2,zero,2c8a8 <_wcrtomb_r+0x64>
    retval = __wctomb (ptr, buf, L'\0', __locale_charset (), ps);
   2c874:	d4200517 	ldw	r16,-32748(gp)
   2c878:	002633c0 	call	2633c <__locale_charset>
   2c87c:	1009883a 	mov	r4,r2
   2c880:	e0fff804 	addi	r3,fp,-32
   2c884:	e0bffe17 	ldw	r2,-8(fp)
   2c888:	d8800015 	stw	r2,0(sp)
   2c88c:	200f883a 	mov	r7,r4
   2c890:	000d883a 	mov	r6,zero
   2c894:	180b883a 	mov	r5,r3
   2c898:	e13ffb17 	ldw	r4,-20(fp)
   2c89c:	803ee83a 	callr	r16
   2c8a0:	e0bff715 	stw	r2,-36(fp)
   2c8a4:	00000b06 	br	2c8d4 <_wcrtomb_r+0x90>
  else
    retval = __wctomb (ptr, s, wc, __locale_charset (), ps);
   2c8a8:	d4200517 	ldw	r16,-32748(gp)
   2c8ac:	002633c0 	call	2633c <__locale_charset>
   2c8b0:	1007883a 	mov	r3,r2
   2c8b4:	e0bffe17 	ldw	r2,-8(fp)
   2c8b8:	d8800015 	stw	r2,0(sp)
   2c8bc:	180f883a 	mov	r7,r3
   2c8c0:	e1bffd17 	ldw	r6,-12(fp)
   2c8c4:	e17ffc17 	ldw	r5,-16(fp)
   2c8c8:	e13ffb17 	ldw	r4,-20(fp)
   2c8cc:	803ee83a 	callr	r16
   2c8d0:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
   2c8d4:	e0bff717 	ldw	r2,-36(fp)
   2c8d8:	10bfffd8 	cmpnei	r2,r2,-1
   2c8dc:	1000071e 	bne	r2,zero,2c8fc <_wcrtomb_r+0xb8>
    {
      ps->__count = 0;
   2c8e0:	e0bffe17 	ldw	r2,-8(fp)
   2c8e4:	10000015 	stw	zero,0(r2)
      ptr->_errno = EILSEQ;
   2c8e8:	e0bffb17 	ldw	r2,-20(fp)
   2c8ec:	00c02284 	movi	r3,138
   2c8f0:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
   2c8f4:	00bfffc4 	movi	r2,-1
   2c8f8:	00000106 	br	2c900 <_wcrtomb_r+0xbc>
    }
  else
    return (size_t)retval;
   2c8fc:	e0bff717 	ldw	r2,-36(fp)
}
   2c900:	e6ffff04 	addi	sp,fp,-4
   2c904:	dfc00217 	ldw	ra,8(sp)
   2c908:	df000117 	ldw	fp,4(sp)
   2c90c:	dc000017 	ldw	r16,0(sp)
   2c910:	dec00304 	addi	sp,sp,12
   2c914:	f800283a 	ret

0002c918 <wcrtomb>:
size_t
_DEFUN (wcrtomb, (s, wc, ps),
	char *__restrict s _AND
	wchar_t wc _AND
	mbstate_t *__restrict ps)
{
   2c918:	defff404 	addi	sp,sp,-48
   2c91c:	dfc00b15 	stw	ra,44(sp)
   2c920:	df000a15 	stw	fp,40(sp)
   2c924:	dc000915 	stw	r16,36(sp)
   2c928:	df000a04 	addi	fp,sp,40
   2c92c:	e13ffc15 	stw	r4,-16(fp)
   2c930:	e17ffd15 	stw	r5,-12(fp)
   2c934:	e1bffe15 	stw	r6,-8(fp)
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  return _wcrtomb_r (_REENT, s, wc, ps);
#else
  int retval = 0;
   2c938:	e03ff715 	stw	zero,-36(fp)
  struct _reent *reent = _REENT;
   2c93c:	d0a00017 	ldw	r2,-32768(gp)
   2c940:	e0bff815 	stw	r2,-32(fp)
      _REENT_CHECK_MISC(reent);
      ps = &(_REENT_WCRTOMB_STATE(reent));
    }
#endif

  if (s == NULL)
   2c944:	e0bffc17 	ldw	r2,-16(fp)
   2c948:	10000d1e 	bne	r2,zero,2c980 <wcrtomb+0x68>
    retval = __wctomb (reent, buf, L'\0', __locale_charset (), ps);
   2c94c:	d4200517 	ldw	r16,-32748(gp)
   2c950:	002633c0 	call	2633c <__locale_charset>
   2c954:	1009883a 	mov	r4,r2
   2c958:	e0fff904 	addi	r3,fp,-28
   2c95c:	e0bffe17 	ldw	r2,-8(fp)
   2c960:	d8800015 	stw	r2,0(sp)
   2c964:	200f883a 	mov	r7,r4
   2c968:	000d883a 	mov	r6,zero
   2c96c:	180b883a 	mov	r5,r3
   2c970:	e13ff817 	ldw	r4,-32(fp)
   2c974:	803ee83a 	callr	r16
   2c978:	e0bff715 	stw	r2,-36(fp)
   2c97c:	00000b06 	br	2c9ac <wcrtomb+0x94>
  else
    retval = __wctomb (reent, s, wc, __locale_charset (), ps);
   2c980:	d4200517 	ldw	r16,-32748(gp)
   2c984:	002633c0 	call	2633c <__locale_charset>
   2c988:	1007883a 	mov	r3,r2
   2c98c:	e0bffe17 	ldw	r2,-8(fp)
   2c990:	d8800015 	stw	r2,0(sp)
   2c994:	180f883a 	mov	r7,r3
   2c998:	e1bffd17 	ldw	r6,-12(fp)
   2c99c:	e17ffc17 	ldw	r5,-16(fp)
   2c9a0:	e13ff817 	ldw	r4,-32(fp)
   2c9a4:	803ee83a 	callr	r16
   2c9a8:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
   2c9ac:	e0bff717 	ldw	r2,-36(fp)
   2c9b0:	10bfffd8 	cmpnei	r2,r2,-1
   2c9b4:	1000071e 	bne	r2,zero,2c9d4 <wcrtomb+0xbc>
    {
      ps->__count = 0;
   2c9b8:	e0bffe17 	ldw	r2,-8(fp)
   2c9bc:	10000015 	stw	zero,0(r2)
      reent->_errno = EILSEQ;
   2c9c0:	e0bff817 	ldw	r2,-32(fp)
   2c9c4:	00c02284 	movi	r3,138
   2c9c8:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
   2c9cc:	00bfffc4 	movi	r2,-1
   2c9d0:	00000106 	br	2c9d8 <wcrtomb+0xc0>
    }
  else
    return (size_t)retval;
   2c9d4:	e0bff717 	ldw	r2,-36(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
   2c9d8:	e6ffff04 	addi	sp,fp,-4
   2c9dc:	dfc00217 	ldw	ra,8(sp)
   2c9e0:	df000117 	ldw	fp,4(sp)
   2c9e4:	dc000017 	ldw	r16,0(sp)
   2c9e8:	dec00304 	addi	sp,sp,12
   2c9ec:	f800283a 	ret

0002c9f0 <_wctomb_r>:
_DEFUN (_wctomb_r, (r, s, wchar, state),
        struct _reent *r     _AND 
        char          *s     _AND
        wchar_t        _wchar _AND
        mbstate_t     *state)
{
   2c9f0:	defff804 	addi	sp,sp,-32
   2c9f4:	dfc00715 	stw	ra,28(sp)
   2c9f8:	df000615 	stw	fp,24(sp)
   2c9fc:	dc000515 	stw	r16,20(sp)
   2ca00:	df000604 	addi	fp,sp,24
   2ca04:	e13ffb15 	stw	r4,-20(fp)
   2ca08:	e17ffc15 	stw	r5,-16(fp)
   2ca0c:	e1bffd15 	stw	r6,-12(fp)
   2ca10:	e1fffe15 	stw	r7,-8(fp)
  return __wctomb (r, s, _wchar, __locale_charset (), state);
   2ca14:	d4200517 	ldw	r16,-32748(gp)
   2ca18:	002633c0 	call	2633c <__locale_charset>
   2ca1c:	1007883a 	mov	r3,r2
   2ca20:	e0bffe17 	ldw	r2,-8(fp)
   2ca24:	d8800015 	stw	r2,0(sp)
   2ca28:	180f883a 	mov	r7,r3
   2ca2c:	e1bffd17 	ldw	r6,-12(fp)
   2ca30:	e17ffc17 	ldw	r5,-16(fp)
   2ca34:	e13ffb17 	ldw	r4,-20(fp)
   2ca38:	803ee83a 	callr	r16
}
   2ca3c:	e6ffff04 	addi	sp,fp,-4
   2ca40:	dfc00217 	ldw	ra,8(sp)
   2ca44:	df000117 	ldw	fp,4(sp)
   2ca48:	dc000017 	ldw	r16,0(sp)
   2ca4c:	dec00304 	addi	sp,sp,12
   2ca50:	f800283a 	ret

0002ca54 <__ascii_wctomb>:
        struct _reent *r       _AND 
        char          *s       _AND
        wchar_t        _wchar  _AND
	const char    *charset _AND
        mbstate_t     *state)
{
   2ca54:	defffa04 	addi	sp,sp,-24
   2ca58:	df000515 	stw	fp,20(sp)
   2ca5c:	df000504 	addi	fp,sp,20
   2ca60:	e13ffc15 	stw	r4,-16(fp)
   2ca64:	e17ffd15 	stw	r5,-12(fp)
   2ca68:	e1bffe15 	stw	r6,-8(fp)
   2ca6c:	e1ffff15 	stw	r7,-4(fp)
  /* Avoids compiler warnings about comparisons that are always false
     due to limited range when sizeof(wchar_t) is 2 but sizeof(wint_t)
     is 4, as is the case on cygwin.  */
  wint_t wchar = _wchar;
   2ca70:	e0bffe17 	ldw	r2,-8(fp)
   2ca74:	e0bffb15 	stw	r2,-20(fp)

  if (s == NULL)
   2ca78:	e0bffd17 	ldw	r2,-12(fp)
   2ca7c:	1000021e 	bne	r2,zero,2ca88 <__ascii_wctomb+0x34>
    return 0;
   2ca80:	0005883a 	mov	r2,zero
   2ca84:	00000d06 	br	2cabc <__ascii_wctomb+0x68>
 
#ifdef __CYGWIN__
  if ((size_t)wchar >= 0x80)
#else
  if ((size_t)wchar >= 0x100)
   2ca88:	e0bffb17 	ldw	r2,-20(fp)
   2ca8c:	10804030 	cmpltui	r2,r2,256
   2ca90:	1000051e 	bne	r2,zero,2caa8 <__ascii_wctomb+0x54>
#endif
    {
      r->_errno = EILSEQ;
   2ca94:	e0bffc17 	ldw	r2,-16(fp)
   2ca98:	00c02284 	movi	r3,138
   2ca9c:	10c00015 	stw	r3,0(r2)
      return -1;
   2caa0:	00bfffc4 	movi	r2,-1
   2caa4:	00000506 	br	2cabc <__ascii_wctomb+0x68>
    }

  *s = (char) wchar;
   2caa8:	e0bffb17 	ldw	r2,-20(fp)
   2caac:	1007883a 	mov	r3,r2
   2cab0:	e0bffd17 	ldw	r2,-12(fp)
   2cab4:	10c00005 	stb	r3,0(r2)
  return 1;
   2cab8:	00800044 	movi	r2,1
}
   2cabc:	e037883a 	mov	sp,fp
   2cac0:	df000017 	ldw	fp,0(sp)
   2cac4:	dec00104 	addi	sp,sp,4
   2cac8:	f800283a 	ret

0002cacc <__udivdi3>:
   2cacc:	defff504 	addi	sp,sp,-44
   2cad0:	dcc00415 	stw	r19,16(sp)
   2cad4:	dc000115 	stw	r16,4(sp)
   2cad8:	dfc00a15 	stw	ra,40(sp)
   2cadc:	df000915 	stw	fp,36(sp)
   2cae0:	ddc00815 	stw	r23,32(sp)
   2cae4:	dd800715 	stw	r22,28(sp)
   2cae8:	dd400615 	stw	r21,24(sp)
   2caec:	dd000515 	stw	r20,20(sp)
   2caf0:	dc800315 	stw	r18,12(sp)
   2caf4:	dc400215 	stw	r17,8(sp)
   2caf8:	2027883a 	mov	r19,r4
   2cafc:	2821883a 	mov	r16,r5
   2cb00:	3800411e 	bne	r7,zero,2cc08 <__udivdi3+0x13c>
   2cb04:	3023883a 	mov	r17,r6
   2cb08:	2025883a 	mov	r18,r4
   2cb0c:	2980522e 	bgeu	r5,r6,2cc58 <__udivdi3+0x18c>
   2cb10:	00bfffd4 	movui	r2,65535
   2cb14:	282d883a 	mov	r22,r5
   2cb18:	1180a836 	bltu	r2,r6,2cdbc <__udivdi3+0x2f0>
   2cb1c:	00803fc4 	movi	r2,255
   2cb20:	1185803a 	cmpltu	r2,r2,r6
   2cb24:	100490fa 	slli	r2,r2,3
   2cb28:	3086d83a 	srl	r3,r6,r2
   2cb2c:	010000f4 	movhi	r4,3
   2cb30:	21081984 	addi	r4,r4,8294
   2cb34:	20c7883a 	add	r3,r4,r3
   2cb38:	18c00003 	ldbu	r3,0(r3)
   2cb3c:	1885883a 	add	r2,r3,r2
   2cb40:	00c00804 	movi	r3,32
   2cb44:	1887c83a 	sub	r3,r3,r2
   2cb48:	18000526 	beq	r3,zero,2cb60 <__udivdi3+0x94>
   2cb4c:	80e0983a 	sll	r16,r16,r3
   2cb50:	9884d83a 	srl	r2,r19,r2
   2cb54:	30e2983a 	sll	r17,r6,r3
   2cb58:	98e4983a 	sll	r18,r19,r3
   2cb5c:	142cb03a 	or	r22,r2,r16
   2cb60:	882ad43a 	srli	r21,r17,16
   2cb64:	b009883a 	mov	r4,r22
   2cb68:	8d3fffcc 	andi	r20,r17,65535
   2cb6c:	a80b883a 	mov	r5,r21
   2cb70:	002d6d80 	call	2d6d8 <__umodsi3>
   2cb74:	b009883a 	mov	r4,r22
   2cb78:	a80b883a 	mov	r5,r21
   2cb7c:	1027883a 	mov	r19,r2
   2cb80:	002d6740 	call	2d674 <__udivsi3>
   2cb84:	102d883a 	mov	r22,r2
   2cb88:	9826943a 	slli	r19,r19,16
   2cb8c:	9004d43a 	srli	r2,r18,16
   2cb90:	a5a1383a 	mul	r16,r20,r22
   2cb94:	14c4b03a 	or	r2,r2,r19
   2cb98:	1400052e 	bgeu	r2,r16,2cbb0 <__udivdi3+0xe4>
   2cb9c:	1445883a 	add	r2,r2,r17
   2cba0:	b0ffffc4 	addi	r3,r22,-1
   2cba4:	14400136 	bltu	r2,r17,2cbac <__udivdi3+0xe0>
   2cba8:	14012336 	bltu	r2,r16,2d038 <__udivdi3+0x56c>
   2cbac:	182d883a 	mov	r22,r3
   2cbb0:	1421c83a 	sub	r16,r2,r16
   2cbb4:	a80b883a 	mov	r5,r21
   2cbb8:	8009883a 	mov	r4,r16
   2cbbc:	002d6d80 	call	2d6d8 <__umodsi3>
   2cbc0:	1027883a 	mov	r19,r2
   2cbc4:	a80b883a 	mov	r5,r21
   2cbc8:	8009883a 	mov	r4,r16
   2cbcc:	002d6740 	call	2d674 <__udivsi3>
   2cbd0:	9826943a 	slli	r19,r19,16
   2cbd4:	a0a9383a 	mul	r20,r20,r2
   2cbd8:	94bfffcc 	andi	r18,r18,65535
   2cbdc:	94e4b03a 	or	r18,r18,r19
   2cbe0:	9500052e 	bgeu	r18,r20,2cbf8 <__udivdi3+0x12c>
   2cbe4:	8ca5883a 	add	r18,r17,r18
   2cbe8:	10ffffc4 	addi	r3,r2,-1
   2cbec:	9440f136 	bltu	r18,r17,2cfb4 <__udivdi3+0x4e8>
   2cbf0:	9500f02e 	bgeu	r18,r20,2cfb4 <__udivdi3+0x4e8>
   2cbf4:	10bfff84 	addi	r2,r2,-2
   2cbf8:	b00c943a 	slli	r6,r22,16
   2cbfc:	0007883a 	mov	r3,zero
   2cc00:	3084b03a 	or	r2,r6,r2
   2cc04:	00005906 	br	2cd6c <__udivdi3+0x2a0>
   2cc08:	29c05636 	bltu	r5,r7,2cd64 <__udivdi3+0x298>
   2cc0c:	00bfffd4 	movui	r2,65535
   2cc10:	11c0622e 	bgeu	r2,r7,2cd9c <__udivdi3+0x2d0>
   2cc14:	00804034 	movhi	r2,256
   2cc18:	10bfffc4 	addi	r2,r2,-1
   2cc1c:	11c0ee36 	bltu	r2,r7,2cfd8 <__udivdi3+0x50c>
   2cc20:	00800404 	movi	r2,16
   2cc24:	3886d83a 	srl	r3,r7,r2
   2cc28:	010000f4 	movhi	r4,3
   2cc2c:	21081984 	addi	r4,r4,8294
   2cc30:	20c7883a 	add	r3,r4,r3
   2cc34:	18c00003 	ldbu	r3,0(r3)
   2cc38:	05400804 	movi	r21,32
   2cc3c:	1885883a 	add	r2,r3,r2
   2cc40:	a8abc83a 	sub	r21,r21,r2
   2cc44:	a800621e 	bne	r21,zero,2cdd0 <__udivdi3+0x304>
   2cc48:	3c00e936 	bltu	r7,r16,2cff0 <__udivdi3+0x524>
   2cc4c:	9985403a 	cmpgeu	r2,r19,r6
   2cc50:	0007883a 	mov	r3,zero
   2cc54:	00004506 	br	2cd6c <__udivdi3+0x2a0>
   2cc58:	3000041e 	bne	r6,zero,2cc6c <__udivdi3+0x1a0>
   2cc5c:	000b883a 	mov	r5,zero
   2cc60:	01000044 	movi	r4,1
   2cc64:	002d6740 	call	2d674 <__udivsi3>
   2cc68:	1023883a 	mov	r17,r2
   2cc6c:	00bfffd4 	movui	r2,65535
   2cc70:	14404e2e 	bgeu	r2,r17,2cdac <__udivdi3+0x2e0>
   2cc74:	00804034 	movhi	r2,256
   2cc78:	10bfffc4 	addi	r2,r2,-1
   2cc7c:	1440d836 	bltu	r2,r17,2cfe0 <__udivdi3+0x514>
   2cc80:	00800404 	movi	r2,16
   2cc84:	8886d83a 	srl	r3,r17,r2
   2cc88:	010000f4 	movhi	r4,3
   2cc8c:	21081984 	addi	r4,r4,8294
   2cc90:	20c7883a 	add	r3,r4,r3
   2cc94:	18c00003 	ldbu	r3,0(r3)
   2cc98:	1885883a 	add	r2,r3,r2
   2cc9c:	00c00804 	movi	r3,32
   2cca0:	1887c83a 	sub	r3,r3,r2
   2cca4:	18008f1e 	bne	r3,zero,2cee4 <__udivdi3+0x418>
   2cca8:	882ad43a 	srli	r21,r17,16
   2ccac:	8461c83a 	sub	r16,r16,r17
   2ccb0:	8d3fffcc 	andi	r20,r17,65535
   2ccb4:	00c00044 	movi	r3,1
   2ccb8:	8009883a 	mov	r4,r16
   2ccbc:	a80b883a 	mov	r5,r21
   2ccc0:	d8c00015 	stw	r3,0(sp)
   2ccc4:	002d6d80 	call	2d6d8 <__umodsi3>
   2ccc8:	8009883a 	mov	r4,r16
   2cccc:	a80b883a 	mov	r5,r21
   2ccd0:	1027883a 	mov	r19,r2
   2ccd4:	002d6740 	call	2d674 <__udivsi3>
   2ccd8:	9826943a 	slli	r19,r19,16
   2ccdc:	9008d43a 	srli	r4,r18,16
   2cce0:	1521383a 	mul	r16,r2,r20
   2cce4:	102d883a 	mov	r22,r2
   2cce8:	24c8b03a 	or	r4,r4,r19
   2ccec:	d8c00017 	ldw	r3,0(sp)
   2ccf0:	2400052e 	bgeu	r4,r16,2cd08 <__udivdi3+0x23c>
   2ccf4:	2449883a 	add	r4,r4,r17
   2ccf8:	b0bfffc4 	addi	r2,r22,-1
   2ccfc:	24400136 	bltu	r4,r17,2cd04 <__udivdi3+0x238>
   2cd00:	2400ca36 	bltu	r4,r16,2d02c <__udivdi3+0x560>
   2cd04:	102d883a 	mov	r22,r2
   2cd08:	2421c83a 	sub	r16,r4,r16
   2cd0c:	a80b883a 	mov	r5,r21
   2cd10:	8009883a 	mov	r4,r16
   2cd14:	d8c00015 	stw	r3,0(sp)
   2cd18:	002d6d80 	call	2d6d8 <__umodsi3>
   2cd1c:	1027883a 	mov	r19,r2
   2cd20:	a80b883a 	mov	r5,r21
   2cd24:	8009883a 	mov	r4,r16
   2cd28:	002d6740 	call	2d674 <__udivsi3>
   2cd2c:	9826943a 	slli	r19,r19,16
   2cd30:	1529383a 	mul	r20,r2,r20
   2cd34:	94bfffcc 	andi	r18,r18,65535
   2cd38:	94e4b03a 	or	r18,r18,r19
   2cd3c:	d8c00017 	ldw	r3,0(sp)
   2cd40:	9500052e 	bgeu	r18,r20,2cd58 <__udivdi3+0x28c>
   2cd44:	8ca5883a 	add	r18,r17,r18
   2cd48:	113fffc4 	addi	r4,r2,-1
   2cd4c:	94409736 	bltu	r18,r17,2cfac <__udivdi3+0x4e0>
   2cd50:	9500962e 	bgeu	r18,r20,2cfac <__udivdi3+0x4e0>
   2cd54:	10bfff84 	addi	r2,r2,-2
   2cd58:	b00c943a 	slli	r6,r22,16
   2cd5c:	3084b03a 	or	r2,r6,r2
   2cd60:	00000206 	br	2cd6c <__udivdi3+0x2a0>
   2cd64:	0007883a 	mov	r3,zero
   2cd68:	0005883a 	mov	r2,zero
   2cd6c:	dfc00a17 	ldw	ra,40(sp)
   2cd70:	df000917 	ldw	fp,36(sp)
   2cd74:	ddc00817 	ldw	r23,32(sp)
   2cd78:	dd800717 	ldw	r22,28(sp)
   2cd7c:	dd400617 	ldw	r21,24(sp)
   2cd80:	dd000517 	ldw	r20,20(sp)
   2cd84:	dcc00417 	ldw	r19,16(sp)
   2cd88:	dc800317 	ldw	r18,12(sp)
   2cd8c:	dc400217 	ldw	r17,8(sp)
   2cd90:	dc000117 	ldw	r16,4(sp)
   2cd94:	dec00b04 	addi	sp,sp,44
   2cd98:	f800283a 	ret
   2cd9c:	00803fc4 	movi	r2,255
   2cda0:	11c5803a 	cmpltu	r2,r2,r7
   2cda4:	100490fa 	slli	r2,r2,3
   2cda8:	003f9e06 	br	2cc24 <__alt_data_end+0xfffecc24>
   2cdac:	00803fc4 	movi	r2,255
   2cdb0:	1445803a 	cmpltu	r2,r2,r17
   2cdb4:	100490fa 	slli	r2,r2,3
   2cdb8:	003fb206 	br	2cc84 <__alt_data_end+0xfffecc84>
   2cdbc:	00804034 	movhi	r2,256
   2cdc0:	10bfffc4 	addi	r2,r2,-1
   2cdc4:	11808836 	bltu	r2,r6,2cfe8 <__udivdi3+0x51c>
   2cdc8:	00800404 	movi	r2,16
   2cdcc:	003f5606 	br	2cb28 <__alt_data_end+0xfffecb28>
   2cdd0:	30aed83a 	srl	r23,r6,r2
   2cdd4:	3d4e983a 	sll	r7,r7,r21
   2cdd8:	80acd83a 	srl	r22,r16,r2
   2cddc:	9884d83a 	srl	r2,r19,r2
   2cde0:	3deeb03a 	or	r23,r7,r23
   2cde4:	b824d43a 	srli	r18,r23,16
   2cde8:	8560983a 	sll	r16,r16,r21
   2cdec:	b009883a 	mov	r4,r22
   2cdf0:	900b883a 	mov	r5,r18
   2cdf4:	3568983a 	sll	r20,r6,r21
   2cdf8:	1420b03a 	or	r16,r2,r16
   2cdfc:	002d6d80 	call	2d6d8 <__umodsi3>
   2ce00:	b009883a 	mov	r4,r22
   2ce04:	900b883a 	mov	r5,r18
   2ce08:	1023883a 	mov	r17,r2
   2ce0c:	002d6740 	call	2d674 <__udivsi3>
   2ce10:	8808943a 	slli	r4,r17,16
   2ce14:	bf3fffcc 	andi	fp,r23,65535
   2ce18:	8006d43a 	srli	r3,r16,16
   2ce1c:	e0a3383a 	mul	r17,fp,r2
   2ce20:	100d883a 	mov	r6,r2
   2ce24:	1906b03a 	or	r3,r3,r4
   2ce28:	1c40042e 	bgeu	r3,r17,2ce3c <__udivdi3+0x370>
   2ce2c:	1dc7883a 	add	r3,r3,r23
   2ce30:	10bfffc4 	addi	r2,r2,-1
   2ce34:	1dc0752e 	bgeu	r3,r23,2d00c <__udivdi3+0x540>
   2ce38:	100d883a 	mov	r6,r2
   2ce3c:	1c63c83a 	sub	r17,r3,r17
   2ce40:	900b883a 	mov	r5,r18
   2ce44:	8809883a 	mov	r4,r17
   2ce48:	d9800015 	stw	r6,0(sp)
   2ce4c:	002d6d80 	call	2d6d8 <__umodsi3>
   2ce50:	102d883a 	mov	r22,r2
   2ce54:	8809883a 	mov	r4,r17
   2ce58:	900b883a 	mov	r5,r18
   2ce5c:	002d6740 	call	2d674 <__udivsi3>
   2ce60:	b02c943a 	slli	r22,r22,16
   2ce64:	e089383a 	mul	r4,fp,r2
   2ce68:	843fffcc 	andi	r16,r16,65535
   2ce6c:	85a0b03a 	or	r16,r16,r22
   2ce70:	d9800017 	ldw	r6,0(sp)
   2ce74:	8100042e 	bgeu	r16,r4,2ce88 <__udivdi3+0x3bc>
   2ce78:	85e1883a 	add	r16,r16,r23
   2ce7c:	10ffffc4 	addi	r3,r2,-1
   2ce80:	85c05e2e 	bgeu	r16,r23,2cffc <__udivdi3+0x530>
   2ce84:	1805883a 	mov	r2,r3
   2ce88:	300c943a 	slli	r6,r6,16
   2ce8c:	a17fffcc 	andi	r5,r20,65535
   2ce90:	a028d43a 	srli	r20,r20,16
   2ce94:	3084b03a 	or	r2,r6,r2
   2ce98:	10ffffcc 	andi	r3,r2,65535
   2ce9c:	100cd43a 	srli	r6,r2,16
   2cea0:	194f383a 	mul	r7,r3,r5
   2cea4:	1d07383a 	mul	r3,r3,r20
   2cea8:	314b383a 	mul	r5,r6,r5
   2ceac:	3810d43a 	srli	r8,r7,16
   2ceb0:	8121c83a 	sub	r16,r16,r4
   2ceb4:	1947883a 	add	r3,r3,r5
   2ceb8:	40c7883a 	add	r3,r8,r3
   2cebc:	350d383a 	mul	r6,r6,r20
   2cec0:	1940022e 	bgeu	r3,r5,2cecc <__udivdi3+0x400>
   2cec4:	01000074 	movhi	r4,1
   2cec8:	310d883a 	add	r6,r6,r4
   2cecc:	1828d43a 	srli	r20,r3,16
   2ced0:	a18d883a 	add	r6,r20,r6
   2ced4:	81803e36 	bltu	r16,r6,2cfd0 <__udivdi3+0x504>
   2ced8:	81803826 	beq	r16,r6,2cfbc <__udivdi3+0x4f0>
   2cedc:	0007883a 	mov	r3,zero
   2cee0:	003fa206 	br	2cd6c <__alt_data_end+0xfffecd6c>
   2cee4:	88e2983a 	sll	r17,r17,r3
   2cee8:	80a8d83a 	srl	r20,r16,r2
   2ceec:	80e0983a 	sll	r16,r16,r3
   2cef0:	882ad43a 	srli	r21,r17,16
   2cef4:	9884d83a 	srl	r2,r19,r2
   2cef8:	a009883a 	mov	r4,r20
   2cefc:	a80b883a 	mov	r5,r21
   2cf00:	142eb03a 	or	r23,r2,r16
   2cf04:	98e4983a 	sll	r18,r19,r3
   2cf08:	002d6d80 	call	2d6d8 <__umodsi3>
   2cf0c:	a009883a 	mov	r4,r20
   2cf10:	a80b883a 	mov	r5,r21
   2cf14:	1021883a 	mov	r16,r2
   2cf18:	002d6740 	call	2d674 <__udivsi3>
   2cf1c:	1039883a 	mov	fp,r2
   2cf20:	8d3fffcc 	andi	r20,r17,65535
   2cf24:	8020943a 	slli	r16,r16,16
   2cf28:	b804d43a 	srli	r2,r23,16
   2cf2c:	a72d383a 	mul	r22,r20,fp
   2cf30:	1404b03a 	or	r2,r2,r16
   2cf34:	1580062e 	bgeu	r2,r22,2cf50 <__udivdi3+0x484>
   2cf38:	1445883a 	add	r2,r2,r17
   2cf3c:	e0ffffc4 	addi	r3,fp,-1
   2cf40:	14403836 	bltu	r2,r17,2d024 <__udivdi3+0x558>
   2cf44:	1580372e 	bgeu	r2,r22,2d024 <__udivdi3+0x558>
   2cf48:	e73fff84 	addi	fp,fp,-2
   2cf4c:	1445883a 	add	r2,r2,r17
   2cf50:	15adc83a 	sub	r22,r2,r22
   2cf54:	a80b883a 	mov	r5,r21
   2cf58:	b009883a 	mov	r4,r22
   2cf5c:	002d6d80 	call	2d6d8 <__umodsi3>
   2cf60:	1027883a 	mov	r19,r2
   2cf64:	b009883a 	mov	r4,r22
   2cf68:	a80b883a 	mov	r5,r21
   2cf6c:	002d6740 	call	2d674 <__udivsi3>
   2cf70:	9826943a 	slli	r19,r19,16
   2cf74:	a0a1383a 	mul	r16,r20,r2
   2cf78:	b93fffcc 	andi	r4,r23,65535
   2cf7c:	24c8b03a 	or	r4,r4,r19
   2cf80:	2400062e 	bgeu	r4,r16,2cf9c <__udivdi3+0x4d0>
   2cf84:	2449883a 	add	r4,r4,r17
   2cf88:	10ffffc4 	addi	r3,r2,-1
   2cf8c:	24402336 	bltu	r4,r17,2d01c <__udivdi3+0x550>
   2cf90:	2400222e 	bgeu	r4,r16,2d01c <__udivdi3+0x550>
   2cf94:	10bfff84 	addi	r2,r2,-2
   2cf98:	2449883a 	add	r4,r4,r17
   2cf9c:	e038943a 	slli	fp,fp,16
   2cfa0:	2421c83a 	sub	r16,r4,r16
   2cfa4:	e086b03a 	or	r3,fp,r2
   2cfa8:	003f4306 	br	2ccb8 <__alt_data_end+0xfffeccb8>
   2cfac:	2005883a 	mov	r2,r4
   2cfb0:	003f6906 	br	2cd58 <__alt_data_end+0xfffecd58>
   2cfb4:	1805883a 	mov	r2,r3
   2cfb8:	003f0f06 	br	2cbf8 <__alt_data_end+0xfffecbf8>
   2cfbc:	1806943a 	slli	r3,r3,16
   2cfc0:	9d66983a 	sll	r19,r19,r21
   2cfc4:	39ffffcc 	andi	r7,r7,65535
   2cfc8:	19c7883a 	add	r3,r3,r7
   2cfcc:	98ffc32e 	bgeu	r19,r3,2cedc <__alt_data_end+0xfffecedc>
   2cfd0:	10bfffc4 	addi	r2,r2,-1
   2cfd4:	003fc106 	br	2cedc <__alt_data_end+0xfffecedc>
   2cfd8:	00800604 	movi	r2,24
   2cfdc:	003f1106 	br	2cc24 <__alt_data_end+0xfffecc24>
   2cfe0:	00800604 	movi	r2,24
   2cfe4:	003f2706 	br	2cc84 <__alt_data_end+0xfffecc84>
   2cfe8:	00800604 	movi	r2,24
   2cfec:	003ece06 	br	2cb28 <__alt_data_end+0xfffecb28>
   2cff0:	0007883a 	mov	r3,zero
   2cff4:	00800044 	movi	r2,1
   2cff8:	003f5c06 	br	2cd6c <__alt_data_end+0xfffecd6c>
   2cffc:	813fa12e 	bgeu	r16,r4,2ce84 <__alt_data_end+0xfffece84>
   2d000:	10bfff84 	addi	r2,r2,-2
   2d004:	85e1883a 	add	r16,r16,r23
   2d008:	003f9f06 	br	2ce88 <__alt_data_end+0xfffece88>
   2d00c:	1c7f8a2e 	bgeu	r3,r17,2ce38 <__alt_data_end+0xfffece38>
   2d010:	31bfff84 	addi	r6,r6,-2
   2d014:	1dc7883a 	add	r3,r3,r23
   2d018:	003f8806 	br	2ce3c <__alt_data_end+0xfffece3c>
   2d01c:	1805883a 	mov	r2,r3
   2d020:	003fde06 	br	2cf9c <__alt_data_end+0xfffecf9c>
   2d024:	1839883a 	mov	fp,r3
   2d028:	003fc906 	br	2cf50 <__alt_data_end+0xfffecf50>
   2d02c:	b5bfff84 	addi	r22,r22,-2
   2d030:	2449883a 	add	r4,r4,r17
   2d034:	003f3406 	br	2cd08 <__alt_data_end+0xfffecd08>
   2d038:	b5bfff84 	addi	r22,r22,-2
   2d03c:	1445883a 	add	r2,r2,r17
   2d040:	003edb06 	br	2cbb0 <__alt_data_end+0xfffecbb0>

0002d044 <__umoddi3>:
   2d044:	defff404 	addi	sp,sp,-48
   2d048:	df000a15 	stw	fp,40(sp)
   2d04c:	dc400315 	stw	r17,12(sp)
   2d050:	dc000215 	stw	r16,8(sp)
   2d054:	dfc00b15 	stw	ra,44(sp)
   2d058:	ddc00915 	stw	r23,36(sp)
   2d05c:	dd800815 	stw	r22,32(sp)
   2d060:	dd400715 	stw	r21,28(sp)
   2d064:	dd000615 	stw	r20,24(sp)
   2d068:	dcc00515 	stw	r19,20(sp)
   2d06c:	dc800415 	stw	r18,16(sp)
   2d070:	2021883a 	mov	r16,r4
   2d074:	2823883a 	mov	r17,r5
   2d078:	2839883a 	mov	fp,r5
   2d07c:	38003c1e 	bne	r7,zero,2d170 <__umoddi3+0x12c>
   2d080:	3027883a 	mov	r19,r6
   2d084:	2029883a 	mov	r20,r4
   2d088:	2980512e 	bgeu	r5,r6,2d1d0 <__umoddi3+0x18c>
   2d08c:	00bfffd4 	movui	r2,65535
   2d090:	11809a36 	bltu	r2,r6,2d2fc <__umoddi3+0x2b8>
   2d094:	01003fc4 	movi	r4,255
   2d098:	2189803a 	cmpltu	r4,r4,r6
   2d09c:	200890fa 	slli	r4,r4,3
   2d0a0:	3104d83a 	srl	r2,r6,r4
   2d0a4:	00c000f4 	movhi	r3,3
   2d0a8:	18c81984 	addi	r3,r3,8294
   2d0ac:	1885883a 	add	r2,r3,r2
   2d0b0:	10c00003 	ldbu	r3,0(r2)
   2d0b4:	00800804 	movi	r2,32
   2d0b8:	1909883a 	add	r4,r3,r4
   2d0bc:	1125c83a 	sub	r18,r2,r4
   2d0c0:	90000526 	beq	r18,zero,2d0d8 <__umoddi3+0x94>
   2d0c4:	8ca2983a 	sll	r17,r17,r18
   2d0c8:	8108d83a 	srl	r4,r16,r4
   2d0cc:	34a6983a 	sll	r19,r6,r18
   2d0d0:	84a8983a 	sll	r20,r16,r18
   2d0d4:	2478b03a 	or	fp,r4,r17
   2d0d8:	982ed43a 	srli	r23,r19,16
   2d0dc:	e009883a 	mov	r4,fp
   2d0e0:	9dbfffcc 	andi	r22,r19,65535
   2d0e4:	b80b883a 	mov	r5,r23
   2d0e8:	002d6d80 	call	2d6d8 <__umodsi3>
   2d0ec:	e009883a 	mov	r4,fp
   2d0f0:	b80b883a 	mov	r5,r23
   2d0f4:	102b883a 	mov	r21,r2
   2d0f8:	002d6740 	call	2d674 <__udivsi3>
   2d0fc:	a806943a 	slli	r3,r21,16
   2d100:	a008d43a 	srli	r4,r20,16
   2d104:	b085383a 	mul	r2,r22,r2
   2d108:	20c8b03a 	or	r4,r4,r3
   2d10c:	2080032e 	bgeu	r4,r2,2d11c <__umoddi3+0xd8>
   2d110:	24c9883a 	add	r4,r4,r19
   2d114:	24c00136 	bltu	r4,r19,2d11c <__umoddi3+0xd8>
   2d118:	20811036 	bltu	r4,r2,2d55c <__umoddi3+0x518>
   2d11c:	20abc83a 	sub	r21,r4,r2
   2d120:	b80b883a 	mov	r5,r23
   2d124:	a809883a 	mov	r4,r21
   2d128:	002d6d80 	call	2d6d8 <__umodsi3>
   2d12c:	1023883a 	mov	r17,r2
   2d130:	b80b883a 	mov	r5,r23
   2d134:	a809883a 	mov	r4,r21
   2d138:	002d6740 	call	2d674 <__udivsi3>
   2d13c:	8822943a 	slli	r17,r17,16
   2d140:	b085383a 	mul	r2,r22,r2
   2d144:	a0ffffcc 	andi	r3,r20,65535
   2d148:	1c46b03a 	or	r3,r3,r17
   2d14c:	1880042e 	bgeu	r3,r2,2d160 <__umoddi3+0x11c>
   2d150:	1cc7883a 	add	r3,r3,r19
   2d154:	1cc00236 	bltu	r3,r19,2d160 <__umoddi3+0x11c>
   2d158:	1880012e 	bgeu	r3,r2,2d160 <__umoddi3+0x11c>
   2d15c:	1cc7883a 	add	r3,r3,r19
   2d160:	1885c83a 	sub	r2,r3,r2
   2d164:	1484d83a 	srl	r2,r2,r18
   2d168:	0007883a 	mov	r3,zero
   2d16c:	00004f06 	br	2d2ac <__umoddi3+0x268>
   2d170:	29c04c36 	bltu	r5,r7,2d2a4 <__umoddi3+0x260>
   2d174:	00bfffd4 	movui	r2,65535
   2d178:	11c0582e 	bgeu	r2,r7,2d2dc <__umoddi3+0x298>
   2d17c:	00804034 	movhi	r2,256
   2d180:	10bfffc4 	addi	r2,r2,-1
   2d184:	11c0e736 	bltu	r2,r7,2d524 <__umoddi3+0x4e0>
   2d188:	01000404 	movi	r4,16
   2d18c:	3904d83a 	srl	r2,r7,r4
   2d190:	00c000f4 	movhi	r3,3
   2d194:	18c81984 	addi	r3,r3,8294
   2d198:	1885883a 	add	r2,r3,r2
   2d19c:	14c00003 	ldbu	r19,0(r2)
   2d1a0:	00c00804 	movi	r3,32
   2d1a4:	9927883a 	add	r19,r19,r4
   2d1a8:	1ce9c83a 	sub	r20,r3,r19
   2d1ac:	a000581e 	bne	r20,zero,2d310 <__umoddi3+0x2cc>
   2d1b0:	3c400136 	bltu	r7,r17,2d1b8 <__umoddi3+0x174>
   2d1b4:	8180eb36 	bltu	r16,r6,2d564 <__umoddi3+0x520>
   2d1b8:	8185c83a 	sub	r2,r16,r6
   2d1bc:	89e3c83a 	sub	r17,r17,r7
   2d1c0:	8089803a 	cmpltu	r4,r16,r2
   2d1c4:	8939c83a 	sub	fp,r17,r4
   2d1c8:	e007883a 	mov	r3,fp
   2d1cc:	00003706 	br	2d2ac <__umoddi3+0x268>
   2d1d0:	3000041e 	bne	r6,zero,2d1e4 <__umoddi3+0x1a0>
   2d1d4:	000b883a 	mov	r5,zero
   2d1d8:	01000044 	movi	r4,1
   2d1dc:	002d6740 	call	2d674 <__udivsi3>
   2d1e0:	1027883a 	mov	r19,r2
   2d1e4:	00bfffd4 	movui	r2,65535
   2d1e8:	14c0402e 	bgeu	r2,r19,2d2ec <__umoddi3+0x2a8>
   2d1ec:	00804034 	movhi	r2,256
   2d1f0:	10bfffc4 	addi	r2,r2,-1
   2d1f4:	14c0cd36 	bltu	r2,r19,2d52c <__umoddi3+0x4e8>
   2d1f8:	00800404 	movi	r2,16
   2d1fc:	9886d83a 	srl	r3,r19,r2
   2d200:	010000f4 	movhi	r4,3
   2d204:	21081984 	addi	r4,r4,8294
   2d208:	20c7883a 	add	r3,r4,r3
   2d20c:	18c00003 	ldbu	r3,0(r3)
   2d210:	1887883a 	add	r3,r3,r2
   2d214:	00800804 	movi	r2,32
   2d218:	10e5c83a 	sub	r18,r2,r3
   2d21c:	9000901e 	bne	r18,zero,2d460 <__umoddi3+0x41c>
   2d220:	982cd43a 	srli	r22,r19,16
   2d224:	8ce3c83a 	sub	r17,r17,r19
   2d228:	9d7fffcc 	andi	r21,r19,65535
   2d22c:	b00b883a 	mov	r5,r22
   2d230:	8809883a 	mov	r4,r17
   2d234:	002d6d80 	call	2d6d8 <__umodsi3>
   2d238:	8809883a 	mov	r4,r17
   2d23c:	b00b883a 	mov	r5,r22
   2d240:	1021883a 	mov	r16,r2
   2d244:	002d6740 	call	2d674 <__udivsi3>
   2d248:	8006943a 	slli	r3,r16,16
   2d24c:	a008d43a 	srli	r4,r20,16
   2d250:	1545383a 	mul	r2,r2,r21
   2d254:	20c8b03a 	or	r4,r4,r3
   2d258:	2080042e 	bgeu	r4,r2,2d26c <__umoddi3+0x228>
   2d25c:	24c9883a 	add	r4,r4,r19
   2d260:	24c00236 	bltu	r4,r19,2d26c <__umoddi3+0x228>
   2d264:	2080012e 	bgeu	r4,r2,2d26c <__umoddi3+0x228>
   2d268:	24c9883a 	add	r4,r4,r19
   2d26c:	20a1c83a 	sub	r16,r4,r2
   2d270:	b00b883a 	mov	r5,r22
   2d274:	8009883a 	mov	r4,r16
   2d278:	002d6d80 	call	2d6d8 <__umodsi3>
   2d27c:	1023883a 	mov	r17,r2
   2d280:	b00b883a 	mov	r5,r22
   2d284:	8009883a 	mov	r4,r16
   2d288:	002d6740 	call	2d674 <__udivsi3>
   2d28c:	8822943a 	slli	r17,r17,16
   2d290:	1545383a 	mul	r2,r2,r21
   2d294:	a53fffcc 	andi	r20,r20,65535
   2d298:	a446b03a 	or	r3,r20,r17
   2d29c:	18bfb02e 	bgeu	r3,r2,2d160 <__alt_data_end+0xfffed160>
   2d2a0:	003fab06 	br	2d150 <__alt_data_end+0xfffed150>
   2d2a4:	2005883a 	mov	r2,r4
   2d2a8:	2807883a 	mov	r3,r5
   2d2ac:	dfc00b17 	ldw	ra,44(sp)
   2d2b0:	df000a17 	ldw	fp,40(sp)
   2d2b4:	ddc00917 	ldw	r23,36(sp)
   2d2b8:	dd800817 	ldw	r22,32(sp)
   2d2bc:	dd400717 	ldw	r21,28(sp)
   2d2c0:	dd000617 	ldw	r20,24(sp)
   2d2c4:	dcc00517 	ldw	r19,20(sp)
   2d2c8:	dc800417 	ldw	r18,16(sp)
   2d2cc:	dc400317 	ldw	r17,12(sp)
   2d2d0:	dc000217 	ldw	r16,8(sp)
   2d2d4:	dec00c04 	addi	sp,sp,48
   2d2d8:	f800283a 	ret
   2d2dc:	04c03fc4 	movi	r19,255
   2d2e0:	99c9803a 	cmpltu	r4,r19,r7
   2d2e4:	200890fa 	slli	r4,r4,3
   2d2e8:	003fa806 	br	2d18c <__alt_data_end+0xfffed18c>
   2d2ec:	00803fc4 	movi	r2,255
   2d2f0:	14c5803a 	cmpltu	r2,r2,r19
   2d2f4:	100490fa 	slli	r2,r2,3
   2d2f8:	003fc006 	br	2d1fc <__alt_data_end+0xfffed1fc>
   2d2fc:	00804034 	movhi	r2,256
   2d300:	10bfffc4 	addi	r2,r2,-1
   2d304:	11808b36 	bltu	r2,r6,2d534 <__umoddi3+0x4f0>
   2d308:	01000404 	movi	r4,16
   2d30c:	003f6406 	br	2d0a0 <__alt_data_end+0xfffed0a0>
   2d310:	34c4d83a 	srl	r2,r6,r19
   2d314:	3d0e983a 	sll	r7,r7,r20
   2d318:	8cf8d83a 	srl	fp,r17,r19
   2d31c:	8d10983a 	sll	r8,r17,r20
   2d320:	38aab03a 	or	r21,r7,r2
   2d324:	a82cd43a 	srli	r22,r21,16
   2d328:	84e2d83a 	srl	r17,r16,r19
   2d32c:	e009883a 	mov	r4,fp
   2d330:	b00b883a 	mov	r5,r22
   2d334:	8a22b03a 	or	r17,r17,r8
   2d338:	3524983a 	sll	r18,r6,r20
   2d33c:	002d6d80 	call	2d6d8 <__umodsi3>
   2d340:	e009883a 	mov	r4,fp
   2d344:	b00b883a 	mov	r5,r22
   2d348:	102f883a 	mov	r23,r2
   2d34c:	002d6740 	call	2d674 <__udivsi3>
   2d350:	100d883a 	mov	r6,r2
   2d354:	b808943a 	slli	r4,r23,16
   2d358:	aa3fffcc 	andi	r8,r21,65535
   2d35c:	8804d43a 	srli	r2,r17,16
   2d360:	41af383a 	mul	r23,r8,r6
   2d364:	8520983a 	sll	r16,r16,r20
   2d368:	1104b03a 	or	r2,r2,r4
   2d36c:	15c0042e 	bgeu	r2,r23,2d380 <__umoddi3+0x33c>
   2d370:	1545883a 	add	r2,r2,r21
   2d374:	30ffffc4 	addi	r3,r6,-1
   2d378:	1540742e 	bgeu	r2,r21,2d54c <__umoddi3+0x508>
   2d37c:	180d883a 	mov	r6,r3
   2d380:	15efc83a 	sub	r23,r2,r23
   2d384:	b00b883a 	mov	r5,r22
   2d388:	b809883a 	mov	r4,r23
   2d38c:	d9800115 	stw	r6,4(sp)
   2d390:	da000015 	stw	r8,0(sp)
   2d394:	002d6d80 	call	2d6d8 <__umodsi3>
   2d398:	b00b883a 	mov	r5,r22
   2d39c:	b809883a 	mov	r4,r23
   2d3a0:	1039883a 	mov	fp,r2
   2d3a4:	002d6740 	call	2d674 <__udivsi3>
   2d3a8:	da000017 	ldw	r8,0(sp)
   2d3ac:	e038943a 	slli	fp,fp,16
   2d3b0:	100b883a 	mov	r5,r2
   2d3b4:	4089383a 	mul	r4,r8,r2
   2d3b8:	8a3fffcc 	andi	r8,r17,65535
   2d3bc:	4710b03a 	or	r8,r8,fp
   2d3c0:	d9800117 	ldw	r6,4(sp)
   2d3c4:	4100042e 	bgeu	r8,r4,2d3d8 <__umoddi3+0x394>
   2d3c8:	4551883a 	add	r8,r8,r21
   2d3cc:	10bfffc4 	addi	r2,r2,-1
   2d3d0:	45405a2e 	bgeu	r8,r21,2d53c <__umoddi3+0x4f8>
   2d3d4:	100b883a 	mov	r5,r2
   2d3d8:	300c943a 	slli	r6,r6,16
   2d3dc:	91ffffcc 	andi	r7,r18,65535
   2d3e0:	9004d43a 	srli	r2,r18,16
   2d3e4:	314cb03a 	or	r6,r6,r5
   2d3e8:	317fffcc 	andi	r5,r6,65535
   2d3ec:	300cd43a 	srli	r6,r6,16
   2d3f0:	29d3383a 	mul	r9,r5,r7
   2d3f4:	288b383a 	mul	r5,r5,r2
   2d3f8:	31cf383a 	mul	r7,r6,r7
   2d3fc:	4806d43a 	srli	r3,r9,16
   2d400:	4111c83a 	sub	r8,r8,r4
   2d404:	29cb883a 	add	r5,r5,r7
   2d408:	194b883a 	add	r5,r3,r5
   2d40c:	3085383a 	mul	r2,r6,r2
   2d410:	29c0022e 	bgeu	r5,r7,2d41c <__umoddi3+0x3d8>
   2d414:	00c00074 	movhi	r3,1
   2d418:	10c5883a 	add	r2,r2,r3
   2d41c:	2808d43a 	srli	r4,r5,16
   2d420:	280a943a 	slli	r5,r5,16
   2d424:	4a7fffcc 	andi	r9,r9,65535
   2d428:	2085883a 	add	r2,r4,r2
   2d42c:	2a4b883a 	add	r5,r5,r9
   2d430:	40803636 	bltu	r8,r2,2d50c <__umoddi3+0x4c8>
   2d434:	40804d26 	beq	r8,r2,2d56c <__umoddi3+0x528>
   2d438:	4089c83a 	sub	r4,r8,r2
   2d43c:	280f883a 	mov	r7,r5
   2d440:	81cfc83a 	sub	r7,r16,r7
   2d444:	81c7803a 	cmpltu	r3,r16,r7
   2d448:	20c7c83a 	sub	r3,r4,r3
   2d44c:	1cc4983a 	sll	r2,r3,r19
   2d450:	3d0ed83a 	srl	r7,r7,r20
   2d454:	1d06d83a 	srl	r3,r3,r20
   2d458:	11c4b03a 	or	r2,r2,r7
   2d45c:	003f9306 	br	2d2ac <__alt_data_end+0xfffed2ac>
   2d460:	9ca6983a 	sll	r19,r19,r18
   2d464:	88e8d83a 	srl	r20,r17,r3
   2d468:	80c4d83a 	srl	r2,r16,r3
   2d46c:	982cd43a 	srli	r22,r19,16
   2d470:	8ca2983a 	sll	r17,r17,r18
   2d474:	a009883a 	mov	r4,r20
   2d478:	b00b883a 	mov	r5,r22
   2d47c:	1478b03a 	or	fp,r2,r17
   2d480:	002d6d80 	call	2d6d8 <__umodsi3>
   2d484:	a009883a 	mov	r4,r20
   2d488:	b00b883a 	mov	r5,r22
   2d48c:	1023883a 	mov	r17,r2
   2d490:	002d6740 	call	2d674 <__udivsi3>
   2d494:	9d7fffcc 	andi	r21,r19,65535
   2d498:	880a943a 	slli	r5,r17,16
   2d49c:	e008d43a 	srli	r4,fp,16
   2d4a0:	a885383a 	mul	r2,r21,r2
   2d4a4:	84a8983a 	sll	r20,r16,r18
   2d4a8:	2148b03a 	or	r4,r4,r5
   2d4ac:	2080042e 	bgeu	r4,r2,2d4c0 <__umoddi3+0x47c>
   2d4b0:	24c9883a 	add	r4,r4,r19
   2d4b4:	24c00236 	bltu	r4,r19,2d4c0 <__umoddi3+0x47c>
   2d4b8:	2080012e 	bgeu	r4,r2,2d4c0 <__umoddi3+0x47c>
   2d4bc:	24c9883a 	add	r4,r4,r19
   2d4c0:	20a3c83a 	sub	r17,r4,r2
   2d4c4:	b00b883a 	mov	r5,r22
   2d4c8:	8809883a 	mov	r4,r17
   2d4cc:	002d6d80 	call	2d6d8 <__umodsi3>
   2d4d0:	102f883a 	mov	r23,r2
   2d4d4:	8809883a 	mov	r4,r17
   2d4d8:	b00b883a 	mov	r5,r22
   2d4dc:	002d6740 	call	2d674 <__udivsi3>
   2d4e0:	b82e943a 	slli	r23,r23,16
   2d4e4:	a885383a 	mul	r2,r21,r2
   2d4e8:	e13fffcc 	andi	r4,fp,65535
   2d4ec:	25c8b03a 	or	r4,r4,r23
   2d4f0:	2080042e 	bgeu	r4,r2,2d504 <__umoddi3+0x4c0>
   2d4f4:	24c9883a 	add	r4,r4,r19
   2d4f8:	24c00236 	bltu	r4,r19,2d504 <__umoddi3+0x4c0>
   2d4fc:	2080012e 	bgeu	r4,r2,2d504 <__umoddi3+0x4c0>
   2d500:	24c9883a 	add	r4,r4,r19
   2d504:	20a3c83a 	sub	r17,r4,r2
   2d508:	003f4806 	br	2d22c <__alt_data_end+0xfffed22c>
   2d50c:	2c8fc83a 	sub	r7,r5,r18
   2d510:	1545c83a 	sub	r2,r2,r21
   2d514:	29cb803a 	cmpltu	r5,r5,r7
   2d518:	1145c83a 	sub	r2,r2,r5
   2d51c:	4089c83a 	sub	r4,r8,r2
   2d520:	003fc706 	br	2d440 <__alt_data_end+0xfffed440>
   2d524:	01000604 	movi	r4,24
   2d528:	003f1806 	br	2d18c <__alt_data_end+0xfffed18c>
   2d52c:	00800604 	movi	r2,24
   2d530:	003f3206 	br	2d1fc <__alt_data_end+0xfffed1fc>
   2d534:	01000604 	movi	r4,24
   2d538:	003ed906 	br	2d0a0 <__alt_data_end+0xfffed0a0>
   2d53c:	413fa52e 	bgeu	r8,r4,2d3d4 <__alt_data_end+0xfffed3d4>
   2d540:	297fff84 	addi	r5,r5,-2
   2d544:	4551883a 	add	r8,r8,r21
   2d548:	003fa306 	br	2d3d8 <__alt_data_end+0xfffed3d8>
   2d54c:	15ff8b2e 	bgeu	r2,r23,2d37c <__alt_data_end+0xfffed37c>
   2d550:	31bfff84 	addi	r6,r6,-2
   2d554:	1545883a 	add	r2,r2,r21
   2d558:	003f8906 	br	2d380 <__alt_data_end+0xfffed380>
   2d55c:	24c9883a 	add	r4,r4,r19
   2d560:	003eee06 	br	2d11c <__alt_data_end+0xfffed11c>
   2d564:	8005883a 	mov	r2,r16
   2d568:	003f1706 	br	2d1c8 <__alt_data_end+0xfffed1c8>
   2d56c:	817fe736 	bltu	r16,r5,2d50c <__alt_data_end+0xfffed50c>
   2d570:	280f883a 	mov	r7,r5
   2d574:	0009883a 	mov	r4,zero
   2d578:	003fb106 	br	2d440 <__alt_data_end+0xfffed440>

0002d57c <__divsi3>:
   2d57c:	20001b16 	blt	r4,zero,2d5ec <__divsi3+0x70>
   2d580:	000f883a 	mov	r7,zero
   2d584:	28001616 	blt	r5,zero,2d5e0 <__divsi3+0x64>
   2d588:	200d883a 	mov	r6,r4
   2d58c:	29001a2e 	bgeu	r5,r4,2d5f8 <__divsi3+0x7c>
   2d590:	00800804 	movi	r2,32
   2d594:	00c00044 	movi	r3,1
   2d598:	00000106 	br	2d5a0 <__divsi3+0x24>
   2d59c:	10000d26 	beq	r2,zero,2d5d4 <__divsi3+0x58>
   2d5a0:	294b883a 	add	r5,r5,r5
   2d5a4:	10bfffc4 	addi	r2,r2,-1
   2d5a8:	18c7883a 	add	r3,r3,r3
   2d5ac:	293ffb36 	bltu	r5,r4,2d59c <__alt_data_end+0xfffed59c>
   2d5b0:	0005883a 	mov	r2,zero
   2d5b4:	18000726 	beq	r3,zero,2d5d4 <__divsi3+0x58>
   2d5b8:	0005883a 	mov	r2,zero
   2d5bc:	31400236 	bltu	r6,r5,2d5c8 <__divsi3+0x4c>
   2d5c0:	314dc83a 	sub	r6,r6,r5
   2d5c4:	10c4b03a 	or	r2,r2,r3
   2d5c8:	1806d07a 	srli	r3,r3,1
   2d5cc:	280ad07a 	srli	r5,r5,1
   2d5d0:	183ffa1e 	bne	r3,zero,2d5bc <__alt_data_end+0xfffed5bc>
   2d5d4:	38000126 	beq	r7,zero,2d5dc <__divsi3+0x60>
   2d5d8:	0085c83a 	sub	r2,zero,r2
   2d5dc:	f800283a 	ret
   2d5e0:	014bc83a 	sub	r5,zero,r5
   2d5e4:	39c0005c 	xori	r7,r7,1
   2d5e8:	003fe706 	br	2d588 <__alt_data_end+0xfffed588>
   2d5ec:	0109c83a 	sub	r4,zero,r4
   2d5f0:	01c00044 	movi	r7,1
   2d5f4:	003fe306 	br	2d584 <__alt_data_end+0xfffed584>
   2d5f8:	00c00044 	movi	r3,1
   2d5fc:	003fee06 	br	2d5b8 <__alt_data_end+0xfffed5b8>

0002d600 <__modsi3>:
   2d600:	20001716 	blt	r4,zero,2d660 <__modsi3+0x60>
   2d604:	000f883a 	mov	r7,zero
   2d608:	2005883a 	mov	r2,r4
   2d60c:	28001216 	blt	r5,zero,2d658 <__modsi3+0x58>
   2d610:	2900162e 	bgeu	r5,r4,2d66c <__modsi3+0x6c>
   2d614:	01800804 	movi	r6,32
   2d618:	00c00044 	movi	r3,1
   2d61c:	00000106 	br	2d624 <__modsi3+0x24>
   2d620:	30000a26 	beq	r6,zero,2d64c <__modsi3+0x4c>
   2d624:	294b883a 	add	r5,r5,r5
   2d628:	31bfffc4 	addi	r6,r6,-1
   2d62c:	18c7883a 	add	r3,r3,r3
   2d630:	293ffb36 	bltu	r5,r4,2d620 <__alt_data_end+0xfffed620>
   2d634:	18000526 	beq	r3,zero,2d64c <__modsi3+0x4c>
   2d638:	1806d07a 	srli	r3,r3,1
   2d63c:	11400136 	bltu	r2,r5,2d644 <__modsi3+0x44>
   2d640:	1145c83a 	sub	r2,r2,r5
   2d644:	280ad07a 	srli	r5,r5,1
   2d648:	183ffb1e 	bne	r3,zero,2d638 <__alt_data_end+0xfffed638>
   2d64c:	38000126 	beq	r7,zero,2d654 <__modsi3+0x54>
   2d650:	0085c83a 	sub	r2,zero,r2
   2d654:	f800283a 	ret
   2d658:	014bc83a 	sub	r5,zero,r5
   2d65c:	003fec06 	br	2d610 <__alt_data_end+0xfffed610>
   2d660:	0109c83a 	sub	r4,zero,r4
   2d664:	01c00044 	movi	r7,1
   2d668:	003fe706 	br	2d608 <__alt_data_end+0xfffed608>
   2d66c:	00c00044 	movi	r3,1
   2d670:	003ff106 	br	2d638 <__alt_data_end+0xfffed638>

0002d674 <__udivsi3>:
   2d674:	200d883a 	mov	r6,r4
   2d678:	2900152e 	bgeu	r5,r4,2d6d0 <__udivsi3+0x5c>
   2d67c:	28001416 	blt	r5,zero,2d6d0 <__udivsi3+0x5c>
   2d680:	00800804 	movi	r2,32
   2d684:	00c00044 	movi	r3,1
   2d688:	00000206 	br	2d694 <__udivsi3+0x20>
   2d68c:	10000e26 	beq	r2,zero,2d6c8 <__udivsi3+0x54>
   2d690:	28000516 	blt	r5,zero,2d6a8 <__udivsi3+0x34>
   2d694:	294b883a 	add	r5,r5,r5
   2d698:	10bfffc4 	addi	r2,r2,-1
   2d69c:	18c7883a 	add	r3,r3,r3
   2d6a0:	293ffa36 	bltu	r5,r4,2d68c <__alt_data_end+0xfffed68c>
   2d6a4:	18000826 	beq	r3,zero,2d6c8 <__udivsi3+0x54>
   2d6a8:	0005883a 	mov	r2,zero
   2d6ac:	31400236 	bltu	r6,r5,2d6b8 <__udivsi3+0x44>
   2d6b0:	314dc83a 	sub	r6,r6,r5
   2d6b4:	10c4b03a 	or	r2,r2,r3
   2d6b8:	1806d07a 	srli	r3,r3,1
   2d6bc:	280ad07a 	srli	r5,r5,1
   2d6c0:	183ffa1e 	bne	r3,zero,2d6ac <__alt_data_end+0xfffed6ac>
   2d6c4:	f800283a 	ret
   2d6c8:	0005883a 	mov	r2,zero
   2d6cc:	f800283a 	ret
   2d6d0:	00c00044 	movi	r3,1
   2d6d4:	003ff406 	br	2d6a8 <__alt_data_end+0xfffed6a8>

0002d6d8 <__umodsi3>:
   2d6d8:	2005883a 	mov	r2,r4
   2d6dc:	2900122e 	bgeu	r5,r4,2d728 <__umodsi3+0x50>
   2d6e0:	28001116 	blt	r5,zero,2d728 <__umodsi3+0x50>
   2d6e4:	01800804 	movi	r6,32
   2d6e8:	00c00044 	movi	r3,1
   2d6ec:	00000206 	br	2d6f8 <__umodsi3+0x20>
   2d6f0:	30000c26 	beq	r6,zero,2d724 <__umodsi3+0x4c>
   2d6f4:	28000516 	blt	r5,zero,2d70c <__umodsi3+0x34>
   2d6f8:	294b883a 	add	r5,r5,r5
   2d6fc:	31bfffc4 	addi	r6,r6,-1
   2d700:	18c7883a 	add	r3,r3,r3
   2d704:	293ffa36 	bltu	r5,r4,2d6f0 <__alt_data_end+0xfffed6f0>
   2d708:	18000626 	beq	r3,zero,2d724 <__umodsi3+0x4c>
   2d70c:	1806d07a 	srli	r3,r3,1
   2d710:	11400136 	bltu	r2,r5,2d718 <__umodsi3+0x40>
   2d714:	1145c83a 	sub	r2,r2,r5
   2d718:	280ad07a 	srli	r5,r5,1
   2d71c:	183ffb1e 	bne	r3,zero,2d70c <__alt_data_end+0xfffed70c>
   2d720:	f800283a 	ret
   2d724:	f800283a 	ret
   2d728:	00c00044 	movi	r3,1
   2d72c:	003ff706 	br	2d70c <__alt_data_end+0xfffed70c>

0002d730 <__adddf3>:
   2d730:	02c00434 	movhi	r11,16
   2d734:	5affffc4 	addi	r11,r11,-1
   2d738:	2806d7fa 	srli	r3,r5,31
   2d73c:	2ad4703a 	and	r10,r5,r11
   2d740:	3ad2703a 	and	r9,r7,r11
   2d744:	3804d53a 	srli	r2,r7,20
   2d748:	3018d77a 	srli	r12,r6,29
   2d74c:	280ad53a 	srli	r5,r5,20
   2d750:	501490fa 	slli	r10,r10,3
   2d754:	2010d77a 	srli	r8,r4,29
   2d758:	481290fa 	slli	r9,r9,3
   2d75c:	380ed7fa 	srli	r7,r7,31
   2d760:	defffb04 	addi	sp,sp,-20
   2d764:	dc800215 	stw	r18,8(sp)
   2d768:	dc400115 	stw	r17,4(sp)
   2d76c:	dc000015 	stw	r16,0(sp)
   2d770:	dfc00415 	stw	ra,16(sp)
   2d774:	dcc00315 	stw	r19,12(sp)
   2d778:	1c803fcc 	andi	r18,r3,255
   2d77c:	2c01ffcc 	andi	r16,r5,2047
   2d780:	5210b03a 	or	r8,r10,r8
   2d784:	202290fa 	slli	r17,r4,3
   2d788:	1081ffcc 	andi	r2,r2,2047
   2d78c:	4b12b03a 	or	r9,r9,r12
   2d790:	300c90fa 	slli	r6,r6,3
   2d794:	91c07526 	beq	r18,r7,2d96c <__adddf3+0x23c>
   2d798:	8087c83a 	sub	r3,r16,r2
   2d79c:	00c0ab0e 	bge	zero,r3,2da4c <__adddf3+0x31c>
   2d7a0:	10002a1e 	bne	r2,zero,2d84c <__adddf3+0x11c>
   2d7a4:	4984b03a 	or	r2,r9,r6
   2d7a8:	1000961e 	bne	r2,zero,2da04 <__adddf3+0x2d4>
   2d7ac:	888001cc 	andi	r2,r17,7
   2d7b0:	10000726 	beq	r2,zero,2d7d0 <__adddf3+0xa0>
   2d7b4:	888003cc 	andi	r2,r17,15
   2d7b8:	00c00104 	movi	r3,4
   2d7bc:	10c00426 	beq	r2,r3,2d7d0 <__adddf3+0xa0>
   2d7c0:	88c7883a 	add	r3,r17,r3
   2d7c4:	1c63803a 	cmpltu	r17,r3,r17
   2d7c8:	4451883a 	add	r8,r8,r17
   2d7cc:	1823883a 	mov	r17,r3
   2d7d0:	4080202c 	andhi	r2,r8,128
   2d7d4:	10005926 	beq	r2,zero,2d93c <__adddf3+0x20c>
   2d7d8:	84000044 	addi	r16,r16,1
   2d7dc:	0081ffc4 	movi	r2,2047
   2d7e0:	8080ba26 	beq	r16,r2,2dacc <__adddf3+0x39c>
   2d7e4:	00bfe034 	movhi	r2,65408
   2d7e8:	10bfffc4 	addi	r2,r2,-1
   2d7ec:	4090703a 	and	r8,r8,r2
   2d7f0:	4004977a 	slli	r2,r8,29
   2d7f4:	4010927a 	slli	r8,r8,9
   2d7f8:	8822d0fa 	srli	r17,r17,3
   2d7fc:	8401ffcc 	andi	r16,r16,2047
   2d800:	4010d33a 	srli	r8,r8,12
   2d804:	9007883a 	mov	r3,r18
   2d808:	1444b03a 	or	r2,r2,r17
   2d80c:	8401ffcc 	andi	r16,r16,2047
   2d810:	8020953a 	slli	r16,r16,20
   2d814:	18c03fcc 	andi	r3,r3,255
   2d818:	01000434 	movhi	r4,16
   2d81c:	213fffc4 	addi	r4,r4,-1
   2d820:	180697fa 	slli	r3,r3,31
   2d824:	4110703a 	and	r8,r8,r4
   2d828:	4410b03a 	or	r8,r8,r16
   2d82c:	40c6b03a 	or	r3,r8,r3
   2d830:	dfc00417 	ldw	ra,16(sp)
   2d834:	dcc00317 	ldw	r19,12(sp)
   2d838:	dc800217 	ldw	r18,8(sp)
   2d83c:	dc400117 	ldw	r17,4(sp)
   2d840:	dc000017 	ldw	r16,0(sp)
   2d844:	dec00504 	addi	sp,sp,20
   2d848:	f800283a 	ret
   2d84c:	0081ffc4 	movi	r2,2047
   2d850:	80bfd626 	beq	r16,r2,2d7ac <__alt_data_end+0xfffed7ac>
   2d854:	4a402034 	orhi	r9,r9,128
   2d858:	00800e04 	movi	r2,56
   2d85c:	10c09f16 	blt	r2,r3,2dadc <__adddf3+0x3ac>
   2d860:	008007c4 	movi	r2,31
   2d864:	10c0c216 	blt	r2,r3,2db70 <__adddf3+0x440>
   2d868:	00800804 	movi	r2,32
   2d86c:	10c5c83a 	sub	r2,r2,r3
   2d870:	488a983a 	sll	r5,r9,r2
   2d874:	30c8d83a 	srl	r4,r6,r3
   2d878:	3084983a 	sll	r2,r6,r2
   2d87c:	48c6d83a 	srl	r3,r9,r3
   2d880:	290cb03a 	or	r6,r5,r4
   2d884:	1004c03a 	cmpne	r2,r2,zero
   2d888:	308cb03a 	or	r6,r6,r2
   2d88c:	898dc83a 	sub	r6,r17,r6
   2d890:	89a3803a 	cmpltu	r17,r17,r6
   2d894:	40d1c83a 	sub	r8,r8,r3
   2d898:	4451c83a 	sub	r8,r8,r17
   2d89c:	3023883a 	mov	r17,r6
   2d8a0:	4080202c 	andhi	r2,r8,128
   2d8a4:	10002326 	beq	r2,zero,2d934 <__adddf3+0x204>
   2d8a8:	04c02034 	movhi	r19,128
   2d8ac:	9cffffc4 	addi	r19,r19,-1
   2d8b0:	44e6703a 	and	r19,r8,r19
   2d8b4:	98007626 	beq	r19,zero,2da90 <__adddf3+0x360>
   2d8b8:	9809883a 	mov	r4,r19
   2d8bc:	002fd340 	call	2fd34 <__clzsi2>
   2d8c0:	10fffe04 	addi	r3,r2,-8
   2d8c4:	010007c4 	movi	r4,31
   2d8c8:	20c07716 	blt	r4,r3,2daa8 <__adddf3+0x378>
   2d8cc:	00800804 	movi	r2,32
   2d8d0:	10c5c83a 	sub	r2,r2,r3
   2d8d4:	8884d83a 	srl	r2,r17,r2
   2d8d8:	98d0983a 	sll	r8,r19,r3
   2d8dc:	88e2983a 	sll	r17,r17,r3
   2d8e0:	1204b03a 	or	r2,r2,r8
   2d8e4:	1c007416 	blt	r3,r16,2dab8 <__adddf3+0x388>
   2d8e8:	1c21c83a 	sub	r16,r3,r16
   2d8ec:	82000044 	addi	r8,r16,1
   2d8f0:	00c007c4 	movi	r3,31
   2d8f4:	1a009116 	blt	r3,r8,2db3c <__adddf3+0x40c>
   2d8f8:	00c00804 	movi	r3,32
   2d8fc:	1a07c83a 	sub	r3,r3,r8
   2d900:	8a08d83a 	srl	r4,r17,r8
   2d904:	88e2983a 	sll	r17,r17,r3
   2d908:	10c6983a 	sll	r3,r2,r3
   2d90c:	1210d83a 	srl	r8,r2,r8
   2d910:	8804c03a 	cmpne	r2,r17,zero
   2d914:	1906b03a 	or	r3,r3,r4
   2d918:	18a2b03a 	or	r17,r3,r2
   2d91c:	0021883a 	mov	r16,zero
   2d920:	003fa206 	br	2d7ac <__alt_data_end+0xfffed7ac>
   2d924:	1890b03a 	or	r8,r3,r2
   2d928:	40017d26 	beq	r8,zero,2df20 <__adddf3+0x7f0>
   2d92c:	1011883a 	mov	r8,r2
   2d930:	1823883a 	mov	r17,r3
   2d934:	888001cc 	andi	r2,r17,7
   2d938:	103f9e1e 	bne	r2,zero,2d7b4 <__alt_data_end+0xfffed7b4>
   2d93c:	4004977a 	slli	r2,r8,29
   2d940:	8822d0fa 	srli	r17,r17,3
   2d944:	4010d0fa 	srli	r8,r8,3
   2d948:	9007883a 	mov	r3,r18
   2d94c:	1444b03a 	or	r2,r2,r17
   2d950:	0101ffc4 	movi	r4,2047
   2d954:	81002426 	beq	r16,r4,2d9e8 <__adddf3+0x2b8>
   2d958:	8120703a 	and	r16,r16,r4
   2d95c:	01000434 	movhi	r4,16
   2d960:	213fffc4 	addi	r4,r4,-1
   2d964:	4110703a 	and	r8,r8,r4
   2d968:	003fa806 	br	2d80c <__alt_data_end+0xfffed80c>
   2d96c:	8089c83a 	sub	r4,r16,r2
   2d970:	01005e0e 	bge	zero,r4,2daec <__adddf3+0x3bc>
   2d974:	10002b26 	beq	r2,zero,2da24 <__adddf3+0x2f4>
   2d978:	0081ffc4 	movi	r2,2047
   2d97c:	80bf8b26 	beq	r16,r2,2d7ac <__alt_data_end+0xfffed7ac>
   2d980:	4a402034 	orhi	r9,r9,128
   2d984:	00800e04 	movi	r2,56
   2d988:	1100a40e 	bge	r2,r4,2dc1c <__adddf3+0x4ec>
   2d98c:	498cb03a 	or	r6,r9,r6
   2d990:	300ac03a 	cmpne	r5,r6,zero
   2d994:	0013883a 	mov	r9,zero
   2d998:	2c4b883a 	add	r5,r5,r17
   2d99c:	2c63803a 	cmpltu	r17,r5,r17
   2d9a0:	4a11883a 	add	r8,r9,r8
   2d9a4:	8a11883a 	add	r8,r17,r8
   2d9a8:	2823883a 	mov	r17,r5
   2d9ac:	4080202c 	andhi	r2,r8,128
   2d9b0:	103fe026 	beq	r2,zero,2d934 <__alt_data_end+0xfffed934>
   2d9b4:	84000044 	addi	r16,r16,1
   2d9b8:	0081ffc4 	movi	r2,2047
   2d9bc:	8080d226 	beq	r16,r2,2dd08 <__adddf3+0x5d8>
   2d9c0:	00bfe034 	movhi	r2,65408
   2d9c4:	10bfffc4 	addi	r2,r2,-1
   2d9c8:	4090703a 	and	r8,r8,r2
   2d9cc:	880ad07a 	srli	r5,r17,1
   2d9d0:	400897fa 	slli	r4,r8,31
   2d9d4:	88c0004c 	andi	r3,r17,1
   2d9d8:	28e2b03a 	or	r17,r5,r3
   2d9dc:	4010d07a 	srli	r8,r8,1
   2d9e0:	2462b03a 	or	r17,r4,r17
   2d9e4:	003f7106 	br	2d7ac <__alt_data_end+0xfffed7ac>
   2d9e8:	4088b03a 	or	r4,r8,r2
   2d9ec:	20014526 	beq	r4,zero,2df04 <__adddf3+0x7d4>
   2d9f0:	01000434 	movhi	r4,16
   2d9f4:	42000234 	orhi	r8,r8,8
   2d9f8:	213fffc4 	addi	r4,r4,-1
   2d9fc:	4110703a 	and	r8,r8,r4
   2da00:	003f8206 	br	2d80c <__alt_data_end+0xfffed80c>
   2da04:	18ffffc4 	addi	r3,r3,-1
   2da08:	1800491e 	bne	r3,zero,2db30 <__adddf3+0x400>
   2da0c:	898bc83a 	sub	r5,r17,r6
   2da10:	8963803a 	cmpltu	r17,r17,r5
   2da14:	4251c83a 	sub	r8,r8,r9
   2da18:	4451c83a 	sub	r8,r8,r17
   2da1c:	2823883a 	mov	r17,r5
   2da20:	003f9f06 	br	2d8a0 <__alt_data_end+0xfffed8a0>
   2da24:	4984b03a 	or	r2,r9,r6
   2da28:	103f6026 	beq	r2,zero,2d7ac <__alt_data_end+0xfffed7ac>
   2da2c:	213fffc4 	addi	r4,r4,-1
   2da30:	2000931e 	bne	r4,zero,2dc80 <__adddf3+0x550>
   2da34:	898d883a 	add	r6,r17,r6
   2da38:	3463803a 	cmpltu	r17,r6,r17
   2da3c:	4251883a 	add	r8,r8,r9
   2da40:	8a11883a 	add	r8,r17,r8
   2da44:	3023883a 	mov	r17,r6
   2da48:	003fd806 	br	2d9ac <__alt_data_end+0xfffed9ac>
   2da4c:	1800541e 	bne	r3,zero,2dba0 <__adddf3+0x470>
   2da50:	80800044 	addi	r2,r16,1
   2da54:	1081ffcc 	andi	r2,r2,2047
   2da58:	00c00044 	movi	r3,1
   2da5c:	1880a00e 	bge	r3,r2,2dce0 <__adddf3+0x5b0>
   2da60:	8989c83a 	sub	r4,r17,r6
   2da64:	8905803a 	cmpltu	r2,r17,r4
   2da68:	4267c83a 	sub	r19,r8,r9
   2da6c:	98a7c83a 	sub	r19,r19,r2
   2da70:	9880202c 	andhi	r2,r19,128
   2da74:	10006326 	beq	r2,zero,2dc04 <__adddf3+0x4d4>
   2da78:	3463c83a 	sub	r17,r6,r17
   2da7c:	4a07c83a 	sub	r3,r9,r8
   2da80:	344d803a 	cmpltu	r6,r6,r17
   2da84:	19a7c83a 	sub	r19,r3,r6
   2da88:	3825883a 	mov	r18,r7
   2da8c:	983f8a1e 	bne	r19,zero,2d8b8 <__alt_data_end+0xfffed8b8>
   2da90:	8809883a 	mov	r4,r17
   2da94:	002fd340 	call	2fd34 <__clzsi2>
   2da98:	10800804 	addi	r2,r2,32
   2da9c:	10fffe04 	addi	r3,r2,-8
   2daa0:	010007c4 	movi	r4,31
   2daa4:	20ff890e 	bge	r4,r3,2d8cc <__alt_data_end+0xfffed8cc>
   2daa8:	10bff604 	addi	r2,r2,-40
   2daac:	8884983a 	sll	r2,r17,r2
   2dab0:	0023883a 	mov	r17,zero
   2dab4:	1c3f8c0e 	bge	r3,r16,2d8e8 <__alt_data_end+0xfffed8e8>
   2dab8:	023fe034 	movhi	r8,65408
   2dabc:	423fffc4 	addi	r8,r8,-1
   2dac0:	80e1c83a 	sub	r16,r16,r3
   2dac4:	1210703a 	and	r8,r2,r8
   2dac8:	003f3806 	br	2d7ac <__alt_data_end+0xfffed7ac>
   2dacc:	9007883a 	mov	r3,r18
   2dad0:	0011883a 	mov	r8,zero
   2dad4:	0005883a 	mov	r2,zero
   2dad8:	003f4c06 	br	2d80c <__alt_data_end+0xfffed80c>
   2dadc:	498cb03a 	or	r6,r9,r6
   2dae0:	300cc03a 	cmpne	r6,r6,zero
   2dae4:	0007883a 	mov	r3,zero
   2dae8:	003f6806 	br	2d88c <__alt_data_end+0xfffed88c>
   2daec:	20009c1e 	bne	r4,zero,2dd60 <__adddf3+0x630>
   2daf0:	80800044 	addi	r2,r16,1
   2daf4:	1141ffcc 	andi	r5,r2,2047
   2daf8:	01000044 	movi	r4,1
   2dafc:	2140670e 	bge	r4,r5,2dc9c <__adddf3+0x56c>
   2db00:	0101ffc4 	movi	r4,2047
   2db04:	11007f26 	beq	r2,r4,2dd04 <__adddf3+0x5d4>
   2db08:	898d883a 	add	r6,r17,r6
   2db0c:	4247883a 	add	r3,r8,r9
   2db10:	3451803a 	cmpltu	r8,r6,r17
   2db14:	40d1883a 	add	r8,r8,r3
   2db18:	402297fa 	slli	r17,r8,31
   2db1c:	300cd07a 	srli	r6,r6,1
   2db20:	4010d07a 	srli	r8,r8,1
   2db24:	1021883a 	mov	r16,r2
   2db28:	89a2b03a 	or	r17,r17,r6
   2db2c:	003f1f06 	br	2d7ac <__alt_data_end+0xfffed7ac>
   2db30:	0081ffc4 	movi	r2,2047
   2db34:	80bf481e 	bne	r16,r2,2d858 <__alt_data_end+0xfffed858>
   2db38:	003f1c06 	br	2d7ac <__alt_data_end+0xfffed7ac>
   2db3c:	843ff844 	addi	r16,r16,-31
   2db40:	01000804 	movi	r4,32
   2db44:	1406d83a 	srl	r3,r2,r16
   2db48:	41005026 	beq	r8,r4,2dc8c <__adddf3+0x55c>
   2db4c:	01001004 	movi	r4,64
   2db50:	2211c83a 	sub	r8,r4,r8
   2db54:	1204983a 	sll	r2,r2,r8
   2db58:	88a2b03a 	or	r17,r17,r2
   2db5c:	8822c03a 	cmpne	r17,r17,zero
   2db60:	1c62b03a 	or	r17,r3,r17
   2db64:	0011883a 	mov	r8,zero
   2db68:	0021883a 	mov	r16,zero
   2db6c:	003f7106 	br	2d934 <__alt_data_end+0xfffed934>
   2db70:	193ff804 	addi	r4,r3,-32
   2db74:	00800804 	movi	r2,32
   2db78:	4908d83a 	srl	r4,r9,r4
   2db7c:	18804526 	beq	r3,r2,2dc94 <__adddf3+0x564>
   2db80:	00801004 	movi	r2,64
   2db84:	10c5c83a 	sub	r2,r2,r3
   2db88:	4886983a 	sll	r3,r9,r2
   2db8c:	198cb03a 	or	r6,r3,r6
   2db90:	300cc03a 	cmpne	r6,r6,zero
   2db94:	218cb03a 	or	r6,r4,r6
   2db98:	0007883a 	mov	r3,zero
   2db9c:	003f3b06 	br	2d88c <__alt_data_end+0xfffed88c>
   2dba0:	80002a26 	beq	r16,zero,2dc4c <__adddf3+0x51c>
   2dba4:	0101ffc4 	movi	r4,2047
   2dba8:	11006826 	beq	r2,r4,2dd4c <__adddf3+0x61c>
   2dbac:	00c7c83a 	sub	r3,zero,r3
   2dbb0:	42002034 	orhi	r8,r8,128
   2dbb4:	01000e04 	movi	r4,56
   2dbb8:	20c07c16 	blt	r4,r3,2ddac <__adddf3+0x67c>
   2dbbc:	010007c4 	movi	r4,31
   2dbc0:	20c0da16 	blt	r4,r3,2df2c <__adddf3+0x7fc>
   2dbc4:	01000804 	movi	r4,32
   2dbc8:	20c9c83a 	sub	r4,r4,r3
   2dbcc:	4114983a 	sll	r10,r8,r4
   2dbd0:	88cad83a 	srl	r5,r17,r3
   2dbd4:	8908983a 	sll	r4,r17,r4
   2dbd8:	40c6d83a 	srl	r3,r8,r3
   2dbdc:	5162b03a 	or	r17,r10,r5
   2dbe0:	2008c03a 	cmpne	r4,r4,zero
   2dbe4:	8922b03a 	or	r17,r17,r4
   2dbe8:	3463c83a 	sub	r17,r6,r17
   2dbec:	48c7c83a 	sub	r3,r9,r3
   2dbf0:	344d803a 	cmpltu	r6,r6,r17
   2dbf4:	1991c83a 	sub	r8,r3,r6
   2dbf8:	1021883a 	mov	r16,r2
   2dbfc:	3825883a 	mov	r18,r7
   2dc00:	003f2706 	br	2d8a0 <__alt_data_end+0xfffed8a0>
   2dc04:	24d0b03a 	or	r8,r4,r19
   2dc08:	40001b1e 	bne	r8,zero,2dc78 <__adddf3+0x548>
   2dc0c:	0005883a 	mov	r2,zero
   2dc10:	0007883a 	mov	r3,zero
   2dc14:	0021883a 	mov	r16,zero
   2dc18:	003f4d06 	br	2d950 <__alt_data_end+0xfffed950>
   2dc1c:	008007c4 	movi	r2,31
   2dc20:	11003c16 	blt	r2,r4,2dd14 <__adddf3+0x5e4>
   2dc24:	00800804 	movi	r2,32
   2dc28:	1105c83a 	sub	r2,r2,r4
   2dc2c:	488e983a 	sll	r7,r9,r2
   2dc30:	310ad83a 	srl	r5,r6,r4
   2dc34:	3084983a 	sll	r2,r6,r2
   2dc38:	4912d83a 	srl	r9,r9,r4
   2dc3c:	394ab03a 	or	r5,r7,r5
   2dc40:	1004c03a 	cmpne	r2,r2,zero
   2dc44:	288ab03a 	or	r5,r5,r2
   2dc48:	003f5306 	br	2d998 <__alt_data_end+0xfffed998>
   2dc4c:	4448b03a 	or	r4,r8,r17
   2dc50:	20003e26 	beq	r4,zero,2dd4c <__adddf3+0x61c>
   2dc54:	00c6303a 	nor	r3,zero,r3
   2dc58:	18003a1e 	bne	r3,zero,2dd44 <__adddf3+0x614>
   2dc5c:	3463c83a 	sub	r17,r6,r17
   2dc60:	4a07c83a 	sub	r3,r9,r8
   2dc64:	344d803a 	cmpltu	r6,r6,r17
   2dc68:	1991c83a 	sub	r8,r3,r6
   2dc6c:	1021883a 	mov	r16,r2
   2dc70:	3825883a 	mov	r18,r7
   2dc74:	003f0a06 	br	2d8a0 <__alt_data_end+0xfffed8a0>
   2dc78:	2023883a 	mov	r17,r4
   2dc7c:	003f0d06 	br	2d8b4 <__alt_data_end+0xfffed8b4>
   2dc80:	0081ffc4 	movi	r2,2047
   2dc84:	80bf3f1e 	bne	r16,r2,2d984 <__alt_data_end+0xfffed984>
   2dc88:	003ec806 	br	2d7ac <__alt_data_end+0xfffed7ac>
   2dc8c:	0005883a 	mov	r2,zero
   2dc90:	003fb106 	br	2db58 <__alt_data_end+0xfffedb58>
   2dc94:	0007883a 	mov	r3,zero
   2dc98:	003fbc06 	br	2db8c <__alt_data_end+0xfffedb8c>
   2dc9c:	4444b03a 	or	r2,r8,r17
   2dca0:	8000871e 	bne	r16,zero,2dec0 <__adddf3+0x790>
   2dca4:	1000ba26 	beq	r2,zero,2df90 <__adddf3+0x860>
   2dca8:	4984b03a 	or	r2,r9,r6
   2dcac:	103ebf26 	beq	r2,zero,2d7ac <__alt_data_end+0xfffed7ac>
   2dcb0:	8985883a 	add	r2,r17,r6
   2dcb4:	4247883a 	add	r3,r8,r9
   2dcb8:	1451803a 	cmpltu	r8,r2,r17
   2dcbc:	40d1883a 	add	r8,r8,r3
   2dcc0:	40c0202c 	andhi	r3,r8,128
   2dcc4:	1023883a 	mov	r17,r2
   2dcc8:	183f1a26 	beq	r3,zero,2d934 <__alt_data_end+0xfffed934>
   2dccc:	00bfe034 	movhi	r2,65408
   2dcd0:	10bfffc4 	addi	r2,r2,-1
   2dcd4:	2021883a 	mov	r16,r4
   2dcd8:	4090703a 	and	r8,r8,r2
   2dcdc:	003eb306 	br	2d7ac <__alt_data_end+0xfffed7ac>
   2dce0:	4444b03a 	or	r2,r8,r17
   2dce4:	8000291e 	bne	r16,zero,2dd8c <__adddf3+0x65c>
   2dce8:	10004b1e 	bne	r2,zero,2de18 <__adddf3+0x6e8>
   2dcec:	4990b03a 	or	r8,r9,r6
   2dcf0:	40008b26 	beq	r8,zero,2df20 <__adddf3+0x7f0>
   2dcf4:	4811883a 	mov	r8,r9
   2dcf8:	3023883a 	mov	r17,r6
   2dcfc:	3825883a 	mov	r18,r7
   2dd00:	003eaa06 	br	2d7ac <__alt_data_end+0xfffed7ac>
   2dd04:	1021883a 	mov	r16,r2
   2dd08:	0011883a 	mov	r8,zero
   2dd0c:	0005883a 	mov	r2,zero
   2dd10:	003f0f06 	br	2d950 <__alt_data_end+0xfffed950>
   2dd14:	217ff804 	addi	r5,r4,-32
   2dd18:	00800804 	movi	r2,32
   2dd1c:	494ad83a 	srl	r5,r9,r5
   2dd20:	20807d26 	beq	r4,r2,2df18 <__adddf3+0x7e8>
   2dd24:	00801004 	movi	r2,64
   2dd28:	1109c83a 	sub	r4,r2,r4
   2dd2c:	4912983a 	sll	r9,r9,r4
   2dd30:	498cb03a 	or	r6,r9,r6
   2dd34:	300cc03a 	cmpne	r6,r6,zero
   2dd38:	298ab03a 	or	r5,r5,r6
   2dd3c:	0013883a 	mov	r9,zero
   2dd40:	003f1506 	br	2d998 <__alt_data_end+0xfffed998>
   2dd44:	0101ffc4 	movi	r4,2047
   2dd48:	113f9a1e 	bne	r2,r4,2dbb4 <__alt_data_end+0xfffedbb4>
   2dd4c:	4811883a 	mov	r8,r9
   2dd50:	3023883a 	mov	r17,r6
   2dd54:	1021883a 	mov	r16,r2
   2dd58:	3825883a 	mov	r18,r7
   2dd5c:	003e9306 	br	2d7ac <__alt_data_end+0xfffed7ac>
   2dd60:	8000161e 	bne	r16,zero,2ddbc <__adddf3+0x68c>
   2dd64:	444ab03a 	or	r5,r8,r17
   2dd68:	28005126 	beq	r5,zero,2deb0 <__adddf3+0x780>
   2dd6c:	0108303a 	nor	r4,zero,r4
   2dd70:	20004d1e 	bne	r4,zero,2dea8 <__adddf3+0x778>
   2dd74:	89a3883a 	add	r17,r17,r6
   2dd78:	4253883a 	add	r9,r8,r9
   2dd7c:	898d803a 	cmpltu	r6,r17,r6
   2dd80:	3251883a 	add	r8,r6,r9
   2dd84:	1021883a 	mov	r16,r2
   2dd88:	003f0806 	br	2d9ac <__alt_data_end+0xfffed9ac>
   2dd8c:	1000301e 	bne	r2,zero,2de50 <__adddf3+0x720>
   2dd90:	4984b03a 	or	r2,r9,r6
   2dd94:	10007126 	beq	r2,zero,2df5c <__adddf3+0x82c>
   2dd98:	4811883a 	mov	r8,r9
   2dd9c:	3023883a 	mov	r17,r6
   2dda0:	3825883a 	mov	r18,r7
   2dda4:	0401ffc4 	movi	r16,2047
   2dda8:	003e8006 	br	2d7ac <__alt_data_end+0xfffed7ac>
   2ddac:	4462b03a 	or	r17,r8,r17
   2ddb0:	8822c03a 	cmpne	r17,r17,zero
   2ddb4:	0007883a 	mov	r3,zero
   2ddb8:	003f8b06 	br	2dbe8 <__alt_data_end+0xfffedbe8>
   2ddbc:	0141ffc4 	movi	r5,2047
   2ddc0:	11403b26 	beq	r2,r5,2deb0 <__adddf3+0x780>
   2ddc4:	0109c83a 	sub	r4,zero,r4
   2ddc8:	42002034 	orhi	r8,r8,128
   2ddcc:	01400e04 	movi	r5,56
   2ddd0:	29006716 	blt	r5,r4,2df70 <__adddf3+0x840>
   2ddd4:	014007c4 	movi	r5,31
   2ddd8:	29007016 	blt	r5,r4,2df9c <__adddf3+0x86c>
   2dddc:	01400804 	movi	r5,32
   2dde0:	290bc83a 	sub	r5,r5,r4
   2dde4:	4154983a 	sll	r10,r8,r5
   2dde8:	890ed83a 	srl	r7,r17,r4
   2ddec:	894a983a 	sll	r5,r17,r5
   2ddf0:	4108d83a 	srl	r4,r8,r4
   2ddf4:	51e2b03a 	or	r17,r10,r7
   2ddf8:	280ac03a 	cmpne	r5,r5,zero
   2ddfc:	8962b03a 	or	r17,r17,r5
   2de00:	89a3883a 	add	r17,r17,r6
   2de04:	2253883a 	add	r9,r4,r9
   2de08:	898d803a 	cmpltu	r6,r17,r6
   2de0c:	3251883a 	add	r8,r6,r9
   2de10:	1021883a 	mov	r16,r2
   2de14:	003ee506 	br	2d9ac <__alt_data_end+0xfffed9ac>
   2de18:	4984b03a 	or	r2,r9,r6
   2de1c:	103e6326 	beq	r2,zero,2d7ac <__alt_data_end+0xfffed7ac>
   2de20:	8987c83a 	sub	r3,r17,r6
   2de24:	88c9803a 	cmpltu	r4,r17,r3
   2de28:	4245c83a 	sub	r2,r8,r9
   2de2c:	1105c83a 	sub	r2,r2,r4
   2de30:	1100202c 	andhi	r4,r2,128
   2de34:	203ebb26 	beq	r4,zero,2d924 <__alt_data_end+0xfffed924>
   2de38:	3463c83a 	sub	r17,r6,r17
   2de3c:	4a07c83a 	sub	r3,r9,r8
   2de40:	344d803a 	cmpltu	r6,r6,r17
   2de44:	1991c83a 	sub	r8,r3,r6
   2de48:	3825883a 	mov	r18,r7
   2de4c:	003e5706 	br	2d7ac <__alt_data_end+0xfffed7ac>
   2de50:	4984b03a 	or	r2,r9,r6
   2de54:	10002e26 	beq	r2,zero,2df10 <__adddf3+0x7e0>
   2de58:	4004d0fa 	srli	r2,r8,3
   2de5c:	8822d0fa 	srli	r17,r17,3
   2de60:	4010977a 	slli	r8,r8,29
   2de64:	10c0022c 	andhi	r3,r2,8
   2de68:	4462b03a 	or	r17,r8,r17
   2de6c:	18000826 	beq	r3,zero,2de90 <__adddf3+0x760>
   2de70:	4808d0fa 	srli	r4,r9,3
   2de74:	20c0022c 	andhi	r3,r4,8
   2de78:	1800051e 	bne	r3,zero,2de90 <__adddf3+0x760>
   2de7c:	300cd0fa 	srli	r6,r6,3
   2de80:	4806977a 	slli	r3,r9,29
   2de84:	2005883a 	mov	r2,r4
   2de88:	3825883a 	mov	r18,r7
   2de8c:	19a2b03a 	or	r17,r3,r6
   2de90:	8810d77a 	srli	r8,r17,29
   2de94:	100490fa 	slli	r2,r2,3
   2de98:	882290fa 	slli	r17,r17,3
   2de9c:	0401ffc4 	movi	r16,2047
   2dea0:	4090b03a 	or	r8,r8,r2
   2dea4:	003e4106 	br	2d7ac <__alt_data_end+0xfffed7ac>
   2dea8:	0141ffc4 	movi	r5,2047
   2deac:	117fc71e 	bne	r2,r5,2ddcc <__alt_data_end+0xfffeddcc>
   2deb0:	4811883a 	mov	r8,r9
   2deb4:	3023883a 	mov	r17,r6
   2deb8:	1021883a 	mov	r16,r2
   2debc:	003e3b06 	br	2d7ac <__alt_data_end+0xfffed7ac>
   2dec0:	10002f26 	beq	r2,zero,2df80 <__adddf3+0x850>
   2dec4:	4984b03a 	or	r2,r9,r6
   2dec8:	10001126 	beq	r2,zero,2df10 <__adddf3+0x7e0>
   2decc:	4004d0fa 	srli	r2,r8,3
   2ded0:	8822d0fa 	srli	r17,r17,3
   2ded4:	4010977a 	slli	r8,r8,29
   2ded8:	10c0022c 	andhi	r3,r2,8
   2dedc:	4462b03a 	or	r17,r8,r17
   2dee0:	183feb26 	beq	r3,zero,2de90 <__alt_data_end+0xfffede90>
   2dee4:	4808d0fa 	srli	r4,r9,3
   2dee8:	20c0022c 	andhi	r3,r4,8
   2deec:	183fe81e 	bne	r3,zero,2de90 <__alt_data_end+0xfffede90>
   2def0:	300cd0fa 	srli	r6,r6,3
   2def4:	4806977a 	slli	r3,r9,29
   2def8:	2005883a 	mov	r2,r4
   2defc:	19a2b03a 	or	r17,r3,r6
   2df00:	003fe306 	br	2de90 <__alt_data_end+0xfffede90>
   2df04:	0011883a 	mov	r8,zero
   2df08:	0005883a 	mov	r2,zero
   2df0c:	003e3f06 	br	2d80c <__alt_data_end+0xfffed80c>
   2df10:	0401ffc4 	movi	r16,2047
   2df14:	003e2506 	br	2d7ac <__alt_data_end+0xfffed7ac>
   2df18:	0013883a 	mov	r9,zero
   2df1c:	003f8406 	br	2dd30 <__alt_data_end+0xfffedd30>
   2df20:	0005883a 	mov	r2,zero
   2df24:	0007883a 	mov	r3,zero
   2df28:	003e8906 	br	2d950 <__alt_data_end+0xfffed950>
   2df2c:	197ff804 	addi	r5,r3,-32
   2df30:	01000804 	movi	r4,32
   2df34:	414ad83a 	srl	r5,r8,r5
   2df38:	19002426 	beq	r3,r4,2dfcc <__adddf3+0x89c>
   2df3c:	01001004 	movi	r4,64
   2df40:	20c7c83a 	sub	r3,r4,r3
   2df44:	40c6983a 	sll	r3,r8,r3
   2df48:	1c46b03a 	or	r3,r3,r17
   2df4c:	1806c03a 	cmpne	r3,r3,zero
   2df50:	28e2b03a 	or	r17,r5,r3
   2df54:	0007883a 	mov	r3,zero
   2df58:	003f2306 	br	2dbe8 <__alt_data_end+0xfffedbe8>
   2df5c:	0007883a 	mov	r3,zero
   2df60:	5811883a 	mov	r8,r11
   2df64:	00bfffc4 	movi	r2,-1
   2df68:	0401ffc4 	movi	r16,2047
   2df6c:	003e7806 	br	2d950 <__alt_data_end+0xfffed950>
   2df70:	4462b03a 	or	r17,r8,r17
   2df74:	8822c03a 	cmpne	r17,r17,zero
   2df78:	0009883a 	mov	r4,zero
   2df7c:	003fa006 	br	2de00 <__alt_data_end+0xfffede00>
   2df80:	4811883a 	mov	r8,r9
   2df84:	3023883a 	mov	r17,r6
   2df88:	0401ffc4 	movi	r16,2047
   2df8c:	003e0706 	br	2d7ac <__alt_data_end+0xfffed7ac>
   2df90:	4811883a 	mov	r8,r9
   2df94:	3023883a 	mov	r17,r6
   2df98:	003e0406 	br	2d7ac <__alt_data_end+0xfffed7ac>
   2df9c:	21fff804 	addi	r7,r4,-32
   2dfa0:	01400804 	movi	r5,32
   2dfa4:	41ced83a 	srl	r7,r8,r7
   2dfa8:	21400a26 	beq	r4,r5,2dfd4 <__adddf3+0x8a4>
   2dfac:	01401004 	movi	r5,64
   2dfb0:	2909c83a 	sub	r4,r5,r4
   2dfb4:	4108983a 	sll	r4,r8,r4
   2dfb8:	2448b03a 	or	r4,r4,r17
   2dfbc:	2008c03a 	cmpne	r4,r4,zero
   2dfc0:	3922b03a 	or	r17,r7,r4
   2dfc4:	0009883a 	mov	r4,zero
   2dfc8:	003f8d06 	br	2de00 <__alt_data_end+0xfffede00>
   2dfcc:	0007883a 	mov	r3,zero
   2dfd0:	003fdd06 	br	2df48 <__alt_data_end+0xfffedf48>
   2dfd4:	0009883a 	mov	r4,zero
   2dfd8:	003ff706 	br	2dfb8 <__alt_data_end+0xfffedfb8>

0002dfdc <__divdf3>:
   2dfdc:	defff204 	addi	sp,sp,-56
   2dfe0:	dd400915 	stw	r21,36(sp)
   2dfe4:	282ad53a 	srli	r21,r5,20
   2dfe8:	dd000815 	stw	r20,32(sp)
   2dfec:	2828d7fa 	srli	r20,r5,31
   2dff0:	dc000415 	stw	r16,16(sp)
   2dff4:	04000434 	movhi	r16,16
   2dff8:	df000c15 	stw	fp,48(sp)
   2dffc:	843fffc4 	addi	r16,r16,-1
   2e000:	dfc00d15 	stw	ra,52(sp)
   2e004:	ddc00b15 	stw	r23,44(sp)
   2e008:	dd800a15 	stw	r22,40(sp)
   2e00c:	dcc00715 	stw	r19,28(sp)
   2e010:	dc800615 	stw	r18,24(sp)
   2e014:	dc400515 	stw	r17,20(sp)
   2e018:	ad41ffcc 	andi	r21,r21,2047
   2e01c:	2c20703a 	and	r16,r5,r16
   2e020:	a7003fcc 	andi	fp,r20,255
   2e024:	a8006126 	beq	r21,zero,2e1ac <__divdf3+0x1d0>
   2e028:	0081ffc4 	movi	r2,2047
   2e02c:	2025883a 	mov	r18,r4
   2e030:	a8803726 	beq	r21,r2,2e110 <__divdf3+0x134>
   2e034:	80800434 	orhi	r2,r16,16
   2e038:	100490fa 	slli	r2,r2,3
   2e03c:	2020d77a 	srli	r16,r4,29
   2e040:	202490fa 	slli	r18,r4,3
   2e044:	ad7f0044 	addi	r21,r21,-1023
   2e048:	80a0b03a 	or	r16,r16,r2
   2e04c:	0027883a 	mov	r19,zero
   2e050:	0013883a 	mov	r9,zero
   2e054:	3804d53a 	srli	r2,r7,20
   2e058:	382cd7fa 	srli	r22,r7,31
   2e05c:	04400434 	movhi	r17,16
   2e060:	8c7fffc4 	addi	r17,r17,-1
   2e064:	1081ffcc 	andi	r2,r2,2047
   2e068:	3011883a 	mov	r8,r6
   2e06c:	3c62703a 	and	r17,r7,r17
   2e070:	b5c03fcc 	andi	r23,r22,255
   2e074:	10006c26 	beq	r2,zero,2e228 <__divdf3+0x24c>
   2e078:	00c1ffc4 	movi	r3,2047
   2e07c:	10c06426 	beq	r2,r3,2e210 <__divdf3+0x234>
   2e080:	88c00434 	orhi	r3,r17,16
   2e084:	180690fa 	slli	r3,r3,3
   2e088:	3022d77a 	srli	r17,r6,29
   2e08c:	301090fa 	slli	r8,r6,3
   2e090:	10bf0044 	addi	r2,r2,-1023
   2e094:	88e2b03a 	or	r17,r17,r3
   2e098:	000f883a 	mov	r7,zero
   2e09c:	a58cf03a 	xor	r6,r20,r22
   2e0a0:	3cc8b03a 	or	r4,r7,r19
   2e0a4:	a8abc83a 	sub	r21,r21,r2
   2e0a8:	008003c4 	movi	r2,15
   2e0ac:	3007883a 	mov	r3,r6
   2e0b0:	34c03fcc 	andi	r19,r6,255
   2e0b4:	11009036 	bltu	r2,r4,2e2f8 <__divdf3+0x31c>
   2e0b8:	200890ba 	slli	r4,r4,2
   2e0bc:	008000f4 	movhi	r2,3
   2e0c0:	10b83404 	addi	r2,r2,-7984
   2e0c4:	2089883a 	add	r4,r4,r2
   2e0c8:	20800017 	ldw	r2,0(r4)
   2e0cc:	1000683a 	jmp	r2
   2e0d0:	0002e2f8 	rdprs	zero,zero,2955
   2e0d4:	0002e148 	cmpgei	zero,zero,2949
   2e0d8:	0002e2e8 	cmpgeui	zero,zero,2955
   2e0dc:	0002e13c 	xorhi	zero,zero,2948
   2e0e0:	0002e2e8 	cmpgeui	zero,zero,2955
   2e0e4:	0002e2bc 	xorhi	zero,zero,2954
   2e0e8:	0002e2e8 	cmpgeui	zero,zero,2955
   2e0ec:	0002e13c 	xorhi	zero,zero,2948
   2e0f0:	0002e148 	cmpgei	zero,zero,2949
   2e0f4:	0002e148 	cmpgei	zero,zero,2949
   2e0f8:	0002e2bc 	xorhi	zero,zero,2954
   2e0fc:	0002e13c 	xorhi	zero,zero,2948
   2e100:	0002e12c 	andhi	zero,zero,2948
   2e104:	0002e12c 	andhi	zero,zero,2948
   2e108:	0002e12c 	andhi	zero,zero,2948
   2e10c:	0002e5dc 	xori	zero,zero,2967
   2e110:	2404b03a 	or	r2,r4,r16
   2e114:	1000661e 	bne	r2,zero,2e2b0 <__divdf3+0x2d4>
   2e118:	04c00204 	movi	r19,8
   2e11c:	0021883a 	mov	r16,zero
   2e120:	0025883a 	mov	r18,zero
   2e124:	02400084 	movi	r9,2
   2e128:	003fca06 	br	2e054 <__alt_data_end+0xfffee054>
   2e12c:	8023883a 	mov	r17,r16
   2e130:	9011883a 	mov	r8,r18
   2e134:	e02f883a 	mov	r23,fp
   2e138:	480f883a 	mov	r7,r9
   2e13c:	00800084 	movi	r2,2
   2e140:	3881311e 	bne	r7,r2,2e608 <__divdf3+0x62c>
   2e144:	b827883a 	mov	r19,r23
   2e148:	98c0004c 	andi	r3,r19,1
   2e14c:	0081ffc4 	movi	r2,2047
   2e150:	000b883a 	mov	r5,zero
   2e154:	0025883a 	mov	r18,zero
   2e158:	1004953a 	slli	r2,r2,20
   2e15c:	18c03fcc 	andi	r3,r3,255
   2e160:	04400434 	movhi	r17,16
   2e164:	8c7fffc4 	addi	r17,r17,-1
   2e168:	180697fa 	slli	r3,r3,31
   2e16c:	2c4a703a 	and	r5,r5,r17
   2e170:	288ab03a 	or	r5,r5,r2
   2e174:	28c6b03a 	or	r3,r5,r3
   2e178:	9005883a 	mov	r2,r18
   2e17c:	dfc00d17 	ldw	ra,52(sp)
   2e180:	df000c17 	ldw	fp,48(sp)
   2e184:	ddc00b17 	ldw	r23,44(sp)
   2e188:	dd800a17 	ldw	r22,40(sp)
   2e18c:	dd400917 	ldw	r21,36(sp)
   2e190:	dd000817 	ldw	r20,32(sp)
   2e194:	dcc00717 	ldw	r19,28(sp)
   2e198:	dc800617 	ldw	r18,24(sp)
   2e19c:	dc400517 	ldw	r17,20(sp)
   2e1a0:	dc000417 	ldw	r16,16(sp)
   2e1a4:	dec00e04 	addi	sp,sp,56
   2e1a8:	f800283a 	ret
   2e1ac:	2404b03a 	or	r2,r4,r16
   2e1b0:	2027883a 	mov	r19,r4
   2e1b4:	10003926 	beq	r2,zero,2e29c <__divdf3+0x2c0>
   2e1b8:	80012e26 	beq	r16,zero,2e674 <__divdf3+0x698>
   2e1bc:	8009883a 	mov	r4,r16
   2e1c0:	d9800315 	stw	r6,12(sp)
   2e1c4:	d9c00215 	stw	r7,8(sp)
   2e1c8:	002fd340 	call	2fd34 <__clzsi2>
   2e1cc:	d9800317 	ldw	r6,12(sp)
   2e1d0:	d9c00217 	ldw	r7,8(sp)
   2e1d4:	113ffd44 	addi	r4,r2,-11
   2e1d8:	00c00704 	movi	r3,28
   2e1dc:	19012116 	blt	r3,r4,2e664 <__divdf3+0x688>
   2e1e0:	00c00744 	movi	r3,29
   2e1e4:	147ffe04 	addi	r17,r2,-8
   2e1e8:	1907c83a 	sub	r3,r3,r4
   2e1ec:	8460983a 	sll	r16,r16,r17
   2e1f0:	98c6d83a 	srl	r3,r19,r3
   2e1f4:	9c64983a 	sll	r18,r19,r17
   2e1f8:	1c20b03a 	or	r16,r3,r16
   2e1fc:	1080fcc4 	addi	r2,r2,1011
   2e200:	00abc83a 	sub	r21,zero,r2
   2e204:	0027883a 	mov	r19,zero
   2e208:	0013883a 	mov	r9,zero
   2e20c:	003f9106 	br	2e054 <__alt_data_end+0xfffee054>
   2e210:	3446b03a 	or	r3,r6,r17
   2e214:	18001f1e 	bne	r3,zero,2e294 <__divdf3+0x2b8>
   2e218:	0023883a 	mov	r17,zero
   2e21c:	0011883a 	mov	r8,zero
   2e220:	01c00084 	movi	r7,2
   2e224:	003f9d06 	br	2e09c <__alt_data_end+0xfffee09c>
   2e228:	3446b03a 	or	r3,r6,r17
   2e22c:	18001526 	beq	r3,zero,2e284 <__divdf3+0x2a8>
   2e230:	88011b26 	beq	r17,zero,2e6a0 <__divdf3+0x6c4>
   2e234:	8809883a 	mov	r4,r17
   2e238:	d9800315 	stw	r6,12(sp)
   2e23c:	da400115 	stw	r9,4(sp)
   2e240:	002fd340 	call	2fd34 <__clzsi2>
   2e244:	d9800317 	ldw	r6,12(sp)
   2e248:	da400117 	ldw	r9,4(sp)
   2e24c:	113ffd44 	addi	r4,r2,-11
   2e250:	00c00704 	movi	r3,28
   2e254:	19010e16 	blt	r3,r4,2e690 <__divdf3+0x6b4>
   2e258:	00c00744 	movi	r3,29
   2e25c:	123ffe04 	addi	r8,r2,-8
   2e260:	1907c83a 	sub	r3,r3,r4
   2e264:	8a22983a 	sll	r17,r17,r8
   2e268:	30c6d83a 	srl	r3,r6,r3
   2e26c:	3210983a 	sll	r8,r6,r8
   2e270:	1c62b03a 	or	r17,r3,r17
   2e274:	1080fcc4 	addi	r2,r2,1011
   2e278:	0085c83a 	sub	r2,zero,r2
   2e27c:	000f883a 	mov	r7,zero
   2e280:	003f8606 	br	2e09c <__alt_data_end+0xfffee09c>
   2e284:	0023883a 	mov	r17,zero
   2e288:	0011883a 	mov	r8,zero
   2e28c:	01c00044 	movi	r7,1
   2e290:	003f8206 	br	2e09c <__alt_data_end+0xfffee09c>
   2e294:	01c000c4 	movi	r7,3
   2e298:	003f8006 	br	2e09c <__alt_data_end+0xfffee09c>
   2e29c:	04c00104 	movi	r19,4
   2e2a0:	0021883a 	mov	r16,zero
   2e2a4:	0025883a 	mov	r18,zero
   2e2a8:	02400044 	movi	r9,1
   2e2ac:	003f6906 	br	2e054 <__alt_data_end+0xfffee054>
   2e2b0:	04c00304 	movi	r19,12
   2e2b4:	024000c4 	movi	r9,3
   2e2b8:	003f6606 	br	2e054 <__alt_data_end+0xfffee054>
   2e2bc:	01400434 	movhi	r5,16
   2e2c0:	0007883a 	mov	r3,zero
   2e2c4:	297fffc4 	addi	r5,r5,-1
   2e2c8:	04bfffc4 	movi	r18,-1
   2e2cc:	0081ffc4 	movi	r2,2047
   2e2d0:	003fa106 	br	2e158 <__alt_data_end+0xfffee158>
   2e2d4:	00c00044 	movi	r3,1
   2e2d8:	1887c83a 	sub	r3,r3,r2
   2e2dc:	01000e04 	movi	r4,56
   2e2e0:	20c1210e 	bge	r4,r3,2e768 <__divdf3+0x78c>
   2e2e4:	98c0004c 	andi	r3,r19,1
   2e2e8:	0005883a 	mov	r2,zero
   2e2ec:	000b883a 	mov	r5,zero
   2e2f0:	0025883a 	mov	r18,zero
   2e2f4:	003f9806 	br	2e158 <__alt_data_end+0xfffee158>
   2e2f8:	8c00fd36 	bltu	r17,r16,2e6f0 <__divdf3+0x714>
   2e2fc:	8440fb26 	beq	r16,r17,2e6ec <__divdf3+0x710>
   2e300:	8007883a 	mov	r3,r16
   2e304:	ad7fffc4 	addi	r21,r21,-1
   2e308:	0021883a 	mov	r16,zero
   2e30c:	4004d63a 	srli	r2,r8,24
   2e310:	8822923a 	slli	r17,r17,8
   2e314:	1809883a 	mov	r4,r3
   2e318:	402c923a 	slli	r22,r8,8
   2e31c:	88b8b03a 	or	fp,r17,r2
   2e320:	e028d43a 	srli	r20,fp,16
   2e324:	d8c00015 	stw	r3,0(sp)
   2e328:	e5ffffcc 	andi	r23,fp,65535
   2e32c:	a00b883a 	mov	r5,r20
   2e330:	002d6740 	call	2d674 <__udivsi3>
   2e334:	d8c00017 	ldw	r3,0(sp)
   2e338:	a00b883a 	mov	r5,r20
   2e33c:	d8800315 	stw	r2,12(sp)
   2e340:	1809883a 	mov	r4,r3
   2e344:	002d6d80 	call	2d6d8 <__umodsi3>
   2e348:	d9800317 	ldw	r6,12(sp)
   2e34c:	1006943a 	slli	r3,r2,16
   2e350:	9004d43a 	srli	r2,r18,16
   2e354:	b9a3383a 	mul	r17,r23,r6
   2e358:	10c4b03a 	or	r2,r2,r3
   2e35c:	1440062e 	bgeu	r2,r17,2e378 <__divdf3+0x39c>
   2e360:	1705883a 	add	r2,r2,fp
   2e364:	30ffffc4 	addi	r3,r6,-1
   2e368:	1700ee36 	bltu	r2,fp,2e724 <__divdf3+0x748>
   2e36c:	1440ed2e 	bgeu	r2,r17,2e724 <__divdf3+0x748>
   2e370:	31bfff84 	addi	r6,r6,-2
   2e374:	1705883a 	add	r2,r2,fp
   2e378:	1463c83a 	sub	r17,r2,r17
   2e37c:	a00b883a 	mov	r5,r20
   2e380:	8809883a 	mov	r4,r17
   2e384:	d9800315 	stw	r6,12(sp)
   2e388:	002d6740 	call	2d674 <__udivsi3>
   2e38c:	a00b883a 	mov	r5,r20
   2e390:	8809883a 	mov	r4,r17
   2e394:	d8800215 	stw	r2,8(sp)
   2e398:	002d6d80 	call	2d6d8 <__umodsi3>
   2e39c:	d9c00217 	ldw	r7,8(sp)
   2e3a0:	1004943a 	slli	r2,r2,16
   2e3a4:	94bfffcc 	andi	r18,r18,65535
   2e3a8:	b9d1383a 	mul	r8,r23,r7
   2e3ac:	90a4b03a 	or	r18,r18,r2
   2e3b0:	d9800317 	ldw	r6,12(sp)
   2e3b4:	9200062e 	bgeu	r18,r8,2e3d0 <__divdf3+0x3f4>
   2e3b8:	9725883a 	add	r18,r18,fp
   2e3bc:	38bfffc4 	addi	r2,r7,-1
   2e3c0:	9700d636 	bltu	r18,fp,2e71c <__divdf3+0x740>
   2e3c4:	9200d52e 	bgeu	r18,r8,2e71c <__divdf3+0x740>
   2e3c8:	39ffff84 	addi	r7,r7,-2
   2e3cc:	9725883a 	add	r18,r18,fp
   2e3d0:	3004943a 	slli	r2,r6,16
   2e3d4:	b012d43a 	srli	r9,r22,16
   2e3d8:	b1bfffcc 	andi	r6,r22,65535
   2e3dc:	11e2b03a 	or	r17,r2,r7
   2e3e0:	8806d43a 	srli	r3,r17,16
   2e3e4:	893fffcc 	andi	r4,r17,65535
   2e3e8:	218b383a 	mul	r5,r4,r6
   2e3ec:	30c5383a 	mul	r2,r6,r3
   2e3f0:	2249383a 	mul	r4,r4,r9
   2e3f4:	280ed43a 	srli	r7,r5,16
   2e3f8:	9225c83a 	sub	r18,r18,r8
   2e3fc:	2089883a 	add	r4,r4,r2
   2e400:	3909883a 	add	r4,r7,r4
   2e404:	1a47383a 	mul	r3,r3,r9
   2e408:	2080022e 	bgeu	r4,r2,2e414 <__divdf3+0x438>
   2e40c:	00800074 	movhi	r2,1
   2e410:	1887883a 	add	r3,r3,r2
   2e414:	2004d43a 	srli	r2,r4,16
   2e418:	2008943a 	slli	r4,r4,16
   2e41c:	297fffcc 	andi	r5,r5,65535
   2e420:	10c7883a 	add	r3,r2,r3
   2e424:	2149883a 	add	r4,r4,r5
   2e428:	90c0a536 	bltu	r18,r3,2e6c0 <__divdf3+0x6e4>
   2e42c:	90c0bf26 	beq	r18,r3,2e72c <__divdf3+0x750>
   2e430:	90c7c83a 	sub	r3,r18,r3
   2e434:	810fc83a 	sub	r7,r16,r4
   2e438:	81e5803a 	cmpltu	r18,r16,r7
   2e43c:	1ca5c83a 	sub	r18,r3,r18
   2e440:	e480c126 	beq	fp,r18,2e748 <__divdf3+0x76c>
   2e444:	a00b883a 	mov	r5,r20
   2e448:	9009883a 	mov	r4,r18
   2e44c:	d9800315 	stw	r6,12(sp)
   2e450:	d9c00215 	stw	r7,8(sp)
   2e454:	da400115 	stw	r9,4(sp)
   2e458:	002d6740 	call	2d674 <__udivsi3>
   2e45c:	a00b883a 	mov	r5,r20
   2e460:	9009883a 	mov	r4,r18
   2e464:	d8800015 	stw	r2,0(sp)
   2e468:	002d6d80 	call	2d6d8 <__umodsi3>
   2e46c:	d9c00217 	ldw	r7,8(sp)
   2e470:	da000017 	ldw	r8,0(sp)
   2e474:	1006943a 	slli	r3,r2,16
   2e478:	3804d43a 	srli	r2,r7,16
   2e47c:	ba21383a 	mul	r16,r23,r8
   2e480:	d9800317 	ldw	r6,12(sp)
   2e484:	10c4b03a 	or	r2,r2,r3
   2e488:	da400117 	ldw	r9,4(sp)
   2e48c:	1400062e 	bgeu	r2,r16,2e4a8 <__divdf3+0x4cc>
   2e490:	1705883a 	add	r2,r2,fp
   2e494:	40ffffc4 	addi	r3,r8,-1
   2e498:	1700ad36 	bltu	r2,fp,2e750 <__divdf3+0x774>
   2e49c:	1400ac2e 	bgeu	r2,r16,2e750 <__divdf3+0x774>
   2e4a0:	423fff84 	addi	r8,r8,-2
   2e4a4:	1705883a 	add	r2,r2,fp
   2e4a8:	1421c83a 	sub	r16,r2,r16
   2e4ac:	a00b883a 	mov	r5,r20
   2e4b0:	8009883a 	mov	r4,r16
   2e4b4:	d9800315 	stw	r6,12(sp)
   2e4b8:	d9c00215 	stw	r7,8(sp)
   2e4bc:	da000015 	stw	r8,0(sp)
   2e4c0:	da400115 	stw	r9,4(sp)
   2e4c4:	002d6740 	call	2d674 <__udivsi3>
   2e4c8:	8009883a 	mov	r4,r16
   2e4cc:	a00b883a 	mov	r5,r20
   2e4d0:	1025883a 	mov	r18,r2
   2e4d4:	002d6d80 	call	2d6d8 <__umodsi3>
   2e4d8:	d9c00217 	ldw	r7,8(sp)
   2e4dc:	1004943a 	slli	r2,r2,16
   2e4e0:	bcaf383a 	mul	r23,r23,r18
   2e4e4:	393fffcc 	andi	r4,r7,65535
   2e4e8:	2088b03a 	or	r4,r4,r2
   2e4ec:	d9800317 	ldw	r6,12(sp)
   2e4f0:	da000017 	ldw	r8,0(sp)
   2e4f4:	da400117 	ldw	r9,4(sp)
   2e4f8:	25c0062e 	bgeu	r4,r23,2e514 <__divdf3+0x538>
   2e4fc:	2709883a 	add	r4,r4,fp
   2e500:	90bfffc4 	addi	r2,r18,-1
   2e504:	27009436 	bltu	r4,fp,2e758 <__divdf3+0x77c>
   2e508:	25c0932e 	bgeu	r4,r23,2e758 <__divdf3+0x77c>
   2e50c:	94bfff84 	addi	r18,r18,-2
   2e510:	2709883a 	add	r4,r4,fp
   2e514:	4004943a 	slli	r2,r8,16
   2e518:	25efc83a 	sub	r23,r4,r23
   2e51c:	1490b03a 	or	r8,r2,r18
   2e520:	4008d43a 	srli	r4,r8,16
   2e524:	40ffffcc 	andi	r3,r8,65535
   2e528:	30c5383a 	mul	r2,r6,r3
   2e52c:	1a47383a 	mul	r3,r3,r9
   2e530:	310d383a 	mul	r6,r6,r4
   2e534:	100ad43a 	srli	r5,r2,16
   2e538:	4913383a 	mul	r9,r9,r4
   2e53c:	1987883a 	add	r3,r3,r6
   2e540:	28c7883a 	add	r3,r5,r3
   2e544:	1980022e 	bgeu	r3,r6,2e550 <__divdf3+0x574>
   2e548:	01000074 	movhi	r4,1
   2e54c:	4913883a 	add	r9,r9,r4
   2e550:	1808d43a 	srli	r4,r3,16
   2e554:	1806943a 	slli	r3,r3,16
   2e558:	10bfffcc 	andi	r2,r2,65535
   2e55c:	2253883a 	add	r9,r4,r9
   2e560:	1887883a 	add	r3,r3,r2
   2e564:	ba403836 	bltu	r23,r9,2e648 <__divdf3+0x66c>
   2e568:	ba403626 	beq	r23,r9,2e644 <__divdf3+0x668>
   2e56c:	42000054 	ori	r8,r8,1
   2e570:	a880ffc4 	addi	r2,r21,1023
   2e574:	00bf570e 	bge	zero,r2,2e2d4 <__alt_data_end+0xfffee2d4>
   2e578:	40c001cc 	andi	r3,r8,7
   2e57c:	18000726 	beq	r3,zero,2e59c <__divdf3+0x5c0>
   2e580:	40c003cc 	andi	r3,r8,15
   2e584:	01000104 	movi	r4,4
   2e588:	19000426 	beq	r3,r4,2e59c <__divdf3+0x5c0>
   2e58c:	4107883a 	add	r3,r8,r4
   2e590:	1a11803a 	cmpltu	r8,r3,r8
   2e594:	8a23883a 	add	r17,r17,r8
   2e598:	1811883a 	mov	r8,r3
   2e59c:	88c0402c 	andhi	r3,r17,256
   2e5a0:	18000426 	beq	r3,zero,2e5b4 <__divdf3+0x5d8>
   2e5a4:	00ffc034 	movhi	r3,65280
   2e5a8:	18ffffc4 	addi	r3,r3,-1
   2e5ac:	a8810004 	addi	r2,r21,1024
   2e5b0:	88e2703a 	and	r17,r17,r3
   2e5b4:	00c1ff84 	movi	r3,2046
   2e5b8:	18bee316 	blt	r3,r2,2e148 <__alt_data_end+0xfffee148>
   2e5bc:	8824977a 	slli	r18,r17,29
   2e5c0:	4010d0fa 	srli	r8,r8,3
   2e5c4:	8822927a 	slli	r17,r17,9
   2e5c8:	1081ffcc 	andi	r2,r2,2047
   2e5cc:	9224b03a 	or	r18,r18,r8
   2e5d0:	880ad33a 	srli	r5,r17,12
   2e5d4:	98c0004c 	andi	r3,r19,1
   2e5d8:	003edf06 	br	2e158 <__alt_data_end+0xfffee158>
   2e5dc:	8080022c 	andhi	r2,r16,8
   2e5e0:	10001226 	beq	r2,zero,2e62c <__divdf3+0x650>
   2e5e4:	8880022c 	andhi	r2,r17,8
   2e5e8:	1000101e 	bne	r2,zero,2e62c <__divdf3+0x650>
   2e5ec:	00800434 	movhi	r2,16
   2e5f0:	89400234 	orhi	r5,r17,8
   2e5f4:	10bfffc4 	addi	r2,r2,-1
   2e5f8:	b007883a 	mov	r3,r22
   2e5fc:	288a703a 	and	r5,r5,r2
   2e600:	4025883a 	mov	r18,r8
   2e604:	003f3106 	br	2e2cc <__alt_data_end+0xfffee2cc>
   2e608:	008000c4 	movi	r2,3
   2e60c:	3880a626 	beq	r7,r2,2e8a8 <__divdf3+0x8cc>
   2e610:	00800044 	movi	r2,1
   2e614:	3880521e 	bne	r7,r2,2e760 <__divdf3+0x784>
   2e618:	b807883a 	mov	r3,r23
   2e61c:	0005883a 	mov	r2,zero
   2e620:	000b883a 	mov	r5,zero
   2e624:	0025883a 	mov	r18,zero
   2e628:	003ecb06 	br	2e158 <__alt_data_end+0xfffee158>
   2e62c:	00800434 	movhi	r2,16
   2e630:	81400234 	orhi	r5,r16,8
   2e634:	10bfffc4 	addi	r2,r2,-1
   2e638:	a007883a 	mov	r3,r20
   2e63c:	288a703a 	and	r5,r5,r2
   2e640:	003f2206 	br	2e2cc <__alt_data_end+0xfffee2cc>
   2e644:	183fca26 	beq	r3,zero,2e570 <__alt_data_end+0xfffee570>
   2e648:	e5ef883a 	add	r23,fp,r23
   2e64c:	40bfffc4 	addi	r2,r8,-1
   2e650:	bf00392e 	bgeu	r23,fp,2e738 <__divdf3+0x75c>
   2e654:	1011883a 	mov	r8,r2
   2e658:	ba7fc41e 	bne	r23,r9,2e56c <__alt_data_end+0xfffee56c>
   2e65c:	b0ffc31e 	bne	r22,r3,2e56c <__alt_data_end+0xfffee56c>
   2e660:	003fc306 	br	2e570 <__alt_data_end+0xfffee570>
   2e664:	143ff604 	addi	r16,r2,-40
   2e668:	9c20983a 	sll	r16,r19,r16
   2e66c:	0025883a 	mov	r18,zero
   2e670:	003ee206 	br	2e1fc <__alt_data_end+0xfffee1fc>
   2e674:	d9800315 	stw	r6,12(sp)
   2e678:	d9c00215 	stw	r7,8(sp)
   2e67c:	002fd340 	call	2fd34 <__clzsi2>
   2e680:	10800804 	addi	r2,r2,32
   2e684:	d9c00217 	ldw	r7,8(sp)
   2e688:	d9800317 	ldw	r6,12(sp)
   2e68c:	003ed106 	br	2e1d4 <__alt_data_end+0xfffee1d4>
   2e690:	147ff604 	addi	r17,r2,-40
   2e694:	3462983a 	sll	r17,r6,r17
   2e698:	0011883a 	mov	r8,zero
   2e69c:	003ef506 	br	2e274 <__alt_data_end+0xfffee274>
   2e6a0:	3009883a 	mov	r4,r6
   2e6a4:	d9800315 	stw	r6,12(sp)
   2e6a8:	da400115 	stw	r9,4(sp)
   2e6ac:	002fd340 	call	2fd34 <__clzsi2>
   2e6b0:	10800804 	addi	r2,r2,32
   2e6b4:	da400117 	ldw	r9,4(sp)
   2e6b8:	d9800317 	ldw	r6,12(sp)
   2e6bc:	003ee306 	br	2e24c <__alt_data_end+0xfffee24c>
   2e6c0:	85a1883a 	add	r16,r16,r22
   2e6c4:	8585803a 	cmpltu	r2,r16,r22
   2e6c8:	1705883a 	add	r2,r2,fp
   2e6cc:	14a5883a 	add	r18,r2,r18
   2e6d0:	88bfffc4 	addi	r2,r17,-1
   2e6d4:	e4800c2e 	bgeu	fp,r18,2e708 <__divdf3+0x72c>
   2e6d8:	90c03e36 	bltu	r18,r3,2e7d4 <__divdf3+0x7f8>
   2e6dc:	1c806926 	beq	r3,r18,2e884 <__divdf3+0x8a8>
   2e6e0:	90c7c83a 	sub	r3,r18,r3
   2e6e4:	1023883a 	mov	r17,r2
   2e6e8:	003f5206 	br	2e434 <__alt_data_end+0xfffee434>
   2e6ec:	923f0436 	bltu	r18,r8,2e300 <__alt_data_end+0xfffee300>
   2e6f0:	800897fa 	slli	r4,r16,31
   2e6f4:	9004d07a 	srli	r2,r18,1
   2e6f8:	8006d07a 	srli	r3,r16,1
   2e6fc:	902097fa 	slli	r16,r18,31
   2e700:	20a4b03a 	or	r18,r4,r2
   2e704:	003f0106 	br	2e30c <__alt_data_end+0xfffee30c>
   2e708:	e4bff51e 	bne	fp,r18,2e6e0 <__alt_data_end+0xfffee6e0>
   2e70c:	85bff22e 	bgeu	r16,r22,2e6d8 <__alt_data_end+0xfffee6d8>
   2e710:	e0c7c83a 	sub	r3,fp,r3
   2e714:	1023883a 	mov	r17,r2
   2e718:	003f4606 	br	2e434 <__alt_data_end+0xfffee434>
   2e71c:	100f883a 	mov	r7,r2
   2e720:	003f2b06 	br	2e3d0 <__alt_data_end+0xfffee3d0>
   2e724:	180d883a 	mov	r6,r3
   2e728:	003f1306 	br	2e378 <__alt_data_end+0xfffee378>
   2e72c:	813fe436 	bltu	r16,r4,2e6c0 <__alt_data_end+0xfffee6c0>
   2e730:	0007883a 	mov	r3,zero
   2e734:	003f3f06 	br	2e434 <__alt_data_end+0xfffee434>
   2e738:	ba402c36 	bltu	r23,r9,2e7ec <__divdf3+0x810>
   2e73c:	4dc05426 	beq	r9,r23,2e890 <__divdf3+0x8b4>
   2e740:	1011883a 	mov	r8,r2
   2e744:	003f8906 	br	2e56c <__alt_data_end+0xfffee56c>
   2e748:	023fffc4 	movi	r8,-1
   2e74c:	003f8806 	br	2e570 <__alt_data_end+0xfffee570>
   2e750:	1811883a 	mov	r8,r3
   2e754:	003f5406 	br	2e4a8 <__alt_data_end+0xfffee4a8>
   2e758:	1025883a 	mov	r18,r2
   2e75c:	003f6d06 	br	2e514 <__alt_data_end+0xfffee514>
   2e760:	b827883a 	mov	r19,r23
   2e764:	003f8206 	br	2e570 <__alt_data_end+0xfffee570>
   2e768:	010007c4 	movi	r4,31
   2e76c:	20c02616 	blt	r4,r3,2e808 <__divdf3+0x82c>
   2e770:	00800804 	movi	r2,32
   2e774:	10c5c83a 	sub	r2,r2,r3
   2e778:	888a983a 	sll	r5,r17,r2
   2e77c:	40c8d83a 	srl	r4,r8,r3
   2e780:	4084983a 	sll	r2,r8,r2
   2e784:	88e2d83a 	srl	r17,r17,r3
   2e788:	2906b03a 	or	r3,r5,r4
   2e78c:	1004c03a 	cmpne	r2,r2,zero
   2e790:	1886b03a 	or	r3,r3,r2
   2e794:	188001cc 	andi	r2,r3,7
   2e798:	10000726 	beq	r2,zero,2e7b8 <__divdf3+0x7dc>
   2e79c:	188003cc 	andi	r2,r3,15
   2e7a0:	01000104 	movi	r4,4
   2e7a4:	11000426 	beq	r2,r4,2e7b8 <__divdf3+0x7dc>
   2e7a8:	1805883a 	mov	r2,r3
   2e7ac:	10c00104 	addi	r3,r2,4
   2e7b0:	1885803a 	cmpltu	r2,r3,r2
   2e7b4:	88a3883a 	add	r17,r17,r2
   2e7b8:	8880202c 	andhi	r2,r17,128
   2e7bc:	10002726 	beq	r2,zero,2e85c <__divdf3+0x880>
   2e7c0:	98c0004c 	andi	r3,r19,1
   2e7c4:	00800044 	movi	r2,1
   2e7c8:	000b883a 	mov	r5,zero
   2e7cc:	0025883a 	mov	r18,zero
   2e7d0:	003e6106 	br	2e158 <__alt_data_end+0xfffee158>
   2e7d4:	85a1883a 	add	r16,r16,r22
   2e7d8:	8585803a 	cmpltu	r2,r16,r22
   2e7dc:	1705883a 	add	r2,r2,fp
   2e7e0:	14a5883a 	add	r18,r2,r18
   2e7e4:	8c7fff84 	addi	r17,r17,-2
   2e7e8:	003f1106 	br	2e430 <__alt_data_end+0xfffee430>
   2e7ec:	b589883a 	add	r4,r22,r22
   2e7f0:	25ad803a 	cmpltu	r22,r4,r22
   2e7f4:	b739883a 	add	fp,r22,fp
   2e7f8:	40bfff84 	addi	r2,r8,-2
   2e7fc:	bf2f883a 	add	r23,r23,fp
   2e800:	202d883a 	mov	r22,r4
   2e804:	003f9306 	br	2e654 <__alt_data_end+0xfffee654>
   2e808:	013ff844 	movi	r4,-31
   2e80c:	2085c83a 	sub	r2,r4,r2
   2e810:	8888d83a 	srl	r4,r17,r2
   2e814:	00800804 	movi	r2,32
   2e818:	18802126 	beq	r3,r2,2e8a0 <__divdf3+0x8c4>
   2e81c:	00801004 	movi	r2,64
   2e820:	10c5c83a 	sub	r2,r2,r3
   2e824:	8884983a 	sll	r2,r17,r2
   2e828:	1204b03a 	or	r2,r2,r8
   2e82c:	1004c03a 	cmpne	r2,r2,zero
   2e830:	2084b03a 	or	r2,r4,r2
   2e834:	144001cc 	andi	r17,r2,7
   2e838:	88000d1e 	bne	r17,zero,2e870 <__divdf3+0x894>
   2e83c:	000b883a 	mov	r5,zero
   2e840:	1024d0fa 	srli	r18,r2,3
   2e844:	98c0004c 	andi	r3,r19,1
   2e848:	0005883a 	mov	r2,zero
   2e84c:	9464b03a 	or	r18,r18,r17
   2e850:	003e4106 	br	2e158 <__alt_data_end+0xfffee158>
   2e854:	1007883a 	mov	r3,r2
   2e858:	0023883a 	mov	r17,zero
   2e85c:	880a927a 	slli	r5,r17,9
   2e860:	1805883a 	mov	r2,r3
   2e864:	8822977a 	slli	r17,r17,29
   2e868:	280ad33a 	srli	r5,r5,12
   2e86c:	003ff406 	br	2e840 <__alt_data_end+0xfffee840>
   2e870:	10c003cc 	andi	r3,r2,15
   2e874:	01000104 	movi	r4,4
   2e878:	193ff626 	beq	r3,r4,2e854 <__alt_data_end+0xfffee854>
   2e87c:	0023883a 	mov	r17,zero
   2e880:	003fca06 	br	2e7ac <__alt_data_end+0xfffee7ac>
   2e884:	813fd336 	bltu	r16,r4,2e7d4 <__alt_data_end+0xfffee7d4>
   2e888:	1023883a 	mov	r17,r2
   2e88c:	003fa806 	br	2e730 <__alt_data_end+0xfffee730>
   2e890:	b0ffd636 	bltu	r22,r3,2e7ec <__alt_data_end+0xfffee7ec>
   2e894:	1011883a 	mov	r8,r2
   2e898:	b0ff341e 	bne	r22,r3,2e56c <__alt_data_end+0xfffee56c>
   2e89c:	003f3406 	br	2e570 <__alt_data_end+0xfffee570>
   2e8a0:	0005883a 	mov	r2,zero
   2e8a4:	003fe006 	br	2e828 <__alt_data_end+0xfffee828>
   2e8a8:	00800434 	movhi	r2,16
   2e8ac:	89400234 	orhi	r5,r17,8
   2e8b0:	10bfffc4 	addi	r2,r2,-1
   2e8b4:	b807883a 	mov	r3,r23
   2e8b8:	288a703a 	and	r5,r5,r2
   2e8bc:	4025883a 	mov	r18,r8
   2e8c0:	003e8206 	br	2e2cc <__alt_data_end+0xfffee2cc>

0002e8c4 <__eqdf2>:
   2e8c4:	2804d53a 	srli	r2,r5,20
   2e8c8:	3806d53a 	srli	r3,r7,20
   2e8cc:	02000434 	movhi	r8,16
   2e8d0:	423fffc4 	addi	r8,r8,-1
   2e8d4:	1081ffcc 	andi	r2,r2,2047
   2e8d8:	0281ffc4 	movi	r10,2047
   2e8dc:	2a12703a 	and	r9,r5,r8
   2e8e0:	18c1ffcc 	andi	r3,r3,2047
   2e8e4:	3a10703a 	and	r8,r7,r8
   2e8e8:	280ad7fa 	srli	r5,r5,31
   2e8ec:	380ed7fa 	srli	r7,r7,31
   2e8f0:	12801026 	beq	r2,r10,2e934 <__eqdf2+0x70>
   2e8f4:	0281ffc4 	movi	r10,2047
   2e8f8:	1a800a26 	beq	r3,r10,2e924 <__eqdf2+0x60>
   2e8fc:	10c00226 	beq	r2,r3,2e908 <__eqdf2+0x44>
   2e900:	00800044 	movi	r2,1
   2e904:	f800283a 	ret
   2e908:	4a3ffd1e 	bne	r9,r8,2e900 <__alt_data_end+0xfffee900>
   2e90c:	21bffc1e 	bne	r4,r6,2e900 <__alt_data_end+0xfffee900>
   2e910:	29c00c26 	beq	r5,r7,2e944 <__eqdf2+0x80>
   2e914:	103ffa1e 	bne	r2,zero,2e900 <__alt_data_end+0xfffee900>
   2e918:	2244b03a 	or	r2,r4,r9
   2e91c:	1004c03a 	cmpne	r2,r2,zero
   2e920:	f800283a 	ret
   2e924:	3214b03a 	or	r10,r6,r8
   2e928:	503ff426 	beq	r10,zero,2e8fc <__alt_data_end+0xfffee8fc>
   2e92c:	00800044 	movi	r2,1
   2e930:	f800283a 	ret
   2e934:	2254b03a 	or	r10,r4,r9
   2e938:	503fee26 	beq	r10,zero,2e8f4 <__alt_data_end+0xfffee8f4>
   2e93c:	00800044 	movi	r2,1
   2e940:	f800283a 	ret
   2e944:	0005883a 	mov	r2,zero
   2e948:	f800283a 	ret

0002e94c <__gedf2>:
   2e94c:	2804d53a 	srli	r2,r5,20
   2e950:	3806d53a 	srli	r3,r7,20
   2e954:	02000434 	movhi	r8,16
   2e958:	423fffc4 	addi	r8,r8,-1
   2e95c:	1081ffcc 	andi	r2,r2,2047
   2e960:	0241ffc4 	movi	r9,2047
   2e964:	2a14703a 	and	r10,r5,r8
   2e968:	18c1ffcc 	andi	r3,r3,2047
   2e96c:	3a10703a 	and	r8,r7,r8
   2e970:	280ad7fa 	srli	r5,r5,31
   2e974:	380ed7fa 	srli	r7,r7,31
   2e978:	12401d26 	beq	r2,r9,2e9f0 <__gedf2+0xa4>
   2e97c:	0241ffc4 	movi	r9,2047
   2e980:	1a401226 	beq	r3,r9,2e9cc <__gedf2+0x80>
   2e984:	1000081e 	bne	r2,zero,2e9a8 <__gedf2+0x5c>
   2e988:	2296b03a 	or	r11,r4,r10
   2e98c:	5813003a 	cmpeq	r9,r11,zero
   2e990:	1800091e 	bne	r3,zero,2e9b8 <__gedf2+0x6c>
   2e994:	3218b03a 	or	r12,r6,r8
   2e998:	6000071e 	bne	r12,zero,2e9b8 <__gedf2+0x6c>
   2e99c:	0005883a 	mov	r2,zero
   2e9a0:	5800101e 	bne	r11,zero,2e9e4 <__gedf2+0x98>
   2e9a4:	f800283a 	ret
   2e9a8:	18000c1e 	bne	r3,zero,2e9dc <__gedf2+0x90>
   2e9ac:	3212b03a 	or	r9,r6,r8
   2e9b0:	48000c26 	beq	r9,zero,2e9e4 <__gedf2+0x98>
   2e9b4:	0013883a 	mov	r9,zero
   2e9b8:	39c03fcc 	andi	r7,r7,255
   2e9bc:	48000826 	beq	r9,zero,2e9e0 <__gedf2+0x94>
   2e9c0:	38000926 	beq	r7,zero,2e9e8 <__gedf2+0x9c>
   2e9c4:	00800044 	movi	r2,1
   2e9c8:	f800283a 	ret
   2e9cc:	3212b03a 	or	r9,r6,r8
   2e9d0:	483fec26 	beq	r9,zero,2e984 <__alt_data_end+0xfffee984>
   2e9d4:	00bfff84 	movi	r2,-2
   2e9d8:	f800283a 	ret
   2e9dc:	39c03fcc 	andi	r7,r7,255
   2e9e0:	29c00626 	beq	r5,r7,2e9fc <__gedf2+0xb0>
   2e9e4:	283ff726 	beq	r5,zero,2e9c4 <__alt_data_end+0xfffee9c4>
   2e9e8:	00bfffc4 	movi	r2,-1
   2e9ec:	f800283a 	ret
   2e9f0:	2292b03a 	or	r9,r4,r10
   2e9f4:	483fe126 	beq	r9,zero,2e97c <__alt_data_end+0xfffee97c>
   2e9f8:	003ff606 	br	2e9d4 <__alt_data_end+0xfffee9d4>
   2e9fc:	18bff916 	blt	r3,r2,2e9e4 <__alt_data_end+0xfffee9e4>
   2ea00:	10c00316 	blt	r2,r3,2ea10 <__gedf2+0xc4>
   2ea04:	42bff736 	bltu	r8,r10,2e9e4 <__alt_data_end+0xfffee9e4>
   2ea08:	52000326 	beq	r10,r8,2ea18 <__gedf2+0xcc>
   2ea0c:	5200042e 	bgeu	r10,r8,2ea20 <__gedf2+0xd4>
   2ea10:	283fec1e 	bne	r5,zero,2e9c4 <__alt_data_end+0xfffee9c4>
   2ea14:	003ff406 	br	2e9e8 <__alt_data_end+0xfffee9e8>
   2ea18:	313ff236 	bltu	r6,r4,2e9e4 <__alt_data_end+0xfffee9e4>
   2ea1c:	21bffc36 	bltu	r4,r6,2ea10 <__alt_data_end+0xfffeea10>
   2ea20:	0005883a 	mov	r2,zero
   2ea24:	f800283a 	ret

0002ea28 <__ledf2>:
   2ea28:	2804d53a 	srli	r2,r5,20
   2ea2c:	3810d53a 	srli	r8,r7,20
   2ea30:	00c00434 	movhi	r3,16
   2ea34:	18ffffc4 	addi	r3,r3,-1
   2ea38:	1081ffcc 	andi	r2,r2,2047
   2ea3c:	0241ffc4 	movi	r9,2047
   2ea40:	28d4703a 	and	r10,r5,r3
   2ea44:	4201ffcc 	andi	r8,r8,2047
   2ea48:	38c6703a 	and	r3,r7,r3
   2ea4c:	280ad7fa 	srli	r5,r5,31
   2ea50:	380ed7fa 	srli	r7,r7,31
   2ea54:	12401f26 	beq	r2,r9,2ead4 <__ledf2+0xac>
   2ea58:	0241ffc4 	movi	r9,2047
   2ea5c:	42401426 	beq	r8,r9,2eab0 <__ledf2+0x88>
   2ea60:	1000091e 	bne	r2,zero,2ea88 <__ledf2+0x60>
   2ea64:	2296b03a 	or	r11,r4,r10
   2ea68:	5813003a 	cmpeq	r9,r11,zero
   2ea6c:	29403fcc 	andi	r5,r5,255
   2ea70:	40000a1e 	bne	r8,zero,2ea9c <__ledf2+0x74>
   2ea74:	30d8b03a 	or	r12,r6,r3
   2ea78:	6000081e 	bne	r12,zero,2ea9c <__ledf2+0x74>
   2ea7c:	0005883a 	mov	r2,zero
   2ea80:	5800111e 	bne	r11,zero,2eac8 <__ledf2+0xa0>
   2ea84:	f800283a 	ret
   2ea88:	29403fcc 	andi	r5,r5,255
   2ea8c:	40000c1e 	bne	r8,zero,2eac0 <__ledf2+0x98>
   2ea90:	30d2b03a 	or	r9,r6,r3
   2ea94:	48000c26 	beq	r9,zero,2eac8 <__ledf2+0xa0>
   2ea98:	0013883a 	mov	r9,zero
   2ea9c:	39c03fcc 	andi	r7,r7,255
   2eaa0:	48000826 	beq	r9,zero,2eac4 <__ledf2+0x9c>
   2eaa4:	38001126 	beq	r7,zero,2eaec <__ledf2+0xc4>
   2eaa8:	00800044 	movi	r2,1
   2eaac:	f800283a 	ret
   2eab0:	30d2b03a 	or	r9,r6,r3
   2eab4:	483fea26 	beq	r9,zero,2ea60 <__alt_data_end+0xfffeea60>
   2eab8:	00800084 	movi	r2,2
   2eabc:	f800283a 	ret
   2eac0:	39c03fcc 	andi	r7,r7,255
   2eac4:	39400726 	beq	r7,r5,2eae4 <__ledf2+0xbc>
   2eac8:	2800081e 	bne	r5,zero,2eaec <__ledf2+0xc4>
   2eacc:	00800044 	movi	r2,1
   2ead0:	f800283a 	ret
   2ead4:	2292b03a 	or	r9,r4,r10
   2ead8:	483fdf26 	beq	r9,zero,2ea58 <__alt_data_end+0xfffeea58>
   2eadc:	00800084 	movi	r2,2
   2eae0:	f800283a 	ret
   2eae4:	4080030e 	bge	r8,r2,2eaf4 <__ledf2+0xcc>
   2eae8:	383fef26 	beq	r7,zero,2eaa8 <__alt_data_end+0xfffeeaa8>
   2eaec:	00bfffc4 	movi	r2,-1
   2eaf0:	f800283a 	ret
   2eaf4:	123feb16 	blt	r2,r8,2eaa4 <__alt_data_end+0xfffeeaa4>
   2eaf8:	1abff336 	bltu	r3,r10,2eac8 <__alt_data_end+0xfffeeac8>
   2eafc:	50c00326 	beq	r10,r3,2eb0c <__ledf2+0xe4>
   2eb00:	50c0042e 	bgeu	r10,r3,2eb14 <__ledf2+0xec>
   2eb04:	283fe81e 	bne	r5,zero,2eaa8 <__alt_data_end+0xfffeeaa8>
   2eb08:	003ff806 	br	2eaec <__alt_data_end+0xfffeeaec>
   2eb0c:	313fee36 	bltu	r6,r4,2eac8 <__alt_data_end+0xfffeeac8>
   2eb10:	21bffc36 	bltu	r4,r6,2eb04 <__alt_data_end+0xfffeeb04>
   2eb14:	0005883a 	mov	r2,zero
   2eb18:	f800283a 	ret

0002eb1c <__muldf3>:
   2eb1c:	defff304 	addi	sp,sp,-52
   2eb20:	2804d53a 	srli	r2,r5,20
   2eb24:	dd800915 	stw	r22,36(sp)
   2eb28:	282cd7fa 	srli	r22,r5,31
   2eb2c:	dc000315 	stw	r16,12(sp)
   2eb30:	04000434 	movhi	r16,16
   2eb34:	dd400815 	stw	r21,32(sp)
   2eb38:	dc800515 	stw	r18,20(sp)
   2eb3c:	843fffc4 	addi	r16,r16,-1
   2eb40:	dfc00c15 	stw	ra,48(sp)
   2eb44:	df000b15 	stw	fp,44(sp)
   2eb48:	ddc00a15 	stw	r23,40(sp)
   2eb4c:	dd000715 	stw	r20,28(sp)
   2eb50:	dcc00615 	stw	r19,24(sp)
   2eb54:	dc400415 	stw	r17,16(sp)
   2eb58:	1481ffcc 	andi	r18,r2,2047
   2eb5c:	2c20703a 	and	r16,r5,r16
   2eb60:	b02b883a 	mov	r21,r22
   2eb64:	b2403fcc 	andi	r9,r22,255
   2eb68:	90006026 	beq	r18,zero,2ecec <__muldf3+0x1d0>
   2eb6c:	0081ffc4 	movi	r2,2047
   2eb70:	2029883a 	mov	r20,r4
   2eb74:	90803626 	beq	r18,r2,2ec50 <__muldf3+0x134>
   2eb78:	80800434 	orhi	r2,r16,16
   2eb7c:	100490fa 	slli	r2,r2,3
   2eb80:	2020d77a 	srli	r16,r4,29
   2eb84:	202890fa 	slli	r20,r4,3
   2eb88:	94bf0044 	addi	r18,r18,-1023
   2eb8c:	80a0b03a 	or	r16,r16,r2
   2eb90:	0027883a 	mov	r19,zero
   2eb94:	0039883a 	mov	fp,zero
   2eb98:	3804d53a 	srli	r2,r7,20
   2eb9c:	382ed7fa 	srli	r23,r7,31
   2eba0:	04400434 	movhi	r17,16
   2eba4:	8c7fffc4 	addi	r17,r17,-1
   2eba8:	1081ffcc 	andi	r2,r2,2047
   2ebac:	3011883a 	mov	r8,r6
   2ebb0:	3c62703a 	and	r17,r7,r17
   2ebb4:	ba803fcc 	andi	r10,r23,255
   2ebb8:	10006d26 	beq	r2,zero,2ed70 <__muldf3+0x254>
   2ebbc:	00c1ffc4 	movi	r3,2047
   2ebc0:	10c06526 	beq	r2,r3,2ed58 <__muldf3+0x23c>
   2ebc4:	88c00434 	orhi	r3,r17,16
   2ebc8:	180690fa 	slli	r3,r3,3
   2ebcc:	3022d77a 	srli	r17,r6,29
   2ebd0:	301090fa 	slli	r8,r6,3
   2ebd4:	10bf0044 	addi	r2,r2,-1023
   2ebd8:	88e2b03a 	or	r17,r17,r3
   2ebdc:	000b883a 	mov	r5,zero
   2ebe0:	9085883a 	add	r2,r18,r2
   2ebe4:	2cc8b03a 	or	r4,r5,r19
   2ebe8:	00c003c4 	movi	r3,15
   2ebec:	bdacf03a 	xor	r22,r23,r22
   2ebf0:	12c00044 	addi	r11,r2,1
   2ebf4:	19009936 	bltu	r3,r4,2ee5c <__muldf3+0x340>
   2ebf8:	200890ba 	slli	r4,r4,2
   2ebfc:	00c000f4 	movhi	r3,3
   2ec00:	18fb0404 	addi	r3,r3,-5104
   2ec04:	20c9883a 	add	r4,r4,r3
   2ec08:	20c00017 	ldw	r3,0(r4)
   2ec0c:	1800683a 	jmp	r3
   2ec10:	0002ee5c 	xori	zero,zero,3001
   2ec14:	0002ec70 	cmpltui	zero,zero,2993
   2ec18:	0002ec70 	cmpltui	zero,zero,2993
   2ec1c:	0002ec6c 	andhi	zero,zero,2993
   2ec20:	0002ee38 	rdprs	zero,zero,3000
   2ec24:	0002ee38 	rdprs	zero,zero,3000
   2ec28:	0002ee20 	cmpeqi	zero,zero,3000
   2ec2c:	0002ec6c 	andhi	zero,zero,2993
   2ec30:	0002ee38 	rdprs	zero,zero,3000
   2ec34:	0002ee20 	cmpeqi	zero,zero,3000
   2ec38:	0002ee38 	rdprs	zero,zero,3000
   2ec3c:	0002ec6c 	andhi	zero,zero,2993
   2ec40:	0002ee48 	cmpgei	zero,zero,3001
   2ec44:	0002ee48 	cmpgei	zero,zero,3001
   2ec48:	0002ee48 	cmpgei	zero,zero,3001
   2ec4c:	0002f064 	muli	zero,zero,3009
   2ec50:	2404b03a 	or	r2,r4,r16
   2ec54:	10006f1e 	bne	r2,zero,2ee14 <__muldf3+0x2f8>
   2ec58:	04c00204 	movi	r19,8
   2ec5c:	0021883a 	mov	r16,zero
   2ec60:	0029883a 	mov	r20,zero
   2ec64:	07000084 	movi	fp,2
   2ec68:	003fcb06 	br	2eb98 <__alt_data_end+0xfffeeb98>
   2ec6c:	502d883a 	mov	r22,r10
   2ec70:	00800084 	movi	r2,2
   2ec74:	28805726 	beq	r5,r2,2edd4 <__muldf3+0x2b8>
   2ec78:	008000c4 	movi	r2,3
   2ec7c:	28816626 	beq	r5,r2,2f218 <__muldf3+0x6fc>
   2ec80:	00800044 	movi	r2,1
   2ec84:	2881411e 	bne	r5,r2,2f18c <__muldf3+0x670>
   2ec88:	b02b883a 	mov	r21,r22
   2ec8c:	0005883a 	mov	r2,zero
   2ec90:	000b883a 	mov	r5,zero
   2ec94:	0029883a 	mov	r20,zero
   2ec98:	1004953a 	slli	r2,r2,20
   2ec9c:	a8c03fcc 	andi	r3,r21,255
   2eca0:	04400434 	movhi	r17,16
   2eca4:	8c7fffc4 	addi	r17,r17,-1
   2eca8:	180697fa 	slli	r3,r3,31
   2ecac:	2c4a703a 	and	r5,r5,r17
   2ecb0:	288ab03a 	or	r5,r5,r2
   2ecb4:	28c6b03a 	or	r3,r5,r3
   2ecb8:	a005883a 	mov	r2,r20
   2ecbc:	dfc00c17 	ldw	ra,48(sp)
   2ecc0:	df000b17 	ldw	fp,44(sp)
   2ecc4:	ddc00a17 	ldw	r23,40(sp)
   2ecc8:	dd800917 	ldw	r22,36(sp)
   2eccc:	dd400817 	ldw	r21,32(sp)
   2ecd0:	dd000717 	ldw	r20,28(sp)
   2ecd4:	dcc00617 	ldw	r19,24(sp)
   2ecd8:	dc800517 	ldw	r18,20(sp)
   2ecdc:	dc400417 	ldw	r17,16(sp)
   2ece0:	dc000317 	ldw	r16,12(sp)
   2ece4:	dec00d04 	addi	sp,sp,52
   2ece8:	f800283a 	ret
   2ecec:	2404b03a 	or	r2,r4,r16
   2ecf0:	2027883a 	mov	r19,r4
   2ecf4:	10004226 	beq	r2,zero,2ee00 <__muldf3+0x2e4>
   2ecf8:	8000fc26 	beq	r16,zero,2f0ec <__muldf3+0x5d0>
   2ecfc:	8009883a 	mov	r4,r16
   2ed00:	d9800215 	stw	r6,8(sp)
   2ed04:	d9c00015 	stw	r7,0(sp)
   2ed08:	da400115 	stw	r9,4(sp)
   2ed0c:	002fd340 	call	2fd34 <__clzsi2>
   2ed10:	d9800217 	ldw	r6,8(sp)
   2ed14:	d9c00017 	ldw	r7,0(sp)
   2ed18:	da400117 	ldw	r9,4(sp)
   2ed1c:	113ffd44 	addi	r4,r2,-11
   2ed20:	00c00704 	movi	r3,28
   2ed24:	1900ed16 	blt	r3,r4,2f0dc <__muldf3+0x5c0>
   2ed28:	00c00744 	movi	r3,29
   2ed2c:	147ffe04 	addi	r17,r2,-8
   2ed30:	1907c83a 	sub	r3,r3,r4
   2ed34:	8460983a 	sll	r16,r16,r17
   2ed38:	98c6d83a 	srl	r3,r19,r3
   2ed3c:	9c68983a 	sll	r20,r19,r17
   2ed40:	1c20b03a 	or	r16,r3,r16
   2ed44:	1080fcc4 	addi	r2,r2,1011
   2ed48:	00a5c83a 	sub	r18,zero,r2
   2ed4c:	0027883a 	mov	r19,zero
   2ed50:	0039883a 	mov	fp,zero
   2ed54:	003f9006 	br	2eb98 <__alt_data_end+0xfffeeb98>
   2ed58:	3446b03a 	or	r3,r6,r17
   2ed5c:	1800261e 	bne	r3,zero,2edf8 <__muldf3+0x2dc>
   2ed60:	0023883a 	mov	r17,zero
   2ed64:	0011883a 	mov	r8,zero
   2ed68:	01400084 	movi	r5,2
   2ed6c:	003f9c06 	br	2ebe0 <__alt_data_end+0xfffeebe0>
   2ed70:	3446b03a 	or	r3,r6,r17
   2ed74:	18001c26 	beq	r3,zero,2ede8 <__muldf3+0x2cc>
   2ed78:	8800ce26 	beq	r17,zero,2f0b4 <__muldf3+0x598>
   2ed7c:	8809883a 	mov	r4,r17
   2ed80:	d9800215 	stw	r6,8(sp)
   2ed84:	da400115 	stw	r9,4(sp)
   2ed88:	da800015 	stw	r10,0(sp)
   2ed8c:	002fd340 	call	2fd34 <__clzsi2>
   2ed90:	d9800217 	ldw	r6,8(sp)
   2ed94:	da400117 	ldw	r9,4(sp)
   2ed98:	da800017 	ldw	r10,0(sp)
   2ed9c:	113ffd44 	addi	r4,r2,-11
   2eda0:	00c00704 	movi	r3,28
   2eda4:	1900bf16 	blt	r3,r4,2f0a4 <__muldf3+0x588>
   2eda8:	00c00744 	movi	r3,29
   2edac:	123ffe04 	addi	r8,r2,-8
   2edb0:	1907c83a 	sub	r3,r3,r4
   2edb4:	8a22983a 	sll	r17,r17,r8
   2edb8:	30c6d83a 	srl	r3,r6,r3
   2edbc:	3210983a 	sll	r8,r6,r8
   2edc0:	1c62b03a 	or	r17,r3,r17
   2edc4:	1080fcc4 	addi	r2,r2,1011
   2edc8:	0085c83a 	sub	r2,zero,r2
   2edcc:	000b883a 	mov	r5,zero
   2edd0:	003f8306 	br	2ebe0 <__alt_data_end+0xfffeebe0>
   2edd4:	b02b883a 	mov	r21,r22
   2edd8:	0081ffc4 	movi	r2,2047
   2eddc:	000b883a 	mov	r5,zero
   2ede0:	0029883a 	mov	r20,zero
   2ede4:	003fac06 	br	2ec98 <__alt_data_end+0xfffeec98>
   2ede8:	0023883a 	mov	r17,zero
   2edec:	0011883a 	mov	r8,zero
   2edf0:	01400044 	movi	r5,1
   2edf4:	003f7a06 	br	2ebe0 <__alt_data_end+0xfffeebe0>
   2edf8:	014000c4 	movi	r5,3
   2edfc:	003f7806 	br	2ebe0 <__alt_data_end+0xfffeebe0>
   2ee00:	04c00104 	movi	r19,4
   2ee04:	0021883a 	mov	r16,zero
   2ee08:	0029883a 	mov	r20,zero
   2ee0c:	07000044 	movi	fp,1
   2ee10:	003f6106 	br	2eb98 <__alt_data_end+0xfffeeb98>
   2ee14:	04c00304 	movi	r19,12
   2ee18:	070000c4 	movi	fp,3
   2ee1c:	003f5e06 	br	2eb98 <__alt_data_end+0xfffeeb98>
   2ee20:	01400434 	movhi	r5,16
   2ee24:	002b883a 	mov	r21,zero
   2ee28:	297fffc4 	addi	r5,r5,-1
   2ee2c:	053fffc4 	movi	r20,-1
   2ee30:	0081ffc4 	movi	r2,2047
   2ee34:	003f9806 	br	2ec98 <__alt_data_end+0xfffeec98>
   2ee38:	8023883a 	mov	r17,r16
   2ee3c:	a011883a 	mov	r8,r20
   2ee40:	e00b883a 	mov	r5,fp
   2ee44:	003f8a06 	br	2ec70 <__alt_data_end+0xfffeec70>
   2ee48:	8023883a 	mov	r17,r16
   2ee4c:	a011883a 	mov	r8,r20
   2ee50:	482d883a 	mov	r22,r9
   2ee54:	e00b883a 	mov	r5,fp
   2ee58:	003f8506 	br	2ec70 <__alt_data_end+0xfffeec70>
   2ee5c:	a00ad43a 	srli	r5,r20,16
   2ee60:	401ad43a 	srli	r13,r8,16
   2ee64:	a53fffcc 	andi	r20,r20,65535
   2ee68:	423fffcc 	andi	r8,r8,65535
   2ee6c:	4519383a 	mul	r12,r8,r20
   2ee70:	4147383a 	mul	r3,r8,r5
   2ee74:	6d09383a 	mul	r4,r13,r20
   2ee78:	600cd43a 	srli	r6,r12,16
   2ee7c:	2b5d383a 	mul	r14,r5,r13
   2ee80:	20c9883a 	add	r4,r4,r3
   2ee84:	310d883a 	add	r6,r6,r4
   2ee88:	30c0022e 	bgeu	r6,r3,2ee94 <__muldf3+0x378>
   2ee8c:	00c00074 	movhi	r3,1
   2ee90:	70dd883a 	add	r14,r14,r3
   2ee94:	8826d43a 	srli	r19,r17,16
   2ee98:	8bffffcc 	andi	r15,r17,65535
   2ee9c:	7d23383a 	mul	r17,r15,r20
   2eea0:	7949383a 	mul	r4,r15,r5
   2eea4:	9d29383a 	mul	r20,r19,r20
   2eea8:	8814d43a 	srli	r10,r17,16
   2eeac:	3012943a 	slli	r9,r6,16
   2eeb0:	a129883a 	add	r20,r20,r4
   2eeb4:	633fffcc 	andi	r12,r12,65535
   2eeb8:	5515883a 	add	r10,r10,r20
   2eebc:	3006d43a 	srli	r3,r6,16
   2eec0:	4b13883a 	add	r9,r9,r12
   2eec4:	2ccb383a 	mul	r5,r5,r19
   2eec8:	5100022e 	bgeu	r10,r4,2eed4 <__muldf3+0x3b8>
   2eecc:	01000074 	movhi	r4,1
   2eed0:	290b883a 	add	r5,r5,r4
   2eed4:	802ad43a 	srli	r21,r16,16
   2eed8:	843fffcc 	andi	r16,r16,65535
   2eedc:	440d383a 	mul	r6,r8,r16
   2eee0:	4565383a 	mul	r18,r8,r21
   2eee4:	8349383a 	mul	r4,r16,r13
   2eee8:	500e943a 	slli	r7,r10,16
   2eeec:	3010d43a 	srli	r8,r6,16
   2eef0:	5028d43a 	srli	r20,r10,16
   2eef4:	2489883a 	add	r4,r4,r18
   2eef8:	8abfffcc 	andi	r10,r17,65535
   2eefc:	3a95883a 	add	r10,r7,r10
   2ef00:	4119883a 	add	r12,r8,r4
   2ef04:	a169883a 	add	r20,r20,r5
   2ef08:	1a87883a 	add	r3,r3,r10
   2ef0c:	6d5b383a 	mul	r13,r13,r21
   2ef10:	6480022e 	bgeu	r12,r18,2ef1c <__muldf3+0x400>
   2ef14:	01000074 	movhi	r4,1
   2ef18:	691b883a 	add	r13,r13,r4
   2ef1c:	7c25383a 	mul	r18,r15,r16
   2ef20:	7d4b383a 	mul	r5,r15,r21
   2ef24:	84cf383a 	mul	r7,r16,r19
   2ef28:	901ed43a 	srli	r15,r18,16
   2ef2c:	6008d43a 	srli	r4,r12,16
   2ef30:	6010943a 	slli	r8,r12,16
   2ef34:	394f883a 	add	r7,r7,r5
   2ef38:	333fffcc 	andi	r12,r6,65535
   2ef3c:	79df883a 	add	r15,r15,r7
   2ef40:	235b883a 	add	r13,r4,r13
   2ef44:	9d63383a 	mul	r17,r19,r21
   2ef48:	4309883a 	add	r4,r8,r12
   2ef4c:	7940022e 	bgeu	r15,r5,2ef58 <__muldf3+0x43c>
   2ef50:	01400074 	movhi	r5,1
   2ef54:	8963883a 	add	r17,r17,r5
   2ef58:	780a943a 	slli	r5,r15,16
   2ef5c:	91bfffcc 	andi	r6,r18,65535
   2ef60:	70c7883a 	add	r3,r14,r3
   2ef64:	298d883a 	add	r6,r5,r6
   2ef68:	1a8f803a 	cmpltu	r7,r3,r10
   2ef6c:	350b883a 	add	r5,r6,r20
   2ef70:	20c7883a 	add	r3,r4,r3
   2ef74:	3955883a 	add	r10,r7,r5
   2ef78:	1909803a 	cmpltu	r4,r3,r4
   2ef7c:	6a91883a 	add	r8,r13,r10
   2ef80:	780cd43a 	srli	r6,r15,16
   2ef84:	2219883a 	add	r12,r4,r8
   2ef88:	2d0b803a 	cmpltu	r5,r5,r20
   2ef8c:	51cf803a 	cmpltu	r7,r10,r7
   2ef90:	29ceb03a 	or	r7,r5,r7
   2ef94:	4351803a 	cmpltu	r8,r8,r13
   2ef98:	610b803a 	cmpltu	r5,r12,r4
   2ef9c:	4148b03a 	or	r4,r8,r5
   2efa0:	398f883a 	add	r7,r7,r6
   2efa4:	3909883a 	add	r4,r7,r4
   2efa8:	1810927a 	slli	r8,r3,9
   2efac:	2449883a 	add	r4,r4,r17
   2efb0:	2008927a 	slli	r4,r4,9
   2efb4:	6022d5fa 	srli	r17,r12,23
   2efb8:	1806d5fa 	srli	r3,r3,23
   2efbc:	4252b03a 	or	r9,r8,r9
   2efc0:	600a927a 	slli	r5,r12,9
   2efc4:	4810c03a 	cmpne	r8,r9,zero
   2efc8:	2462b03a 	or	r17,r4,r17
   2efcc:	40c6b03a 	or	r3,r8,r3
   2efd0:	8900402c 	andhi	r4,r17,256
   2efd4:	1950b03a 	or	r8,r3,r5
   2efd8:	20000726 	beq	r4,zero,2eff8 <__muldf3+0x4dc>
   2efdc:	4006d07a 	srli	r3,r8,1
   2efe0:	880497fa 	slli	r2,r17,31
   2efe4:	4200004c 	andi	r8,r8,1
   2efe8:	8822d07a 	srli	r17,r17,1
   2efec:	1a10b03a 	or	r8,r3,r8
   2eff0:	1210b03a 	or	r8,r2,r8
   2eff4:	5805883a 	mov	r2,r11
   2eff8:	1140ffc4 	addi	r5,r2,1023
   2effc:	0140440e 	bge	zero,r5,2f110 <__muldf3+0x5f4>
   2f000:	40c001cc 	andi	r3,r8,7
   2f004:	18000726 	beq	r3,zero,2f024 <__muldf3+0x508>
   2f008:	40c003cc 	andi	r3,r8,15
   2f00c:	01000104 	movi	r4,4
   2f010:	19000426 	beq	r3,r4,2f024 <__muldf3+0x508>
   2f014:	4107883a 	add	r3,r8,r4
   2f018:	1a11803a 	cmpltu	r8,r3,r8
   2f01c:	8a23883a 	add	r17,r17,r8
   2f020:	1811883a 	mov	r8,r3
   2f024:	88c0402c 	andhi	r3,r17,256
   2f028:	18000426 	beq	r3,zero,2f03c <__muldf3+0x520>
   2f02c:	11410004 	addi	r5,r2,1024
   2f030:	00bfc034 	movhi	r2,65280
   2f034:	10bfffc4 	addi	r2,r2,-1
   2f038:	88a2703a 	and	r17,r17,r2
   2f03c:	0081ff84 	movi	r2,2046
   2f040:	117f6416 	blt	r2,r5,2edd4 <__alt_data_end+0xfffeedd4>
   2f044:	8828977a 	slli	r20,r17,29
   2f048:	4010d0fa 	srli	r8,r8,3
   2f04c:	8822927a 	slli	r17,r17,9
   2f050:	2881ffcc 	andi	r2,r5,2047
   2f054:	a228b03a 	or	r20,r20,r8
   2f058:	880ad33a 	srli	r5,r17,12
   2f05c:	b02b883a 	mov	r21,r22
   2f060:	003f0d06 	br	2ec98 <__alt_data_end+0xfffeec98>
   2f064:	8080022c 	andhi	r2,r16,8
   2f068:	10000926 	beq	r2,zero,2f090 <__muldf3+0x574>
   2f06c:	8880022c 	andhi	r2,r17,8
   2f070:	1000071e 	bne	r2,zero,2f090 <__muldf3+0x574>
   2f074:	00800434 	movhi	r2,16
   2f078:	89400234 	orhi	r5,r17,8
   2f07c:	10bfffc4 	addi	r2,r2,-1
   2f080:	b82b883a 	mov	r21,r23
   2f084:	288a703a 	and	r5,r5,r2
   2f088:	4029883a 	mov	r20,r8
   2f08c:	003f6806 	br	2ee30 <__alt_data_end+0xfffeee30>
   2f090:	00800434 	movhi	r2,16
   2f094:	81400234 	orhi	r5,r16,8
   2f098:	10bfffc4 	addi	r2,r2,-1
   2f09c:	288a703a 	and	r5,r5,r2
   2f0a0:	003f6306 	br	2ee30 <__alt_data_end+0xfffeee30>
   2f0a4:	147ff604 	addi	r17,r2,-40
   2f0a8:	3462983a 	sll	r17,r6,r17
   2f0ac:	0011883a 	mov	r8,zero
   2f0b0:	003f4406 	br	2edc4 <__alt_data_end+0xfffeedc4>
   2f0b4:	3009883a 	mov	r4,r6
   2f0b8:	d9800215 	stw	r6,8(sp)
   2f0bc:	da400115 	stw	r9,4(sp)
   2f0c0:	da800015 	stw	r10,0(sp)
   2f0c4:	002fd340 	call	2fd34 <__clzsi2>
   2f0c8:	10800804 	addi	r2,r2,32
   2f0cc:	da800017 	ldw	r10,0(sp)
   2f0d0:	da400117 	ldw	r9,4(sp)
   2f0d4:	d9800217 	ldw	r6,8(sp)
   2f0d8:	003f3006 	br	2ed9c <__alt_data_end+0xfffeed9c>
   2f0dc:	143ff604 	addi	r16,r2,-40
   2f0e0:	9c20983a 	sll	r16,r19,r16
   2f0e4:	0029883a 	mov	r20,zero
   2f0e8:	003f1606 	br	2ed44 <__alt_data_end+0xfffeed44>
   2f0ec:	d9800215 	stw	r6,8(sp)
   2f0f0:	d9c00015 	stw	r7,0(sp)
   2f0f4:	da400115 	stw	r9,4(sp)
   2f0f8:	002fd340 	call	2fd34 <__clzsi2>
   2f0fc:	10800804 	addi	r2,r2,32
   2f100:	da400117 	ldw	r9,4(sp)
   2f104:	d9c00017 	ldw	r7,0(sp)
   2f108:	d9800217 	ldw	r6,8(sp)
   2f10c:	003f0306 	br	2ed1c <__alt_data_end+0xfffeed1c>
   2f110:	00c00044 	movi	r3,1
   2f114:	1947c83a 	sub	r3,r3,r5
   2f118:	00800e04 	movi	r2,56
   2f11c:	10feda16 	blt	r2,r3,2ec88 <__alt_data_end+0xfffeec88>
   2f120:	008007c4 	movi	r2,31
   2f124:	10c01b16 	blt	r2,r3,2f194 <__muldf3+0x678>
   2f128:	00800804 	movi	r2,32
   2f12c:	10c5c83a 	sub	r2,r2,r3
   2f130:	888a983a 	sll	r5,r17,r2
   2f134:	40c8d83a 	srl	r4,r8,r3
   2f138:	4084983a 	sll	r2,r8,r2
   2f13c:	88e2d83a 	srl	r17,r17,r3
   2f140:	2906b03a 	or	r3,r5,r4
   2f144:	1004c03a 	cmpne	r2,r2,zero
   2f148:	1886b03a 	or	r3,r3,r2
   2f14c:	188001cc 	andi	r2,r3,7
   2f150:	10000726 	beq	r2,zero,2f170 <__muldf3+0x654>
   2f154:	188003cc 	andi	r2,r3,15
   2f158:	01000104 	movi	r4,4
   2f15c:	11000426 	beq	r2,r4,2f170 <__muldf3+0x654>
   2f160:	1805883a 	mov	r2,r3
   2f164:	10c00104 	addi	r3,r2,4
   2f168:	1885803a 	cmpltu	r2,r3,r2
   2f16c:	88a3883a 	add	r17,r17,r2
   2f170:	8880202c 	andhi	r2,r17,128
   2f174:	10001c26 	beq	r2,zero,2f1e8 <__muldf3+0x6cc>
   2f178:	b02b883a 	mov	r21,r22
   2f17c:	00800044 	movi	r2,1
   2f180:	000b883a 	mov	r5,zero
   2f184:	0029883a 	mov	r20,zero
   2f188:	003ec306 	br	2ec98 <__alt_data_end+0xfffeec98>
   2f18c:	5805883a 	mov	r2,r11
   2f190:	003f9906 	br	2eff8 <__alt_data_end+0xfffeeff8>
   2f194:	00bff844 	movi	r2,-31
   2f198:	1145c83a 	sub	r2,r2,r5
   2f19c:	8888d83a 	srl	r4,r17,r2
   2f1a0:	00800804 	movi	r2,32
   2f1a4:	18801a26 	beq	r3,r2,2f210 <__muldf3+0x6f4>
   2f1a8:	00801004 	movi	r2,64
   2f1ac:	10c5c83a 	sub	r2,r2,r3
   2f1b0:	8884983a 	sll	r2,r17,r2
   2f1b4:	1204b03a 	or	r2,r2,r8
   2f1b8:	1004c03a 	cmpne	r2,r2,zero
   2f1bc:	2084b03a 	or	r2,r4,r2
   2f1c0:	144001cc 	andi	r17,r2,7
   2f1c4:	88000d1e 	bne	r17,zero,2f1fc <__muldf3+0x6e0>
   2f1c8:	000b883a 	mov	r5,zero
   2f1cc:	1028d0fa 	srli	r20,r2,3
   2f1d0:	b02b883a 	mov	r21,r22
   2f1d4:	0005883a 	mov	r2,zero
   2f1d8:	a468b03a 	or	r20,r20,r17
   2f1dc:	003eae06 	br	2ec98 <__alt_data_end+0xfffeec98>
   2f1e0:	1007883a 	mov	r3,r2
   2f1e4:	0023883a 	mov	r17,zero
   2f1e8:	880a927a 	slli	r5,r17,9
   2f1ec:	1805883a 	mov	r2,r3
   2f1f0:	8822977a 	slli	r17,r17,29
   2f1f4:	280ad33a 	srli	r5,r5,12
   2f1f8:	003ff406 	br	2f1cc <__alt_data_end+0xfffef1cc>
   2f1fc:	10c003cc 	andi	r3,r2,15
   2f200:	01000104 	movi	r4,4
   2f204:	193ff626 	beq	r3,r4,2f1e0 <__alt_data_end+0xfffef1e0>
   2f208:	0023883a 	mov	r17,zero
   2f20c:	003fd506 	br	2f164 <__alt_data_end+0xfffef164>
   2f210:	0005883a 	mov	r2,zero
   2f214:	003fe706 	br	2f1b4 <__alt_data_end+0xfffef1b4>
   2f218:	00800434 	movhi	r2,16
   2f21c:	89400234 	orhi	r5,r17,8
   2f220:	10bfffc4 	addi	r2,r2,-1
   2f224:	b02b883a 	mov	r21,r22
   2f228:	288a703a 	and	r5,r5,r2
   2f22c:	4029883a 	mov	r20,r8
   2f230:	003eff06 	br	2ee30 <__alt_data_end+0xfffeee30>

0002f234 <__subdf3>:
   2f234:	02000434 	movhi	r8,16
   2f238:	423fffc4 	addi	r8,r8,-1
   2f23c:	defffb04 	addi	sp,sp,-20
   2f240:	2a14703a 	and	r10,r5,r8
   2f244:	3812d53a 	srli	r9,r7,20
   2f248:	3a10703a 	and	r8,r7,r8
   2f24c:	2006d77a 	srli	r3,r4,29
   2f250:	3004d77a 	srli	r2,r6,29
   2f254:	dc000015 	stw	r16,0(sp)
   2f258:	501490fa 	slli	r10,r10,3
   2f25c:	2820d53a 	srli	r16,r5,20
   2f260:	401090fa 	slli	r8,r8,3
   2f264:	dc800215 	stw	r18,8(sp)
   2f268:	dc400115 	stw	r17,4(sp)
   2f26c:	dfc00415 	stw	ra,16(sp)
   2f270:	202290fa 	slli	r17,r4,3
   2f274:	dcc00315 	stw	r19,12(sp)
   2f278:	4a41ffcc 	andi	r9,r9,2047
   2f27c:	0101ffc4 	movi	r4,2047
   2f280:	2824d7fa 	srli	r18,r5,31
   2f284:	8401ffcc 	andi	r16,r16,2047
   2f288:	50c6b03a 	or	r3,r10,r3
   2f28c:	380ed7fa 	srli	r7,r7,31
   2f290:	408ab03a 	or	r5,r8,r2
   2f294:	300c90fa 	slli	r6,r6,3
   2f298:	49009626 	beq	r9,r4,2f4f4 <__subdf3+0x2c0>
   2f29c:	39c0005c 	xori	r7,r7,1
   2f2a0:	8245c83a 	sub	r2,r16,r9
   2f2a4:	3c807426 	beq	r7,r18,2f478 <__subdf3+0x244>
   2f2a8:	0080af0e 	bge	zero,r2,2f568 <__subdf3+0x334>
   2f2ac:	48002a1e 	bne	r9,zero,2f358 <__subdf3+0x124>
   2f2b0:	2988b03a 	or	r4,r5,r6
   2f2b4:	20009a1e 	bne	r4,zero,2f520 <__subdf3+0x2ec>
   2f2b8:	888001cc 	andi	r2,r17,7
   2f2bc:	10000726 	beq	r2,zero,2f2dc <__subdf3+0xa8>
   2f2c0:	888003cc 	andi	r2,r17,15
   2f2c4:	01000104 	movi	r4,4
   2f2c8:	11000426 	beq	r2,r4,2f2dc <__subdf3+0xa8>
   2f2cc:	890b883a 	add	r5,r17,r4
   2f2d0:	2c63803a 	cmpltu	r17,r5,r17
   2f2d4:	1c47883a 	add	r3,r3,r17
   2f2d8:	2823883a 	mov	r17,r5
   2f2dc:	1880202c 	andhi	r2,r3,128
   2f2e0:	10005926 	beq	r2,zero,2f448 <__subdf3+0x214>
   2f2e4:	84000044 	addi	r16,r16,1
   2f2e8:	0081ffc4 	movi	r2,2047
   2f2ec:	8080be26 	beq	r16,r2,2f5e8 <__subdf3+0x3b4>
   2f2f0:	017fe034 	movhi	r5,65408
   2f2f4:	297fffc4 	addi	r5,r5,-1
   2f2f8:	1946703a 	and	r3,r3,r5
   2f2fc:	1804977a 	slli	r2,r3,29
   2f300:	1806927a 	slli	r3,r3,9
   2f304:	8822d0fa 	srli	r17,r17,3
   2f308:	8401ffcc 	andi	r16,r16,2047
   2f30c:	180ad33a 	srli	r5,r3,12
   2f310:	9100004c 	andi	r4,r18,1
   2f314:	1444b03a 	or	r2,r2,r17
   2f318:	80c1ffcc 	andi	r3,r16,2047
   2f31c:	1820953a 	slli	r16,r3,20
   2f320:	20c03fcc 	andi	r3,r4,255
   2f324:	180897fa 	slli	r4,r3,31
   2f328:	00c00434 	movhi	r3,16
   2f32c:	18ffffc4 	addi	r3,r3,-1
   2f330:	28c6703a 	and	r3,r5,r3
   2f334:	1c06b03a 	or	r3,r3,r16
   2f338:	1906b03a 	or	r3,r3,r4
   2f33c:	dfc00417 	ldw	ra,16(sp)
   2f340:	dcc00317 	ldw	r19,12(sp)
   2f344:	dc800217 	ldw	r18,8(sp)
   2f348:	dc400117 	ldw	r17,4(sp)
   2f34c:	dc000017 	ldw	r16,0(sp)
   2f350:	dec00504 	addi	sp,sp,20
   2f354:	f800283a 	ret
   2f358:	0101ffc4 	movi	r4,2047
   2f35c:	813fd626 	beq	r16,r4,2f2b8 <__alt_data_end+0xfffef2b8>
   2f360:	29402034 	orhi	r5,r5,128
   2f364:	01000e04 	movi	r4,56
   2f368:	2080a316 	blt	r4,r2,2f5f8 <__subdf3+0x3c4>
   2f36c:	010007c4 	movi	r4,31
   2f370:	2080c616 	blt	r4,r2,2f68c <__subdf3+0x458>
   2f374:	01000804 	movi	r4,32
   2f378:	2089c83a 	sub	r4,r4,r2
   2f37c:	2910983a 	sll	r8,r5,r4
   2f380:	308ed83a 	srl	r7,r6,r2
   2f384:	3108983a 	sll	r4,r6,r4
   2f388:	2884d83a 	srl	r2,r5,r2
   2f38c:	41ccb03a 	or	r6,r8,r7
   2f390:	2008c03a 	cmpne	r4,r4,zero
   2f394:	310cb03a 	or	r6,r6,r4
   2f398:	898dc83a 	sub	r6,r17,r6
   2f39c:	89a3803a 	cmpltu	r17,r17,r6
   2f3a0:	1887c83a 	sub	r3,r3,r2
   2f3a4:	1c47c83a 	sub	r3,r3,r17
   2f3a8:	3023883a 	mov	r17,r6
   2f3ac:	1880202c 	andhi	r2,r3,128
   2f3b0:	10002326 	beq	r2,zero,2f440 <__subdf3+0x20c>
   2f3b4:	04c02034 	movhi	r19,128
   2f3b8:	9cffffc4 	addi	r19,r19,-1
   2f3bc:	1ce6703a 	and	r19,r3,r19
   2f3c0:	98007a26 	beq	r19,zero,2f5ac <__subdf3+0x378>
   2f3c4:	9809883a 	mov	r4,r19
   2f3c8:	002fd340 	call	2fd34 <__clzsi2>
   2f3cc:	113ffe04 	addi	r4,r2,-8
   2f3d0:	00c007c4 	movi	r3,31
   2f3d4:	19007b16 	blt	r3,r4,2f5c4 <__subdf3+0x390>
   2f3d8:	00800804 	movi	r2,32
   2f3dc:	1105c83a 	sub	r2,r2,r4
   2f3e0:	8884d83a 	srl	r2,r17,r2
   2f3e4:	9906983a 	sll	r3,r19,r4
   2f3e8:	8922983a 	sll	r17,r17,r4
   2f3ec:	10c4b03a 	or	r2,r2,r3
   2f3f0:	24007816 	blt	r4,r16,2f5d4 <__subdf3+0x3a0>
   2f3f4:	2421c83a 	sub	r16,r4,r16
   2f3f8:	80c00044 	addi	r3,r16,1
   2f3fc:	010007c4 	movi	r4,31
   2f400:	20c09516 	blt	r4,r3,2f658 <__subdf3+0x424>
   2f404:	01400804 	movi	r5,32
   2f408:	28cbc83a 	sub	r5,r5,r3
   2f40c:	88c8d83a 	srl	r4,r17,r3
   2f410:	8962983a 	sll	r17,r17,r5
   2f414:	114a983a 	sll	r5,r2,r5
   2f418:	10c6d83a 	srl	r3,r2,r3
   2f41c:	8804c03a 	cmpne	r2,r17,zero
   2f420:	290ab03a 	or	r5,r5,r4
   2f424:	28a2b03a 	or	r17,r5,r2
   2f428:	0021883a 	mov	r16,zero
   2f42c:	003fa206 	br	2f2b8 <__alt_data_end+0xfffef2b8>
   2f430:	2090b03a 	or	r8,r4,r2
   2f434:	40018e26 	beq	r8,zero,2fa70 <__subdf3+0x83c>
   2f438:	1007883a 	mov	r3,r2
   2f43c:	2023883a 	mov	r17,r4
   2f440:	888001cc 	andi	r2,r17,7
   2f444:	103f9e1e 	bne	r2,zero,2f2c0 <__alt_data_end+0xfffef2c0>
   2f448:	1804977a 	slli	r2,r3,29
   2f44c:	8822d0fa 	srli	r17,r17,3
   2f450:	1810d0fa 	srli	r8,r3,3
   2f454:	9100004c 	andi	r4,r18,1
   2f458:	1444b03a 	or	r2,r2,r17
   2f45c:	00c1ffc4 	movi	r3,2047
   2f460:	80c02826 	beq	r16,r3,2f504 <__subdf3+0x2d0>
   2f464:	01400434 	movhi	r5,16
   2f468:	297fffc4 	addi	r5,r5,-1
   2f46c:	80e0703a 	and	r16,r16,r3
   2f470:	414a703a 	and	r5,r8,r5
   2f474:	003fa806 	br	2f318 <__alt_data_end+0xfffef318>
   2f478:	0080630e 	bge	zero,r2,2f608 <__subdf3+0x3d4>
   2f47c:	48003026 	beq	r9,zero,2f540 <__subdf3+0x30c>
   2f480:	0101ffc4 	movi	r4,2047
   2f484:	813f8c26 	beq	r16,r4,2f2b8 <__alt_data_end+0xfffef2b8>
   2f488:	29402034 	orhi	r5,r5,128
   2f48c:	01000e04 	movi	r4,56
   2f490:	2080a90e 	bge	r4,r2,2f738 <__subdf3+0x504>
   2f494:	298cb03a 	or	r6,r5,r6
   2f498:	3012c03a 	cmpne	r9,r6,zero
   2f49c:	0005883a 	mov	r2,zero
   2f4a0:	4c53883a 	add	r9,r9,r17
   2f4a4:	4c63803a 	cmpltu	r17,r9,r17
   2f4a8:	10c7883a 	add	r3,r2,r3
   2f4ac:	88c7883a 	add	r3,r17,r3
   2f4b0:	4823883a 	mov	r17,r9
   2f4b4:	1880202c 	andhi	r2,r3,128
   2f4b8:	1000d026 	beq	r2,zero,2f7fc <__subdf3+0x5c8>
   2f4bc:	84000044 	addi	r16,r16,1
   2f4c0:	0081ffc4 	movi	r2,2047
   2f4c4:	8080fe26 	beq	r16,r2,2f8c0 <__subdf3+0x68c>
   2f4c8:	00bfe034 	movhi	r2,65408
   2f4cc:	10bfffc4 	addi	r2,r2,-1
   2f4d0:	1886703a 	and	r3,r3,r2
   2f4d4:	880ad07a 	srli	r5,r17,1
   2f4d8:	180497fa 	slli	r2,r3,31
   2f4dc:	8900004c 	andi	r4,r17,1
   2f4e0:	2922b03a 	or	r17,r5,r4
   2f4e4:	1806d07a 	srli	r3,r3,1
   2f4e8:	1462b03a 	or	r17,r2,r17
   2f4ec:	3825883a 	mov	r18,r7
   2f4f0:	003f7106 	br	2f2b8 <__alt_data_end+0xfffef2b8>
   2f4f4:	2984b03a 	or	r2,r5,r6
   2f4f8:	103f6826 	beq	r2,zero,2f29c <__alt_data_end+0xfffef29c>
   2f4fc:	39c03fcc 	andi	r7,r7,255
   2f500:	003f6706 	br	2f2a0 <__alt_data_end+0xfffef2a0>
   2f504:	4086b03a 	or	r3,r8,r2
   2f508:	18015226 	beq	r3,zero,2fa54 <__subdf3+0x820>
   2f50c:	00c00434 	movhi	r3,16
   2f510:	41400234 	orhi	r5,r8,8
   2f514:	18ffffc4 	addi	r3,r3,-1
   2f518:	28ca703a 	and	r5,r5,r3
   2f51c:	003f7e06 	br	2f318 <__alt_data_end+0xfffef318>
   2f520:	10bfffc4 	addi	r2,r2,-1
   2f524:	1000491e 	bne	r2,zero,2f64c <__subdf3+0x418>
   2f528:	898fc83a 	sub	r7,r17,r6
   2f52c:	89e3803a 	cmpltu	r17,r17,r7
   2f530:	1947c83a 	sub	r3,r3,r5
   2f534:	1c47c83a 	sub	r3,r3,r17
   2f538:	3823883a 	mov	r17,r7
   2f53c:	003f9b06 	br	2f3ac <__alt_data_end+0xfffef3ac>
   2f540:	2988b03a 	or	r4,r5,r6
   2f544:	203f5c26 	beq	r4,zero,2f2b8 <__alt_data_end+0xfffef2b8>
   2f548:	10bfffc4 	addi	r2,r2,-1
   2f54c:	1000931e 	bne	r2,zero,2f79c <__subdf3+0x568>
   2f550:	898d883a 	add	r6,r17,r6
   2f554:	3463803a 	cmpltu	r17,r6,r17
   2f558:	1947883a 	add	r3,r3,r5
   2f55c:	88c7883a 	add	r3,r17,r3
   2f560:	3023883a 	mov	r17,r6
   2f564:	003fd306 	br	2f4b4 <__alt_data_end+0xfffef4b4>
   2f568:	1000541e 	bne	r2,zero,2f6bc <__subdf3+0x488>
   2f56c:	80800044 	addi	r2,r16,1
   2f570:	1081ffcc 	andi	r2,r2,2047
   2f574:	01000044 	movi	r4,1
   2f578:	2080a20e 	bge	r4,r2,2f804 <__subdf3+0x5d0>
   2f57c:	8989c83a 	sub	r4,r17,r6
   2f580:	8905803a 	cmpltu	r2,r17,r4
   2f584:	1967c83a 	sub	r19,r3,r5
   2f588:	98a7c83a 	sub	r19,r19,r2
   2f58c:	9880202c 	andhi	r2,r19,128
   2f590:	10006326 	beq	r2,zero,2f720 <__subdf3+0x4ec>
   2f594:	3463c83a 	sub	r17,r6,r17
   2f598:	28c7c83a 	sub	r3,r5,r3
   2f59c:	344d803a 	cmpltu	r6,r6,r17
   2f5a0:	19a7c83a 	sub	r19,r3,r6
   2f5a4:	3825883a 	mov	r18,r7
   2f5a8:	983f861e 	bne	r19,zero,2f3c4 <__alt_data_end+0xfffef3c4>
   2f5ac:	8809883a 	mov	r4,r17
   2f5b0:	002fd340 	call	2fd34 <__clzsi2>
   2f5b4:	10800804 	addi	r2,r2,32
   2f5b8:	113ffe04 	addi	r4,r2,-8
   2f5bc:	00c007c4 	movi	r3,31
   2f5c0:	193f850e 	bge	r3,r4,2f3d8 <__alt_data_end+0xfffef3d8>
   2f5c4:	10bff604 	addi	r2,r2,-40
   2f5c8:	8884983a 	sll	r2,r17,r2
   2f5cc:	0023883a 	mov	r17,zero
   2f5d0:	243f880e 	bge	r4,r16,2f3f4 <__alt_data_end+0xfffef3f4>
   2f5d4:	00ffe034 	movhi	r3,65408
   2f5d8:	18ffffc4 	addi	r3,r3,-1
   2f5dc:	8121c83a 	sub	r16,r16,r4
   2f5e0:	10c6703a 	and	r3,r2,r3
   2f5e4:	003f3406 	br	2f2b8 <__alt_data_end+0xfffef2b8>
   2f5e8:	9100004c 	andi	r4,r18,1
   2f5ec:	000b883a 	mov	r5,zero
   2f5f0:	0005883a 	mov	r2,zero
   2f5f4:	003f4806 	br	2f318 <__alt_data_end+0xfffef318>
   2f5f8:	298cb03a 	or	r6,r5,r6
   2f5fc:	300cc03a 	cmpne	r6,r6,zero
   2f600:	0005883a 	mov	r2,zero
   2f604:	003f6406 	br	2f398 <__alt_data_end+0xfffef398>
   2f608:	10009a1e 	bne	r2,zero,2f874 <__subdf3+0x640>
   2f60c:	82400044 	addi	r9,r16,1
   2f610:	4881ffcc 	andi	r2,r9,2047
   2f614:	02800044 	movi	r10,1
   2f618:	5080670e 	bge	r10,r2,2f7b8 <__subdf3+0x584>
   2f61c:	0081ffc4 	movi	r2,2047
   2f620:	4880af26 	beq	r9,r2,2f8e0 <__subdf3+0x6ac>
   2f624:	898d883a 	add	r6,r17,r6
   2f628:	1945883a 	add	r2,r3,r5
   2f62c:	3447803a 	cmpltu	r3,r6,r17
   2f630:	1887883a 	add	r3,r3,r2
   2f634:	182297fa 	slli	r17,r3,31
   2f638:	300cd07a 	srli	r6,r6,1
   2f63c:	1806d07a 	srli	r3,r3,1
   2f640:	4821883a 	mov	r16,r9
   2f644:	89a2b03a 	or	r17,r17,r6
   2f648:	003f1b06 	br	2f2b8 <__alt_data_end+0xfffef2b8>
   2f64c:	0101ffc4 	movi	r4,2047
   2f650:	813f441e 	bne	r16,r4,2f364 <__alt_data_end+0xfffef364>
   2f654:	003f1806 	br	2f2b8 <__alt_data_end+0xfffef2b8>
   2f658:	843ff844 	addi	r16,r16,-31
   2f65c:	01400804 	movi	r5,32
   2f660:	1408d83a 	srl	r4,r2,r16
   2f664:	19405026 	beq	r3,r5,2f7a8 <__subdf3+0x574>
   2f668:	01401004 	movi	r5,64
   2f66c:	28c7c83a 	sub	r3,r5,r3
   2f670:	10c4983a 	sll	r2,r2,r3
   2f674:	88a2b03a 	or	r17,r17,r2
   2f678:	8822c03a 	cmpne	r17,r17,zero
   2f67c:	2462b03a 	or	r17,r4,r17
   2f680:	0007883a 	mov	r3,zero
   2f684:	0021883a 	mov	r16,zero
   2f688:	003f6d06 	br	2f440 <__alt_data_end+0xfffef440>
   2f68c:	11fff804 	addi	r7,r2,-32
   2f690:	01000804 	movi	r4,32
   2f694:	29ced83a 	srl	r7,r5,r7
   2f698:	11004526 	beq	r2,r4,2f7b0 <__subdf3+0x57c>
   2f69c:	01001004 	movi	r4,64
   2f6a0:	2089c83a 	sub	r4,r4,r2
   2f6a4:	2904983a 	sll	r2,r5,r4
   2f6a8:	118cb03a 	or	r6,r2,r6
   2f6ac:	300cc03a 	cmpne	r6,r6,zero
   2f6b0:	398cb03a 	or	r6,r7,r6
   2f6b4:	0005883a 	mov	r2,zero
   2f6b8:	003f3706 	br	2f398 <__alt_data_end+0xfffef398>
   2f6bc:	80002a26 	beq	r16,zero,2f768 <__subdf3+0x534>
   2f6c0:	0101ffc4 	movi	r4,2047
   2f6c4:	49006626 	beq	r9,r4,2f860 <__subdf3+0x62c>
   2f6c8:	0085c83a 	sub	r2,zero,r2
   2f6cc:	18c02034 	orhi	r3,r3,128
   2f6d0:	01000e04 	movi	r4,56
   2f6d4:	20807e16 	blt	r4,r2,2f8d0 <__subdf3+0x69c>
   2f6d8:	010007c4 	movi	r4,31
   2f6dc:	2080e716 	blt	r4,r2,2fa7c <__subdf3+0x848>
   2f6e0:	01000804 	movi	r4,32
   2f6e4:	2089c83a 	sub	r4,r4,r2
   2f6e8:	1914983a 	sll	r10,r3,r4
   2f6ec:	8890d83a 	srl	r8,r17,r2
   2f6f0:	8908983a 	sll	r4,r17,r4
   2f6f4:	1884d83a 	srl	r2,r3,r2
   2f6f8:	5222b03a 	or	r17,r10,r8
   2f6fc:	2006c03a 	cmpne	r3,r4,zero
   2f700:	88e2b03a 	or	r17,r17,r3
   2f704:	3463c83a 	sub	r17,r6,r17
   2f708:	2885c83a 	sub	r2,r5,r2
   2f70c:	344d803a 	cmpltu	r6,r6,r17
   2f710:	1187c83a 	sub	r3,r2,r6
   2f714:	4821883a 	mov	r16,r9
   2f718:	3825883a 	mov	r18,r7
   2f71c:	003f2306 	br	2f3ac <__alt_data_end+0xfffef3ac>
   2f720:	24d0b03a 	or	r8,r4,r19
   2f724:	40001b1e 	bne	r8,zero,2f794 <__subdf3+0x560>
   2f728:	0005883a 	mov	r2,zero
   2f72c:	0009883a 	mov	r4,zero
   2f730:	0021883a 	mov	r16,zero
   2f734:	003f4906 	br	2f45c <__alt_data_end+0xfffef45c>
   2f738:	010007c4 	movi	r4,31
   2f73c:	20803a16 	blt	r4,r2,2f828 <__subdf3+0x5f4>
   2f740:	01000804 	movi	r4,32
   2f744:	2089c83a 	sub	r4,r4,r2
   2f748:	2912983a 	sll	r9,r5,r4
   2f74c:	3090d83a 	srl	r8,r6,r2
   2f750:	3108983a 	sll	r4,r6,r4
   2f754:	2884d83a 	srl	r2,r5,r2
   2f758:	4a12b03a 	or	r9,r9,r8
   2f75c:	2008c03a 	cmpne	r4,r4,zero
   2f760:	4912b03a 	or	r9,r9,r4
   2f764:	003f4e06 	br	2f4a0 <__alt_data_end+0xfffef4a0>
   2f768:	1c48b03a 	or	r4,r3,r17
   2f76c:	20003c26 	beq	r4,zero,2f860 <__subdf3+0x62c>
   2f770:	0084303a 	nor	r2,zero,r2
   2f774:	1000381e 	bne	r2,zero,2f858 <__subdf3+0x624>
   2f778:	3463c83a 	sub	r17,r6,r17
   2f77c:	28c5c83a 	sub	r2,r5,r3
   2f780:	344d803a 	cmpltu	r6,r6,r17
   2f784:	1187c83a 	sub	r3,r2,r6
   2f788:	4821883a 	mov	r16,r9
   2f78c:	3825883a 	mov	r18,r7
   2f790:	003f0606 	br	2f3ac <__alt_data_end+0xfffef3ac>
   2f794:	2023883a 	mov	r17,r4
   2f798:	003f0906 	br	2f3c0 <__alt_data_end+0xfffef3c0>
   2f79c:	0101ffc4 	movi	r4,2047
   2f7a0:	813f3a1e 	bne	r16,r4,2f48c <__alt_data_end+0xfffef48c>
   2f7a4:	003ec406 	br	2f2b8 <__alt_data_end+0xfffef2b8>
   2f7a8:	0005883a 	mov	r2,zero
   2f7ac:	003fb106 	br	2f674 <__alt_data_end+0xfffef674>
   2f7b0:	0005883a 	mov	r2,zero
   2f7b4:	003fbc06 	br	2f6a8 <__alt_data_end+0xfffef6a8>
   2f7b8:	1c44b03a 	or	r2,r3,r17
   2f7bc:	80008e1e 	bne	r16,zero,2f9f8 <__subdf3+0x7c4>
   2f7c0:	1000c826 	beq	r2,zero,2fae4 <__subdf3+0x8b0>
   2f7c4:	2984b03a 	or	r2,r5,r6
   2f7c8:	103ebb26 	beq	r2,zero,2f2b8 <__alt_data_end+0xfffef2b8>
   2f7cc:	8989883a 	add	r4,r17,r6
   2f7d0:	1945883a 	add	r2,r3,r5
   2f7d4:	2447803a 	cmpltu	r3,r4,r17
   2f7d8:	1887883a 	add	r3,r3,r2
   2f7dc:	1880202c 	andhi	r2,r3,128
   2f7e0:	2023883a 	mov	r17,r4
   2f7e4:	103f1626 	beq	r2,zero,2f440 <__alt_data_end+0xfffef440>
   2f7e8:	00bfe034 	movhi	r2,65408
   2f7ec:	10bfffc4 	addi	r2,r2,-1
   2f7f0:	5021883a 	mov	r16,r10
   2f7f4:	1886703a 	and	r3,r3,r2
   2f7f8:	003eaf06 	br	2f2b8 <__alt_data_end+0xfffef2b8>
   2f7fc:	3825883a 	mov	r18,r7
   2f800:	003f0f06 	br	2f440 <__alt_data_end+0xfffef440>
   2f804:	1c44b03a 	or	r2,r3,r17
   2f808:	8000251e 	bne	r16,zero,2f8a0 <__subdf3+0x66c>
   2f80c:	1000661e 	bne	r2,zero,2f9a8 <__subdf3+0x774>
   2f810:	2990b03a 	or	r8,r5,r6
   2f814:	40009626 	beq	r8,zero,2fa70 <__subdf3+0x83c>
   2f818:	2807883a 	mov	r3,r5
   2f81c:	3023883a 	mov	r17,r6
   2f820:	3825883a 	mov	r18,r7
   2f824:	003ea406 	br	2f2b8 <__alt_data_end+0xfffef2b8>
   2f828:	127ff804 	addi	r9,r2,-32
   2f82c:	01000804 	movi	r4,32
   2f830:	2a52d83a 	srl	r9,r5,r9
   2f834:	11008c26 	beq	r2,r4,2fa68 <__subdf3+0x834>
   2f838:	01001004 	movi	r4,64
   2f83c:	2085c83a 	sub	r2,r4,r2
   2f840:	2884983a 	sll	r2,r5,r2
   2f844:	118cb03a 	or	r6,r2,r6
   2f848:	300cc03a 	cmpne	r6,r6,zero
   2f84c:	4992b03a 	or	r9,r9,r6
   2f850:	0005883a 	mov	r2,zero
   2f854:	003f1206 	br	2f4a0 <__alt_data_end+0xfffef4a0>
   2f858:	0101ffc4 	movi	r4,2047
   2f85c:	493f9c1e 	bne	r9,r4,2f6d0 <__alt_data_end+0xfffef6d0>
   2f860:	2807883a 	mov	r3,r5
   2f864:	3023883a 	mov	r17,r6
   2f868:	4821883a 	mov	r16,r9
   2f86c:	3825883a 	mov	r18,r7
   2f870:	003e9106 	br	2f2b8 <__alt_data_end+0xfffef2b8>
   2f874:	80001f1e 	bne	r16,zero,2f8f4 <__subdf3+0x6c0>
   2f878:	1c48b03a 	or	r4,r3,r17
   2f87c:	20005a26 	beq	r4,zero,2f9e8 <__subdf3+0x7b4>
   2f880:	0084303a 	nor	r2,zero,r2
   2f884:	1000561e 	bne	r2,zero,2f9e0 <__subdf3+0x7ac>
   2f888:	89a3883a 	add	r17,r17,r6
   2f88c:	1945883a 	add	r2,r3,r5
   2f890:	898d803a 	cmpltu	r6,r17,r6
   2f894:	3087883a 	add	r3,r6,r2
   2f898:	4821883a 	mov	r16,r9
   2f89c:	003f0506 	br	2f4b4 <__alt_data_end+0xfffef4b4>
   2f8a0:	10002b1e 	bne	r2,zero,2f950 <__subdf3+0x71c>
   2f8a4:	2984b03a 	or	r2,r5,r6
   2f8a8:	10008026 	beq	r2,zero,2faac <__subdf3+0x878>
   2f8ac:	2807883a 	mov	r3,r5
   2f8b0:	3023883a 	mov	r17,r6
   2f8b4:	3825883a 	mov	r18,r7
   2f8b8:	0401ffc4 	movi	r16,2047
   2f8bc:	003e7e06 	br	2f2b8 <__alt_data_end+0xfffef2b8>
   2f8c0:	3809883a 	mov	r4,r7
   2f8c4:	0011883a 	mov	r8,zero
   2f8c8:	0005883a 	mov	r2,zero
   2f8cc:	003ee306 	br	2f45c <__alt_data_end+0xfffef45c>
   2f8d0:	1c62b03a 	or	r17,r3,r17
   2f8d4:	8822c03a 	cmpne	r17,r17,zero
   2f8d8:	0005883a 	mov	r2,zero
   2f8dc:	003f8906 	br	2f704 <__alt_data_end+0xfffef704>
   2f8e0:	3809883a 	mov	r4,r7
   2f8e4:	4821883a 	mov	r16,r9
   2f8e8:	0011883a 	mov	r8,zero
   2f8ec:	0005883a 	mov	r2,zero
   2f8f0:	003eda06 	br	2f45c <__alt_data_end+0xfffef45c>
   2f8f4:	0101ffc4 	movi	r4,2047
   2f8f8:	49003b26 	beq	r9,r4,2f9e8 <__subdf3+0x7b4>
   2f8fc:	0085c83a 	sub	r2,zero,r2
   2f900:	18c02034 	orhi	r3,r3,128
   2f904:	01000e04 	movi	r4,56
   2f908:	20806e16 	blt	r4,r2,2fac4 <__subdf3+0x890>
   2f90c:	010007c4 	movi	r4,31
   2f910:	20807716 	blt	r4,r2,2faf0 <__subdf3+0x8bc>
   2f914:	01000804 	movi	r4,32
   2f918:	2089c83a 	sub	r4,r4,r2
   2f91c:	1914983a 	sll	r10,r3,r4
   2f920:	8890d83a 	srl	r8,r17,r2
   2f924:	8908983a 	sll	r4,r17,r4
   2f928:	1884d83a 	srl	r2,r3,r2
   2f92c:	5222b03a 	or	r17,r10,r8
   2f930:	2006c03a 	cmpne	r3,r4,zero
   2f934:	88e2b03a 	or	r17,r17,r3
   2f938:	89a3883a 	add	r17,r17,r6
   2f93c:	1145883a 	add	r2,r2,r5
   2f940:	898d803a 	cmpltu	r6,r17,r6
   2f944:	3087883a 	add	r3,r6,r2
   2f948:	4821883a 	mov	r16,r9
   2f94c:	003ed906 	br	2f4b4 <__alt_data_end+0xfffef4b4>
   2f950:	2984b03a 	or	r2,r5,r6
   2f954:	10004226 	beq	r2,zero,2fa60 <__subdf3+0x82c>
   2f958:	1808d0fa 	srli	r4,r3,3
   2f95c:	8822d0fa 	srli	r17,r17,3
   2f960:	1806977a 	slli	r3,r3,29
   2f964:	2080022c 	andhi	r2,r4,8
   2f968:	1c62b03a 	or	r17,r3,r17
   2f96c:	10000826 	beq	r2,zero,2f990 <__subdf3+0x75c>
   2f970:	2812d0fa 	srli	r9,r5,3
   2f974:	4880022c 	andhi	r2,r9,8
   2f978:	1000051e 	bne	r2,zero,2f990 <__subdf3+0x75c>
   2f97c:	300cd0fa 	srli	r6,r6,3
   2f980:	2804977a 	slli	r2,r5,29
   2f984:	4809883a 	mov	r4,r9
   2f988:	3825883a 	mov	r18,r7
   2f98c:	11a2b03a 	or	r17,r2,r6
   2f990:	8806d77a 	srli	r3,r17,29
   2f994:	200890fa 	slli	r4,r4,3
   2f998:	882290fa 	slli	r17,r17,3
   2f99c:	0401ffc4 	movi	r16,2047
   2f9a0:	1906b03a 	or	r3,r3,r4
   2f9a4:	003e4406 	br	2f2b8 <__alt_data_end+0xfffef2b8>
   2f9a8:	2984b03a 	or	r2,r5,r6
   2f9ac:	103e4226 	beq	r2,zero,2f2b8 <__alt_data_end+0xfffef2b8>
   2f9b0:	8989c83a 	sub	r4,r17,r6
   2f9b4:	8911803a 	cmpltu	r8,r17,r4
   2f9b8:	1945c83a 	sub	r2,r3,r5
   2f9bc:	1205c83a 	sub	r2,r2,r8
   2f9c0:	1200202c 	andhi	r8,r2,128
   2f9c4:	403e9a26 	beq	r8,zero,2f430 <__alt_data_end+0xfffef430>
   2f9c8:	3463c83a 	sub	r17,r6,r17
   2f9cc:	28c5c83a 	sub	r2,r5,r3
   2f9d0:	344d803a 	cmpltu	r6,r6,r17
   2f9d4:	1187c83a 	sub	r3,r2,r6
   2f9d8:	3825883a 	mov	r18,r7
   2f9dc:	003e3606 	br	2f2b8 <__alt_data_end+0xfffef2b8>
   2f9e0:	0101ffc4 	movi	r4,2047
   2f9e4:	493fc71e 	bne	r9,r4,2f904 <__alt_data_end+0xfffef904>
   2f9e8:	2807883a 	mov	r3,r5
   2f9ec:	3023883a 	mov	r17,r6
   2f9f0:	4821883a 	mov	r16,r9
   2f9f4:	003e3006 	br	2f2b8 <__alt_data_end+0xfffef2b8>
   2f9f8:	10003626 	beq	r2,zero,2fad4 <__subdf3+0x8a0>
   2f9fc:	2984b03a 	or	r2,r5,r6
   2fa00:	10001726 	beq	r2,zero,2fa60 <__subdf3+0x82c>
   2fa04:	1808d0fa 	srli	r4,r3,3
   2fa08:	8822d0fa 	srli	r17,r17,3
   2fa0c:	1806977a 	slli	r3,r3,29
   2fa10:	2080022c 	andhi	r2,r4,8
   2fa14:	1c62b03a 	or	r17,r3,r17
   2fa18:	10000726 	beq	r2,zero,2fa38 <__subdf3+0x804>
   2fa1c:	2812d0fa 	srli	r9,r5,3
   2fa20:	4880022c 	andhi	r2,r9,8
   2fa24:	1000041e 	bne	r2,zero,2fa38 <__subdf3+0x804>
   2fa28:	300cd0fa 	srli	r6,r6,3
   2fa2c:	2804977a 	slli	r2,r5,29
   2fa30:	4809883a 	mov	r4,r9
   2fa34:	11a2b03a 	or	r17,r2,r6
   2fa38:	8806d77a 	srli	r3,r17,29
   2fa3c:	200890fa 	slli	r4,r4,3
   2fa40:	882290fa 	slli	r17,r17,3
   2fa44:	3825883a 	mov	r18,r7
   2fa48:	1906b03a 	or	r3,r3,r4
   2fa4c:	0401ffc4 	movi	r16,2047
   2fa50:	003e1906 	br	2f2b8 <__alt_data_end+0xfffef2b8>
   2fa54:	000b883a 	mov	r5,zero
   2fa58:	0005883a 	mov	r2,zero
   2fa5c:	003e2e06 	br	2f318 <__alt_data_end+0xfffef318>
   2fa60:	0401ffc4 	movi	r16,2047
   2fa64:	003e1406 	br	2f2b8 <__alt_data_end+0xfffef2b8>
   2fa68:	0005883a 	mov	r2,zero
   2fa6c:	003f7506 	br	2f844 <__alt_data_end+0xfffef844>
   2fa70:	0005883a 	mov	r2,zero
   2fa74:	0009883a 	mov	r4,zero
   2fa78:	003e7806 	br	2f45c <__alt_data_end+0xfffef45c>
   2fa7c:	123ff804 	addi	r8,r2,-32
   2fa80:	01000804 	movi	r4,32
   2fa84:	1a10d83a 	srl	r8,r3,r8
   2fa88:	11002526 	beq	r2,r4,2fb20 <__subdf3+0x8ec>
   2fa8c:	01001004 	movi	r4,64
   2fa90:	2085c83a 	sub	r2,r4,r2
   2fa94:	1884983a 	sll	r2,r3,r2
   2fa98:	1444b03a 	or	r2,r2,r17
   2fa9c:	1004c03a 	cmpne	r2,r2,zero
   2faa0:	40a2b03a 	or	r17,r8,r2
   2faa4:	0005883a 	mov	r2,zero
   2faa8:	003f1606 	br	2f704 <__alt_data_end+0xfffef704>
   2faac:	02000434 	movhi	r8,16
   2fab0:	0009883a 	mov	r4,zero
   2fab4:	423fffc4 	addi	r8,r8,-1
   2fab8:	00bfffc4 	movi	r2,-1
   2fabc:	0401ffc4 	movi	r16,2047
   2fac0:	003e6606 	br	2f45c <__alt_data_end+0xfffef45c>
   2fac4:	1c62b03a 	or	r17,r3,r17
   2fac8:	8822c03a 	cmpne	r17,r17,zero
   2facc:	0005883a 	mov	r2,zero
   2fad0:	003f9906 	br	2f938 <__alt_data_end+0xfffef938>
   2fad4:	2807883a 	mov	r3,r5
   2fad8:	3023883a 	mov	r17,r6
   2fadc:	0401ffc4 	movi	r16,2047
   2fae0:	003df506 	br	2f2b8 <__alt_data_end+0xfffef2b8>
   2fae4:	2807883a 	mov	r3,r5
   2fae8:	3023883a 	mov	r17,r6
   2faec:	003df206 	br	2f2b8 <__alt_data_end+0xfffef2b8>
   2faf0:	123ff804 	addi	r8,r2,-32
   2faf4:	01000804 	movi	r4,32
   2faf8:	1a10d83a 	srl	r8,r3,r8
   2fafc:	11000a26 	beq	r2,r4,2fb28 <__subdf3+0x8f4>
   2fb00:	01001004 	movi	r4,64
   2fb04:	2085c83a 	sub	r2,r4,r2
   2fb08:	1884983a 	sll	r2,r3,r2
   2fb0c:	1444b03a 	or	r2,r2,r17
   2fb10:	1004c03a 	cmpne	r2,r2,zero
   2fb14:	40a2b03a 	or	r17,r8,r2
   2fb18:	0005883a 	mov	r2,zero
   2fb1c:	003f8606 	br	2f938 <__alt_data_end+0xfffef938>
   2fb20:	0005883a 	mov	r2,zero
   2fb24:	003fdc06 	br	2fa98 <__alt_data_end+0xfffefa98>
   2fb28:	0005883a 	mov	r2,zero
   2fb2c:	003ff706 	br	2fb0c <__alt_data_end+0xfffefb0c>

0002fb30 <__fixdfsi>:
   2fb30:	280cd53a 	srli	r6,r5,20
   2fb34:	00c00434 	movhi	r3,16
   2fb38:	18ffffc4 	addi	r3,r3,-1
   2fb3c:	3181ffcc 	andi	r6,r6,2047
   2fb40:	01c0ff84 	movi	r7,1022
   2fb44:	28c6703a 	and	r3,r5,r3
   2fb48:	280ad7fa 	srli	r5,r5,31
   2fb4c:	3980120e 	bge	r7,r6,2fb98 <__fixdfsi+0x68>
   2fb50:	00810744 	movi	r2,1053
   2fb54:	11800c16 	blt	r2,r6,2fb88 <__fixdfsi+0x58>
   2fb58:	00810cc4 	movi	r2,1075
   2fb5c:	1185c83a 	sub	r2,r2,r6
   2fb60:	01c007c4 	movi	r7,31
   2fb64:	18c00434 	orhi	r3,r3,16
   2fb68:	38800d16 	blt	r7,r2,2fba0 <__fixdfsi+0x70>
   2fb6c:	31befb44 	addi	r6,r6,-1043
   2fb70:	2084d83a 	srl	r2,r4,r2
   2fb74:	1986983a 	sll	r3,r3,r6
   2fb78:	1884b03a 	or	r2,r3,r2
   2fb7c:	28000726 	beq	r5,zero,2fb9c <__fixdfsi+0x6c>
   2fb80:	0085c83a 	sub	r2,zero,r2
   2fb84:	f800283a 	ret
   2fb88:	00a00034 	movhi	r2,32768
   2fb8c:	10bfffc4 	addi	r2,r2,-1
   2fb90:	2885883a 	add	r2,r5,r2
   2fb94:	f800283a 	ret
   2fb98:	0005883a 	mov	r2,zero
   2fb9c:	f800283a 	ret
   2fba0:	008104c4 	movi	r2,1043
   2fba4:	1185c83a 	sub	r2,r2,r6
   2fba8:	1884d83a 	srl	r2,r3,r2
   2fbac:	003ff306 	br	2fb7c <__alt_data_end+0xfffefb7c>

0002fbb0 <__floatsidf>:
   2fbb0:	defffd04 	addi	sp,sp,-12
   2fbb4:	dfc00215 	stw	ra,8(sp)
   2fbb8:	dc400115 	stw	r17,4(sp)
   2fbbc:	dc000015 	stw	r16,0(sp)
   2fbc0:	20002b26 	beq	r4,zero,2fc70 <__floatsidf+0xc0>
   2fbc4:	2023883a 	mov	r17,r4
   2fbc8:	2020d7fa 	srli	r16,r4,31
   2fbcc:	20002d16 	blt	r4,zero,2fc84 <__floatsidf+0xd4>
   2fbd0:	8809883a 	mov	r4,r17
   2fbd4:	002fd340 	call	2fd34 <__clzsi2>
   2fbd8:	01410784 	movi	r5,1054
   2fbdc:	288bc83a 	sub	r5,r5,r2
   2fbe0:	01010cc4 	movi	r4,1075
   2fbe4:	2149c83a 	sub	r4,r4,r5
   2fbe8:	00c007c4 	movi	r3,31
   2fbec:	1900160e 	bge	r3,r4,2fc48 <__floatsidf+0x98>
   2fbf0:	00c104c4 	movi	r3,1043
   2fbf4:	1947c83a 	sub	r3,r3,r5
   2fbf8:	88c6983a 	sll	r3,r17,r3
   2fbfc:	00800434 	movhi	r2,16
   2fc00:	10bfffc4 	addi	r2,r2,-1
   2fc04:	1886703a 	and	r3,r3,r2
   2fc08:	2941ffcc 	andi	r5,r5,2047
   2fc0c:	800d883a 	mov	r6,r16
   2fc10:	0005883a 	mov	r2,zero
   2fc14:	280a953a 	slli	r5,r5,20
   2fc18:	31803fcc 	andi	r6,r6,255
   2fc1c:	01000434 	movhi	r4,16
   2fc20:	300c97fa 	slli	r6,r6,31
   2fc24:	213fffc4 	addi	r4,r4,-1
   2fc28:	1906703a 	and	r3,r3,r4
   2fc2c:	1946b03a 	or	r3,r3,r5
   2fc30:	1986b03a 	or	r3,r3,r6
   2fc34:	dfc00217 	ldw	ra,8(sp)
   2fc38:	dc400117 	ldw	r17,4(sp)
   2fc3c:	dc000017 	ldw	r16,0(sp)
   2fc40:	dec00304 	addi	sp,sp,12
   2fc44:	f800283a 	ret
   2fc48:	00c002c4 	movi	r3,11
   2fc4c:	1887c83a 	sub	r3,r3,r2
   2fc50:	88c6d83a 	srl	r3,r17,r3
   2fc54:	8904983a 	sll	r2,r17,r4
   2fc58:	01000434 	movhi	r4,16
   2fc5c:	213fffc4 	addi	r4,r4,-1
   2fc60:	2941ffcc 	andi	r5,r5,2047
   2fc64:	1906703a 	and	r3,r3,r4
   2fc68:	800d883a 	mov	r6,r16
   2fc6c:	003fe906 	br	2fc14 <__alt_data_end+0xfffefc14>
   2fc70:	000d883a 	mov	r6,zero
   2fc74:	000b883a 	mov	r5,zero
   2fc78:	0007883a 	mov	r3,zero
   2fc7c:	0005883a 	mov	r2,zero
   2fc80:	003fe406 	br	2fc14 <__alt_data_end+0xfffefc14>
   2fc84:	0123c83a 	sub	r17,zero,r4
   2fc88:	003fd106 	br	2fbd0 <__alt_data_end+0xfffefbd0>

0002fc8c <__floatunsidf>:
   2fc8c:	defffe04 	addi	sp,sp,-8
   2fc90:	dc000015 	stw	r16,0(sp)
   2fc94:	dfc00115 	stw	ra,4(sp)
   2fc98:	2021883a 	mov	r16,r4
   2fc9c:	20002226 	beq	r4,zero,2fd28 <__floatunsidf+0x9c>
   2fca0:	002fd340 	call	2fd34 <__clzsi2>
   2fca4:	01010784 	movi	r4,1054
   2fca8:	2089c83a 	sub	r4,r4,r2
   2fcac:	01810cc4 	movi	r6,1075
   2fcb0:	310dc83a 	sub	r6,r6,r4
   2fcb4:	00c007c4 	movi	r3,31
   2fcb8:	1980120e 	bge	r3,r6,2fd04 <__floatunsidf+0x78>
   2fcbc:	00c104c4 	movi	r3,1043
   2fcc0:	1907c83a 	sub	r3,r3,r4
   2fcc4:	80ca983a 	sll	r5,r16,r3
   2fcc8:	00800434 	movhi	r2,16
   2fccc:	10bfffc4 	addi	r2,r2,-1
   2fcd0:	2101ffcc 	andi	r4,r4,2047
   2fcd4:	0021883a 	mov	r16,zero
   2fcd8:	288a703a 	and	r5,r5,r2
   2fcdc:	2008953a 	slli	r4,r4,20
   2fce0:	00c00434 	movhi	r3,16
   2fce4:	18ffffc4 	addi	r3,r3,-1
   2fce8:	28c6703a 	and	r3,r5,r3
   2fcec:	8005883a 	mov	r2,r16
   2fcf0:	1906b03a 	or	r3,r3,r4
   2fcf4:	dfc00117 	ldw	ra,4(sp)
   2fcf8:	dc000017 	ldw	r16,0(sp)
   2fcfc:	dec00204 	addi	sp,sp,8
   2fd00:	f800283a 	ret
   2fd04:	00c002c4 	movi	r3,11
   2fd08:	188bc83a 	sub	r5,r3,r2
   2fd0c:	814ad83a 	srl	r5,r16,r5
   2fd10:	00c00434 	movhi	r3,16
   2fd14:	18ffffc4 	addi	r3,r3,-1
   2fd18:	81a0983a 	sll	r16,r16,r6
   2fd1c:	2101ffcc 	andi	r4,r4,2047
   2fd20:	28ca703a 	and	r5,r5,r3
   2fd24:	003fed06 	br	2fcdc <__alt_data_end+0xfffefcdc>
   2fd28:	0009883a 	mov	r4,zero
   2fd2c:	000b883a 	mov	r5,zero
   2fd30:	003fea06 	br	2fcdc <__alt_data_end+0xfffefcdc>

0002fd34 <__clzsi2>:
   2fd34:	00bfffd4 	movui	r2,65535
   2fd38:	11000536 	bltu	r2,r4,2fd50 <__clzsi2+0x1c>
   2fd3c:	00803fc4 	movi	r2,255
   2fd40:	11000f36 	bltu	r2,r4,2fd80 <__clzsi2+0x4c>
   2fd44:	00800804 	movi	r2,32
   2fd48:	0007883a 	mov	r3,zero
   2fd4c:	00000506 	br	2fd64 <__clzsi2+0x30>
   2fd50:	00804034 	movhi	r2,256
   2fd54:	10bfffc4 	addi	r2,r2,-1
   2fd58:	11000c2e 	bgeu	r2,r4,2fd8c <__clzsi2+0x58>
   2fd5c:	00800204 	movi	r2,8
   2fd60:	00c00604 	movi	r3,24
   2fd64:	20c8d83a 	srl	r4,r4,r3
   2fd68:	00c000f4 	movhi	r3,3
   2fd6c:	18c81984 	addi	r3,r3,8294
   2fd70:	1909883a 	add	r4,r3,r4
   2fd74:	20c00003 	ldbu	r3,0(r4)
   2fd78:	10c5c83a 	sub	r2,r2,r3
   2fd7c:	f800283a 	ret
   2fd80:	00800604 	movi	r2,24
   2fd84:	00c00204 	movi	r3,8
   2fd88:	003ff606 	br	2fd64 <__alt_data_end+0xfffefd64>
   2fd8c:	00800404 	movi	r2,16
   2fd90:	1007883a 	mov	r3,r2
   2fd94:	003ff306 	br	2fd64 <__alt_data_end+0xfffefd64>

0002fd98 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2fd98:	defffd04 	addi	sp,sp,-12
   2fd9c:	dfc00215 	stw	ra,8(sp)
   2fda0:	dc400115 	stw	r17,4(sp)
   2fda4:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2fda8:	20001f16 	blt	r4,zero,2fe28 <close+0x90>
   2fdac:	20c00324 	muli	r3,r4,12
   2fdb0:	008000f4 	movhi	r2,3
   2fdb4:	108a8d04 	addi	r2,r2,10804
   2fdb8:	1885883a 	add	r2,r3,r2
   2fdbc:	2021883a 	mov	r16,r4

  if (fd)
   2fdc0:	10001926 	beq	r2,zero,2fe28 <close+0x90>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2fdc4:	10c00017 	ldw	r3,0(r2)
   2fdc8:	18c00417 	ldw	r3,16(r3)
   2fdcc:	18000c26 	beq	r3,zero,2fe00 <close+0x68>
   2fdd0:	1009883a 	mov	r4,r2
   2fdd4:	183ee83a 	callr	r3

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2fdd8:	8009883a 	mov	r4,r16
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2fddc:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2fde0:	00302340 	call	30234 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
   2fde4:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
   2fde8:	88000816 	blt	r17,zero,2fe0c <close+0x74>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
   2fdec:	dfc00217 	ldw	ra,8(sp)
   2fdf0:	dc400117 	ldw	r17,4(sp)
   2fdf4:	dc000017 	ldw	r16,0(sp)
   2fdf8:	dec00304 	addi	sp,sp,12
   2fdfc:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2fe00:	00302340 	call	30234 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
   2fe04:	0005883a 	mov	r2,zero
   2fe08:	003ff806 	br	2fdec <__alt_data_end+0xfffefdec>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   2fe0c:	d0a00b17 	ldw	r2,-32724(gp)
   2fe10:	10000c26 	beq	r2,zero,2fe44 <close+0xac>
   2fe14:	103ee83a 	callr	r2
    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
   2fe18:	0463c83a 	sub	r17,zero,r17
   2fe1c:	14400015 	stw	r17,0(r2)
      return -1;
   2fe20:	00bfffc4 	movi	r2,-1
   2fe24:	003ff106 	br	2fdec <__alt_data_end+0xfffefdec>
   2fe28:	d0a00b17 	ldw	r2,-32724(gp)
   2fe2c:	10000726 	beq	r2,zero,2fe4c <close+0xb4>
   2fe30:	103ee83a 	callr	r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2fe34:	00c01444 	movi	r3,81
   2fe38:	10c00015 	stw	r3,0(r2)
    return -1;
   2fe3c:	00bfffc4 	movi	r2,-1
   2fe40:	003fea06 	br	2fdec <__alt_data_end+0xfffefdec>
   2fe44:	d0a70504 	addi	r2,gp,-25580
   2fe48:	003ff306 	br	2fe18 <__alt_data_end+0xfffefe18>
   2fe4c:	d0a70504 	addi	r2,gp,-25580
   2fe50:	003ff806 	br	2fe34 <__alt_data_end+0xfffefe34>

0002fe54 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   2fe54:	3005883a 	mov	r2,r6
   2fe58:	f800283a 	ret

0002fe5c <fstat>:
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2fe5c:	20000d16 	blt	r4,zero,2fe94 <fstat+0x38>
   2fe60:	21000324 	muli	r4,r4,12
   2fe64:	008000f4 	movhi	r2,3
   2fe68:	108a8d04 	addi	r2,r2,10804
   2fe6c:	2089883a 	add	r4,r4,r2
  
  if (fd)
   2fe70:	20000826 	beq	r4,zero,2fe94 <fstat+0x38>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   2fe74:	20800017 	ldw	r2,0(r4)
   2fe78:	10800817 	ldw	r2,32(r2)
   2fe7c:	10000126 	beq	r2,zero,2fe84 <fstat+0x28>
    {
      return fd->dev->fstat(fd, st);
   2fe80:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   2fe84:	00880004 	movi	r2,8192
   2fe88:	28800115 	stw	r2,4(r5)
      return 0;
   2fe8c:	0005883a 	mov	r2,zero
   2fe90:	f800283a 	ret
   2fe94:	d0a00b17 	ldw	r2,-32724(gp)
   2fe98:	10000926 	beq	r2,zero,2fec0 <fstat+0x64>
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   2fe9c:	deffff04 	addi	sp,sp,-4
   2fea0:	dfc00015 	stw	ra,0(sp)
   2fea4:	103ee83a 	callr	r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2fea8:	00c01444 	movi	r3,81
   2feac:	10c00015 	stw	r3,0(r2)
    return -1;
   2feb0:	00bfffc4 	movi	r2,-1
  }
}
   2feb4:	dfc00017 	ldw	ra,0(sp)
   2feb8:	dec00104 	addi	sp,sp,4
   2febc:	f800283a 	ret
   2fec0:	d0a70504 	addi	r2,gp,-25580
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2fec4:	00c01444 	movi	r3,81
   2fec8:	10c00015 	stw	r3,0(r2)
    return -1;
   2fecc:	00bfffc4 	movi	r2,-1
  }
}
   2fed0:	f800283a 	ret

0002fed4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2fed4:	defff004 	addi	sp,sp,-64
   2fed8:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2fedc:	20001316 	blt	r4,zero,2ff2c <isatty+0x58>
   2fee0:	20800324 	muli	r2,r4,12
   2fee4:	00c000f4 	movhi	r3,3
   2fee8:	18ca8d04 	addi	r3,r3,10804
   2feec:	10c5883a 	add	r2,r2,r3
  
  if (fd)
   2fef0:	10000e26 	beq	r2,zero,2ff2c <isatty+0x58>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   2fef4:	10800017 	ldw	r2,0(r2)
   2fef8:	10800817 	ldw	r2,32(r2)
   2fefc:	10000726 	beq	r2,zero,2ff1c <isatty+0x48>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   2ff00:	d80b883a 	mov	r5,sp
   2ff04:	002fe5c0 	call	2fe5c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   2ff08:	d8800117 	ldw	r2,4(sp)
   2ff0c:	10880020 	cmpeqi	r2,r2,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
   2ff10:	dfc00f17 	ldw	ra,60(sp)
   2ff14:	dec01004 	addi	sp,sp,64
   2ff18:	f800283a 	ret
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    {
      return 1;
   2ff1c:	00800044 	movi	r2,1
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
   2ff20:	dfc00f17 	ldw	ra,60(sp)
   2ff24:	dec01004 	addi	sp,sp,64
   2ff28:	f800283a 	ret
   2ff2c:	d0a00b17 	ldw	r2,-32724(gp)
   2ff30:	10000726 	beq	r2,zero,2ff50 <isatty+0x7c>
   2ff34:	103ee83a 	callr	r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2ff38:	00c01444 	movi	r3,81
   2ff3c:	10c00015 	stw	r3,0(r2)
    return 0;
   2ff40:	0005883a 	mov	r2,zero
  }
}
   2ff44:	dfc00f17 	ldw	ra,60(sp)
   2ff48:	dec01004 	addi	sp,sp,64
   2ff4c:	f800283a 	ret
   2ff50:	d0a70504 	addi	r2,gp,-25580
   2ff54:	003ff806 	br	2ff38 <__alt_data_end+0xfffeff38>

0002ff58 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2ff58:	defffc04 	addi	sp,sp,-16
   2ff5c:	df000315 	stw	fp,12(sp)
   2ff60:	df000304 	addi	fp,sp,12
   2ff64:	e13ffd15 	stw	r4,-12(fp)
   2ff68:	e17ffe15 	stw	r5,-8(fp)
   2ff6c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   2ff70:	e0fffe17 	ldw	r3,-8(fp)
   2ff74:	e0bffd17 	ldw	r2,-12(fp)
   2ff78:	18800c26 	beq	r3,r2,2ffac <alt_load_section+0x54>
  {
    while( to != end )
   2ff7c:	00000806 	br	2ffa0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   2ff80:	e0bffe17 	ldw	r2,-8(fp)
   2ff84:	10c00104 	addi	r3,r2,4
   2ff88:	e0fffe15 	stw	r3,-8(fp)
   2ff8c:	e0fffd17 	ldw	r3,-12(fp)
   2ff90:	19000104 	addi	r4,r3,4
   2ff94:	e13ffd15 	stw	r4,-12(fp)
   2ff98:	18c00017 	ldw	r3,0(r3)
   2ff9c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   2ffa0:	e0fffe17 	ldw	r3,-8(fp)
   2ffa4:	e0bfff17 	ldw	r2,-4(fp)
   2ffa8:	18bff51e 	bne	r3,r2,2ff80 <__alt_data_end+0xfffeff80>
    {
      *to++ = *from++;
    }
  }
}
   2ffac:	0001883a 	nop
   2ffb0:	e037883a 	mov	sp,fp
   2ffb4:	df000017 	ldw	fp,0(sp)
   2ffb8:	dec00104 	addi	sp,sp,4
   2ffbc:	f800283a 	ret

0002ffc0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2ffc0:	defffe04 	addi	sp,sp,-8
   2ffc4:	dfc00115 	stw	ra,4(sp)
   2ffc8:	df000015 	stw	fp,0(sp)
   2ffcc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2ffd0:	018000f4 	movhi	r6,3
   2ffd4:	318f5004 	addi	r6,r6,15680
   2ffd8:	014000f4 	movhi	r5,3
   2ffdc:	29486404 	addi	r5,r5,8592
   2ffe0:	010000f4 	movhi	r4,3
   2ffe4:	210f5004 	addi	r4,r4,15680
   2ffe8:	002ff580 	call	2ff58 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2ffec:	018000b4 	movhi	r6,2
   2fff0:	31806304 	addi	r6,r6,396
   2fff4:	014000b4 	movhi	r5,2
   2fff8:	29400804 	addi	r5,r5,32
   2fffc:	010000b4 	movhi	r4,2
   30000:	21000804 	addi	r4,r4,32
   30004:	002ff580 	call	2ff58 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   30008:	018000f4 	movhi	r6,3
   3000c:	31886404 	addi	r6,r6,8592
   30010:	014000f4 	movhi	r5,3
   30014:	29477404 	addi	r5,r5,7632
   30018:	010000f4 	movhi	r4,3
   3001c:	21077404 	addi	r4,r4,7632
   30020:	002ff580 	call	2ff58 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   30024:	003100c0 	call	3100c <alt_dcache_flush_all>
  alt_icache_flush_all();
   30028:	00311c40 	call	311c4 <alt_icache_flush_all>
}
   3002c:	0001883a 	nop
   30030:	e037883a 	mov	sp,fp
   30034:	dfc00117 	ldw	ra,4(sp)
   30038:	df000017 	ldw	fp,0(sp)
   3003c:	dec00204 	addi	sp,sp,8
   30040:	f800283a 	ret

00030044 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   30044:	defffe04 	addi	sp,sp,-8
   30048:	dfc00115 	stw	ra,4(sp)
   3004c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   30050:	20000e16 	blt	r4,zero,3008c <lseek+0x48>
   30054:	21000324 	muli	r4,r4,12
   30058:	008000f4 	movhi	r2,3
   3005c:	108a8d04 	addi	r2,r2,10804
   30060:	2089883a 	add	r4,r4,r2
  
  if (fd) 
   30064:	20000926 	beq	r4,zero,3008c <lseek+0x48>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   30068:	20800017 	ldw	r2,0(r4)
   3006c:	10800717 	ldw	r2,28(r2)
   30070:	10000d26 	beq	r2,zero,300a8 <lseek+0x64>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   30074:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
   30078:	10000f16 	blt	r2,zero,300b8 <lseek+0x74>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
   3007c:	dfc00117 	ldw	ra,4(sp)
   30080:	dc000017 	ldw	r16,0(sp)
   30084:	dec00204 	addi	sp,sp,8
   30088:	f800283a 	ret
   3008c:	04001444 	movi	r16,81
   30090:	d0a00b17 	ldw	r2,-32724(gp)
   30094:	10000626 	beq	r2,zero,300b0 <lseek+0x6c>
   30098:	103ee83a 	callr	r2
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
   3009c:	14000015 	stw	r16,0(r2)
    rc = -1;
   300a0:	00bfffc4 	movi	r2,-1
  }

  return rc;
   300a4:	003ff506 	br	3007c <__alt_data_end+0xffff007c>
   300a8:	04002184 	movi	r16,134
   300ac:	003ff806 	br	30090 <__alt_data_end+0xffff0090>
   300b0:	d0a70504 	addi	r2,gp,-25580
   300b4:	003ff906 	br	3009c <__alt_data_end+0xffff009c>
   300b8:	00a1c83a 	sub	r16,zero,r2
   300bc:	003ff406 	br	30090 <__alt_data_end+0xffff0090>

000300c0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   300c0:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   300c4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   300c8:	dfc00115 	stw	ra,4(sp)
   300cc:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   300d0:	00303980 	call	30398 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   300d4:	00303b80 	call	303b8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   300d8:	018000f4 	movhi	r6,3
   300dc:	31885d04 	addi	r6,r6,8564
   300e0:	010000f4 	movhi	r4,3
   300e4:	300b883a 	mov	r5,r6
   300e8:	21086104 	addi	r4,r4,8580
   300ec:	00312c40 	call	312c4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   300f0:	00311040 	call	31104 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   300f4:	010000f4 	movhi	r4,3
   300f8:	21045904 	addi	r4,r4,4452
   300fc:	00318a80 	call	318a8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   30100:	d1a70617 	ldw	r6,-25576(gp)
   30104:	d1670717 	ldw	r5,-25572(gp)
   30108:	d1270817 	ldw	r4,-25568(gp)
   3010c:	00201d80 	call	201d8 <main>
  close(STDOUT_FILENO);
   30110:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   30114:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
   30118:	002fd980 	call	2fd98 <close>
  exit (result);
   3011c:	8009883a 	mov	r4,r16
   30120:	00318e40 	call	318e4 <exit>

00030124 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   30124:	defffe04 	addi	sp,sp,-8
   30128:	df000115 	stw	fp,4(sp)
   3012c:	df000104 	addi	fp,sp,4
   30130:	e13fff15 	stw	r4,-4(fp)
}
   30134:	0001883a 	nop
   30138:	e037883a 	mov	sp,fp
   3013c:	df000017 	ldw	fp,0(sp)
   30140:	dec00104 	addi	sp,sp,4
   30144:	f800283a 	ret

00030148 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   30148:	defffe04 	addi	sp,sp,-8
   3014c:	df000115 	stw	fp,4(sp)
   30150:	df000104 	addi	fp,sp,4
   30154:	e13fff15 	stw	r4,-4(fp)
}
   30158:	0001883a 	nop
   3015c:	e037883a 	mov	sp,fp
   30160:	df000017 	ldw	fp,0(sp)
   30164:	dec00104 	addi	sp,sp,4
   30168:	f800283a 	ret

0003016c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   3016c:	defffe04 	addi	sp,sp,-8
   30170:	dfc00115 	stw	ra,4(sp)
   30174:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   30178:	20002116 	blt	r4,zero,30200 <read+0x94>
   3017c:	21000324 	muli	r4,r4,12
   30180:	008000f4 	movhi	r2,3
   30184:	108a8d04 	addi	r2,r2,10804
   30188:	2089883a 	add	r4,r4,r2
  
  if (fd)
   3018c:	20001c26 	beq	r4,zero,30200 <read+0x94>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   30190:	20800217 	ldw	r2,8(r4)
   30194:	00c00044 	movi	r3,1
   30198:	108000cc 	andi	r2,r2,3
   3019c:	10c00a26 	beq	r2,r3,301c8 <read+0x5c>
        (fd->dev->read))
   301a0:	20800017 	ldw	r2,0(r4)
   301a4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   301a8:	10000726 	beq	r2,zero,301c8 <read+0x5c>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   301ac:	103ee83a 	callr	r2
   301b0:	1021883a 	mov	r16,r2
   301b4:	10000b16 	blt	r2,zero,301e4 <read+0x78>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
   301b8:	dfc00117 	ldw	ra,4(sp)
   301bc:	dc000017 	ldw	r16,0(sp)
   301c0:	dec00204 	addi	sp,sp,8
   301c4:	f800283a 	ret
   301c8:	d0a00b17 	ldw	r2,-32724(gp)
   301cc:	10001326 	beq	r2,zero,3021c <read+0xb0>
   301d0:	103ee83a 	callr	r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
   301d4:	00c00344 	movi	r3,13
   301d8:	10c00015 	stw	r3,0(r2)
    }
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
   301dc:	00bfffc4 	movi	r2,-1
   301e0:	003ff506 	br	301b8 <__alt_data_end+0xffff01b8>
   301e4:	d0a00b17 	ldw	r2,-32724(gp)
   301e8:	10000e26 	beq	r2,zero,30224 <read+0xb8>
   301ec:	103ee83a 	callr	r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
   301f0:	0421c83a 	sub	r16,zero,r16
   301f4:	14000015 	stw	r16,0(r2)
          return -1;
   301f8:	00bfffc4 	movi	r2,-1
   301fc:	003fee06 	br	301b8 <__alt_data_end+0xffff01b8>
   30200:	d0a00b17 	ldw	r2,-32724(gp)
   30204:	10000926 	beq	r2,zero,3022c <read+0xc0>
   30208:	103ee83a 	callr	r2
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   3020c:	00c01444 	movi	r3,81
   30210:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   30214:	00bfffc4 	movi	r2,-1
   30218:	003fe706 	br	301b8 <__alt_data_end+0xffff01b8>
   3021c:	d0a70504 	addi	r2,gp,-25580
   30220:	003fec06 	br	301d4 <__alt_data_end+0xffff01d4>
   30224:	d0a70504 	addi	r2,gp,-25580
   30228:	003ff106 	br	301f0 <__alt_data_end+0xffff01f0>
   3022c:	d0a70504 	addi	r2,gp,-25580
   30230:	003ff606 	br	3020c <__alt_data_end+0xffff020c>

00030234 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
   30234:	00800084 	movi	r2,2
   30238:	1100060e 	bge	r2,r4,30254 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
   3023c:	21000324 	muli	r4,r4,12
   30240:	008000f4 	movhi	r2,3
   30244:	108a8d04 	addi	r2,r2,10804
   30248:	1109883a 	add	r4,r2,r4
   3024c:	20000215 	stw	zero,8(r4)
    alt_fd_list[fd].dev      = 0;
   30250:	20000015 	stw	zero,0(r4)
   30254:	f800283a 	ret

00030258 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30258:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3025c:	00bfff84 	movi	r2,-2
   30260:	2884703a 	and	r2,r5,r2
   30264:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   30268:	d0a00c17 	ldw	r2,-32720(gp)
   3026c:	00ffff04 	movi	r3,-4
   30270:	108000c4 	addi	r2,r2,3
   30274:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   30278:	00c00134 	movhi	r3,4
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   3027c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   30280:	1109883a 	add	r4,r2,r4
   30284:	18c00004 	addi	r3,r3,0
   30288:	19000336 	bltu	r3,r4,30298 <sbrk+0x40>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
   3028c:	d1200c15 	stw	r4,-32720(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30290:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   30294:	f800283a 	ret
   30298:	2801703a 	wrctl	status,r5
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   3029c:	00bfffc4 	movi	r2,-1
   302a0:	f800283a 	ret

000302a4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   302a4:	defffd04 	addi	sp,sp,-12
   302a8:	dfc00215 	stw	ra,8(sp)
   302ac:	df000115 	stw	fp,4(sp)
   302b0:	df000104 	addi	fp,sp,4
   302b4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   302b8:	e13fff17 	ldw	r4,-4(fp)
   302bc:	0030fac0 	call	30fac <alt_busy_sleep>
}
   302c0:	e037883a 	mov	sp,fp
   302c4:	dfc00117 	ldw	ra,4(sp)
   302c8:	df000017 	ldw	fp,0(sp)
   302cc:	dec00204 	addi	sp,sp,8
   302d0:	f800283a 	ret

000302d4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   302d4:	defffe04 	addi	sp,sp,-8
   302d8:	dfc00115 	stw	ra,4(sp)
   302dc:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   302e0:	20002216 	blt	r4,zero,3036c <write+0x98>
   302e4:	21000324 	muli	r4,r4,12
   302e8:	008000f4 	movhi	r2,3
   302ec:	108a8d04 	addi	r2,r2,10804
   302f0:	2089883a 	add	r4,r4,r2
  
  if (fd)
   302f4:	20001d26 	beq	r4,zero,3036c <write+0x98>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   302f8:	20800217 	ldw	r2,8(r4)
   302fc:	108000cc 	andi	r2,r2,3
   30300:	10000a26 	beq	r2,zero,3032c <write+0x58>
   30304:	20800017 	ldw	r2,0(r4)
   30308:	10800617 	ldw	r2,24(r2)
   3030c:	10000726 	beq	r2,zero,3032c <write+0x58>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   30310:	103ee83a 	callr	r2
   30314:	1021883a 	mov	r16,r2
   30318:	10000d16 	blt	r2,zero,30350 <write+0x7c>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
   3031c:	dfc00117 	ldw	ra,4(sp)
   30320:	dc000017 	ldw	r16,0(sp)
   30324:	dec00204 	addi	sp,sp,8
   30328:	f800283a 	ret
   3032c:	d0a00b17 	ldw	r2,-32724(gp)
   30330:	10000526 	beq	r2,zero,30348 <write+0x74>
   30334:	103ee83a 	callr	r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
   30338:	00c00344 	movi	r3,13
   3033c:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
   30340:	00bfffc4 	movi	r2,-1
   30344:	003ff506 	br	3031c <__alt_data_end+0xffff031c>
   30348:	d0a70504 	addi	r2,gp,-25580
   3034c:	003ffa06 	br	30338 <__alt_data_end+0xffff0338>
   30350:	d0a00b17 	ldw	r2,-32724(gp)
   30354:	10000c26 	beq	r2,zero,30388 <write+0xb4>
   30358:	103ee83a 	callr	r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
   3035c:	0421c83a 	sub	r16,zero,r16
   30360:	14000015 	stw	r16,0(r2)
        return -1;
   30364:	00bfffc4 	movi	r2,-1
   30368:	003fec06 	br	3031c <__alt_data_end+0xffff031c>
   3036c:	d0a00b17 	ldw	r2,-32724(gp)
   30370:	10000726 	beq	r2,zero,30390 <write+0xbc>
   30374:	103ee83a 	callr	r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   30378:	00c01444 	movi	r3,81
   3037c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   30380:	00bfffc4 	movi	r2,-1
   30384:	003fe506 	br	3031c <__alt_data_end+0xffff031c>
   30388:	d0a70504 	addi	r2,gp,-25580
   3038c:	003ff306 	br	3035c <__alt_data_end+0xffff035c>
   30390:	d0a70504 	addi	r2,gp,-25580
   30394:	003ff806 	br	30378 <__alt_data_end+0xffff0378>

00030398 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   30398:	deffff04 	addi	sp,sp,-4
   3039c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2, nios2_gen2);
   303a0:	00316680 	call	31668 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   303a4:	00800044 	movi	r2,1
   303a8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   303ac:	dfc00017 	ldw	ra,0(sp)
   303b0:	dec00104 	addi	sp,sp,4
   303b4:	f800283a 	ret

000303b8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   303b8:	defffc04 	addi	sp,sp,-16
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   303bc:	01000134 	movhi	r4,4
   303c0:	01c0fa04 	movi	r7,1000
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   303c4:	dc800215 	stw	r18,8(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   303c8:	21041004 	addi	r4,r4,4160
   303cc:	018000c4 	movi	r6,3
   303d0:	000b883a 	mov	r5,zero
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   303d4:	048000f4 	movhi	r18,3
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   303d8:	dfc00315 	stw	ra,12(sp)
   303dc:	dc400115 	stw	r17,4(sp)
   303e0:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   303e4:	948b3204 	addi	r18,r18,11464
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   303e8:	0030a3c0 	call	30a3c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   303ec:	01800084 	movi	r6,2
   303f0:	9009883a 	mov	r4,r18
   303f4:	000b883a 	mov	r5,zero
   303f8:	00305d40 	call	305d4 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   303fc:	d4600704 	addi	r17,gp,-32740
   30400:	880b883a 	mov	r5,r17
   30404:	913ff604 	addi	r4,r18,-40
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
   30408:	040000f4 	movhi	r16,3
   3040c:	00310600 	call	31060 <alt_dev_llist_insert>
   30410:	840b0104 	addi	r16,r16,11268
   30414:	8009883a 	mov	r4,r16
   30418:	01800144 	movi	r6,5
   3041c:	000b883a 	mov	r5,zero
   30420:	0030c040 	call	30c04 <altera_avalon_uart_init>
   30424:	880b883a 	mov	r5,r17
   30428:	813ff604 	addi	r4,r16,-40
}
   3042c:	dfc00317 	ldw	ra,12(sp)
   30430:	dc800217 	ldw	r18,8(sp)
   30434:	dc400117 	ldw	r17,4(sp)
   30438:	dc000017 	ldw	r16,0(sp)
   3043c:	dec00404 	addi	sp,sp,16
   30440:	00310601 	jmpi	31060 <alt_dev_llist_insert>

00030444 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   30444:	20800017 	ldw	r2,0(r4)
   30448:	21c00217 	ldw	r7,8(r4)
   3044c:	11000a04 	addi	r4,r2,40
   30450:	003070c1 	jmpi	3070c <altera_avalon_jtag_uart_read>

00030454 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   30454:	20800017 	ldw	r2,0(r4)
   30458:	21c00217 	ldw	r7,8(r4)
   3045c:	11000a04 	addi	r4,r2,40
   30460:	00308601 	jmpi	30860 <altera_avalon_jtag_uart_write>

00030464 <altera_avalon_jtag_uart_close_fd>:
int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   30464:	20800017 	ldw	r2,0(r4)
   30468:	21400217 	ldw	r5,8(r4)
   3046c:	11000a04 	addi	r4,r2,40
   30470:	003064c1 	jmpi	3064c <altera_avalon_jtag_uart_close>

00030474 <altera_avalon_jtag_uart_ioctl_fd>:
int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   30474:	21000017 	ldw	r4,0(r4)
   30478:	21000a04 	addi	r4,r4,40
   3047c:	00306981 	jmpi	30698 <altera_avalon_jtag_uart_ioctl>

00030480 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   30480:	20800017 	ldw	r2,0(r4)
   30484:	10800104 	addi	r2,r2,4
   30488:	10c00037 	ldwio	r3,0(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   3048c:	18c1000c 	andi	r3,r3,1024
   30490:	1800081e 	bne	r3,zero,304b4 <altera_avalon_jtag_uart_timeout+0x34>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   30494:	20800917 	ldw	r2,36(r4)
   30498:	00e00034 	movhi	r3,32768
   3049c:	18ffff04 	addi	r3,r3,-4
   304a0:	18800236 	bltu	r3,r2,304ac <altera_avalon_jtag_uart_timeout+0x2c>
    sp->host_inactive++;
   304a4:	10800044 	addi	r2,r2,1
   304a8:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   304ac:	d0a70b17 	ldw	r2,-25556(gp)
   304b0:	f800283a 	ret

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   304b4:	20c00817 	ldw	r3,32(r4)
   304b8:	18c10014 	ori	r3,r3,1024
   304bc:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   304c0:	20000915 	stw	zero,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   304c4:	d0a70b17 	ldw	r2,-25556(gp)
   304c8:	f800283a 	ret

000304cc <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
   304cc:	21800017 	ldw	r6,0(r4)
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   304d0:	027fff84 	movi	r9,-2
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   304d4:	02bfff44 	movi	r10,-3
   304d8:	32000104 	addi	r8,r6,4
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   304dc:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   304e0:	3880c00c 	andi	r2,r7,768
   304e4:	10003426 	beq	r2,zero,305b8 <altera_avalon_jtag_uart_irq+0xec>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   304e8:	3880400c 	andi	r2,r7,256
   304ec:	10001726 	beq	r2,zero,3054c <altera_avalon_jtag_uart_irq+0x80>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   304f0:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
   304f4:	20c00b17 	ldw	r3,44(r4)
   304f8:	10800044 	addi	r2,r2,1
   304fc:	1081ffcc 	andi	r2,r2,2047
   30500:	18800d1e 	bne	r3,r2,30538 <altera_avalon_jtag_uart_irq+0x6c>
   30504:	00002d06 	br	305bc <altera_avalon_jtag_uart_irq+0xf0>
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   30508:	20800a17 	ldw	r2,40(r4)
   3050c:	2085883a 	add	r2,r4,r2
   30510:	10c00e05 	stb	r3,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   30514:	20800a17 	ldw	r2,40(r4)
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
   30518:	21400b17 	ldw	r5,44(r4)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3051c:	10800044 	addi	r2,r2,1
   30520:	1081ffcc 	andi	r2,r2,2047
   30524:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   30528:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
   3052c:	10800044 	addi	r2,r2,1
   30530:	1081ffcc 	andi	r2,r2,2047
   30534:	11400326 	beq	r2,r5,30544 <altera_avalon_jtag_uart_irq+0x78>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   30538:	30c00037 	ldwio	r3,0(r6)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   3053c:	18a0000c 	andi	r2,r3,32768
   30540:	103ff11e 	bne	r2,zero,30508 <__alt_data_end+0xffff0508>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   30544:	18ffffec 	andhi	r3,r3,65535
   30548:	18001c1e 	bne	r3,zero,305bc <altera_avalon_jtag_uart_irq+0xf0>
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   3054c:	3880800c 	andi	r2,r7,512
   30550:	103fe226 	beq	r2,zero,304dc <__alt_data_end+0xffff04dc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   30554:	380ed43a 	srli	r7,r7,16

      while (space > 0 && sp->tx_out != sp->tx_in)
   30558:	38000b1e 	bne	r7,zero,30588 <altera_avalon_jtag_uart_irq+0xbc>
   3055c:	003fdf06 	br	304dc <__alt_data_end+0xffff04dc>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   30560:	20800d17 	ldw	r2,52(r4)
   30564:	2085883a 	add	r2,r4,r2
   30568:	10820e07 	ldb	r2,2104(r2)
   3056c:	30800035 	stwio	r2,0(r6)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   30570:	20800d17 	ldw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   30574:	39ffffc4 	addi	r7,r7,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   30578:	10800044 	addi	r2,r2,1
   3057c:	1081ffcc 	andi	r2,r2,2047
   30580:	20800d15 	stw	r2,52(r4)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   30584:	383fd526 	beq	r7,zero,304dc <__alt_data_end+0xffff04dc>
   30588:	20c00d17 	ldw	r3,52(r4)
   3058c:	20800c17 	ldw	r2,48(r4)
   30590:	18bff31e 	bne	r3,r2,30560 <__alt_data_end+0xffff0560>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   30594:	20800817 	ldw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   30598:	20c00017 	ldw	r3,0(r4)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   3059c:	1284703a 	and	r2,r2,r10
   305a0:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   305a4:	18800135 	stwio	r2,4(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   305a8:	40800037 	ldwio	r2,0(r8)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   305ac:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   305b0:	3880c00c 	andi	r2,r7,768
   305b4:	103fcc1e 	bne	r2,zero,304e8 <__alt_data_end+0xffff04e8>
   305b8:	f800283a 	ret
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   305bc:	20800817 	ldw	r2,32(r4)
   305c0:	1244703a 	and	r2,r2,r9
   305c4:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   305c8:	40800035 	stwio	r2,0(r8)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   305cc:	40800037 	ldwio	r2,0(r8)
   305d0:	003fde06 	br	3054c <__alt_data_end+0xffff054c>

000305d4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   305d4:	defffd04 	addi	sp,sp,-12
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   305d8:	20c00017 	ldw	r3,0(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   305dc:	dc000115 	stw	r16,4(sp)
   305e0:	dfc00215 	stw	ra,8(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   305e4:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   305e8:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   305ec:	20800815 	stw	r2,32(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   305f0:	2809883a 	mov	r4,r5
   305f4:	300b883a 	mov	r5,r6
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   305f8:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   305fc:	018000f4 	movhi	r6,3
   30600:	31813304 	addi	r6,r6,1228
   30604:	800f883a 	mov	r7,r16
   30608:	d8000015 	stw	zero,0(sp)
   3060c:	00311d00 	call	311d0 <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   30610:	d1670b17 	ldw	r5,-25556(gp)
   30614:	018000f4 	movhi	r6,3
   30618:	31812004 	addi	r6,r6,1152
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   3061c:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   30620:	800f883a 	mov	r7,r16
   30624:	81000204 	addi	r4,r16,8
   30628:	0030f2c0 	call	30f2c <alt_alarm_start>
   3062c:	1000030e 	bge	r2,zero,3063c <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   30630:	00a00034 	movhi	r2,32768
   30634:	10bfffc4 	addi	r2,r2,-1
   30638:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   3063c:	dfc00217 	ldw	ra,8(sp)
   30640:	dc000117 	ldw	r16,4(sp)
   30644:	dec00304 	addi	sp,sp,12
   30648:	f800283a 	ret

0003064c <altera_avalon_jtag_uart_close>:
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    if (flags & O_NONBLOCK) {
   3064c:	2890000c 	andi	r2,r5,16384
   30650:	21c00c17 	ldw	r7,48(r4)
   30654:	10000426 	beq	r2,zero,30668 <altera_avalon_jtag_uart_close+0x1c>
   30658:	00000606 	br	30674 <altera_avalon_jtag_uart_close+0x28>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   3065c:	21800917 	ldw	r6,36(r4)
   30660:	20c00117 	ldw	r3,4(r4)
   30664:	30c00a2e 	bgeu	r6,r3,30690 <altera_avalon_jtag_uart_close+0x44>
   30668:	20c00d17 	ldw	r3,52(r4)
   3066c:	38fffb1e 	bne	r7,r3,3065c <__alt_data_end+0xffff065c>
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
   30670:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   30674:	20800d17 	ldw	r2,52(r4)
   30678:	11c00526 	beq	r2,r7,30690 <altera_avalon_jtag_uart_close+0x44>
   3067c:	20c00917 	ldw	r3,36(r4)
   30680:	20800117 	ldw	r2,4(r4)
   30684:	1880022e 	bgeu	r3,r2,30690 <altera_avalon_jtag_uart_close+0x44>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
   30688:	00bffd44 	movi	r2,-11
    }
  }

  return 0;
}
   3068c:	f800283a 	ret
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   30690:	0005883a 	mov	r2,zero
   30694:	f800283a 	ret

00030698 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
   30698:	009a8044 	movi	r2,27137
   3069c:	28800d26 	beq	r5,r2,306d4 <altera_avalon_jtag_uart_ioctl+0x3c>
   306a0:	009a8084 	movi	r2,27138
   306a4:	2880091e 	bne	r5,r2,306cc <altera_avalon_jtag_uart_ioctl+0x34>
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   306a8:	21400117 	ldw	r5,4(r4)
   306ac:	00a00034 	movhi	r2,32768
   306b0:	10bfffc4 	addi	r2,r2,-1
   306b4:	28800526 	beq	r5,r2,306cc <altera_avalon_jtag_uart_ioctl+0x34>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   306b8:	20c00917 	ldw	r3,36(r4)
      rc = 0;
   306bc:	0005883a 	mov	r2,zero

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   306c0:	1947803a 	cmpltu	r3,r3,r5
   306c4:	30c00015 	stw	r3,0(r6)
   306c8:	f800283a 	ret

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;
   306cc:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
   306d0:	f800283a 	ret

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   306d4:	20c00117 	ldw	r3,4(r4)
   306d8:	00a00034 	movhi	r2,32768
   306dc:	10bfffc4 	addi	r2,r2,-1
   306e0:	18bffa26 	beq	r3,r2,306cc <__alt_data_end+0xffff06cc>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   306e4:	30800017 	ldw	r2,0(r6)
   306e8:	01600034 	movhi	r5,32768
   306ec:	297fff04 	addi	r5,r5,-4
   306f0:	10ffff84 	addi	r3,r2,-2
   306f4:	28c0022e 	bgeu	r5,r3,30700 <altera_avalon_jtag_uart_ioctl+0x68>
   306f8:	00a00034 	movhi	r2,32768
   306fc:	10bfff84 	addi	r2,r2,-2
   30700:	20800115 	stw	r2,4(r4)
      rc = 0;
   30704:	0005883a 	mov	r2,zero
   30708:	f800283a 	ret

0003070c <altera_avalon_jtag_uart_read>:
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   3070c:	01804e0e 	bge	zero,r6,30848 <altera_avalon_jtag_uart_read+0x13c>
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   30710:	defff504 	addi	sp,sp,-44
   30714:	dc000115 	stw	r16,4(sp)
   30718:	24000b17 	ldw	r16,44(r4)
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   3071c:	39d0000c 	andi	r7,r7,16384
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   30720:	dd800715 	stw	r22,28(sp)
   30724:	dd400615 	stw	r21,24(sp)
   30728:	dd000515 	stw	r20,20(sp)
   3072c:	dcc00415 	stw	r19,16(sp)
   30730:	dc800315 	stw	r18,12(sp)
   30734:	dfc00a15 	stw	ra,40(sp)
   30738:	df000915 	stw	fp,36(sp)
   3073c:	ddc00815 	stw	r23,32(sp)
   30740:	dc400215 	stw	r17,8(sp)
   30744:	3027883a 	mov	r19,r6
   30748:	2025883a 	mov	r18,r4
   3074c:	282d883a 	mov	r22,r5
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   30750:	d9c00015 	stw	r7,0(sp)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   30754:	05420004 	movi	r21,2048
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   30758:	25000e04 	addi	r20,r4,56
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   3075c:	b02f883a 	mov	r23,r22
   30760:	00000a06 	br	3078c <altera_avalon_jtag_uart_read+0x80>
   30764:	9880012e 	bgeu	r19,r2,3076c <altera_avalon_jtag_uart_read+0x60>
   30768:	9823883a 	mov	r17,r19

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3076c:	8461883a 	add	r16,r16,r17
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   30770:	880d883a 	mov	r6,r17
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   30774:	8401ffcc 	andi	r16,r16,2047
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   30778:	00277740 	call	27774 <memcpy>
      ptr   += n;
      space -= n;
   3077c:	9c67c83a 	sub	r19,r19,r17

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   30780:	94000b15 	stw	r16,44(r18)

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
   30784:	bc6f883a 	add	r23,r23,r17
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);
   30788:	04c0080e 	bge	zero,r19,307ac <altera_avalon_jtag_uart_read+0xa0>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   3078c:	97000a17 	ldw	fp,40(r18)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   30790:	ac05c83a 	sub	r2,r21,r16
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;

      if (in >= out)
   30794:	e4000136 	bltu	fp,r16,3079c <altera_avalon_jtag_uart_read+0x90>
        n = in - out;
   30798:	e405c83a 	sub	r2,fp,r16
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   3079c:	a40b883a 	add	r5,r20,r16
   307a0:	b809883a 	mov	r4,r23
   307a4:	1023883a 	mov	r17,r2
      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
   307a8:	103fee1e 	bne	r2,zero,30764 <__alt_data_end+0xffff0764>
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   307ac:	bd800d1e 	bne	r23,r22,307e4 <altera_avalon_jtag_uart_read+0xd8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   307b0:	d8800017 	ldw	r2,0(sp)
   307b4:	10000426 	beq	r2,zero,307c8 <altera_avalon_jtag_uart_read+0xbc>
   307b8:	00002106 	br	30840 <altera_avalon_jtag_uart_read+0x134>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   307bc:	90c00917 	ldw	r3,36(r18)
   307c0:	90800117 	ldw	r2,4(r18)
   307c4:	1880022e 	bgeu	r3,r2,307d0 <altera_avalon_jtag_uart_read+0xc4>
   307c8:	90800a17 	ldw	r2,40(r18)
   307cc:	e0bffb26 	beq	fp,r2,307bc <__alt_data_end+0xffff07bc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   307d0:	90800a17 	ldw	r2,40(r18)
   307d4:	e0800126 	beq	fp,r2,307dc <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   307d8:	04ffe016 	blt	zero,r19,3075c <__alt_data_end+0xffff075c>
  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
   307dc:	00bffec4 	movi	r2,-5
   307e0:	00000b06 	br	30810 <altera_avalon_jtag_uart_read+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   307e4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   307e8:	00bfff84 	movi	r2,-2
   307ec:	2084703a 	and	r2,r4,r2
   307f0:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   307f4:	90800817 	ldw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   307f8:	91400017 	ldw	r5,0(r18)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   307fc:	10800054 	ori	r2,r2,1
   30800:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   30804:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30808:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
   3080c:	bd85c83a 	sub	r2,r23,r22
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
   30810:	dfc00a17 	ldw	ra,40(sp)
   30814:	df000917 	ldw	fp,36(sp)
   30818:	ddc00817 	ldw	r23,32(sp)
   3081c:	dd800717 	ldw	r22,28(sp)
   30820:	dd400617 	ldw	r21,24(sp)
   30824:	dd000517 	ldw	r20,20(sp)
   30828:	dcc00417 	ldw	r19,16(sp)
   3082c:	dc800317 	ldw	r18,12(sp)
   30830:	dc400217 	ldw	r17,8(sp)
   30834:	dc000117 	ldw	r16,4(sp)
   30838:	dec00b04 	addi	sp,sp,44
   3083c:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   30840:	00bffd44 	movi	r2,-11
   30844:	003ff206 	br	30810 <__alt_data_end+0xffff0810>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
   30848:	39d0000c 	andi	r7,r7,16384
   3084c:	3800021e 	bne	r7,zero,30858 <altera_avalon_jtag_uart_read+0x14c>
    return -EWOULDBLOCK;
  else
    return -EIO;
   30850:	00bffec4 	movi	r2,-5
}
   30854:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   30858:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
   3085c:	f800283a 	ret

00030860 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   30860:	defff604 	addi	sp,sp,-40
   30864:	dc000015 	stw	r16,0(sp)
   30868:	dfc00915 	stw	ra,36(sp)
   3086c:	df000815 	stw	fp,32(sp)
   30870:	ddc00715 	stw	r23,28(sp)
   30874:	dd800615 	stw	r22,24(sp)
   30878:	dd400515 	stw	r21,20(sp)
   3087c:	dd000415 	stw	r20,16(sp)
   30880:	dcc00315 	stw	r19,12(sp)
   30884:	dc800215 	stw	r18,8(sp)
   30888:	dc400115 	stw	r17,4(sp)
   3088c:	2021883a 	mov	r16,r4
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   30890:	01804d0e 	bge	zero,r6,309c8 <altera_avalon_jtag_uart_write+0x168>
   30894:	302d883a 	mov	r22,r6
   30898:	2829883a 	mov	r20,r5
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
   3089c:	3c50000c 	andi	r17,r7,16384
   308a0:	282b883a 	mov	r21,r5
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   308a4:	04ffff84 	movi	r19,-2
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   308a8:	24820e04 	addi	r18,r4,2104
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   308ac:	87000c17 	ldw	fp,48(r16)
      out = sp->tx_out;
   308b0:	80c00d17 	ldw	r3,52(r16)

      if (in < out)
   308b4:	e0c03a2e 	bgeu	fp,r3,309a0 <altera_avalon_jtag_uart_write+0x140>
        n = out - 1 - in;
   308b8:	1dffffc4 	addi	r23,r3,-1
   308bc:	bf2fc83a 	sub	r23,r23,fp
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
   308c0:	b800131e 	bne	r23,zero,30910 <altera_avalon_jtag_uart_write+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   308c4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   308c8:	24c4703a 	and	r2,r4,r19
   308cc:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   308d0:	80800817 	ldw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   308d4:	81400017 	ldw	r5,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   308d8:	10800094 	ori	r2,r2,2
   308dc:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   308e0:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   308e4:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
   308e8:	8800341e 	bne	r17,zero,309bc <altera_avalon_jtag_uart_write+0x15c>
   308ec:	81000917 	ldw	r4,36(r16)
   308f0:	00000206 	br	308fc <altera_avalon_jtag_uart_write+0x9c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   308f4:	80800117 	ldw	r2,4(r16)
   308f8:	2080022e 	bgeu	r4,r2,30904 <altera_avalon_jtag_uart_write+0xa4>
   308fc:	80800d17 	ldw	r2,52(r16)
   30900:	18bffc26 	beq	r3,r2,308f4 <__alt_data_end+0xffff08f4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   30904:	203fe926 	beq	r4,zero,308ac <__alt_data_end+0xffff08ac>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   30908:	ad00181e 	bne	r21,r20,3096c <altera_avalon_jtag_uart_write+0x10c>
   3090c:	00003a06 	br	309f8 <altera_avalon_jtag_uart_write+0x198>
   30910:	b5c0012e 	bgeu	r22,r23,30918 <altera_avalon_jtag_uart_write+0xb8>
   30914:	b02f883a 	mov	r23,r22
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   30918:	9709883a 	add	r4,r18,fp
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3091c:	e5f9883a 	add	fp,fp,r23
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   30920:	a80b883a 	mov	r5,r21
   30924:	b80d883a 	mov	r6,r23
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   30928:	e701ffcc 	andi	fp,fp,2047
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   3092c:	00277740 	call	27774 <memcpy>
      ptr   += n;
      count -= n;
   30930:	b5edc83a 	sub	r22,r22,r23

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   30934:	87000c15 	stw	fp,48(r16)

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
   30938:	adeb883a 	add	r21,r21,r23
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   3093c:	05bfdb16 	blt	zero,r22,308ac <__alt_data_end+0xffff08ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30940:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30944:	00bfff84 	movi	r2,-2
   30948:	1884703a 	and	r2,r3,r2
   3094c:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   30950:	80800817 	ldw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   30954:	81000017 	ldw	r4,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   30958:	10800094 	ori	r2,r2,2
   3095c:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   30960:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30964:	1801703a 	wrctl	status,r3
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   30968:	a5402226 	beq	r20,r21,309f4 <altera_avalon_jtag_uart_write+0x194>
    return ptr - start;
   3096c:	ad05c83a 	sub	r2,r21,r20
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
   30970:	dfc00917 	ldw	ra,36(sp)
   30974:	df000817 	ldw	fp,32(sp)
   30978:	ddc00717 	ldw	r23,28(sp)
   3097c:	dd800617 	ldw	r22,24(sp)
   30980:	dd400517 	ldw	r21,20(sp)
   30984:	dd000417 	ldw	r20,16(sp)
   30988:	dcc00317 	ldw	r19,12(sp)
   3098c:	dc800217 	ldw	r18,8(sp)
   30990:	dc400117 	ldw	r17,4(sp)
   30994:	dc000017 	ldw	r16,0(sp)
   30998:	dec00a04 	addi	sp,sp,40
   3099c:	f800283a 	ret
      in  = sp->tx_in;
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
   309a0:	18000326 	beq	r3,zero,309b0 <altera_avalon_jtag_uart_write+0x150>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   309a4:	00820004 	movi	r2,2048
   309a8:	172fc83a 	sub	r23,r2,fp
   309ac:	003fc406 	br	308c0 <__alt_data_end+0xffff08c0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   309b0:	0081ffc4 	movi	r2,2047
   309b4:	172fc83a 	sub	r23,r2,fp
   309b8:	003fc106 	br	308c0 <__alt_data_end+0xffff08c0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   309bc:	ad3feb1e 	bne	r21,r20,3096c <__alt_data_end+0xffff096c>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   309c0:	00bffd44 	movi	r2,-11
   309c4:	003fea06 	br	30970 <__alt_data_end+0xffff0970>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   309c8:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   309cc:	00bfff84 	movi	r2,-2
   309d0:	1884703a 	and	r2,r3,r2
   309d4:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   309d8:	20800817 	ldw	r2,32(r4)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   309dc:	21000017 	ldw	r4,0(r4)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   309e0:	10800094 	ori	r2,r2,2
   309e4:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   309e8:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   309ec:	1801703a 	wrctl	status,r3
   309f0:	3c50000c 	andi	r17,r7,16384
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
   309f4:	883ff21e 	bne	r17,zero,309c0 <__alt_data_end+0xffff09c0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   309f8:	00bffec4 	movi	r2,-5
   309fc:	003fdc06 	br	30970 <__alt_data_end+0xffff0970>

00030a00 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   30a00:	defffe04 	addi	sp,sp,-8
   30a04:	dfc00115 	stw	ra,4(sp)
   30a08:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   30a0c:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   30a10:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30a14:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30a18:	00bfff84 	movi	r2,-2
   30a1c:	8084703a 	and	r2,r16,r2
   30a20:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
   30a24:	00315740 	call	31574 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30a28:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
   30a2c:	dfc00117 	ldw	ra,4(sp)
   30a30:	dc000017 	ldw	r16,0(sp)
   30a34:	dec00204 	addi	sp,sp,8
   30a38:	f800283a 	ret

00030a3c <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   30a3c:	d0e70b17 	ldw	r3,-25556(gp)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   30a40:	defffe04 	addi	sp,sp,-8
   30a44:	dfc00115 	stw	ra,4(sp)
   30a48:	2005883a 	mov	r2,r4
   30a4c:	2809883a 	mov	r4,r5
   30a50:	300b883a 	mov	r5,r6
   30a54:	1800011e 	bne	r3,zero,30a5c <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
   30a58:	d1e70b15 	stw	r7,-25556(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   30a5c:	00c001c4 	movi	r3,7
   30a60:	10c00135 	stwio	r3,4(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   30a64:	018000f4 	movhi	r6,3
   30a68:	31828004 	addi	r6,r6,2560
   30a6c:	d8000015 	stw	zero,0(sp)
   30a70:	100f883a 	mov	r7,r2
   30a74:	00311d00 	call	311d0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   30a78:	dfc00117 	ldw	ra,4(sp)
   30a7c:	dec00204 	addi	sp,sp,8
   30a80:	f800283a 	ret

00030a84 <altera_avalon_uart_read_fd>:
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
   30a84:	20800017 	ldw	r2,0(r4)
   30a88:	21c00217 	ldw	r7,8(r4)
   30a8c:	11000a04 	addi	r4,r2,40
   30a90:	0030c741 	jmpi	30c74 <altera_avalon_uart_read>

00030a94 <altera_avalon_uart_write_fd>:
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
   30a94:	20800017 	ldw	r2,0(r4)
   30a98:	21c00217 	ldw	r7,8(r4)
   30a9c:	11000a04 	addi	r4,r2,40
   30aa0:	0030e301 	jmpi	30e30 <altera_avalon_uart_write>

00030aa4 <altera_avalon_uart_close_fd>:
int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   30aa4:	20800017 	ldw	r2,0(r4)
   30aa8:	21400217 	ldw	r5,8(r4)
   30aac:	11000a04 	addi	r4,r2,40
   30ab0:	0030c441 	jmpi	30c44 <altera_avalon_uart_close>

00030ab4 <altera_avalon_uart_irq>:
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   30ab4:	20800017 	ldw	r2,0(r4)
   30ab8:	10800204 	addi	r2,r2,8
   30abc:	10c00037 	ldwio	r3,0(r2)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   30ac0:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   30ac4:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   30ac8:	1880200c 	andi	r2,r3,128
   30acc:	10002e1e 	bne	r2,zero,30b88 <altera_avalon_uart_irq+0xd4>
  {
    altera_avalon_uart_rxirq(sp, status);
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   30ad0:	1881100c 	andi	r2,r3,1088
   30ad4:	1000011e 	bne	r2,zero,30adc <altera_avalon_uart_irq+0x28>
   30ad8:	f800283a 	ret
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   30adc:	21400417 	ldw	r5,16(r4)
   30ae0:	20800517 	ldw	r2,20(r4)
   30ae4:	28804226 	beq	r5,r2,30bf0 <altera_avalon_uart_irq+0x13c>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   30ae8:	20800617 	ldw	r2,24(r4)
   30aec:	1080008c 	andi	r2,r2,2
   30af0:	10000b26 	beq	r2,zero,30b20 <altera_avalon_uart_irq+0x6c>
   30af4:	18c2000c 	andi	r3,r3,2048
   30af8:	1800091e 	bne	r3,zero,30b20 <altera_avalon_uart_irq+0x6c>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   30afc:	21400017 	ldw	r5,0(r4)
   30b00:	28800237 	ldwio	r2,8(r5)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   30b04:	1082000c 	andi	r2,r2,2048
   30b08:	10003c1e 	bne	r2,zero,30bfc <altera_avalon_uart_irq+0x148>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   30b0c:	20c00117 	ldw	r3,4(r4)
   30b10:	00bfefc4 	movi	r2,-65
   30b14:	1884703a 	and	r2,r3,r2
   30b18:	20800115 	stw	r2,4(r4)
   30b1c:	00001206 	br	30b68 <altera_avalon_uart_irq+0xb4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   30b20:	20800417 	ldw	r2,16(r4)
   30b24:	20800517 	ldw	r2,20(r4)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   30b28:	20800417 	ldw	r2,16(r4)
   30b2c:	20c00017 	ldw	r3,0(r4)
   30b30:	2085883a 	add	r2,r4,r2
   30b34:	10801704 	addi	r2,r2,92
   30b38:	10800003 	ldbu	r2,0(r2)
   30b3c:	10803fcc 	andi	r2,r2,255
   30b40:	18800135 	stwio	r2,4(r3)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   30b44:	20c00417 	ldw	r3,16(r4)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   30b48:	20800117 	ldw	r2,4(r4)
   30b4c:	21400017 	ldw	r5,0(r4)

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   30b50:	18c00044 	addi	r3,r3,1
   30b54:	20c00415 	stw	r3,16(r4)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   30b58:	10801014 	ori	r2,r2,64

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   30b5c:	18c00fcc 	andi	r3,r3,63
   30b60:	20c00415 	stw	r3,16(r4)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   30b64:	20800115 	stw	r2,4(r4)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   30b68:	21800417 	ldw	r6,16(r4)
   30b6c:	20c00517 	ldw	r3,20(r4)
   30b70:	30c0031e 	bne	r6,r3,30b80 <altera_avalon_uart_irq+0xcc>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   30b74:	00feefc4 	movi	r3,-1089
   30b78:	10c4703a 	and	r2,r2,r3
   30b7c:	20800115 	stw	r2,4(r4)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   30b80:	28800335 	stwio	r2,12(r5)
   30b84:	f800283a 	ret
{
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   30b88:	188000cc 	andi	r2,r3,3
   30b8c:	103fd01e 	bne	r2,zero,30ad0 <__alt_data_end+0xffff0ad0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   30b90:	20800317 	ldw	r2,12(r4)
   30b94:	20800217 	ldw	r2,8(r4)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   30b98:	20800317 	ldw	r2,12(r4)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   30b9c:	21800017 	ldw	r6,0(r4)
   30ba0:	21400317 	ldw	r5,12(r4)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   30ba4:	10800044 	addi	r2,r2,1
   30ba8:	10800fcc 	andi	r2,r2,63

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   30bac:	31800037 	ldwio	r6,0(r6)
   30bb0:	214b883a 	add	r5,r4,r5
   30bb4:	29400704 	addi	r5,r5,28
   30bb8:	29800005 	stb	r6,0(r5)

  sp->rx_end = next;
   30bbc:	20800315 	stw	r2,12(r4)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   30bc0:	20800317 	ldw	r2,12(r4)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   30bc4:	21400217 	ldw	r5,8(r4)
   30bc8:	10800044 	addi	r2,r2,1
   30bcc:	10800fcc 	andi	r2,r2,63
   30bd0:	117fbf1e 	bne	r2,r5,30ad0 <__alt_data_end+0xffff0ad0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   30bd4:	21800117 	ldw	r6,4(r4)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   30bd8:	21400017 	ldw	r5,0(r4)
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   30bdc:	00bfdfc4 	movi	r2,-129
   30be0:	3084703a 	and	r2,r6,r2
   30be4:	20800115 	stw	r2,4(r4)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   30be8:	28800335 	stwio	r2,12(r5)
   30bec:	003fb806 	br	30ad0 <__alt_data_end+0xffff0ad0>
   30bf0:	20800117 	ldw	r2,4(r4)
   30bf4:	21400017 	ldw	r5,0(r4)
   30bf8:	003fdb06 	br	30b68 <__alt_data_end+0xffff0b68>
   30bfc:	20800117 	ldw	r2,4(r4)
   30c00:	003fd906 	br	30b68 <__alt_data_end+0xffff0b68>

00030c04 <altera_avalon_uart_init>:

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  void* base = sp->base;
   30c04:	20c00017 	ldw	r3,0(r4)
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   30c08:	defffe04 	addi	sp,sp,-8
   30c0c:	200f883a 	mov	r7,r4
   30c10:	dfc00115 	stw	ra,4(sp)
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   30c14:	00832004 	movi	r2,3200
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   30c18:	2809883a 	mov	r4,r5
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   30c1c:	38800115 	stw	r2,4(r7)
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   30c20:	300b883a 	mov	r5,r6
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   30c24:	18800335 	stwio	r2,12(r3)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   30c28:	018000f4 	movhi	r6,3
   30c2c:	3182ad04 	addi	r6,r6,2740
   30c30:	d8000015 	stw	zero,0(sp)
   30c34:	00311d00 	call	311d0 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   30c38:	dfc00117 	ldw	ra,4(sp)
   30c3c:	dec00204 	addi	sp,sp,8
   30c40:	f800283a 	ret

00030c44 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   30c44:	2950000c 	andi	r5,r5,16384
   30c48:	2800051e 	bne	r5,zero,30c60 <altera_avalon_uart_close+0x1c>
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   30c4c:	20c00417 	ldw	r3,16(r4)
   30c50:	20800517 	ldw	r2,20(r4)
   30c54:	18bffd1e 	bne	r3,r2,30c4c <__alt_data_end+0xffff0c4c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   30c58:	0005883a 	mov	r2,zero
   30c5c:	f800283a 	ret
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   30c60:	20c00417 	ldw	r3,16(r4)
   30c64:	20800517 	ldw	r2,20(r4)
   30c68:	18bffb26 	beq	r3,r2,30c58 <__alt_data_end+0xffff0c58>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
   30c6c:	00bffd44 	movi	r2,-11
    }
  }

  return 0;
}
   30c70:	f800283a 	ret

00030c74 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   30c74:	defffe04 	addi	sp,sp,-8
   30c78:	dfc00115 	stw	ra,4(sp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   30c7c:	39d0000c 	andi	r7,r7,16384
   30c80:	30005626 	beq	r6,zero,30ddc <altera_avalon_uart_read+0x168>
   30c84:	0005883a 	mov	r2,zero
   30c88:	38002d1e 	bne	r7,zero,30d40 <altera_avalon_uart_read+0xcc>
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30c8c:	027fff84 	movi	r9,-2
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   30c90:	11800f0e 	bge	r2,r6,30cd0 <altera_avalon_uart_read+0x5c>
   30c94:	21c00217 	ldw	r7,8(r4)
   30c98:	20c00317 	ldw	r3,12(r4)
   30c9c:	38c00c26 	beq	r7,r3,30cd0 <altera_avalon_uart_read+0x5c>
    {
      count++;
      *ptr++ = sp->rx_buf[sp->rx_start];
   30ca0:	20c00217 	ldw	r3,8(r4)
   30ca4:	29400044 	addi	r5,r5,1
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    {
      count++;
   30ca8:	10800044 	addi	r2,r2,1
      *ptr++ = sp->rx_buf[sp->rx_start];
   30cac:	20c7883a 	add	r3,r4,r3
   30cb0:	18c00704 	addi	r3,r3,28
   30cb4:	18c00003 	ldbu	r3,0(r3)
   30cb8:	28ffffc5 	stb	r3,-1(r5)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   30cbc:	20c00217 	ldw	r3,8(r4)
   30cc0:	18c00044 	addi	r3,r3,1
   30cc4:	18c00fcc 	andi	r3,r3,63
   30cc8:	20c00215 	stw	r3,8(r4)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   30ccc:	11bff116 	blt	r2,r6,30c94 <__alt_data_end+0xffff0c94>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   30cd0:	10003326 	beq	r2,zero,30da0 <altera_avalon_uart_read+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30cd4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30cd8:	00ffff84 	movi	r3,-2
   30cdc:	28c6703a 	and	r3,r5,r3
   30ce0:	1801703a 	wrctl	status,r3
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   30ce4:	20c00117 	ldw	r3,4(r4)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   30ce8:	21800017 	ldw	r6,0(r4)
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   30cec:	18c02014 	ori	r3,r3,128
   30cf0:	20c00115 	stw	r3,4(r4)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   30cf4:	30c00335 	stwio	r3,12(r6)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30cf8:	2801703a 	wrctl	status,r5
    return -EWOULDBLOCK;
  }
  else {
    return count;
  }
}
   30cfc:	dfc00117 	ldw	ra,4(sp)
   30d00:	dec00204 	addi	sp,sp,8
   30d04:	f800283a 	ret
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   30d08:	21c00217 	ldw	r7,8(r4)
   30d0c:	20c00317 	ldw	r3,12(r4)
   30d10:	38c00c26 	beq	r7,r3,30d44 <altera_avalon_uart_read+0xd0>
    {
      count++;
      *ptr++ = sp->rx_buf[sp->rx_start];
   30d14:	20c00217 	ldw	r3,8(r4)
   30d18:	29400044 	addi	r5,r5,1
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    {
      count++;
   30d1c:	10800044 	addi	r2,r2,1
      *ptr++ = sp->rx_buf[sp->rx_start];
   30d20:	20c7883a 	add	r3,r4,r3
   30d24:	18c00704 	addi	r3,r3,28
   30d28:	18c00003 	ldbu	r3,0(r3)
   30d2c:	28ffffc5 	stb	r3,-1(r5)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   30d30:	20c00217 	ldw	r3,8(r4)
   30d34:	18c00044 	addi	r3,r3,1
   30d38:	18c00fcc 	andi	r3,r3,63
   30d3c:	20c00215 	stw	r3,8(r4)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   30d40:	11bff116 	blt	r2,r6,30d08 <__alt_data_end+0xffff0d08>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   30d44:	103fe31e 	bne	r2,zero,30cd4 <__alt_data_end+0xffff0cd4>
   30d48:	21c00217 	ldw	r7,8(r4)
   30d4c:	20c00317 	ldw	r3,12(r4)
   30d50:	38fffb1e 	bne	r7,r3,30d40 <__alt_data_end+0xffff0d40>
   30d54:	d0a00b17 	ldw	r2,-32724(gp)
   30d58:	10001e26 	beq	r2,zero,30dd4 <altera_avalon_uart_read+0x160>
   30d5c:	d9000015 	stw	r4,0(sp)
   30d60:	103ee83a 	callr	r2
   30d64:	d9000017 	ldw	r4,0(sp)
    {
      if (!block)
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   30d68:	00c002c4 	movi	r3,11
   30d6c:	10c00015 	stw	r3,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30d70:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30d74:	00bfff84 	movi	r2,-2
   30d78:	1884703a 	and	r2,r3,r2
   30d7c:	1001703a 	wrctl	status,r2
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   30d80:	20800117 	ldw	r2,4(r4)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   30d84:	21400017 	ldw	r5,0(r4)
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   30d88:	10802014 	ori	r2,r2,128
   30d8c:	20800115 	stw	r2,4(r4)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   30d90:	28800335 	stwio	r2,12(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30d94:	1801703a 	wrctl	status,r3
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
    return -EWOULDBLOCK;
   30d98:	00bffd44 	movi	r2,-11
   30d9c:	003fd706 	br	30cfc <__alt_data_end+0xffff0cfc>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   30da0:	21c00217 	ldw	r7,8(r4)
   30da4:	20c00317 	ldw	r3,12(r4)
   30da8:	38ffb91e 	bne	r7,r3,30c90 <__alt_data_end+0xffff0c90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30dac:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30db0:	3a46703a 	and	r3,r7,r9
   30db4:	1801703a 	wrctl	status,r3
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   30db8:	20c00117 	ldw	r3,4(r4)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   30dbc:	22000017 	ldw	r8,0(r4)
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   30dc0:	18c02014 	ori	r3,r3,128
   30dc4:	20c00115 	stw	r3,4(r4)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   30dc8:	40c00335 	stwio	r3,12(r8)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30dcc:	3801703a 	wrctl	status,r7
   30dd0:	003faf06 	br	30c90 <__alt_data_end+0xffff0c90>
   30dd4:	d0a70504 	addi	r2,gp,-25580
   30dd8:	003fe306 	br	30d68 <__alt_data_end+0xffff0d68>
   30ddc:	3800101e 	bne	r7,zero,30e20 <altera_avalon_uart_read+0x1ac>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   30de0:	20c00217 	ldw	r3,8(r4)
   30de4:	20800317 	ldw	r2,12(r4)
   30de8:	18800226 	beq	r3,r2,30df4 <altera_avalon_uart_read+0x180>
   30dec:	0005883a 	mov	r2,zero
   30df0:	003fb806 	br	30cd4 <__alt_data_end+0xffff0cd4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30df4:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30df8:	00bfff84 	movi	r2,-2
   30dfc:	1884703a 	and	r2,r3,r2
   30e00:	1001703a 	wrctl	status,r2
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   30e04:	20800117 	ldw	r2,4(r4)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   30e08:	21400017 	ldw	r5,0(r4)
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   30e0c:	10802014 	ori	r2,r2,128
   30e10:	20800115 	stw	r2,4(r4)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   30e14:	28800335 	stwio	r2,12(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30e18:	1801703a 	wrctl	status,r3
   30e1c:	003ff306 	br	30dec <__alt_data_end+0xffff0dec>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   30e20:	20800217 	ldw	r2,8(r4)
   30e24:	20c00317 	ldw	r3,12(r4)
   30e28:	18bff01e 	bne	r3,r2,30dec <__alt_data_end+0xffff0dec>
   30e2c:	003fc906 	br	30d54 <__alt_data_end+0xffff0d54>

00030e30 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   30e30:	defffc04 	addi	sp,sp,-16
   30e34:	dfc00315 	stw	ra,12(sp)
   30e38:	dc000215 	stw	r16,8(sp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   30e3c:	30001f26 	beq	r6,zero,30ebc <altera_avalon_uart_write+0x8c>
   30e40:	39d0000c 	andi	r7,r7,16384
   30e44:	3021883a 	mov	r16,r6
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30e48:	02bfff84 	movi	r10,-2
   30e4c:	00000906 	br	30e74 <altera_avalon_uart_write+0x44>

    count--;

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   30e50:	20c00517 	ldw	r3,20(r4)
   30e54:	2a000003 	ldbu	r8,0(r5)
        }
        while ((next == sp->tx_start));
      }
    }

    count--;
   30e58:	843fffc4 	addi	r16,r16,-1

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   30e5c:	20c7883a 	add	r3,r4,r3
   30e60:	18c01704 	addi	r3,r3,92
   30e64:	1a000005 	stb	r8,0(r3)
    sp->tx_end = next;
   30e68:	20800515 	stw	r2,20(r4)
   30e6c:	29400044 	addi	r5,r5,1
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   30e70:	80001226 	beq	r16,zero,30ebc <altera_avalon_uart_write+0x8c>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   30e74:	20800517 	ldw	r2,20(r4)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   30e78:	20c00417 	ldw	r3,16(r4)

  while (count)
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   30e7c:	10800044 	addi	r2,r2,1
   30e80:	10800fcc 	andi	r2,r2,63

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   30e84:	10fff21e 	bne	r2,r3,30e50 <__alt_data_end+0xffff0e50>
    {
      if (no_block)
   30e88:	38001c1e 	bne	r7,zero,30efc <altera_avalon_uart_write+0xcc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30e8c:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30e90:	4286703a 	and	r3,r8,r10
   30e94:	1801703a 	wrctl	status,r3
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   30e98:	20c00117 	ldw	r3,4(r4)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   30e9c:	22400017 	ldw	r9,0(r4)
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   30ea0:	18c11014 	ori	r3,r3,1088
   30ea4:	20c00115 	stw	r3,4(r4)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   30ea8:	48c00335 	stwio	r3,12(r9)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30eac:	4001703a 	wrctl	status,r8
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   30eb0:	20c00417 	ldw	r3,16(r4)
   30eb4:	10fffe26 	beq	r2,r3,30eb0 <__alt_data_end+0xffff0eb0>
   30eb8:	003fe506 	br	30e50 <__alt_data_end+0xffff0e50>
   30ebc:	0021883a 	mov	r16,zero
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30ec0:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30ec4:	00bfff84 	movi	r2,-2
   30ec8:	1884703a 	and	r2,r3,r2
   30ecc:	1001703a 	wrctl	status,r2
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   30ed0:	20800117 	ldw	r2,4(r4)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   30ed4:	21400017 	ldw	r5,0(r4)
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   30ed8:	10811014 	ori	r2,r2,1088
   30edc:	20800115 	stw	r2,4(r4)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   30ee0:	28800335 	stwio	r2,12(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30ee4:	1801703a 	wrctl	status,r3
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
}
   30ee8:	3405c83a 	sub	r2,r6,r16
   30eec:	dfc00317 	ldw	ra,12(sp)
   30ef0:	dc000217 	ldw	r16,8(sp)
   30ef4:	dec00404 	addi	sp,sp,16
   30ef8:	f800283a 	ret
   30efc:	d0a00b17 	ldw	r2,-32724(gp)
   30f00:	10000826 	beq	r2,zero,30f24 <altera_avalon_uart_write+0xf4>
   30f04:	d9000015 	stw	r4,0(sp)
   30f08:	d9800115 	stw	r6,4(sp)
   30f0c:	103ee83a 	callr	r2
   30f10:	d9000017 	ldw	r4,0(sp)
   30f14:	d9800117 	ldw	r6,4(sp)
    {
      if (no_block)
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   30f18:	00c002c4 	movi	r3,11
   30f1c:	10c00015 	stw	r3,0(r2)
        break;
   30f20:	003fe706 	br	30ec0 <__alt_data_end+0xffff0ec0>
   30f24:	d0a70504 	addi	r2,gp,-25580
   30f28:	003ffb06 	br	30f18 <__alt_data_end+0xffff0f18>

00030f2c <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
   30f2c:	d0a70b17 	ldw	r2,-25556(gp)
   30f30:	10001a26 	beq	r2,zero,30f9c <alt_alarm_start+0x70>
  {
    if (alarm)
   30f34:	20001b26 	beq	r4,zero,30fa4 <alt_alarm_start+0x78>
    {
      alarm->callback = callback;
   30f38:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
   30f3c:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30f40:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30f44:	00bfff84 	movi	r2,-2
   30f48:	1884703a 	and	r2,r3,r2
   30f4c:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   30f50:	d0a70a17 	ldw	r2,-25560(gp)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
   30f54:	11800044 	addi	r6,r2,1
   30f58:	314b883a 	add	r5,r6,r5
   30f5c:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   30f60:	28800b36 	bltu	r5,r2,30f90 <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
      }
      else
      {
        alarm->rollover = 0;
   30f64:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   30f68:	d0a00e04 	addi	r2,gp,-32712
   30f6c:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
   30f70:	d0a00e17 	ldw	r2,-32712(gp)
   30f74:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   30f78:	d0a00e17 	ldw	r2,-32712(gp)
  list->next           = entry;
   30f7c:	d1200e15 	stw	r4,-32712(gp)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
   30f80:	11000115 	stw	r4,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30f84:	1801703a 	wrctl	status,r3
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
   30f88:	0005883a 	mov	r2,zero
   30f8c:	f800283a 	ret
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
      {
        alarm->rollover = 1;
   30f90:	00800044 	movi	r2,1
   30f94:	20800405 	stb	r2,16(r4)
   30f98:	003ff306 	br	30f68 <__alt_data_end+0xffff0f68>
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
   30f9c:	00bfde84 	movi	r2,-134
   30fa0:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
   30fa4:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
   30fa8:	f800283a 	ret

00030fac <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   30fac:	00c20034 	movhi	r3,2048
   30fb0:	18ffffc4 	addi	r3,r3,-1
   30fb4:	20c7203a 	divu	r3,r4,r3
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   30fb8:	18000f26 	beq	r3,zero,30ff8 <alt_busy_sleep+0x4c>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   30fbc:	01a00034 	movhi	r6,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   30fc0:	017e0034 	movhi	r5,63488
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   30fc4:	31bfffc4 	addi	r6,r6,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   30fc8:	29400044 	addi	r5,r5,1
   30fcc:	0005883a 	mov	r2,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   30fd0:	31bfffc4 	addi	r6,r6,-1
   30fd4:	303ffe1e 	bne	r6,zero,30fd0 <__alt_data_end+0xffff0fd0>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   30fd8:	10800044 	addi	r2,r2,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   30fdc:	2149883a 	add	r4,r4,r5
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   30fe0:	10fffb16 	blt	r2,r3,30fd0 <__alt_data_end+0xffff0fd0>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   30fe4:	2008913a 	slli	r4,r4,4
   30fe8:	213fffc4 	addi	r4,r4,-1
   30fec:	203ffe1e 	bne	r4,zero,30fe8 <__alt_data_end+0xffff0fe8>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   30ff0:	0005883a 	mov	r2,zero
   30ff4:	f800283a 	ret
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   30ff8:	2008913a 	slli	r4,r4,4
   30ffc:	213fffc4 	addi	r4,r4,-1
   31000:	013ffe16 	blt	zero,r4,30ffc <__alt_data_end+0xffff0ffc>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   31004:	0005883a 	mov	r2,zero
   31008:	f800283a 	ret

0003100c <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   3100c:	0005883a 	mov	r2,zero
   31010:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   31014:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   31018:	10800804 	addi	r2,r2,32
   3101c:	10fffd1e 	bne	r2,r3,31014 <__alt_data_end+0xffff1014>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   31020:	f800283a 	ret

00031024 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   31024:	defffe04 	addi	sp,sp,-8
   31028:	dfc00115 	stw	ra,4(sp)
   3102c:	df000015 	stw	fp,0(sp)
   31030:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   31034:	d0a00b17 	ldw	r2,-32724(gp)
   31038:	10000326 	beq	r2,zero,31048 <alt_get_errno+0x24>
   3103c:	d0a00b17 	ldw	r2,-32724(gp)
   31040:	103ee83a 	callr	r2
   31044:	00000106 	br	3104c <alt_get_errno+0x28>
   31048:	d0a70504 	addi	r2,gp,-25580
}
   3104c:	e037883a 	mov	sp,fp
   31050:	dfc00117 	ldw	ra,4(sp)
   31054:	df000017 	ldw	fp,0(sp)
   31058:	dec00204 	addi	sp,sp,8
   3105c:	f800283a 	ret

00031060 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   31060:	defffa04 	addi	sp,sp,-24
   31064:	dfc00515 	stw	ra,20(sp)
   31068:	df000415 	stw	fp,16(sp)
   3106c:	df000404 	addi	fp,sp,16
   31070:	e13ffe15 	stw	r4,-8(fp)
   31074:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   31078:	e0bffe17 	ldw	r2,-8(fp)
   3107c:	10000326 	beq	r2,zero,3108c <alt_dev_llist_insert+0x2c>
   31080:	e0bffe17 	ldw	r2,-8(fp)
   31084:	10800217 	ldw	r2,8(r2)
   31088:	1000061e 	bne	r2,zero,310a4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   3108c:	00310240 	call	31024 <alt_get_errno>
   31090:	1007883a 	mov	r3,r2
   31094:	00800584 	movi	r2,22
   31098:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   3109c:	00bffa84 	movi	r2,-22
   310a0:	00001306 	br	310f0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   310a4:	e0bffe17 	ldw	r2,-8(fp)
   310a8:	e0ffff17 	ldw	r3,-4(fp)
   310ac:	e0fffc15 	stw	r3,-16(fp)
   310b0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   310b4:	e0bffd17 	ldw	r2,-12(fp)
   310b8:	e0fffc17 	ldw	r3,-16(fp)
   310bc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   310c0:	e0bffc17 	ldw	r2,-16(fp)
   310c4:	10c00017 	ldw	r3,0(r2)
   310c8:	e0bffd17 	ldw	r2,-12(fp)
   310cc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   310d0:	e0bffc17 	ldw	r2,-16(fp)
   310d4:	10800017 	ldw	r2,0(r2)
   310d8:	e0fffd17 	ldw	r3,-12(fp)
   310dc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   310e0:	e0bffc17 	ldw	r2,-16(fp)
   310e4:	e0fffd17 	ldw	r3,-12(fp)
   310e8:	10c00015 	stw	r3,0(r2)

  return 0;  
   310ec:	0005883a 	mov	r2,zero
}
   310f0:	e037883a 	mov	sp,fp
   310f4:	dfc00117 	ldw	ra,4(sp)
   310f8:	df000017 	ldw	fp,0(sp)
   310fc:	dec00204 	addi	sp,sp,8
   31100:	f800283a 	ret

00031104 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   31104:	defffd04 	addi	sp,sp,-12
   31108:	dfc00215 	stw	ra,8(sp)
   3110c:	df000115 	stw	fp,4(sp)
   31110:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   31114:	008000f4 	movhi	r2,3
   31118:	10877304 	addi	r2,r2,7628
   3111c:	e0bfff15 	stw	r2,-4(fp)
   31120:	00000606 	br	3113c <_do_ctors+0x38>
        (*ctor) (); 
   31124:	e0bfff17 	ldw	r2,-4(fp)
   31128:	10800017 	ldw	r2,0(r2)
   3112c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   31130:	e0bfff17 	ldw	r2,-4(fp)
   31134:	10bfff04 	addi	r2,r2,-4
   31138:	e0bfff15 	stw	r2,-4(fp)
   3113c:	e0ffff17 	ldw	r3,-4(fp)
   31140:	008000f4 	movhi	r2,3
   31144:	10877404 	addi	r2,r2,7632
   31148:	18bff62e 	bgeu	r3,r2,31124 <__alt_data_end+0xffff1124>
        (*ctor) (); 
}
   3114c:	0001883a 	nop
   31150:	e037883a 	mov	sp,fp
   31154:	dfc00117 	ldw	ra,4(sp)
   31158:	df000017 	ldw	fp,0(sp)
   3115c:	dec00204 	addi	sp,sp,8
   31160:	f800283a 	ret

00031164 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   31164:	defffd04 	addi	sp,sp,-12
   31168:	dfc00215 	stw	ra,8(sp)
   3116c:	df000115 	stw	fp,4(sp)
   31170:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   31174:	008000f4 	movhi	r2,3
   31178:	10877304 	addi	r2,r2,7628
   3117c:	e0bfff15 	stw	r2,-4(fp)
   31180:	00000606 	br	3119c <_do_dtors+0x38>
        (*dtor) (); 
   31184:	e0bfff17 	ldw	r2,-4(fp)
   31188:	10800017 	ldw	r2,0(r2)
   3118c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   31190:	e0bfff17 	ldw	r2,-4(fp)
   31194:	10bfff04 	addi	r2,r2,-4
   31198:	e0bfff15 	stw	r2,-4(fp)
   3119c:	e0ffff17 	ldw	r3,-4(fp)
   311a0:	008000f4 	movhi	r2,3
   311a4:	10877404 	addi	r2,r2,7632
   311a8:	18bff62e 	bgeu	r3,r2,31184 <__alt_data_end+0xffff1184>
        (*dtor) (); 
}
   311ac:	0001883a 	nop
   311b0:	e037883a 	mov	sp,fp
   311b4:	dfc00117 	ldw	ra,4(sp)
   311b8:	df000017 	ldw	fp,0(sp)
   311bc:	dec00204 	addi	sp,sp,8
   311c0:	f800283a 	ret

000311c4 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   311c4:	01440004 	movi	r5,4096
   311c8:	0009883a 	mov	r4,zero
   311cc:	00317e41 	jmpi	317e4 <alt_icache_flush>

000311d0 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   311d0:	003125c1 	jmpi	3125c <alt_iic_isr_register>

000311d4 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   311d4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   311d8:	00bfff84 	movi	r2,-2
   311dc:	2084703a 	and	r2,r4,r2
   311e0:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   311e4:	00c00044 	movi	r3,1
   311e8:	d0a70917 	ldw	r2,-25564(gp)
   311ec:	194a983a 	sll	r5,r3,r5
   311f0:	288ab03a 	or	r5,r5,r2
   311f4:	d1670915 	stw	r5,-25564(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   311f8:	d0a70917 	ldw	r2,-25564(gp)
   311fc:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31200:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
   31204:	0005883a 	mov	r2,zero
   31208:	f800283a 	ret

0003120c <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3120c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31210:	00bfff84 	movi	r2,-2
   31214:	2084703a 	and	r2,r4,r2
   31218:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   3121c:	00ffff84 	movi	r3,-2
   31220:	d0a70917 	ldw	r2,-25564(gp)
   31224:	194a183a 	rol	r5,r3,r5
   31228:	288a703a 	and	r5,r5,r2
   3122c:	d1670915 	stw	r5,-25564(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   31230:	d0a70917 	ldw	r2,-25564(gp)
   31234:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31238:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
   3123c:	0005883a 	mov	r2,zero
   31240:	f800283a 	ret

00031244 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   31244:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
   31248:	00800044 	movi	r2,1
   3124c:	1144983a 	sll	r2,r2,r5
   31250:	10c4703a 	and	r2,r2,r3
}
   31254:	1004c03a 	cmpne	r2,r2,zero
   31258:	f800283a 	ret

0003125c <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   3125c:	00c007c4 	movi	r3,31
   31260:	19401616 	blt	r3,r5,312bc <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   31264:	defffe04 	addi	sp,sp,-8
   31268:	dfc00115 	stw	ra,4(sp)
   3126c:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31270:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31274:	00ffff84 	movi	r3,-2
   31278:	80c6703a 	and	r3,r16,r3
   3127c:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   31280:	280490fa 	slli	r2,r5,3
   31284:	00c000f4 	movhi	r3,3
   31288:	18d65804 	addi	r3,r3,22880
   3128c:	1885883a 	add	r2,r3,r2
   31290:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
   31294:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   31298:	30000626 	beq	r6,zero,312b4 <alt_iic_isr_register+0x58>
   3129c:	00311d40 	call	311d4 <alt_ic_irq_enable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   312a0:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
   312a4:	dfc00117 	ldw	ra,4(sp)
   312a8:	dc000017 	ldw	r16,0(sp)
   312ac:	dec00204 	addi	sp,sp,8
   312b0:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   312b4:	003120c0 	call	3120c <alt_ic_irq_disable>
   312b8:	003ff906 	br	312a0 <__alt_data_end+0xffff12a0>
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
   312bc:	00bffa84 	movi	r2,-22
   312c0:	f800283a 	ret

000312c4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   312c4:	defffd04 	addi	sp,sp,-12
   312c8:	dc400115 	stw	r17,4(sp)
   312cc:	dc000015 	stw	r16,0(sp)
   312d0:	2823883a 	mov	r17,r5
   312d4:	3021883a 	mov	r16,r6

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
   312d8:	01400044 	movi	r5,1
   312dc:	01807fc4 	movi	r6,511
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   312e0:	dfc00215 	stw	ra,8(sp)

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
   312e4:	00313c80 	call	313c8 <open>

  if (old >= 0)
   312e8:	10000c16 	blt	r2,zero,3131c <alt_io_redirect+0x58>
  {
    fd->dev      = alt_fd_list[old].dev;
   312ec:	10c00324 	muli	r3,r2,12
   312f0:	014000f4 	movhi	r5,3
   312f4:	294a8d04 	addi	r5,r5,10804
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
   312f8:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
   312fc:	28c5883a 	add	r2,r5,r3
   31300:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
   31304:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
   31308:	29800315 	stw	r6,12(r5)
    fd->priv     = alt_fd_list[old].priv;
   3130c:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   31310:	28c00515 	stw	r3,20(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
   31314:	28800415 	stw	r2,16(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
   31318:	00302340 	call	30234 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
   3131c:	01807fc4 	movi	r6,511
   31320:	000b883a 	mov	r5,zero
   31324:	8809883a 	mov	r4,r17
   31328:	00313c80 	call	313c8 <open>

  if (old >= 0)
   3132c:	10000c16 	blt	r2,zero,31360 <alt_io_redirect+0x9c>
  {
    fd->dev      = alt_fd_list[old].dev;
   31330:	10c00324 	muli	r3,r2,12
   31334:	014000f4 	movhi	r5,3
   31338:	294a8d04 	addi	r5,r5,10804
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
   3133c:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
   31340:	28c5883a 	add	r2,r5,r3
   31344:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
   31348:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
   3134c:	29800015 	stw	r6,0(r5)
    fd->priv     = alt_fd_list[old].priv;
   31350:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   31354:	28c00215 	stw	r3,8(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
   31358:	28800115 	stw	r2,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
   3135c:	00302340 	call	30234 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
   31360:	01807fc4 	movi	r6,511
   31364:	01400044 	movi	r5,1
   31368:	8009883a 	mov	r4,r16
   3136c:	00313c80 	call	313c8 <open>

  if (old >= 0)
   31370:	10001016 	blt	r2,zero,313b4 <alt_io_redirect+0xf0>
  {
    fd->dev      = alt_fd_list[old].dev;
   31374:	10c00324 	muli	r3,r2,12
   31378:	014000f4 	movhi	r5,3
   3137c:	294a8d04 	addi	r5,r5,10804
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
   31380:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
   31384:	28c5883a 	add	r2,r5,r3
   31388:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
   3138c:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
   31390:	29800615 	stw	r6,24(r5)
    fd->priv     = alt_fd_list[old].priv;
   31394:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   31398:	28c00815 	stw	r3,32(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
   3139c:	28800715 	stw	r2,28(r5)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
   313a0:	dfc00217 	ldw	ra,8(sp)
   313a4:	dc400117 	ldw	r17,4(sp)
   313a8:	dc000017 	ldw	r16,0(sp)
   313ac:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
   313b0:	00302341 	jmpi	30234 <alt_release_fd>
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
   313b4:	dfc00217 	ldw	ra,8(sp)
   313b8:	dc400117 	ldw	r17,4(sp)
   313bc:	dc000017 	ldw	r16,0(sp)
   313c0:	dec00304 	addi	sp,sp,12
   313c4:	f800283a 	ret

000313c8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   313c8:	defffa04 	addi	sp,sp,-24
   313cc:	dc000015 	stw	r16,0(sp)
   313d0:	2821883a 	mov	r16,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   313d4:	d1600704 	addi	r5,gp,-32740
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   313d8:	dc800215 	stw	r18,8(sp)
   313dc:	dc400115 	stw	r17,4(sp)
   313e0:	dfc00515 	stw	ra,20(sp)
   313e4:	dd000415 	stw	r20,16(sp)
   313e8:	dcc00315 	stw	r19,12(sp)
   313ec:	2023883a 	mov	r17,r4
   313f0:	3025883a 	mov	r18,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   313f4:	00316700 	call	31670 <alt_find_dev>
   313f8:	10004626 	beq	r2,zero,31514 <open+0x14c>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
   313fc:	1009883a 	mov	r4,r2
   31400:	1029883a 	mov	r20,r2
   31404:	00317940 	call	31794 <alt_get_fd>
   31408:	1027883a 	mov	r19,r2
   3140c:	1000090e 	bge	r2,zero,31434 <open+0x6c>
   31410:	04e1c83a 	sub	r16,zero,r19

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
   31414:	9809883a 	mov	r4,r19
   31418:	00302340 	call	30234 <alt_release_fd>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   3141c:	d0a00b17 	ldw	r2,-32724(gp)
   31420:	10004326 	beq	r2,zero,31530 <open+0x168>
   31424:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
   31428:	14000015 	stw	r16,0(r2)
    return -1;
   3142c:	00bfffc4 	movi	r2,-1
   31430:	00002e06 	br	314ec <open+0x124>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
   31434:	99000324 	muli	r4,r19,12

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   31438:	00d00034 	movhi	r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
   3143c:	008000f4 	movhi	r2,3

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   31440:	18ffffc4 	addi	r3,r3,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
   31444:	108a8d04 	addi	r2,r2,10804

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   31448:	80c6703a 	and	r3,r16,r3
   3144c:	18d00034 	orhi	r3,r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
   31450:	2089883a 	add	r4,r4,r2

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   31454:	20c00215 	stw	r3,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   31458:	d2200617 	ldw	r8,-32744(gp)
   3145c:	21c00017 	ldw	r7,0(r4)
   31460:	11400204 	addi	r5,r2,8
   31464:	0007883a 	mov	r3,zero
   31468:	00000306 	br	31478 <open+0xb0>
   3146c:	10800304 	addi	r2,r2,12
   31470:	29400304 	addi	r5,r5,12
   31474:	40c01436 	bltu	r8,r3,314c8 <open+0x100>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   31478:	11800017 	ldw	r6,0(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   3147c:	18c00044 	addi	r3,r3,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   31480:	31fffa1e 	bne	r6,r7,3146c <__alt_data_end+0xffff146c>
   31484:	29800017 	ldw	r6,0(r5)
   31488:	303ff80e 	bge	r6,zero,3146c <__alt_data_end+0xffff146c>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   3148c:	20bff726 	beq	r4,r2,3146c <__alt_data_end+0xffff146c>
   31490:	04000344 	movi	r16,13
   31494:	003fdf06 	br	31414 <__alt_data_end+0xffff1414>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
   31498:	1009883a 	mov	r4,r2
   3149c:	00317940 	call	31794 <alt_get_fd>
   314a0:	1027883a 	mov	r19,r2
   314a4:	103fda16 	blt	r2,zero,31410 <__alt_data_end+0xffff1410>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
   314a8:	99000324 	muli	r4,r19,12
   314ac:	008000f4 	movhi	r2,3
   314b0:	108a8d04 	addi	r2,r2,10804
   314b4:	2089883a 	add	r4,r4,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   314b8:	00900034 	movhi	r2,16384
   314bc:	10bfffc4 	addi	r2,r2,-1
   314c0:	8084703a 	and	r2,r16,r2
   314c4:	20800215 	stw	r2,8(r4)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   314c8:	a0800317 	ldw	r2,12(r20)
   314cc:	10000f26 	beq	r2,zero,3150c <open+0x144>
   314d0:	900f883a 	mov	r7,r18
   314d4:	800d883a 	mov	r6,r16
   314d8:	880b883a 	mov	r5,r17
   314dc:	103ee83a 	callr	r2
   314e0:	1007883a 	mov	r3,r2
   314e4:	9805883a 	mov	r2,r19
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   314e8:	18001316 	blt	r3,zero,31538 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
}
   314ec:	dfc00517 	ldw	ra,20(sp)
   314f0:	dd000417 	ldw	r20,16(sp)
   314f4:	dcc00317 	ldw	r19,12(sp)
   314f8:	dc800217 	ldw	r18,8(sp)
   314fc:	dc400117 	ldw	r17,4(sp)
   31500:	dc000017 	ldw	r16,0(sp)
   31504:	dec00604 	addi	sp,sp,24
   31508:	f800283a 	ret
   3150c:	9805883a 	mov	r2,r19
   31510:	003ff606 	br	314ec <__alt_data_end+0xffff14ec>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   31514:	8809883a 	mov	r4,r17
   31518:	00316e80 	call	316e8 <alt_find_file>
   3151c:	1029883a 	mov	r20,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   31520:	103fdd1e 	bne	r2,zero,31498 <__alt_data_end+0xffff1498>
   31524:	040004c4 	movi	r16,19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   31528:	04ffffc4 	movi	r19,-1
   3152c:	003fb906 	br	31414 <__alt_data_end+0xffff1414>
   31530:	d0a70504 	addi	r2,gp,-25580
   31534:	003fbc06 	br	31428 <__alt_data_end+0xffff1428>
   31538:	00e1c83a 	sub	r16,zero,r3
   3153c:	003fb506 	br	31414 <__alt_data_end+0xffff1414>

00031540 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31540:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31544:	00bfff84 	movi	r2,-2
   31548:	1884703a 	and	r2,r3,r2
   3154c:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   31550:	21400117 	ldw	r5,4(r4)
   31554:	20800017 	ldw	r2,0(r4)
   31558:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
   3155c:	21400117 	ldw	r5,4(r4)
   31560:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   31564:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
   31568:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3156c:	1801703a 	wrctl	status,r3
   31570:	f800283a 	ret

00031574 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   31574:	d0a70a17 	ldw	r2,-25560(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   31578:	defffa04 	addi	sp,sp,-24
   3157c:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   31580:	d4200e17 	ldw	r16,-32712(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   31584:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   31588:	dc800215 	stw	r18,8(sp)
   3158c:	dfc00515 	stw	ra,20(sp)
   31590:	dd000415 	stw	r20,16(sp)
   31594:	dcc00315 	stw	r19,12(sp)
   31598:	dc400115 	stw	r17,4(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   3159c:	d4a00e04 	addi	r18,gp,-32712

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   315a0:	d0a70a15 	stw	r2,-25560(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   315a4:	84801126 	beq	r16,r18,315ec <alt_tick+0x78>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
   315a8:	04c00044 	movi	r19,1
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   315ac:	053fff84 	movi	r20,-2
   315b0:	00000606 	br	315cc <alt_tick+0x58>
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    {
      alarm->rollover = 0;
   315b4:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   315b8:	d0e70a17 	ldw	r3,-25560(gp)
   315bc:	80800217 	ldw	r2,8(r16)
   315c0:	1880122e 	bgeu	r3,r2,3160c <alt_tick+0x98>
   315c4:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   315c8:	8c800826 	beq	r17,r18,315ec <alt_tick+0x78>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   315cc:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
   315d0:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   315d4:	103ff826 	beq	r2,zero,315b8 <__alt_data_end+0xffff15b8>
   315d8:	d0a70a17 	ldw	r2,-25560(gp)
   315dc:	103ff526 	beq	r2,zero,315b4 <__alt_data_end+0xffff15b4>
    {
      alarm->rollover = 0;
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   315e0:	d0a70a17 	ldw	r2,-25560(gp)
   315e4:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   315e8:	8cbff81e 	bne	r17,r18,315cc <__alt_data_end+0xffff15cc>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   315ec:	dfc00517 	ldw	ra,20(sp)
   315f0:	dd000417 	ldw	r20,16(sp)
   315f4:	dcc00317 	ldw	r19,12(sp)
   315f8:	dc800217 	ldw	r18,8(sp)
   315fc:	dc400117 	ldw	r17,4(sp)
   31600:	dc000017 	ldw	r16,0(sp)
   31604:	dec00604 	addi	sp,sp,24
   31608:	f800283a 	ret
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
   3160c:	80800317 	ldw	r2,12(r16)
   31610:	81000517 	ldw	r4,20(r16)
   31614:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   31618:	10000726 	beq	r2,zero,31638 <alt_tick+0xc4>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
   3161c:	80c00217 	ldw	r3,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   31620:	d1270a17 	ldw	r4,-25560(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
   31624:	10c5883a 	add	r2,r2,r3
   31628:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   3162c:	113fe52e 	bgeu	r2,r4,315c4 <__alt_data_end+0xffff15c4>
        {
          alarm->rollover = 1;
   31630:	84c00405 	stb	r19,16(r16)
   31634:	003fe306 	br	315c4 <__alt_data_end+0xffff15c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31638:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3163c:	1506703a 	and	r3,r2,r20
   31640:	1801703a 	wrctl	status,r3
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   31644:	81000117 	ldw	r4,4(r16)
   31648:	80c00017 	ldw	r3,0(r16)
   3164c:	19000115 	stw	r4,4(r3)
  entry->previous->next = entry->next;
   31650:	81000117 	ldw	r4,4(r16)
   31654:	20c00015 	stw	r3,0(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   31658:	84000115 	stw	r16,4(r16)
  entry->next     = entry;
   3165c:	84000015 	stw	r16,0(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31660:	1001703a 	wrctl	status,r2
   31664:	003fd706 	br	315c4 <__alt_data_end+0xffff15c4>

00031668 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   31668:	000170fa 	wrctl	ienable,zero
   3166c:	f800283a 	ret

00031670 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   31670:	defffb04 	addi	sp,sp,-20
   31674:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
   31678:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   3167c:	dc400115 	stw	r17,4(sp)
   31680:	2823883a 	mov	r17,r5
   31684:	dcc00315 	stw	r19,12(sp)
   31688:	dfc00415 	stw	ra,16(sp)
   3168c:	dc800215 	stw	r18,8(sp)
   31690:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
   31694:	002a8440 	call	2a844 <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   31698:	8c000b26 	beq	r17,r16,316c8 <alt_find_dev+0x58>
   3169c:	14800044 	addi	r18,r2,1
   316a0:	00000206 	br	316ac <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   316a4:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   316a8:	8c000726 	beq	r17,r16,316c8 <alt_find_dev+0x58>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   316ac:	81000217 	ldw	r4,8(r16)
   316b0:	900d883a 	mov	r6,r18
   316b4:	980b883a 	mov	r5,r19
   316b8:	003192c0 	call	3192c <memcmp>
   316bc:	103ff91e 	bne	r2,zero,316a4 <__alt_data_end+0xffff16a4>
   316c0:	8005883a 	mov	r2,r16
   316c4:	00000106 	br	316cc <alt_find_dev+0x5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   316c8:	0005883a 	mov	r2,zero
}
   316cc:	dfc00417 	ldw	ra,16(sp)
   316d0:	dcc00317 	ldw	r19,12(sp)
   316d4:	dc800217 	ldw	r18,8(sp)
   316d8:	dc400117 	ldw	r17,4(sp)
   316dc:	dc000017 	ldw	r16,0(sp)
   316e0:	dec00504 	addi	sp,sp,20
   316e4:	f800283a 	ret

000316e8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   316e8:	defffa04 	addi	sp,sp,-24
   316ec:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   316f0:	d4200917 	ldw	r16,-32732(gp)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   316f4:	dd000415 	stw	r20,16(sp)
   316f8:	dfc00515 	stw	ra,20(sp)
   316fc:	dcc00315 	stw	r19,12(sp)
   31700:	dc800215 	stw	r18,8(sp)
   31704:	dc400115 	stw	r17,4(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   31708:	d5200904 	addi	r20,gp,-32732
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   3170c:	85001626 	beq	r16,r20,31768 <alt_find_file+0x80>
   31710:	2025883a 	mov	r18,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
   31714:	04c00bc4 	movi	r19,47
   31718:	00000806 	br	3173c <alt_find_file+0x54>
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   3171c:	9185883a 	add	r2,r18,r6
   31720:	10800007 	ldb	r2,0(r2)
   31724:	14c00126 	beq	r2,r19,3172c <alt_find_file+0x44>
   31728:	1000021e 	bne	r2,zero,31734 <alt_find_file+0x4c>
        !memcmp (next->name, name, len))
   3172c:	003192c0 	call	3192c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   31730:	10001626 	beq	r2,zero,3178c <alt_find_file+0xa4>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   31734:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   31738:	85000b26 	beq	r16,r20,31768 <alt_find_file+0x80>
  {
    len = strlen(next->name);
   3173c:	84400217 	ldw	r17,8(r16)
   31740:	8809883a 	mov	r4,r17
   31744:	002a8440 	call	2a844 <strlen>
   31748:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
   3174c:	8885883a 	add	r2,r17,r2
   31750:	10bfffc7 	ldb	r2,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
   31754:	900b883a 	mov	r5,r18
   31758:	8809883a 	mov	r4,r17
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
   3175c:	14ffef1e 	bne	r2,r19,3171c <__alt_data_end+0xffff171c>
    {
      len -= 1;
   31760:	31bfffc4 	addi	r6,r6,-1
   31764:	003fed06 	br	3171c <__alt_data_end+0xffff171c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   31768:	0005883a 	mov	r2,zero
}
   3176c:	dfc00517 	ldw	ra,20(sp)
   31770:	dd000417 	ldw	r20,16(sp)
   31774:	dcc00317 	ldw	r19,12(sp)
   31778:	dc800217 	ldw	r18,8(sp)
   3177c:	dc400117 	ldw	r17,4(sp)
   31780:	dc000017 	ldw	r16,0(sp)
   31784:	dec00604 	addi	sp,sp,24
   31788:	f800283a 	ret
   3178c:	8005883a 	mov	r2,r16
   31790:	003ff606 	br	3176c <__alt_data_end+0xffff176c>

00031794 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   31794:	01c000f4 	movhi	r7,3
   31798:	39ca8d04 	addi	r7,r7,10804
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   3179c:	0005883a 	mov	r2,zero
   317a0:	3807883a 	mov	r3,r7
   317a4:	01800804 	movi	r6,32
   317a8:	00000206 	br	317b4 <alt_get_fd+0x20>
   317ac:	10800044 	addi	r2,r2,1
   317b0:	11800a26 	beq	r2,r6,317dc <alt_get_fd+0x48>
  {
    if (!alt_fd_list[i].dev)
   317b4:	19400017 	ldw	r5,0(r3)
   317b8:	18c00304 	addi	r3,r3,12
   317bc:	283ffb1e 	bne	r5,zero,317ac <__alt_data_end+0xffff17ac>
    {
      alt_fd_list[i].dev = dev;
   317c0:	10c00324 	muli	r3,r2,12
   317c4:	38cf883a 	add	r7,r7,r3
      if (i > alt_max_fd)
   317c8:	d0e00617 	ldw	r3,-32744(gp)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
   317cc:	39000015 	stw	r4,0(r7)
      if (i > alt_max_fd)
   317d0:	1880030e 	bge	r3,r2,317e0 <alt_get_fd+0x4c>
      {
        alt_max_fd = i;
   317d4:	d0a00615 	stw	r2,-32744(gp)
   317d8:	f800283a 	ret
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
   317dc:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
   317e0:	f800283a 	ret

000317e4 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
   317e4:	00840004 	movi	r2,4096
   317e8:	1140012e 	bgeu	r2,r5,317f0 <alt_icache_flush+0xc>
   317ec:	100b883a 	mov	r5,r2
   317f0:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   317f4:	2005883a 	mov	r2,r4
   317f8:	2140092e 	bgeu	r4,r5,31820 <alt_icache_flush+0x3c>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   317fc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   31800:	10800804 	addi	r2,r2,32
   31804:	117ffd36 	bltu	r2,r5,317fc <__alt_data_end+0xffff17fc>
   31808:	0104303a 	nor	r2,zero,r4
   3180c:	2885883a 	add	r2,r5,r2
   31810:	1004d17a 	srli	r2,r2,5
   31814:	10800044 	addi	r2,r2,1
   31818:	1004917a 	slli	r2,r2,5
   3181c:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   31820:	210007cc 	andi	r4,r4,31
   31824:	20000126 	beq	r4,zero,3182c <alt_icache_flush+0x48>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   31828:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   3182c:	0000203a 	flushp
   31830:	f800283a 	ret

00031834 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   31834:	213ffe84 	addi	r4,r4,-6
   31838:	008003c4 	movi	r2,15
   3183c:	11001636 	bltu	r2,r4,31898 <alt_exception_cause_generated_bad_addr+0x64>
   31840:	200890ba 	slli	r4,r4,2
   31844:	008000f4 	movhi	r2,3
   31848:	10861604 	addi	r2,r2,6232
   3184c:	2089883a 	add	r4,r4,r2
   31850:	20800017 	ldw	r2,0(r4)
   31854:	1000683a 	jmp	r2
   31858:	000318a0 	cmpeqi	zero,zero,3170
   3185c:	000318a0 	cmpeqi	zero,zero,3170
   31860:	00031898 	cmpnei	zero,zero,3170
   31864:	00031898 	cmpnei	zero,zero,3170
   31868:	00031898 	cmpnei	zero,zero,3170
   3186c:	000318a0 	cmpeqi	zero,zero,3170
   31870:	00031898 	cmpnei	zero,zero,3170
   31874:	00031898 	cmpnei	zero,zero,3170
   31878:	000318a0 	cmpeqi	zero,zero,3170
   3187c:	000318a0 	cmpeqi	zero,zero,3170
   31880:	00031898 	cmpnei	zero,zero,3170
   31884:	000318a0 	cmpeqi	zero,zero,3170
   31888:	00031898 	cmpnei	zero,zero,3170
   3188c:	00031898 	cmpnei	zero,zero,3170
   31890:	00031898 	cmpnei	zero,zero,3170
   31894:	000318a0 	cmpeqi	zero,zero,3170
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   31898:	0005883a 	mov	r2,zero
   3189c:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   318a0:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   318a4:	f800283a 	ret

000318a8 <atexit>:

int
_DEFUN (atexit,
	(fn),
	_VOID _EXFNPTR(fn, (_VOID)))
{
   318a8:	defffd04 	addi	sp,sp,-12
   318ac:	dfc00215 	stw	ra,8(sp)
   318b0:	df000115 	stw	fp,4(sp)
   318b4:	df000104 	addi	fp,sp,4
   318b8:	e13fff15 	stw	r4,-4(fp)
  return __register_exitproc (__et_atexit, fn, NULL, NULL);
   318bc:	000f883a 	mov	r7,zero
   318c0:	000d883a 	mov	r6,zero
   318c4:	e17fff17 	ldw	r5,-4(fp)
   318c8:	0009883a 	mov	r4,zero
   318cc:	0031a600 	call	31a60 <__register_exitproc>
}
   318d0:	e037883a 	mov	sp,fp
   318d4:	dfc00117 	ldw	ra,4(sp)
   318d8:	df000017 	ldw	fp,0(sp)
   318dc:	dec00204 	addi	sp,sp,8
   318e0:	f800283a 	ret

000318e4 <exit>:
 */

void
_DEFUN (exit, (code),
	int code)
{
   318e4:	defffd04 	addi	sp,sp,-12
   318e8:	dfc00215 	stw	ra,8(sp)
   318ec:	df000115 	stw	fp,4(sp)
   318f0:	df000104 	addi	fp,sp,4
   318f4:	e13fff15 	stw	r4,-4(fp)
#ifdef _LITE_EXIT
  /* Refer to comments in __atexit.c for more details of lite exit.  */
  void __call_exitprocs _PARAMS ((int, _PTR)) __attribute__((weak));
  if (__call_exitprocs)
#endif
    __call_exitprocs (code, NULL);
   318f8:	000b883a 	mov	r5,zero
   318fc:	e13fff17 	ldw	r4,-4(fp)
   31900:	0031bd00 	call	31bd0 <__call_exitprocs>

#ifndef WANT_SMALL_STDIO				/* AlteraSpecific */
  if (_GLOBAL_REENT->__cleanup)
   31904:	d0a00117 	ldw	r2,-32764(gp)
   31908:	10800f17 	ldw	r2,60(r2)
   3190c:	10000526 	beq	r2,zero,31924 <exit+0x40>
    (*_GLOBAL_REENT->__cleanup) (_GLOBAL_REENT);
   31910:	d0a00117 	ldw	r2,-32764(gp)
   31914:	10800f17 	ldw	r2,60(r2)
   31918:	d0e00117 	ldw	r3,-32764(gp)
   3191c:	1809883a 	mov	r4,r3
   31920:	103ee83a 	callr	r2
#endif							/* AlteraSpecific */
  _exit (code);
   31924:	e13fff17 	ldw	r4,-4(fp)
   31928:	0031dbc0 	call	31dbc <_exit>

0003192c <memcmp>:
int
_DEFUN (memcmp, (m1, m2, n),
	_CONST _PTR m1 _AND
	_CONST _PTR m2 _AND
	size_t n)
{
   3192c:	defff804 	addi	sp,sp,-32
   31930:	df000715 	stw	fp,28(sp)
   31934:	df000704 	addi	fp,sp,28
   31938:	e13ffd15 	stw	r4,-12(fp)
   3193c:	e17ffe15 	stw	r5,-8(fp)
   31940:	e1bfff15 	stw	r6,-4(fp)
      s1++;
      s2++;
    }
  return 0;
#else  
  unsigned char *s1 = (unsigned char *) m1;
   31944:	e0bffd17 	ldw	r2,-12(fp)
   31948:	e0bff915 	stw	r2,-28(fp)
  unsigned char *s2 = (unsigned char *) m2;
   3194c:	e0bffe17 	ldw	r2,-8(fp)
   31950:	e0bffa15 	stw	r2,-24(fp)
  unsigned long *a2;

  /* If the size is too small, or either pointer is unaligned,
     then we punt to the byte compare loop.  Hopefully this will
     not turn up in inner loops.  */
  if (!TOO_SMALL(n) && !UNALIGNED(s1,s2))
   31954:	e0bfff17 	ldw	r2,-4(fp)
   31958:	10800130 	cmpltui	r2,r2,4
   3195c:	1000371e 	bne	r2,zero,31a3c <memcmp+0x110>
   31960:	e0fff917 	ldw	r3,-28(fp)
   31964:	e0bffa17 	ldw	r2,-24(fp)
   31968:	1884b03a 	or	r2,r3,r2
   3196c:	108000cc 	andi	r2,r2,3
   31970:	1000321e 	bne	r2,zero,31a3c <memcmp+0x110>
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
   31974:	e0bff917 	ldw	r2,-28(fp)
   31978:	e0bffb15 	stw	r2,-20(fp)
      a2 = (unsigned long*) s2;
   3197c:	e0bffa17 	ldw	r2,-24(fp)
   31980:	e0bffc15 	stw	r2,-16(fp)
      while (n >= LBLOCKSIZE)
   31984:	00000e06 	br	319c0 <memcmp+0x94>
        {
          if (*a1 != *a2) 
   31988:	e0bffb17 	ldw	r2,-20(fp)
   3198c:	10c00017 	ldw	r3,0(r2)
   31990:	e0bffc17 	ldw	r2,-16(fp)
   31994:	10800017 	ldw	r2,0(r2)
   31998:	18800d1e 	bne	r3,r2,319d0 <memcmp+0xa4>
   	    break;
          a1++;
   3199c:	e0bffb17 	ldw	r2,-20(fp)
   319a0:	10800104 	addi	r2,r2,4
   319a4:	e0bffb15 	stw	r2,-20(fp)
          a2++;
   319a8:	e0bffc17 	ldw	r2,-16(fp)
   319ac:	10800104 	addi	r2,r2,4
   319b0:	e0bffc15 	stw	r2,-16(fp)
          n -= LBLOCKSIZE;
   319b4:	e0bfff17 	ldw	r2,-4(fp)
   319b8:	10bfff04 	addi	r2,r2,-4
   319bc:	e0bfff15 	stw	r2,-4(fp)
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
      a2 = (unsigned long*) s2;
      while (n >= LBLOCKSIZE)
   319c0:	e0bfff17 	ldw	r2,-4(fp)
   319c4:	10800128 	cmpgeui	r2,r2,4
   319c8:	103fef1e 	bne	r2,zero,31988 <__alt_data_end+0xffff1988>
   319cc:	00000106 	br	319d4 <memcmp+0xa8>
        {
          if (*a1 != *a2) 
   	    break;
   319d0:	0001883a 	nop
          n -= LBLOCKSIZE;
        }

      /* check m mod LBLOCKSIZE remaining characters */

      s1 = (unsigned char*)a1;
   319d4:	e0bffb17 	ldw	r2,-20(fp)
   319d8:	e0bff915 	stw	r2,-28(fp)
      s2 = (unsigned char*)a2;
   319dc:	e0bffc17 	ldw	r2,-16(fp)
   319e0:	e0bffa15 	stw	r2,-24(fp)
    }

  while (n--)
   319e4:	00001506 	br	31a3c <memcmp+0x110>
    {
      if (*s1 != *s2)
   319e8:	e0bff917 	ldw	r2,-28(fp)
   319ec:	10c00003 	ldbu	r3,0(r2)
   319f0:	e0bffa17 	ldw	r2,-24(fp)
   319f4:	10800003 	ldbu	r2,0(r2)
   319f8:	18c03fcc 	andi	r3,r3,255
   319fc:	10803fcc 	andi	r2,r2,255
   31a00:	18800826 	beq	r3,r2,31a24 <memcmp+0xf8>
	return *s1 - *s2;
   31a04:	e0bff917 	ldw	r2,-28(fp)
   31a08:	10800003 	ldbu	r2,0(r2)
   31a0c:	10c03fcc 	andi	r3,r2,255
   31a10:	e0bffa17 	ldw	r2,-24(fp)
   31a14:	10800003 	ldbu	r2,0(r2)
   31a18:	10803fcc 	andi	r2,r2,255
   31a1c:	1885c83a 	sub	r2,r3,r2
   31a20:	00000b06 	br	31a50 <memcmp+0x124>
      s1++;
   31a24:	e0bff917 	ldw	r2,-28(fp)
   31a28:	10800044 	addi	r2,r2,1
   31a2c:	e0bff915 	stw	r2,-28(fp)
      s2++;
   31a30:	e0bffa17 	ldw	r2,-24(fp)
   31a34:	10800044 	addi	r2,r2,1
   31a38:	e0bffa15 	stw	r2,-24(fp)

      s1 = (unsigned char*)a1;
      s2 = (unsigned char*)a2;
    }

  while (n--)
   31a3c:	e0bfff17 	ldw	r2,-4(fp)
   31a40:	10ffffc4 	addi	r3,r2,-1
   31a44:	e0ffff15 	stw	r3,-4(fp)
   31a48:	103fe71e 	bne	r2,zero,319e8 <__alt_data_end+0xffff19e8>
	return *s1 - *s2;
      s1++;
      s2++;
    }

  return 0;
   31a4c:	0005883a 	mov	r2,zero
#endif /* not PREFER_SIZE_OVER_SPEED */
}
   31a50:	e037883a 	mov	sp,fp
   31a54:	df000017 	ldw	fp,0(sp)
   31a58:	dec00104 	addi	sp,sp,4
   31a5c:	f800283a 	ret

00031a60 <__register_exitproc>:
	(type, fn, arg, d),
	int type _AND
	void (*fn) (void) _AND
	void *arg _AND
	void *d)
{
   31a60:	defff804 	addi	sp,sp,-32
   31a64:	dfc00715 	stw	ra,28(sp)
   31a68:	df000615 	stw	fp,24(sp)
   31a6c:	dc000515 	stw	r16,20(sp)
   31a70:	df000604 	addi	fp,sp,24
   31a74:	e13ffb15 	stw	r4,-20(fp)
   31a78:	e17ffc15 	stw	r5,-16(fp)
   31a7c:	e1bffd15 	stw	r6,-12(fp)
   31a80:	e1fffe15 	stw	r7,-8(fp)

#ifndef __SINGLE_THREAD__
  __lock_acquire_recursive(__atexit_lock);
#endif

  p = _GLOBAL_ATEXIT;
   31a84:	d0a00117 	ldw	r2,-32764(gp)
   31a88:	14005217 	ldw	r16,328(r2)
  if (p == NULL)
   31a8c:	8000041e 	bne	r16,zero,31aa0 <__register_exitproc+0x40>
    _GLOBAL_ATEXIT = p = _GLOBAL_ATEXIT0;
   31a90:	d0a00117 	ldw	r2,-32764(gp)
   31a94:	d0e00117 	ldw	r3,-32764(gp)
   31a98:	1c005304 	addi	r16,r3,332
   31a9c:	14005215 	stw	r16,328(r2)
  if (p->_ind >= _ATEXIT_SIZE)
   31aa0:	80800117 	ldw	r2,4(r16)
   31aa4:	10800810 	cmplti	r2,r2,32
   31aa8:	1000131e 	bne	r2,zero,31af8 <__register_exitproc+0x98>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      return -1;
#else
      /* Don't dynamically allocate the atexit array if malloc is not
	 available.  */
      if (!malloc)
   31aac:	00800034 	movhi	r2,0
   31ab0:	10800004 	addi	r2,r2,0
   31ab4:	1000021e 	bne	r2,zero,31ac0 <__register_exitproc+0x60>
	return -1;
   31ab8:	00bfffc4 	movi	r2,-1
   31abc:	00003e06 	br	31bb8 <__register_exitproc+0x158>

      p = (struct _atexit *) malloc (sizeof *p);
   31ac0:	01006404 	movi	r4,400
   31ac4:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   31ac8:	1021883a 	mov	r16,r2
      if (p == NULL)
   31acc:	8000021e 	bne	r16,zero,31ad8 <__register_exitproc+0x78>
	{
#ifndef __SINGLE_THREAD__
	  __lock_release_recursive(__atexit_lock);
#endif
	  return -1;
   31ad0:	00bfffc4 	movi	r2,-1
   31ad4:	00003806 	br	31bb8 <__register_exitproc+0x158>
	}
      p->_ind = 0;
   31ad8:	80000115 	stw	zero,4(r16)
      p->_next = _GLOBAL_ATEXIT;
   31adc:	d0a00117 	ldw	r2,-32764(gp)
   31ae0:	10805217 	ldw	r2,328(r2)
   31ae4:	80800015 	stw	r2,0(r16)
      _GLOBAL_ATEXIT = p;
   31ae8:	d0a00117 	ldw	r2,-32764(gp)
   31aec:	14005215 	stw	r16,328(r2)
#ifndef _REENT_SMALL
      p->_on_exit_args._fntypes = 0;
   31af0:	80006215 	stw	zero,392(r16)
      p->_on_exit_args._is_cxa = 0;
   31af4:	80006315 	stw	zero,396(r16)
      p->_on_exit_args_ptr = NULL;
#endif
#endif
    }

  if (type != __et_atexit)
   31af8:	e0bffb17 	ldw	r2,-20(fp)
   31afc:	10002426 	beq	r2,zero,31b90 <__register_exitproc+0x130>
	  args->_fntypes = 0;
	  args->_is_cxa = 0;
	  p->_on_exit_args_ptr = args;
	}
#else
      args = &p->_on_exit_args;
   31b00:	80802204 	addi	r2,r16,136
   31b04:	e0bffa15 	stw	r2,-24(fp)
#endif
      args->_fnargs[p->_ind] = arg;
   31b08:	80800117 	ldw	r2,4(r16)
   31b0c:	e0fffa17 	ldw	r3,-24(fp)
   31b10:	1085883a 	add	r2,r2,r2
   31b14:	1085883a 	add	r2,r2,r2
   31b18:	1885883a 	add	r2,r3,r2
   31b1c:	e0fffd17 	ldw	r3,-12(fp)
   31b20:	10c00015 	stw	r3,0(r2)
      args->_fntypes |= (1 << p->_ind);
   31b24:	e0bffa17 	ldw	r2,-24(fp)
   31b28:	10804017 	ldw	r2,256(r2)
   31b2c:	80c00117 	ldw	r3,4(r16)
   31b30:	01000044 	movi	r4,1
   31b34:	20c6983a 	sll	r3,r4,r3
   31b38:	10c6b03a 	or	r3,r2,r3
   31b3c:	e0bffa17 	ldw	r2,-24(fp)
   31b40:	10c04015 	stw	r3,256(r2)
      args->_dso_handle[p->_ind] = d;
   31b44:	80800117 	ldw	r2,4(r16)
   31b48:	e0fffa17 	ldw	r3,-24(fp)
   31b4c:	10800804 	addi	r2,r2,32
   31b50:	1085883a 	add	r2,r2,r2
   31b54:	1085883a 	add	r2,r2,r2
   31b58:	1885883a 	add	r2,r3,r2
   31b5c:	e0fffe17 	ldw	r3,-8(fp)
   31b60:	10c00015 	stw	r3,0(r2)
      if (type == __et_cxa)
   31b64:	e0bffb17 	ldw	r2,-20(fp)
   31b68:	10800098 	cmpnei	r2,r2,2
   31b6c:	1000081e 	bne	r2,zero,31b90 <__register_exitproc+0x130>
	args->_is_cxa |= (1 << p->_ind);
   31b70:	e0bffa17 	ldw	r2,-24(fp)
   31b74:	10804117 	ldw	r2,260(r2)
   31b78:	80c00117 	ldw	r3,4(r16)
   31b7c:	01000044 	movi	r4,1
   31b80:	20c6983a 	sll	r3,r4,r3
   31b84:	10c6b03a 	or	r3,r2,r3
   31b88:	e0bffa17 	ldw	r2,-24(fp)
   31b8c:	10c04115 	stw	r3,260(r2)
    }
  p->_fns[p->_ind++] = fn;
   31b90:	80800117 	ldw	r2,4(r16)
   31b94:	10c00044 	addi	r3,r2,1
   31b98:	80c00115 	stw	r3,4(r16)
   31b9c:	10800084 	addi	r2,r2,2
   31ba0:	1085883a 	add	r2,r2,r2
   31ba4:	1085883a 	add	r2,r2,r2
   31ba8:	8085883a 	add	r2,r16,r2
   31bac:	e0fffc17 	ldw	r3,-16(fp)
   31bb0:	10c00015 	stw	r3,0(r2)
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif
  return 0;
   31bb4:	0005883a 	mov	r2,zero
}
   31bb8:	e6ffff04 	addi	sp,fp,-4
   31bbc:	dfc00217 	ldw	ra,8(sp)
   31bc0:	df000117 	ldw	fp,4(sp)
   31bc4:	dc000017 	ldw	r16,0(sp)
   31bc8:	dec00304 	addi	sp,sp,12
   31bcc:	f800283a 	ret

00031bd0 <__call_exitprocs>:
 */

void 
_DEFUN (__call_exitprocs, (code, d),
	int code _AND _PTR d)
{
   31bd0:	defff504 	addi	sp,sp,-44
   31bd4:	dfc00a15 	stw	ra,40(sp)
   31bd8:	df000915 	stw	fp,36(sp)
   31bdc:	dc800815 	stw	r18,32(sp)
   31be0:	dc400715 	stw	r17,28(sp)
   31be4:	dc000615 	stw	r16,24(sp)
   31be8:	df000904 	addi	fp,sp,36
   31bec:	e13ffb15 	stw	r4,-20(fp)
   31bf0:	e17ffc15 	stw	r5,-16(fp)
  __lock_acquire_recursive(__atexit_lock);
#endif

 restart:

  p = _GLOBAL_ATEXIT;
   31bf4:	d0a00117 	ldw	r2,-32764(gp)
   31bf8:	14005217 	ldw	r16,328(r2)
  lastp = &_GLOBAL_ATEXIT;
   31bfc:	d0a00117 	ldw	r2,-32764(gp)
   31c00:	10805204 	addi	r2,r2,328
   31c04:	e0bff715 	stw	r2,-36(fp)
  while (p)
   31c08:	00006006 	br	31d8c <__call_exitprocs+0x1bc>
    {
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
   31c0c:	84802204 	addi	r18,r16,136
#endif
      for (n = p->_ind - 1; n >= 0; n--)
   31c10:	80800117 	ldw	r2,4(r16)
   31c14:	147fffc4 	addi	r17,r2,-1
   31c18:	00004a06 	br	31d44 <__call_exitprocs+0x174>
	{
	  int ind;

	  i = 1 << n;
   31c1c:	00800044 	movi	r2,1
   31c20:	1444983a 	sll	r2,r2,r17
   31c24:	e0bff815 	stw	r2,-32(fp)

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
   31c28:	e0bffc17 	ldw	r2,-16(fp)
   31c2c:	10000826 	beq	r2,zero,31c50 <__call_exitprocs+0x80>
   31c30:	90004026 	beq	r18,zero,31d34 <__call_exitprocs+0x164>
   31c34:	88800804 	addi	r2,r17,32
   31c38:	1085883a 	add	r2,r2,r2
   31c3c:	1085883a 	add	r2,r2,r2
   31c40:	9085883a 	add	r2,r18,r2
   31c44:	10c00017 	ldw	r3,0(r2)
   31c48:	e0bffc17 	ldw	r2,-16(fp)
   31c4c:	1880391e 	bne	r3,r2,31d34 <__call_exitprocs+0x164>
	    continue;

	  /* Remove the function now to protect against the
	     function calling exit recursively.  */
	  fn = p->_fns[n];
   31c50:	88800084 	addi	r2,r17,2
   31c54:	1085883a 	add	r2,r2,r2
   31c58:	1085883a 	add	r2,r2,r2
   31c5c:	8085883a 	add	r2,r16,r2
   31c60:	10800017 	ldw	r2,0(r2)
   31c64:	e0bff915 	stw	r2,-28(fp)
	  if (n == p->_ind - 1)
   31c68:	80800117 	ldw	r2,4(r16)
   31c6c:	10bfffc4 	addi	r2,r2,-1
   31c70:	1440041e 	bne	r2,r17,31c84 <__call_exitprocs+0xb4>
	    p->_ind--;
   31c74:	80800117 	ldw	r2,4(r16)
   31c78:	10bfffc4 	addi	r2,r2,-1
   31c7c:	80800115 	stw	r2,4(r16)
   31c80:	00000506 	br	31c98 <__call_exitprocs+0xc8>
	  else
	    p->_fns[n] = NULL;
   31c84:	88800084 	addi	r2,r17,2
   31c88:	1085883a 	add	r2,r2,r2
   31c8c:	1085883a 	add	r2,r2,r2
   31c90:	8085883a 	add	r2,r16,r2
   31c94:	10000015 	stw	zero,0(r2)

	  /* Skip functions that have already been called.  */
	  if (!fn)
   31c98:	e0bff917 	ldw	r2,-28(fp)
   31c9c:	10002726 	beq	r2,zero,31d3c <__call_exitprocs+0x16c>
	    continue;

	  ind = p->_ind;
   31ca0:	80800117 	ldw	r2,4(r16)
   31ca4:	e0bffa15 	stw	r2,-24(fp)

	  /* Call the function.  */
	  if (!args || (args->_fntypes & i) == 0)
   31ca8:	90000426 	beq	r18,zero,31cbc <__call_exitprocs+0xec>
   31cac:	90c04017 	ldw	r3,256(r18)
   31cb0:	e0bff817 	ldw	r2,-32(fp)
   31cb4:	1884703a 	and	r2,r3,r2
   31cb8:	1000031e 	bne	r2,zero,31cc8 <__call_exitprocs+0xf8>
	    fn ();
   31cbc:	e0bff917 	ldw	r2,-28(fp)
   31cc0:	103ee83a 	callr	r2
   31cc4:	00001406 	br	31d18 <__call_exitprocs+0x148>
	  else if ((args->_is_cxa & i) == 0)
   31cc8:	90c04117 	ldw	r3,260(r18)
   31ccc:	e0bff817 	ldw	r2,-32(fp)
   31cd0:	1884703a 	and	r2,r3,r2
   31cd4:	1000091e 	bne	r2,zero,31cfc <__call_exitprocs+0x12c>
	    (*((void (*)(int, _PTR)) fn))(code, args->_fnargs[n]);
   31cd8:	8c45883a 	add	r2,r17,r17
   31cdc:	1085883a 	add	r2,r2,r2
   31ce0:	9085883a 	add	r2,r18,r2
   31ce4:	10c00017 	ldw	r3,0(r2)
   31ce8:	e0bff917 	ldw	r2,-28(fp)
   31cec:	180b883a 	mov	r5,r3
   31cf0:	e13ffb17 	ldw	r4,-20(fp)
   31cf4:	103ee83a 	callr	r2
   31cf8:	00000706 	br	31d18 <__call_exitprocs+0x148>
	  else
	    (*((void (*)(_PTR)) fn))(args->_fnargs[n]);
   31cfc:	8c45883a 	add	r2,r17,r17
   31d00:	1085883a 	add	r2,r2,r2
   31d04:	9085883a 	add	r2,r18,r2
   31d08:	10c00017 	ldw	r3,0(r2)
   31d0c:	e0bff917 	ldw	r2,-28(fp)
   31d10:	1809883a 	mov	r4,r3
   31d14:	103ee83a 	callr	r2

	  /* The function we called call atexit and registered another
	     function (or functions).  Call these new functions before
	     continuing with the already registered functions.  */
	  if (ind != p->_ind || *lastp != p)
   31d18:	80c00117 	ldw	r3,4(r16)
   31d1c:	e0bffa17 	ldw	r2,-24(fp)
   31d20:	18bfb41e 	bne	r3,r2,31bf4 <__alt_data_end+0xffff1bf4>
   31d24:	e0bff717 	ldw	r2,-36(fp)
   31d28:	10800017 	ldw	r2,0(r2)
   31d2c:	143fb11e 	bne	r2,r16,31bf4 <__alt_data_end+0xffff1bf4>
   31d30:	00000306 	br	31d40 <__call_exitprocs+0x170>

	  i = 1 << n;

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
	    continue;
   31d34:	0001883a 	nop
   31d38:	00000106 	br	31d40 <__call_exitprocs+0x170>
	  else
	    p->_fns[n] = NULL;

	  /* Skip functions that have already been called.  */
	  if (!fn)
	    continue;
   31d3c:	0001883a 	nop
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
#endif
      for (n = p->_ind - 1; n >= 0; n--)
   31d40:	8c7fffc4 	addi	r17,r17,-1
   31d44:	883fb50e 	bge	r17,zero,31c1c <__alt_data_end+0xffff1c1c>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
   31d48:	00800034 	movhi	r2,0
   31d4c:	10800004 	addi	r2,r2,0
   31d50:	10001026 	beq	r2,zero,31d94 <__call_exitprocs+0x1c4>
	break;

      /* Move to the next block.  Free empty blocks except the last one,
	 which is part of _GLOBAL_REENT.  */
      if (p->_ind == 0 && p->_next)
   31d54:	80800117 	ldw	r2,4(r16)
   31d58:	10000a1e 	bne	r2,zero,31d84 <__call_exitprocs+0x1b4>
   31d5c:	80800017 	ldw	r2,0(r16)
   31d60:	10000826 	beq	r2,zero,31d84 <__call_exitprocs+0x1b4>
	{
	  /* Remove empty block from the list.  */
	  *lastp = p->_next;
   31d64:	80c00017 	ldw	r3,0(r16)
   31d68:	e0bff717 	ldw	r2,-36(fp)
   31d6c:	10c00015 	stw	r3,0(r2)
#ifdef _REENT_SMALL
	  if (args)
	    free (args);
#endif
	  free (p);
   31d70:	8009883a 	mov	r4,r16
   31d74:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
	  p = *lastp;
   31d78:	e0bff717 	ldw	r2,-36(fp)
   31d7c:	14000017 	ldw	r16,0(r2)
   31d80:	00000206 	br	31d8c <__call_exitprocs+0x1bc>
	}
      else
	{
	  lastp = &p->_next;
   31d84:	e43ff715 	stw	r16,-36(fp)
	  p = p->_next;
   31d88:	84000017 	ldw	r16,0(r16)

 restart:

  p = _GLOBAL_ATEXIT;
  lastp = &_GLOBAL_ATEXIT;
  while (p)
   31d8c:	803f9f1e 	bne	r16,zero,31c0c <__alt_data_end+0xffff1c0c>
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
   31d90:	00000106 	br	31d98 <__call_exitprocs+0x1c8>
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
	break;
   31d94:	0001883a 	nop
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
   31d98:	0001883a 	nop
   31d9c:	e6fffd04 	addi	sp,fp,-12
   31da0:	dfc00417 	ldw	ra,16(sp)
   31da4:	df000317 	ldw	fp,12(sp)
   31da8:	dc800217 	ldw	r18,8(sp)
   31dac:	dc400117 	ldw	r17,4(sp)
   31db0:	dc000017 	ldw	r16,0(sp)
   31db4:	dec00504 	addi	sp,sp,20
   31db8:	f800283a 	ret

00031dbc <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   31dbc:	20000226 	beq	r4,zero,31dc8 <_exit+0xc>
    ALT_SIM_FAIL();
   31dc0:	002af070 	cmpltui	zero,zero,43969
   31dc4:	003fff06 	br	31dc4 <__alt_data_end+0xffff1dc4>
  } else {
    ALT_SIM_PASS();
   31dc8:	002af0b0 	cmpltui	zero,zero,43970
   31dcc:	003ffd06 	br	31dc4 <__alt_data_end+0xffff1dc4>
